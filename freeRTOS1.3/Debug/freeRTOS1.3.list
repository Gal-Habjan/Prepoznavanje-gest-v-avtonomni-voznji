
freeRTOS1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800d768  0800d768  0000e768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d820  0800d820  0000f080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d820  0800d820  0000e820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d828  0800d828  0000f080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d828  0800d828  0000e828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d82c  0800d82c  0000e82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800d830  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005570  20000080  0800d8b0  0000f080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200055f0  0800d8b0  0000f5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025f64  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005771  00000000  00000000  00035014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f30  00000000  00000000  0003a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001816  00000000  00000000  0003c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e11  00000000  00000000  0003dece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002764a  00000000  00000000  00044cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1db1  00000000  00000000  0006c329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e0da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087a0  00000000  00000000  0010e120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001168c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d750 	.word	0x0800d750

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800d750 	.word	0x0800d750

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <beeper_noise>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void beeper_noise() {   //pin je pb7
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
	uint32_t leveli_svetlosti[5] = {50, 80, 50, 120, 0};
 80004d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000544 <beeper_noise+0x74>)
 80004d8:	463c      	mov	r4, r7
 80004da:	461d      	mov	r5, r3
 80004dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e0:	682b      	ldr	r3, [r5, #0]
 80004e2:	6023      	str	r3, [r4, #0]

    for (uint8_t var = 0; var < 5; ++var) {
 80004e4:	2300      	movs	r3, #0
 80004e6:	75fb      	strb	r3, [r7, #23]
 80004e8:	e020      	b.n	800052c <beeper_noise+0x5c>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2180      	movs	r1, #128	@ 0x80
 80004ee:	4816      	ldr	r0, [pc, #88]	@ (8000548 <beeper_noise+0x78>)
 80004f0:	f001 fafe 	bl	8001af0 <HAL_GPIO_WritePin>
        HAL_Delay(leveli_svetlosti[var]);
 80004f4:	7dfb      	ldrb	r3, [r7, #23]
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	3318      	adds	r3, #24
 80004fa:	443b      	add	r3, r7
 80004fc:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000500:	4618      	mov	r0, r3
 8000502:	f001 f86b 	bl	80015dc <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2180      	movs	r1, #128	@ 0x80
 800050a:	480f      	ldr	r0, [pc, #60]	@ (8000548 <beeper_noise+0x78>)
 800050c:	f001 faf0 	bl	8001af0 <HAL_GPIO_WritePin>
        HAL_Delay(120 - leveli_svetlosti[var]);
 8000510:	7dfb      	ldrb	r3, [r7, #23]
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	3318      	adds	r3, #24
 8000516:	443b      	add	r3, r7
 8000518:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800051c:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000520:	4618      	mov	r0, r3
 8000522:	f001 f85b 	bl	80015dc <HAL_Delay>
    for (uint8_t var = 0; var < 5; ++var) {
 8000526:	7dfb      	ldrb	r3, [r7, #23]
 8000528:	3301      	adds	r3, #1
 800052a:	75fb      	strb	r3, [r7, #23]
 800052c:	7dfb      	ldrb	r3, [r7, #23]
 800052e:	2b04      	cmp	r3, #4
 8000530:	d9db      	bls.n	80004ea <beeper_noise+0x1a>
    }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2180      	movs	r1, #128	@ 0x80
 8000536:	4804      	ldr	r0, [pc, #16]	@ (8000548 <beeper_noise+0x78>)
 8000538:	f001 fada 	bl	8001af0 <HAL_GPIO_WritePin>

}
 800053c:	bf00      	nop
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bdb0      	pop	{r4, r5, r7, pc}
 8000544:	0800d774 	.word	0x0800d774
 8000548:	40020400 	.word	0x40020400

0800054c <LEDTask>:

void LEDTask(void *pvParameters) {  // green LED
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    int recievedCommand = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
    for (;;) {
        xQueueReceive(ledQueue, &recievedCommand, pdMS_TO_TICKS(100));
 8000558:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <LEDTask+0x40>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f107 010c 	add.w	r1, r7, #12
 8000560:	2264      	movs	r2, #100	@ 0x64
 8000562:	4618      	mov	r0, r3
 8000564:	f00a fa96 	bl	800aa94 <xQueueReceive>

        if (recievedCommand == 1) {
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d106      	bne.n	800057c <LEDTask+0x30>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000574:	4806      	ldr	r0, [pc, #24]	@ (8000590 <LEDTask+0x44>)
 8000576:	f001 fabb 	bl	8001af0 <HAL_GPIO_WritePin>
 800057a:	e7ed      	b.n	8000558 <LEDTask+0xc>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <LEDTask+0x44>)
 8000584:	f001 fab4 	bl	8001af0 <HAL_GPIO_WritePin>
        xQueueReceive(ledQueue, &recievedCommand, pdMS_TO_TICKS(100));
 8000588:	e7e6      	b.n	8000558 <LEDTask+0xc>
 800058a:	bf00      	nop
 800058c:	20000278 	.word	0x20000278
 8000590:	40020c00 	.word	0x40020c00

08000594 <DC_MotorTask>:
        }

    }
}

void DC_MotorTask(void *pvParameters) {  // red LED
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    int recievedCommand = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
    for (;;) {
        xQueueReceive(motorQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80005a0:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <DC_MotorTask+0x44>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	2264      	movs	r2, #100	@ 0x64
 80005aa:	4618      	mov	r0, r3
 80005ac:	f00a fa72 	bl	800aa94 <xQueueReceive>

        if (recievedCommand == 2 || recievedCommand == 3) {
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d002      	beq.n	80005bc <DC_MotorTask+0x28>
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	d106      	bne.n	80005ca <DC_MotorTask+0x36>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005c2:	4806      	ldr	r0, [pc, #24]	@ (80005dc <DC_MotorTask+0x48>)
 80005c4:	f001 fa94 	bl	8001af0 <HAL_GPIO_WritePin>
 80005c8:	e005      	b.n	80005d6 <DC_MotorTask+0x42>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d0:	4802      	ldr	r0, [pc, #8]	@ (80005dc <DC_MotorTask+0x48>)
 80005d2:	f001 fa8d 	bl	8001af0 <HAL_GPIO_WritePin>
        xQueueReceive(motorQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80005d6:	e7e3      	b.n	80005a0 <DC_MotorTask+0xc>
 80005d8:	2000027c 	.word	0x2000027c
 80005dc:	40020c00 	.word	0x40020c00

080005e0 <beeperTask>:
        }

    }
}

void beeperTask(void *pvParameters) {  // blue LED
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    int recievedCommand = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
    for (;;) {
        xQueueReceive(beeperQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <beeperTask+0x44>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f107 010c 	add.w	r1, r7, #12
 80005f4:	2264      	movs	r2, #100	@ 0x64
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00a fa4c 	bl	800aa94 <xQueueReceive>

        if (recievedCommand == 4) {
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d108      	bne.n	8000614 <beeperTask+0x34>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000608:	4807      	ldr	r0, [pc, #28]	@ (8000628 <beeperTask+0x48>)
 800060a:	f001 fa71 	bl	8001af0 <HAL_GPIO_WritePin>
            beeper_noise();
 800060e:	f7ff ff5f 	bl	80004d0 <beeper_noise>
 8000612:	e7eb      	b.n	80005ec <beeperTask+0xc>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800061a:	4803      	ldr	r0, [pc, #12]	@ (8000628 <beeperTask+0x48>)
 800061c:	f001 fa68 	bl	8001af0 <HAL_GPIO_WritePin>
        xQueueReceive(beeperQueue, &recievedCommand, pdMS_TO_TICKS(100));
 8000620:	e7e4      	b.n	80005ec <beeperTask+0xc>
 8000622:	bf00      	nop
 8000624:	20000280 	.word	0x20000280
 8000628:	40020c00 	.word	0x40020c00

0800062c <USBTask>:
        }

    }
}

void USBTask(void *pvParameters) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    int command = -1;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	60fb      	str	r3, [r7, #12]
    for (;;) {
        command++;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3301      	adds	r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
        if (command > 4) {
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2b04      	cmp	r3, #4
 8000644:	dd01      	ble.n	800064a <USBTask+0x1e>
            command = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
        }

        xQueueSend(ledQueue, &command, pdMS_TO_TICKS(100));
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <USBTask+0x64>)
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	f107 010c 	add.w	r1, r7, #12
 8000652:	2300      	movs	r3, #0
 8000654:	2264      	movs	r2, #100	@ 0x64
 8000656:	f00a f87d 	bl	800a754 <xQueueGenericSend>
        xQueueSend(motorQueue, &command, pdMS_TO_TICKS(100));
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <USBTask+0x68>)
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	f107 010c 	add.w	r1, r7, #12
 8000662:	2300      	movs	r3, #0
 8000664:	2264      	movs	r2, #100	@ 0x64
 8000666:	f00a f875 	bl	800a754 <xQueueGenericSend>
        xQueueSend(beeperQueue, &command, pdMS_TO_TICKS(100));
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <USBTask+0x6c>)
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	f107 010c 	add.w	r1, r7, #12
 8000672:	2300      	movs	r3, #0
 8000674:	2264      	movs	r2, #100	@ 0x64
 8000676:	f00a f86d 	bl	800a754 <xQueueGenericSend>

        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800067a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067e:	4807      	ldr	r0, [pc, #28]	@ (800069c <USBTask+0x70>)
 8000680:	f001 fa4f 	bl	8001b22 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000684:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000688:	f00a fe94 	bl	800b3b4 <vTaskDelay>
        command++;
 800068c:	e7d5      	b.n	800063a <USBTask+0xe>
 800068e:	bf00      	nop
 8000690:	20000278 	.word	0x20000278
 8000694:	2000027c 	.word	0x2000027c
 8000698:	20000280 	.word	0x20000280
 800069c:	40020c00 	.word	0x40020c00

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
// Create a queue with 5 items, each of 1 byte (uint8_t) in size
	//usbQueue = xQueueCreate(5, sizeof(uint8_t));
	ledQueue = xQueueCreate(2, sizeof(int));
 80006a6:	2200      	movs	r2, #0
 80006a8:	2104      	movs	r1, #4
 80006aa:	2002      	movs	r0, #2
 80006ac:	f009 fff3 	bl	800a696 <xQueueGenericCreate>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a31      	ldr	r2, [pc, #196]	@ (8000778 <main+0xd8>)
 80006b4:	6013      	str	r3, [r2, #0]
	motorQueue = xQueueCreate(2, sizeof(int));
 80006b6:	2200      	movs	r2, #0
 80006b8:	2104      	movs	r1, #4
 80006ba:	2002      	movs	r0, #2
 80006bc:	f009 ffeb 	bl	800a696 <xQueueGenericCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a2e      	ldr	r2, [pc, #184]	@ (800077c <main+0xdc>)
 80006c4:	6013      	str	r3, [r2, #0]
	beeperQueue = xQueueCreate(2, sizeof(int));
 80006c6:	2200      	movs	r2, #0
 80006c8:	2104      	movs	r1, #4
 80006ca:	2002      	movs	r0, #2
 80006cc:	f009 ffe3 	bl	800a696 <xQueueGenericCreate>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000780 <main+0xe0>)
 80006d4:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start(&htim3);
 80006d6:	482b      	ldr	r0, [pc, #172]	@ (8000784 <main+0xe4>)
 80006d8:	f005 f836 	bl	8005748 <HAL_TIM_Base_Start>
	// zazenemo PWM - neinvertirani izhodi
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80006dc:	210c      	movs	r1, #12
 80006de:	4829      	ldr	r0, [pc, #164]	@ (8000784 <main+0xe4>)
 80006e0:	f005 f948 	bl	8005974 <HAL_TIM_PWM_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 ff38 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f86a 	bl	80007c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ec:	f000 f8d0 	bl	8000890 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f000 fabe 	bl	8000c70 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006f4:	f000 f8ec 	bl	80008d0 <MX_I2C1_Init>
  MX_I2S2_Init();
 80006f8:	f000 f918 	bl	800092c <MX_I2S2_Init>
  MX_I2S3_Init();
 80006fc:	f000 f944 	bl	8000988 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000700:	f000 f972 	bl	80009e8 <MX_SPI1_Init>
  MX_TIM5_Init();
 8000704:	f000 fa3e 	bl	8000b84 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000708:	f000 f9a4 	bl	8000a54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800070c:	f009 fbcc 	bl	8009ea8 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000710:	4a1d      	ldr	r2, [pc, #116]	@ (8000788 <main+0xe8>)
 8000712:	2100      	movs	r1, #0
 8000714:	481d      	ldr	r0, [pc, #116]	@ (800078c <main+0xec>)
 8000716:	f009 fc11 	bl	8009f3c <osThreadNew>
 800071a:	4603      	mov	r3, r0
 800071c:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <main+0xf0>)
 800071e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */

	/* add events, ... */
	xTaskCreate(LEDTask, "LED Task", 128, NULL, 2, &TaskHandle_LEDTask);
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <main+0xf4>)
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	2302      	movs	r3, #2
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2300      	movs	r3, #0
 800072a:	2280      	movs	r2, #128	@ 0x80
 800072c:	491a      	ldr	r1, [pc, #104]	@ (8000798 <main+0xf8>)
 800072e:	481b      	ldr	r0, [pc, #108]	@ (800079c <main+0xfc>)
 8000730:	f00a fce2 	bl	800b0f8 <xTaskCreate>
	xTaskCreate(USBTask, "USB Task", 128, NULL, 2, NULL);
 8000734:	2300      	movs	r3, #0
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	2302      	movs	r3, #2
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2300      	movs	r3, #0
 800073e:	2280      	movs	r2, #128	@ 0x80
 8000740:	4917      	ldr	r1, [pc, #92]	@ (80007a0 <main+0x100>)
 8000742:	4818      	ldr	r0, [pc, #96]	@ (80007a4 <main+0x104>)
 8000744:	f00a fcd8 	bl	800b0f8 <xTaskCreate>
	xTaskCreate(beeperTask, "beeper Task", 128, NULL, 2,
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <main+0x108>)
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	2302      	movs	r3, #2
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2300      	movs	r3, #0
 8000752:	2280      	movs	r2, #128	@ 0x80
 8000754:	4915      	ldr	r1, [pc, #84]	@ (80007ac <main+0x10c>)
 8000756:	4816      	ldr	r0, [pc, #88]	@ (80007b0 <main+0x110>)
 8000758:	f00a fcce 	bl	800b0f8 <xTaskCreate>
			&TaskHandle_beeperTask);
	xTaskCreate(DC_MotorTask, "DC Motor Task", 128, NULL, 2,
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <main+0x114>)
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	2302      	movs	r3, #2
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2300      	movs	r3, #0
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	4913      	ldr	r1, [pc, #76]	@ (80007b8 <main+0x118>)
 800076a:	4814      	ldr	r0, [pc, #80]	@ (80007bc <main+0x11c>)
 800076c:	f00a fcc4 	bl	800b0f8 <xTaskCreate>
			&TaskHandle_DC_MotorTask);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000770:	f009 fbbe 	bl	8009ef0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <main+0xd4>
 8000778:	20000278 	.word	0x20000278
 800077c:	2000027c 	.word	0x2000027c
 8000780:	20000280 	.word	0x20000280
 8000784:	200001d8 	.word	0x200001d8
 8000788:	0800d7e4 	.word	0x0800d7e4
 800078c:	08000e51 	.word	0x08000e51
 8000790:	20000268 	.word	0x20000268
 8000794:	2000026c 	.word	0x2000026c
 8000798:	0800d788 	.word	0x0800d788
 800079c:	0800054d 	.word	0x0800054d
 80007a0:	0800d794 	.word	0x0800d794
 80007a4:	0800062d 	.word	0x0800062d
 80007a8:	20000274 	.word	0x20000274
 80007ac:	0800d7a0 	.word	0x0800d7a0
 80007b0:	080005e1 	.word	0x080005e1
 80007b4:	20000270 	.word	0x20000270
 80007b8:	0800d7ac 	.word	0x0800d7ac
 80007bc:	08000595 	.word	0x08000595

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	@ 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	@ 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f00c fecc 	bl	800d56c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <SystemClock_Config+0xc8>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	4a26      	ldr	r2, [pc, #152]	@ (8000888 <SystemClock_Config+0xc8>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <SystemClock_Config+0xc8>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b21      	ldr	r3, [pc, #132]	@ (800088c <SystemClock_Config+0xcc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a20      	ldr	r2, [pc, #128]	@ (800088c <SystemClock_Config+0xcc>)
 800080a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <SystemClock_Config+0xcc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081c:	2301      	movs	r3, #1
 800081e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000820:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800082e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000834:	23a8      	movs	r3, #168	@ 0xa8
 8000836:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000838:	2304      	movs	r3, #4
 800083a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800083c:	2307      	movs	r3, #7
 800083e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f004 f89f 	bl	8004988 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000850:	f000 fb1a 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2302      	movs	r3, #2
 800085a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2102      	movs	r1, #2
 8000870:	4618      	mov	r0, r3
 8000872:	f004 fb01 	bl	8004e78 <HAL_RCC_ClockConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800087c:	f000 fb04 	bl	8000e88 <Error_Handler>
  }
}
 8000880:	bf00      	nop
 8000882:	3750      	adds	r7, #80	@ 0x50
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
 80008a4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008a6:	2301      	movs	r3, #1
 80008a8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80008aa:	23c8      	movs	r3, #200	@ 0xc8
 80008ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80008ae:	2305      	movs	r3, #5
 80008b0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 fd1b 	bl	80052f4 <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80008c4:	f000 fae0 	bl	8000e88 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	@ (8000924 <MX_I2C1_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008dc:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <MX_I2C1_Init+0x58>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_I2C1_Init+0x50>)
 800090e:	f003 fa57 	bl	8003dc0 <HAL_I2C_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 fab6 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000009c 	.word	0x2000009c
 8000924:	40005400 	.word	0x40005400
 8000928:	000186a0 	.word	0x000186a0

0800092c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <MX_I2S2_Init+0x50>)
 8000932:	4a13      	ldr	r2, [pc, #76]	@ (8000980 <MX_I2S2_Init+0x54>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_I2S2_Init+0x50>)
 8000938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800093c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_I2S2_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <MX_I2S2_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_I2S2_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000950:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <MX_I2S2_Init+0x50>)
 8000952:	4a0c      	ldr	r2, [pc, #48]	@ (8000984 <MX_I2S2_Init+0x58>)
 8000954:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_I2S2_Init+0x50>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <MX_I2S2_Init+0x50>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_I2S2_Init+0x50>)
 8000964:	2201      	movs	r2, #1
 8000966:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	@ (800097c <MX_I2S2_Init+0x50>)
 800096a:	f003 fb6d 	bl	8004048 <HAL_I2S_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000974:	f000 fa88 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000f0 	.word	0x200000f0
 8000980:	40003800 	.word	0x40003800
 8000984:	00017700 	.word	0x00017700

08000988 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_I2S3_Init+0x54>)
 800098e:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <MX_I2S3_Init+0x58>)
 8000990:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_I2S3_Init+0x54>)
 8000994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000998:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_I2S3_Init+0x54>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_I2S3_Init+0x54>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <MX_I2S3_Init+0x54>)
 80009a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_I2S3_Init+0x54>)
 80009b0:	4a0c      	ldr	r2, [pc, #48]	@ (80009e4 <MX_I2S3_Init+0x5c>)
 80009b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_I2S3_Init+0x54>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_I2S3_Init+0x54>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_I2S3_Init+0x54>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_I2S3_Init+0x54>)
 80009c8:	f003 fb3e 	bl	8004048 <HAL_I2S_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009d2:	f000 fa59 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000138 	.word	0x20000138
 80009e0:	40003c00 	.word	0x40003c00
 80009e4:	00017700 	.word	0x00017700

080009e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_SPI1_Init+0x64>)
 80009ee:	4a18      	ldr	r2, [pc, #96]	@ (8000a50 <MX_SPI1_Init+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <MX_SPI1_Init+0x64>)
 80009f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_SPI1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_SPI1_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_SPI1_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_SPI1_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_SPI1_Init+0x64>)
 8000a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_SPI1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <MX_SPI1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_SPI1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <MX_SPI1_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_SPI1_Init+0x64>)
 8000a34:	220a      	movs	r2, #10
 8000a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_SPI1_Init+0x64>)
 8000a3a:	f004 fdad 	bl	8005598 <HAL_SPI_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a44:	f000 fa20 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000180 	.word	0x20000180
 8000a50:	40013000 	.word	0x40013000

08000a54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	@ 0x38
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a84:	4b3d      	ldr	r3, [pc, #244]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000a86:	4a3e      	ldr	r2, [pc, #248]	@ (8000b80 <MX_TIM3_Init+0x12c>)
 8000a88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000a8c:	2253      	movs	r2, #83	@ 0x53
 8000a8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b3a      	ldr	r3, [pc, #232]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a96:	4b39      	ldr	r3, [pc, #228]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000a98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9e:	4b37      	ldr	r3, [pc, #220]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b35      	ldr	r3, [pc, #212]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aaa:	4834      	ldr	r0, [pc, #208]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000aac:	f004 fdfd 	bl	80056aa <HAL_TIM_Base_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ab6:	f000 f9e7 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ac0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	482d      	ldr	r0, [pc, #180]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000ac8:	f005 f9b6 	bl	8005e38 <HAL_TIM_ConfigClockSource>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ad2:	f000 f9d9 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ad6:	4829      	ldr	r0, [pc, #164]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000ad8:	f004 fef2 	bl	80058c0 <HAL_TIM_PWM_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ae2:	f000 f9d1 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	4619      	mov	r1, r3
 8000af4:	4821      	ldr	r0, [pc, #132]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000af6:	f005 fd67 	bl	80065c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b00:	f000 f9c2 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b04:	2360      	movs	r3, #96	@ 0x60
 8000b06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4818      	ldr	r0, [pc, #96]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000b1c:	f005 f8ca 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b26:	f000 f9af 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000b32:	f005 f8bf 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000b3c:	f000 f9a4 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2208      	movs	r2, #8
 8000b44:	4619      	mov	r1, r3
 8000b46:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000b48:	f005 f8b4 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000b52:	f000 f999 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	220c      	movs	r2, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000b5e:	f005 f8a9 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000b68:	f000 f98e 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <MX_TIM3_Init+0x128>)
 8000b6e:	f000 fb53 	bl	8001218 <HAL_TIM_MspPostInit>

}
 8000b72:	bf00      	nop
 8000b74:	3738      	adds	r7, #56	@ 0x38
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200001d8 	.word	0x200001d8
 8000b80:	40000400 	.word	0x40000400

08000b84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	@ 0x38
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	f107 0320 	add.w	r3, r7, #32
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c6c <MX_TIM5_Init+0xe8>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000bba:	4b2b      	ldr	r3, [pc, #172]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b29      	ldr	r3, [pc, #164]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000bc6:	4b28      	ldr	r3, [pc, #160]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b26      	ldr	r3, [pc, #152]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000bda:	4823      	ldr	r0, [pc, #140]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000bdc:	f004 fd65 	bl	80056aa <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000be6:	f000 f94f 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481c      	ldr	r0, [pc, #112]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000bf8:	f005 f91e 	bl	8005e38 <HAL_TIM_ConfigClockSource>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000c02:	f000 f941 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000c06:	4818      	ldr	r0, [pc, #96]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000c08:	f004 fe5a 	bl	80058c0 <HAL_TIM_PWM_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000c12:	f000 f939 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	4619      	mov	r1, r3
 8000c24:	4810      	ldr	r0, [pc, #64]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000c26:	f005 fccf 	bl	80065c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000c30:	f000 f92a 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c34:	2360      	movs	r3, #96	@ 0x60
 8000c36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2204      	movs	r2, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4807      	ldr	r0, [pc, #28]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000c4c:	f005 f832 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000c56:	f000 f917 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c5a:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <MX_TIM5_Init+0xe4>)
 8000c5c:	f000 fadc 	bl	8001218 <HAL_TIM_MspPostInit>

}
 8000c60:	bf00      	nop
 8000c62:	3738      	adds	r7, #56	@ 0x38
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000220 	.word	0x20000220
 8000c6c:	40000c00 	.word	0x40000c00

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	@ 0x30
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a6a      	ldr	r2, [pc, #424]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000c90:	f043 0310 	orr.w	r3, r3, #16
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b68      	ldr	r3, [pc, #416]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	4b64      	ldr	r3, [pc, #400]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a63      	ldr	r2, [pc, #396]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b61      	ldr	r3, [pc, #388]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b5a      	ldr	r3, [pc, #360]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b56      	ldr	r3, [pc, #344]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a55      	ldr	r2, [pc, #340]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b53      	ldr	r3, [pc, #332]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a4e      	ldr	r2, [pc, #312]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b4c      	ldr	r3, [pc, #304]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b48      	ldr	r3, [pc, #288]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a47      	ldr	r2, [pc, #284]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b45      	ldr	r3, [pc, #276]	@ (8000e38 <MX_GPIO_Init+0x1c8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2108      	movs	r1, #8
 8000d32:	4842      	ldr	r0, [pc, #264]	@ (8000e3c <MX_GPIO_Init+0x1cc>)
 8000d34:	f000 fedc 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4840      	ldr	r0, [pc, #256]	@ (8000e40 <MX_GPIO_Init+0x1d0>)
 8000d3e:	f000 fed7 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d42:	2200      	movs	r2, #0
 8000d44:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000d48:	483e      	ldr	r0, [pc, #248]	@ (8000e44 <MX_GPIO_Init+0x1d4>)
 8000d4a:	f000 fed1 	bl	8001af0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2180      	movs	r1, #128	@ 0x80
 8000d52:	483d      	ldr	r0, [pc, #244]	@ (8000e48 <MX_GPIO_Init+0x1d8>)
 8000d54:	f000 fecc 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4834      	ldr	r0, [pc, #208]	@ (8000e3c <MX_GPIO_Init+0x1cc>)
 8000d6c:	f000 fd3c 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d70:	2308      	movs	r3, #8
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	482d      	ldr	r0, [pc, #180]	@ (8000e3c <MX_GPIO_Init+0x1cc>)
 8000d88:	f000 fd2e 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000d8c:	2332      	movs	r3, #50	@ 0x32
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d90:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4826      	ldr	r0, [pc, #152]	@ (8000e3c <MX_GPIO_Init+0x1cc>)
 8000da2:	f000 fd21 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4820      	ldr	r0, [pc, #128]	@ (8000e40 <MX_GPIO_Init+0x1d0>)
 8000dbe:	f000 fd13 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dc6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481d      	ldr	r0, [pc, #116]	@ (8000e4c <MX_GPIO_Init+0x1dc>)
 8000dd8:	f000 fd06 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ddc:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000de0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4813      	ldr	r0, [pc, #76]	@ (8000e44 <MX_GPIO_Init+0x1d4>)
 8000df6:	f000 fcf7 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <MX_GPIO_Init+0x1d4>)
 8000e0e:	f000 fceb 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e12:	2380      	movs	r3, #128	@ 0x80
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	@ (8000e48 <MX_GPIO_Init+0x1d8>)
 8000e2a:	f000 fcdd 	bl	80017e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2e:	bf00      	nop
 8000e30:	3730      	adds	r7, #48	@ 0x30
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40020000 	.word	0x40020000

08000e50 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000e58:	f00b ffc6 	bl	800cde8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f009 f8ff 	bl	800a060 <osDelay>
 8000e62:	e7fb      	b.n	8000e5c <StartDefaultTask+0xc>

08000e64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d101      	bne.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e76:	f000 fb91 	bl	800159c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40000800 	.word	0x40000800

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <Error_Handler+0x8>

08000e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	4a11      	ldr	r2, [pc, #68]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_MspInit+0x54>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	f06f 0001 	mvn.w	r0, #1
 8000eda:	f000 fc5b 	bl	8001794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a19      	ldr	r2, [pc, #100]	@ (8000f70 <HAL_I2C_MspInit+0x84>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12c      	bne.n	8000f68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f2a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f30:	2312      	movs	r3, #18
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <HAL_I2C_MspInit+0x8c>)
 8000f48:	f000 fc4e 	bl	80017e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f54:	4a07      	ldr	r2, [pc, #28]	@ (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	@ 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40005400 	.word	0x40005400
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020400 	.word	0x40020400

08000f7c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08e      	sub	sp, #56	@ 0x38
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a59      	ldr	r2, [pc, #356]	@ (8001100 <HAL_I2S_MspInit+0x184>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d15b      	bne.n	8001056 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
 8000fa2:	4b58      	ldr	r3, [pc, #352]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a57      	ldr	r2, [pc, #348]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b55      	ldr	r3, [pc, #340]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb6:	623b      	str	r3, [r7, #32]
 8000fb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	4b51      	ldr	r3, [pc, #324]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a50      	ldr	r2, [pc, #320]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b4e      	ldr	r3, [pc, #312]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	4b4a      	ldr	r3, [pc, #296]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a49      	ldr	r2, [pc, #292]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b47      	ldr	r3, [pc, #284]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001002:	2306      	movs	r3, #6
 8001004:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	483e      	ldr	r0, [pc, #248]	@ (8001108 <HAL_I2S_MspInit+0x18c>)
 800100e:	f000 fbeb 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001012:	2308      	movs	r3, #8
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001022:	2305      	movs	r3, #5
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4836      	ldr	r0, [pc, #216]	@ (8001108 <HAL_I2S_MspInit+0x18c>)
 800102e:	f000 fbdb 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001032:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001044:	2305      	movs	r3, #5
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	482f      	ldr	r0, [pc, #188]	@ (800110c <HAL_I2S_MspInit+0x190>)
 8001050:	f000 fbca 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001054:	e04f      	b.n	80010f6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a2d      	ldr	r2, [pc, #180]	@ (8001110 <HAL_I2S_MspInit+0x194>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d14a      	bne.n	80010f6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 800106a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001070:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	4a1f      	ldr	r2, [pc, #124]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6313      	str	r3, [r2, #48]	@ 0x30
 800108c:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_I2S_MspInit+0x188>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010b4:	2310      	movs	r3, #16
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010c4:	2306      	movs	r3, #6
 80010c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4811      	ldr	r0, [pc, #68]	@ (8001114 <HAL_I2S_MspInit+0x198>)
 80010d0:	f000 fb8a 	bl	80017e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010d4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010e6:	2306      	movs	r3, #6
 80010e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	@ (8001108 <HAL_I2S_MspInit+0x18c>)
 80010f2:	f000 fb79 	bl	80017e8 <HAL_GPIO_Init>
}
 80010f6:	bf00      	nop
 80010f8:	3738      	adds	r7, #56	@ 0x38
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40003800 	.word	0x40003800
 8001104:	40023800 	.word	0x40023800
 8001108:	40020800 	.word	0x40020800
 800110c:	40020400 	.word	0x40020400
 8001110:	40003c00 	.word	0x40003c00
 8001114:	40020000 	.word	0x40020000

08001118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a19      	ldr	r2, [pc, #100]	@ (800119c <HAL_SPI_MspInit+0x84>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d12b      	bne.n	8001192 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <HAL_SPI_MspInit+0x88>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_SPI_MspInit+0x88>)
 8001144:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001148:	6453      	str	r3, [r2, #68]	@ 0x44
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_SPI_MspInit+0x88>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <HAL_SPI_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <HAL_SPI_MspInit+0x88>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_SPI_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001172:	23e0      	movs	r3, #224	@ 0xe0
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001182:	2305      	movs	r3, #5
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <HAL_SPI_MspInit+0x8c>)
 800118e:	f000 fb2b 	bl	80017e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	@ 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40013000 	.word	0x40013000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a15      	ldr	r2, [pc, #84]	@ (800120c <HAL_TIM_Base_MspInit+0x64>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10e      	bne.n	80011d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <HAL_TIM_Base_MspInit+0x68>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	4a13      	ldr	r2, [pc, #76]	@ (8001210 <HAL_TIM_Base_MspInit+0x68>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_TIM_Base_MspInit+0x68>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80011d6:	e012      	b.n	80011fe <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <HAL_TIM_Base_MspInit+0x6c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10d      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <HAL_TIM_Base_MspInit+0x68>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <HAL_TIM_Base_MspInit+0x68>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f2:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <HAL_TIM_Base_MspInit+0x68>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40000400 	.word	0x40000400
 8001210:	40023800 	.word	0x40023800
 8001214:	40000c00 	.word	0x40000c00

08001218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a33      	ldr	r2, [pc, #204]	@ (8001304 <HAL_TIM_MspPostInit+0xec>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d13c      	bne.n	80012b4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b32      	ldr	r3, [pc, #200]	@ (8001308 <HAL_TIM_MspPostInit+0xf0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a31      	ldr	r2, [pc, #196]	@ (8001308 <HAL_TIM_MspPostInit+0xf0>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b2f      	ldr	r3, [pc, #188]	@ (8001308 <HAL_TIM_MspPostInit+0xf0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <HAL_TIM_MspPostInit+0xf0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a2a      	ldr	r2, [pc, #168]	@ (8001308 <HAL_TIM_MspPostInit+0xf0>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <HAL_TIM_MspPostInit+0xf0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001272:	2323      	movs	r3, #35	@ 0x23
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001282:	2302      	movs	r3, #2
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	481f      	ldr	r0, [pc, #124]	@ (800130c <HAL_TIM_MspPostInit+0xf4>)
 800128e:	f000 faab 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001292:	2340      	movs	r3, #64	@ 0x40
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012a2:	2302      	movs	r3, #2
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4818      	ldr	r0, [pc, #96]	@ (8001310 <HAL_TIM_MspPostInit+0xf8>)
 80012ae:	f000 fa9b 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80012b2:	e022      	b.n	80012fa <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM5)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <HAL_TIM_MspPostInit+0xfc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d11d      	bne.n	80012fa <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <HAL_TIM_MspPostInit+0xf0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a10      	ldr	r2, [pc, #64]	@ (8001308 <HAL_TIM_MspPostInit+0xf0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <HAL_TIM_MspPostInit+0xf0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012da:	2302      	movs	r3, #2
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80012ea:	2302      	movs	r3, #2
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <HAL_TIM_MspPostInit+0x100>)
 80012f6:	f000 fa77 	bl	80017e8 <HAL_GPIO_Init>
}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	@ 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40000400 	.word	0x40000400
 8001308:	40023800 	.word	0x40023800
 800130c:	40020400 	.word	0x40020400
 8001310:	40020800 	.word	0x40020800
 8001314:	40000c00 	.word	0x40000c00
 8001318:	40020000 	.word	0x40020000

0800131c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	@ 0x38
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <HAL_InitTick+0xe4>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	4a32      	ldr	r2, [pc, #200]	@ (8001400 <HAL_InitTick+0xe4>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6413      	str	r3, [r2, #64]	@ 0x40
 800133c:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <HAL_InitTick+0xe4>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001348:	f107 0210 	add.w	r2, r7, #16
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f003 ff9c 	bl	8005290 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800135c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800135e:	2b00      	cmp	r3, #0
 8001360:	d103      	bne.n	800136a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001362:	f003 ff81 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 8001366:	6378      	str	r0, [r7, #52]	@ 0x34
 8001368:	e004      	b.n	8001374 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800136a:	f003 ff7d 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 800136e:	4603      	mov	r3, r0
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001376:	4a23      	ldr	r2, [pc, #140]	@ (8001404 <HAL_InitTick+0xe8>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	3b01      	subs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_InitTick+0xec>)
 8001384:	4a21      	ldr	r2, [pc, #132]	@ (800140c <HAL_InitTick+0xf0>)
 8001386:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_InitTick+0xec>)
 800138a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800138e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001390:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <HAL_InitTick+0xec>)
 8001392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001394:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_InitTick+0xec>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_InitTick+0xec>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_InitTick+0xec>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80013a8:	4817      	ldr	r0, [pc, #92]	@ (8001408 <HAL_InitTick+0xec>)
 80013aa:	f004 f97e 	bl	80056aa <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d11b      	bne.n	80013f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80013bc:	4812      	ldr	r0, [pc, #72]	@ (8001408 <HAL_InitTick+0xec>)
 80013be:	f004 fa1d 	bl	80057fc <HAL_TIM_Base_Start_IT>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d111      	bne.n	80013f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013d0:	201e      	movs	r0, #30
 80013d2:	f000 f9fb 	bl	80017cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d808      	bhi.n	80013ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	201e      	movs	r0, #30
 80013e2:	f000 f9d7 	bl	8001794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_InitTick+0xf4>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e002      	b.n	80013f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3738      	adds	r7, #56	@ 0x38
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	431bde83 	.word	0x431bde83
 8001408:	20000284 	.word	0x20000284
 800140c:	40000800 	.word	0x40000800
 8001410:	20000004 	.word	0x20000004

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <NMI_Handler+0x4>

0800141c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <UsageFault_Handler+0x4>

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <TIM4_IRQHandler+0x10>)
 8001452:	f004 fb3f 	bl	8005ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000284 	.word	0x20000284

08001460 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <OTG_FS_IRQHandler+0x10>)
 8001466:	f000 fe57 	bl	8002118 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200050c8 	.word	0x200050c8

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f00c f8d0 	bl	800d648 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20020000 	.word	0x20020000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	200002cc 	.word	0x200002cc
 80014dc:	200055f0 	.word	0x200055f0

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <SystemInit+0x20>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <SystemInit+0x20>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800153c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001508:	f7ff ffea 	bl	80014e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150e:	490d      	ldr	r1, [pc, #52]	@ (8001544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001510:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001524:	4c0a      	ldr	r4, [pc, #40]	@ (8001550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001532:	f00c f88f 	bl	800d654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff f8b3 	bl	80006a0 <main>
  bx  lr    
 800153a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800153c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001548:	0800d830 	.word	0x0800d830
  ldr r2, =_sbss
 800154c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001550:	200055f0 	.word	0x200055f0

08001554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800155c:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <HAL_Init+0x40>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_Init+0x40>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_Init+0x40>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 f8fc 	bl	800177e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	200f      	movs	r0, #15
 8001588:	f7ff fec8 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff fc82 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_IncTick+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <HAL_IncTick+0x24>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008
 80015c0:	200002d0 	.word	0x200002d0

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	200002d0 	.word	0x200002d0

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff ffee 	bl	80015c4 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffde 	bl	80015c4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	@ (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	@ (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	@ (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff4c 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a6:	f7ff ff61 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f7ff ffb1 	bl	8001718 <NVIC_EncodePriority>
 80017b6:	4602      	mov	r2, r0
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff80 	bl	80016c4 <__NVIC_SetPriority>
}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff54 	bl	8001688 <__NVIC_EnableIRQ>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	@ 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	e159      	b.n	8001ab8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 8148 	bne.w	8001ab2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d005      	beq.n	800183a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	2b02      	cmp	r3, #2
 8001838:	d130      	bne.n	800189c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 0201 	and.w	r2, r3, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d017      	beq.n	80018d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d123      	bne.n	800192c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3208      	adds	r2, #8
 80018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	220f      	movs	r2, #15
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	69b9      	ldr	r1, [r7, #24]
 8001928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0203 	and.w	r2, r3, #3
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80a2 	beq.w	8001ab2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b57      	ldr	r3, [pc, #348]	@ (8001ad0 <HAL_GPIO_Init+0x2e8>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	4a56      	ldr	r2, [pc, #344]	@ (8001ad0 <HAL_GPIO_Init+0x2e8>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800197c:	6453      	str	r3, [r2, #68]	@ 0x44
 800197e:	4b54      	ldr	r3, [pc, #336]	@ (8001ad0 <HAL_GPIO_Init+0x2e8>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800198a:	4a52      	ldr	r2, [pc, #328]	@ (8001ad4 <HAL_GPIO_Init+0x2ec>)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a49      	ldr	r2, [pc, #292]	@ (8001ad8 <HAL_GPIO_Init+0x2f0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d019      	beq.n	80019ea <HAL_GPIO_Init+0x202>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a48      	ldr	r2, [pc, #288]	@ (8001adc <HAL_GPIO_Init+0x2f4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0x1fe>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a47      	ldr	r2, [pc, #284]	@ (8001ae0 <HAL_GPIO_Init+0x2f8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a46      	ldr	r2, [pc, #280]	@ (8001ae4 <HAL_GPIO_Init+0x2fc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x1f6>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a45      	ldr	r2, [pc, #276]	@ (8001ae8 <HAL_GPIO_Init+0x300>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <HAL_GPIO_Init+0x1f2>
 80019d6:	2304      	movs	r3, #4
 80019d8:	e008      	b.n	80019ec <HAL_GPIO_Init+0x204>
 80019da:	2307      	movs	r3, #7
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x204>
 80019de:	2303      	movs	r3, #3
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x204>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x204>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x204>
 80019ea:	2300      	movs	r3, #0
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f002 0203 	and.w	r2, r2, #3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019fc:	4935      	ldr	r1, [pc, #212]	@ (8001ad4 <HAL_GPIO_Init+0x2ec>)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0a:	4b38      	ldr	r3, [pc, #224]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a34:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a58:	4a24      	ldr	r2, [pc, #144]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a82:	4a1a      	ldr	r2, [pc, #104]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a88:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aac:	4a0f      	ldr	r2, [pc, #60]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	f67f aea2 	bls.w	8001804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3724      	adds	r7, #36	@ 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40013800 	.word	0x40013800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40013c00 	.word	0x40013c00

08001af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
 8001afc:	4613      	mov	r3, r2
 8001afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	041a      	lsls	r2, r3, #16
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	619a      	str	r2, [r3, #24]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b34:	887a      	ldrh	r2, [r7, #2]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	041a      	lsls	r2, r3, #16
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	400b      	ands	r3, r1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af02      	add	r7, sp, #8
 8001b5c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e059      	b.n	8001c1c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f00b f984 	bl	800ce90 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b96:	d102      	bne.n	8001b9e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 fe07 	bl	80067b6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7c1a      	ldrb	r2, [r3, #16]
 8001bb0:	f88d 2000 	strb.w	r2, [sp]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb8:	f004 fd88 	bl	80066cc <USB_CoreInit>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e026      	b.n	8001c1c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 fdff 	bl	80067d8 <USB_SetCurrentMode>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e017      	b.n	8001c1c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7c1a      	ldrb	r2, [r3, #16]
 8001bf4:	f88d 2000 	strb.w	r2, [sp]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bfc:	f004 ffa2 	bl	8006b44 <USB_HostInit>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e004      	b.n	8001c1c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b08b      	sub	sp, #44	@ 0x2c
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	70fb      	strb	r3, [r7, #3]
 8001c36:	460b      	mov	r3, r1
 8001c38:	70bb      	strb	r3, [r7, #2]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001c3e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c40:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_HCD_HC_Init+0x2c>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e09d      	b.n	8001d8c <HAL_HCD_HC_Init+0x168>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	3319      	adds	r3, #25
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3314      	adds	r3, #20
 8001c7c:	787a      	ldrb	r2, [r7, #1]
 8001c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3315      	adds	r3, #21
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3326      	adds	r3, #38	@ 0x26
 8001ca4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001ca8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	78bb      	ldrb	r3, [r7, #2]
 8001cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cb2:	b2d8      	uxtb	r0, r3
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3316      	adds	r3, #22
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fbc8 	bl	8002460 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001cd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	da0a      	bge.n	8001cee <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3317      	adds	r3, #23
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e009      	b.n	8001d02 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3317      	adds	r3, #23
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 f86a 	bl	8006de0 <USB_GetHostSpeed>
 8001d0c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001d0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d10b      	bne.n	8001d2e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001d16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d107      	bne.n	8001d2e <HAL_HCD_HC_Init+0x10a>
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d104      	bne.n	8001d2e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2bbc      	cmp	r3, #188	@ 0xbc
 8001d28:	d901      	bls.n	8001d2e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001d2a:	23bc      	movs	r3, #188	@ 0xbc
 8001d2c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3318      	adds	r3, #24
 8001d3e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001d42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	b298      	uxth	r0, r3
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	3328      	adds	r3, #40	@ 0x28
 8001d58:	4602      	mov	r2, r0
 8001d5a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	787c      	ldrb	r4, [r7, #1]
 8001d66:	78ba      	ldrb	r2, [r7, #2]
 8001d68:	78f9      	ldrb	r1, [r7, #3]
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	4623      	mov	r3, r4
 8001d7a:	f005 f859 	bl	8006e30 <USB_HC_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}

08001d94 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_HCD_HC_Halt+0x1e>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e00f      	b.n	8001dd2 <HAL_HCD_HC_Halt+0x3e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f005 fb9f 	bl	8007506 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	70fb      	strb	r3, [r7, #3]
 8001dee:	460b      	mov	r3, r1
 8001df0:	70bb      	strb	r3, [r7, #2]
 8001df2:	4613      	mov	r3, r2
 8001df4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3317      	adds	r3, #23
 8001e06:	78ba      	ldrb	r2, [r7, #2]
 8001e08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e0a:	78fa      	ldrb	r2, [r7, #3]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	3326      	adds	r3, #38	@ 0x26
 8001e1a:	787a      	ldrb	r2, [r7, #1]
 8001e1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e1e:	7c3b      	ldrb	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d114      	bne.n	8001e4e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	332a      	adds	r3, #42	@ 0x2a
 8001e34:	2203      	movs	r2, #3
 8001e36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	3319      	adds	r3, #25
 8001e48:	7f3a      	ldrb	r2, [r7, #28]
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e009      	b.n	8001e62 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	332a      	adds	r3, #42	@ 0x2a
 8001e5e:	2202      	movs	r2, #2
 8001e60:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001e62:	787b      	ldrb	r3, [r7, #1]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	f200 8102 	bhi.w	800206e <HAL_HCD_HC_SubmitRequest+0x292>
 8001e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08002059 	.word	0x08002059
 8001e78:	08001f45 	.word	0x08001f45
 8001e7c:	08001fcf 	.word	0x08001fcf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001e80:	7c3b      	ldrb	r3, [r7, #16]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	f040 80f5 	bne.w	8002072 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001e88:	78bb      	ldrb	r3, [r7, #2]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d12d      	bne.n	8001eea <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001e8e:	8b3b      	ldrh	r3, [r7, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	333d      	adds	r3, #61	@ 0x3d
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	333d      	adds	r3, #61	@ 0x3d
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	332a      	adds	r3, #42	@ 0x2a
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001ed2:	e0ce      	b.n	8002072 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	332a      	adds	r3, #42	@ 0x2a
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	701a      	strb	r2, [r3, #0]
      break;
 8001ee8:	e0c3      	b.n	8002072 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	331a      	adds	r3, #26
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	f040 80b8 	bne.w	8002072 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	333c      	adds	r3, #60	@ 0x3c
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10a      	bne.n	8001f2e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	332a      	adds	r3, #42	@ 0x2a
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
      break;
 8001f2c:	e0a1      	b.n	8002072 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	332a      	adds	r3, #42	@ 0x2a
 8001f3e:	2202      	movs	r2, #2
 8001f40:	701a      	strb	r2, [r3, #0]
      break;
 8001f42:	e096      	b.n	8002072 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f44:	78bb      	ldrb	r3, [r7, #2]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d120      	bne.n	8001f8c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	333d      	adds	r3, #61	@ 0x3d
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10a      	bne.n	8001f76 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	332a      	adds	r3, #42	@ 0x2a
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f74:	e07e      	b.n	8002074 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	332a      	adds	r3, #42	@ 0x2a
 8001f86:	2202      	movs	r2, #2
 8001f88:	701a      	strb	r2, [r3, #0]
      break;
 8001f8a:	e073      	b.n	8002074 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	333c      	adds	r3, #60	@ 0x3c
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	332a      	adds	r3, #42	@ 0x2a
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
      break;
 8001fb6:	e05d      	b.n	8002074 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	332a      	adds	r3, #42	@ 0x2a
 8001fc8:	2202      	movs	r2, #2
 8001fca:	701a      	strb	r2, [r3, #0]
      break;
 8001fcc:	e052      	b.n	8002074 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001fce:	78bb      	ldrb	r3, [r7, #2]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d120      	bne.n	8002016 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	333d      	adds	r3, #61	@ 0x3d
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10a      	bne.n	8002000 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	332a      	adds	r3, #42	@ 0x2a
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ffe:	e039      	b.n	8002074 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	332a      	adds	r3, #42	@ 0x2a
 8002010:	2202      	movs	r2, #2
 8002012:	701a      	strb	r2, [r3, #0]
      break;
 8002014:	e02e      	b.n	8002074 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	333c      	adds	r3, #60	@ 0x3c
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	332a      	adds	r3, #42	@ 0x2a
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
      break;
 8002040:	e018      	b.n	8002074 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	332a      	adds	r3, #42	@ 0x2a
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
      break;
 8002056:	e00d      	b.n	8002074 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	332a      	adds	r3, #42	@ 0x2a
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
      break;
 800206c:	e002      	b.n	8002074 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800206e:	bf00      	nop
 8002070:	e000      	b.n	8002074 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002072:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	332c      	adds	r3, #44	@ 0x2c
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	8b39      	ldrh	r1, [r7, #24]
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4403      	add	r3, r0
 8002098:	3334      	adds	r3, #52	@ 0x34
 800209a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	334c      	adds	r3, #76	@ 0x4c
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3338      	adds	r3, #56	@ 0x38
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3315      	adds	r3, #21
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	334d      	adds	r3, #77	@ 0x4d
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	3310      	adds	r3, #16
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	1d19      	adds	r1, r3, #4
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	799b      	ldrb	r3, [r3, #6]
 8002106:	461a      	mov	r2, r3
 8002108:	f004 ffa8 	bl	800705c <USB_HC_StartXfer>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop

08002118 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 fcc8 	bl	8006ac4 <USB_GetMode>
 8002134:	4603      	mov	r3, r0
 8002136:	2b01      	cmp	r3, #1
 8002138:	f040 80fb 	bne.w	8002332 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f004 fc8b 	bl	8006a5c <USB_ReadInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80f1 	beq.w	8002330 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f004 fc82 	bl	8006a5c <USB_ReadInterrupts>
 8002158:	4603      	mov	r3, r0
 800215a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800215e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002162:	d104      	bne.n	800216e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800216c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f004 fc72 	bl	8006a5c <USB_ReadInterrupts>
 8002178:	4603      	mov	r3, r0
 800217a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800217e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002182:	d104      	bne.n	800218e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800218c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fc62 	bl	8006a5c <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800219e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021a2:	d104      	bne.n	80021ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fc52 	bl	8006a5c <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d103      	bne.n	80021ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2202      	movs	r2, #2
 80021c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fc44 	bl	8006a5c <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021de:	d120      	bne.n	8002222 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80021e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d113      	bne.n	8002222 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80021fa:	2110      	movs	r1, #16
 80021fc:	6938      	ldr	r0, [r7, #16]
 80021fe:	f004 fb37 	bl	8006870 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002202:	6938      	ldr	r0, [r7, #16]
 8002204:	f004 fb66 	bl	80068d4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7a5b      	ldrb	r3, [r3, #9]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d105      	bne.n	800221c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	4618      	mov	r0, r3
 8002218:	f004 fd42 	bl	8006ca0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f00a feb5 	bl	800cf8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f004 fc18 	bl	8006a5c <USB_ReadInterrupts>
 800222c:	4603      	mov	r3, r0
 800222e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002232:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002236:	d102      	bne.n	800223e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f001 fd4d 	bl	8003cd8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f004 fc0a 	bl	8006a5c <USB_ReadInterrupts>
 8002248:	4603      	mov	r3, r0
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b08      	cmp	r3, #8
 8002250:	d106      	bne.n	8002260 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f00a fe7e 	bl	800cf54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2208      	movs	r2, #8
 800225e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fbf9 	bl	8006a5c <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002270:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002274:	d139      	bne.n	80022ea <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f005 f932 	bl	80074e4 <USB_HC_ReadInterrupt>
 8002280:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e025      	b.n	80022d4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d018      	beq.n	80022ce <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022b2:	d106      	bne.n	80022c2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4619      	mov	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f905 	bl	80024ca <HCD_HC_IN_IRQHandler>
 80022c0:	e005      	b.n	80022ce <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 ff67 	bl	800319c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	795b      	ldrb	r3, [r3, #5]
 80022d8:	461a      	mov	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4293      	cmp	r3, r2
 80022de:	d3d3      	bcc.n	8002288 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fbb4 	bl	8006a5c <USB_ReadInterrupts>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d101      	bne.n	8002302 <HAL_HCD_IRQHandler+0x1ea>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_HCD_IRQHandler+0x1ec>
 8002302:	2300      	movs	r3, #0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d014      	beq.n	8002332 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0210 	bic.w	r2, r2, #16
 8002316:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f001 fbfe 	bl	8003b1a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0210 	orr.w	r2, r2, #16
 800232c:	619a      	str	r2, [r3, #24]
 800232e:	e000      	b.n	8002332 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002330:	bf00      	nop
    }
  }
}
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_HCD_Start+0x16>
 800234a:	2302      	movs	r3, #2
 800234c:	e013      	b.n	8002376 <HAL_HCD_Start+0x3e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2101      	movs	r1, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f004 fd06 	bl	8006d6e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f004 fa14 	bl	8006794 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_HCD_Stop+0x16>
 8002390:	2302      	movs	r3, #2
 8002392:	e00d      	b.n	80023b0 <HAL_HCD_Stop+0x32>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f005 f9d0 	bl	8007746 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f004 fca8 	bl	8006d1a <USB_ResetPort>
 80023ca:	4603      	mov	r3, r0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	334c      	adds	r3, #76	@ 0x4c
 80023f0:	781b      	ldrb	r3, [r3, #0]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3338      	adds	r3, #56	@ 0x38
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f004 fcea 	bl	8006e0e <USB_GetCurrentFrame>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f004 fcc5 	bl	8006de0 <USB_GetHostSpeed>
 8002456:	4603      	mov	r3, r0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	331a      	adds	r3, #26
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	331b      	adds	r3, #27
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3325      	adds	r3, #37	@ 0x25
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	3324      	adds	r3, #36	@ 0x24
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f004 faca 	bl	8006a82 <USB_ReadChInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d11a      	bne.n	800252e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002504:	461a      	mov	r2, r3
 8002506:	2304      	movs	r3, #4
 8002508:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	334d      	adds	r3, #77	@ 0x4d
 800251a:	2207      	movs	r2, #7
 800251c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f004 ffed 	bl	8007506 <USB_HC_Halt>
 800252c:	e09e      	b.n	800266c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f004 faa3 	bl	8006a82 <USB_ReadChInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002546:	d11b      	bne.n	8002580 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002554:	461a      	mov	r2, r3
 8002556:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800255a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	334d      	adds	r3, #77	@ 0x4d
 800256c:	2208      	movs	r2, #8
 800256e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f004 ffc4 	bl	8007506 <USB_HC_Halt>
 800257e:	e075      	b.n	800266c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f004 fa7a 	bl	8006a82 <USB_ReadChInterrupts>
 800258e:	4603      	mov	r3, r0
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b08      	cmp	r3, #8
 8002596:	d11a      	bne.n	80025ce <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a4:	461a      	mov	r2, r3
 80025a6:	2308      	movs	r3, #8
 80025a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	334d      	adds	r3, #77	@ 0x4d
 80025ba:	2206      	movs	r2, #6
 80025bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 ff9d 	bl	8007506 <USB_HC_Halt>
 80025cc:	e04e      	b.n	800266c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 fa53 	bl	8006a82 <USB_ReadChInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e6:	d11b      	bne.n	8002620 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f4:	461a      	mov	r2, r3
 80025f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	334d      	adds	r3, #77	@ 0x4d
 800260c:	2209      	movs	r2, #9
 800260e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f004 ff74 	bl	8007506 <USB_HC_Halt>
 800261e:	e025      	b.n	800266c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fa2a 	bl	8006a82 <USB_ReadChInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002634:	2b80      	cmp	r3, #128	@ 0x80
 8002636:	d119      	bne.n	800266c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	334d      	adds	r3, #77	@ 0x4d
 800265a:	2207      	movs	r2, #7
 800265c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f004 ff4d 	bl	8007506 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f004 fa04 	bl	8006a82 <USB_ReadChInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002684:	d112      	bne.n	80026ac <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f004 ff39 	bl	8007506 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a0:	461a      	mov	r2, r3
 80026a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026a6:	6093      	str	r3, [r2, #8]
 80026a8:	f000 bd75 	b.w	8003196 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f004 f9e4 	bl	8006a82 <USB_ReadChInterrupts>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	f040 8128 	bne.w	8002916 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	2320      	movs	r3, #32
 80026d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	331b      	adds	r3, #27
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d119      	bne.n	8002722 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	331b      	adds	r3, #27
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	0151      	lsls	r1, r2, #5
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	440a      	add	r2, r1
 8002718:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800271c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002720:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	799b      	ldrb	r3, [r3, #6]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01b      	beq.n	8002762 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3330      	adds	r3, #48	@ 0x30
 800273a:	6819      	ldr	r1, [r3, #0]
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	1ac9      	subs	r1, r1, r3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4403      	add	r3, r0
 800275e:	3338      	adds	r3, #56	@ 0x38
 8002760:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	334d      	adds	r3, #77	@ 0x4d
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	3344      	adds	r3, #68	@ 0x44
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002796:	461a      	mov	r2, r3
 8002798:	2301      	movs	r3, #1
 800279a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3326      	adds	r3, #38	@ 0x26
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3326      	adds	r3, #38	@ 0x26
 80027c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d110      	bne.n	80027ea <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 fe98 	bl	8007506 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e2:	461a      	mov	r2, r3
 80027e4:	2310      	movs	r3, #16
 80027e6:	6093      	str	r3, [r2, #8]
 80027e8:	e03d      	b.n	8002866 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3326      	adds	r3, #38	@ 0x26
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d00a      	beq.n	8002816 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	3326      	adds	r3, #38	@ 0x26
 8002810:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002812:	2b01      	cmp	r3, #1
 8002814:	d127      	bne.n	8002866 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	0151      	lsls	r1, r2, #5
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	440a      	add	r2, r1
 800282c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002830:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002834:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	334c      	adds	r3, #76	@ 0x4c
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	334c      	adds	r3, #76	@ 0x4c
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f00a fba1 	bl	800cfa8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	799b      	ldrb	r3, [r3, #6]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d13b      	bne.n	80028e6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	3338      	adds	r3, #56	@ 0x38
 800287e:	6819      	ldr	r1, [r3, #0]
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	3328      	adds	r3, #40	@ 0x28
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	440b      	add	r3, r1
 8002894:	1e59      	subs	r1, r3, #1
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4403      	add	r3, r0
 80028a4:	3328      	adds	r3, #40	@ 0x28
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8470 	beq.w	8003196 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	333c      	adds	r3, #60	@ 0x3c
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	f083 0301 	eor.w	r3, r3, #1
 80028ce:	b2d8      	uxtb	r0, r3
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	333c      	adds	r3, #60	@ 0x3c
 80028de:	4602      	mov	r2, r0
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	f000 bc58 	b.w	8003196 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	333c      	adds	r3, #60	@ 0x3c
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	f083 0301 	eor.w	r3, r3, #1
 80028fe:	b2d8      	uxtb	r0, r3
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	333c      	adds	r3, #60	@ 0x3c
 800290e:	4602      	mov	r2, r0
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	f000 bc40 	b.w	8003196 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f004 f8af 	bl	8006a82 <USB_ReadChInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b20      	cmp	r3, #32
 800292c:	d131      	bne.n	8002992 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800293a:	461a      	mov	r2, r3
 800293c:	2320      	movs	r3, #32
 800293e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	331a      	adds	r3, #26
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	f040 841f 	bne.w	8003196 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	331b      	adds	r3, #27
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334d      	adds	r3, #77	@ 0x4d
 800297c:	2203      	movs	r2, #3
 800297e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fdbc 	bl	8007506 <USB_HC_Halt>
 800298e:	f000 bc02 	b.w	8003196 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f004 f871 	bl	8006a82 <USB_ReadChInterrupts>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	f040 8305 	bne.w	8002fb6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b8:	461a      	mov	r2, r3
 80029ba:	2302      	movs	r3, #2
 80029bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	334d      	adds	r3, #77	@ 0x4d
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d114      	bne.n	80029fe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	334d      	adds	r3, #77	@ 0x4d
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	334c      	adds	r3, #76	@ 0x4c
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e2cc      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	334d      	adds	r3, #77	@ 0x4d
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b06      	cmp	r3, #6
 8002a12:	d114      	bne.n	8002a3e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	334d      	adds	r3, #77	@ 0x4d
 8002a24:	2202      	movs	r2, #2
 8002a26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	334c      	adds	r3, #76	@ 0x4c
 8002a38:	2205      	movs	r2, #5
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e2ac      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	334d      	adds	r3, #77	@ 0x4d
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b07      	cmp	r3, #7
 8002a52:	d00b      	beq.n	8002a6c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	334d      	adds	r3, #77	@ 0x4d
 8002a64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002a66:	2b09      	cmp	r3, #9
 8002a68:	f040 80a6 	bne.w	8002bb8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	334d      	adds	r3, #77	@ 0x4d
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3344      	adds	r3, #68	@ 0x44
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4403      	add	r3, r0
 8002aa0:	3344      	adds	r3, #68	@ 0x44
 8002aa2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3344      	adds	r3, #68	@ 0x44
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d943      	bls.n	8002b42 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3344      	adds	r3, #68	@ 0x44
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	331a      	adds	r3, #26
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d123      	bne.n	8002b2c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	331b      	adds	r3, #27
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	331c      	adds	r3, #28
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	0151      	lsls	r1, r2, #5
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	440a      	add	r2, r1
 8002b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b2a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	334c      	adds	r3, #76	@ 0x4c
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b40:	e229      	b.n	8002f96 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	334c      	adds	r3, #76	@ 0x4c
 8002b52:	2202      	movs	r2, #2
 8002b54:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	3326      	adds	r3, #38	@ 0x26
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00b      	beq.n	8002b84 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3326      	adds	r3, #38	@ 0x26
 8002b7c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	f040 8209 	bne.w	8002f96 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b9a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ba2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bb6:	e1ee      	b.n	8002f96 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334d      	adds	r3, #77	@ 0x4d
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	f040 80c8 	bne.w	8002d60 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	334d      	adds	r3, #77	@ 0x4d
 8002be0:	2202      	movs	r2, #2
 8002be2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	331b      	adds	r3, #27
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	f040 81ce 	bne.w	8002f98 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3326      	adds	r3, #38	@ 0x26
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d16b      	bne.n	8002cea <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	3348      	adds	r3, #72	@ 0x48
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1c59      	adds	r1, r3, #1
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4403      	add	r3, r0
 8002c32:	3348      	adds	r3, #72	@ 0x48
 8002c34:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3348      	adds	r3, #72	@ 0x48
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d943      	bls.n	8002cd4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3348      	adds	r3, #72	@ 0x48
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	331b      	adds	r3, #27
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	3344      	adds	r3, #68	@ 0x44
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d809      	bhi.n	8002c9e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	331c      	adds	r3, #28
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	0151      	lsls	r1, r2, #5
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	440a      	add	r2, r1
 8002cb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cbc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	334c      	adds	r3, #76	@ 0x4c
 8002cce:	2204      	movs	r2, #4
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e014      	b.n	8002cfe <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	334c      	adds	r3, #76	@ 0x4c
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e009      	b.n	8002cfe <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	334c      	adds	r3, #76	@ 0x4c
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3326      	adds	r3, #38	@ 0x26
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3326      	adds	r3, #38	@ 0x26
 8002d24:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	f040 8136 	bne.w	8002f98 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d42:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d4a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e11b      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	334d      	adds	r3, #77	@ 0x4d
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	f040 8081 	bne.w	8002e7a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	334d      	adds	r3, #77	@ 0x4d
 8002d88:	2202      	movs	r2, #2
 8002d8a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	331b      	adds	r3, #27
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	f040 80fa 	bne.w	8002f98 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	334c      	adds	r3, #76	@ 0x4c
 8002db4:	2202      	movs	r2, #2
 8002db6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	0151      	lsls	r1, r2, #5
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	440a      	add	r2, r1
 8002dce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	0151      	lsls	r1, r2, #5
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	440a      	add	r2, r1
 8002dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002df6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	0151      	lsls	r1, r2, #5
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	440a      	add	r2, r1
 8002e0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e12:	f023 0320 	bic.w	r3, r3, #32
 8002e16:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3326      	adds	r3, #38	@ 0x26
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3326      	adds	r3, #38	@ 0x26
 8002e3e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f040 80a9 	bne.w	8002f98 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e5c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e64:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e08e      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334d      	adds	r3, #77	@ 0x4d
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d143      	bne.n	8002f18 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	334d      	adds	r3, #77	@ 0x4d
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334c      	adds	r3, #76	@ 0x4c
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3326      	adds	r3, #38	@ 0x26
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3326      	adds	r3, #38	@ 0x26
 8002ede:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d159      	bne.n	8002f98 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002efa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f02:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e03f      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	334d      	adds	r3, #77	@ 0x4d
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d126      	bne.n	8002f7c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	334d      	adds	r3, #77	@ 0x4d
 8002f3e:	2202      	movs	r2, #2
 8002f40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3344      	adds	r3, #68	@ 0x44
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	1c59      	adds	r1, r3, #1
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4403      	add	r3, r0
 8002f62:	3344      	adds	r3, #68	@ 0x44
 8002f64:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	334c      	adds	r3, #76	@ 0x4c
 8002f76:	2204      	movs	r2, #4
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e00d      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	334d      	adds	r3, #77	@ 0x4d
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	f000 8100 	beq.w	8003194 <HCD_HC_IN_IRQHandler+0xcca>
 8002f94:	e000      	b.n	8002f98 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f96:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	334c      	adds	r3, #76	@ 0x4c
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f009 fffa 	bl	800cfa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fb4:	e0ef      	b.n	8003196 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fd5f 	bl	8006a82 <USB_ReadChInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fca:	2b40      	cmp	r3, #64	@ 0x40
 8002fcc:	d12f      	bne.n	800302e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2340      	movs	r3, #64	@ 0x40
 8002fde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	@ 0x4d
 8002ff0:	2205      	movs	r2, #5
 8002ff2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	331a      	adds	r3, #26
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3344      	adds	r3, #68	@ 0x44
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f004 fa6d 	bl	8007506 <USB_HC_Halt>
 800302c:	e0b3      	b.n	8003196 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fd23 	bl	8006a82 <USB_ReadChInterrupts>
 800303c:	4603      	mov	r3, r0
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b10      	cmp	r3, #16
 8003044:	f040 80a7 	bne.w	8003196 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3326      	adds	r3, #38	@ 0x26
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d11b      	bne.n	8003096 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3344      	adds	r3, #68	@ 0x44
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334d      	adds	r3, #77	@ 0x4d
 8003082:	2204      	movs	r2, #4
 8003084:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f004 fa39 	bl	8007506 <USB_HC_Halt>
 8003094:	e03f      	b.n	8003116 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3326      	adds	r3, #38	@ 0x26
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3326      	adds	r3, #38	@ 0x26
 80030bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d129      	bne.n	8003116 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	3344      	adds	r3, #68	@ 0x44
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	799b      	ldrb	r3, [r3, #6]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HCD_HC_IN_IRQHandler+0xc2a>
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	331b      	adds	r3, #27
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d110      	bne.n	8003116 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	334d      	adds	r3, #77	@ 0x4d
 8003104:	2204      	movs	r2, #4
 8003106:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f004 f9f8 	bl	8007506 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	331b      	adds	r3, #27
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d129      	bne.n	8003180 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	331b      	adds	r3, #27
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	0151      	lsls	r1, r2, #5
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	440a      	add	r2, r1
 8003156:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800315a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	0151      	lsls	r1, r2, #5
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	440a      	add	r2, r1
 8003176:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800317a:	f043 0320 	orr.w	r3, r3, #32
 800317e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318c:	461a      	mov	r2, r3
 800318e:	2310      	movs	r3, #16
 8003190:	6093      	str	r3, [r2, #8]
 8003192:	e000      	b.n	8003196 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003194:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fc61 	bl	8006a82 <USB_ReadChInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d11b      	bne.n	8003202 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d6:	461a      	mov	r2, r3
 80031d8:	2304      	movs	r3, #4
 80031da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	334d      	adds	r3, #77	@ 0x4d
 80031ec:	2207      	movs	r2, #7
 80031ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f004 f984 	bl	8007506 <USB_HC_Halt>
 80031fe:	f000 bc89 	b.w	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fc39 	bl	8006a82 <USB_ReadChInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b20      	cmp	r3, #32
 8003218:	f040 8082 	bne.w	8003320 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003228:	461a      	mov	r2, r3
 800322a:	2320      	movs	r3, #32
 800322c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3319      	adds	r3, #25
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d124      	bne.n	800328e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3319      	adds	r3, #25
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334c      	adds	r3, #76	@ 0x4c
 8003268:	2202      	movs	r2, #2
 800326a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	334d      	adds	r3, #77	@ 0x4d
 800327c:	2203      	movs	r2, #3
 800327e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f004 f93c 	bl	8007506 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	331a      	adds	r3, #26
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	f040 8437 	bne.w	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	331b      	adds	r3, #27
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f040 842b 	bne.w	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3326      	adds	r3, #38	@ 0x26
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d009      	beq.n	80032e8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	331b      	adds	r3, #27
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	334d      	adds	r3, #77	@ 0x4d
 80032f8:	2203      	movs	r2, #3
 80032fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f004 f8fe 	bl	8007506 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	3344      	adds	r3, #68	@ 0x44
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e3f9      	b.n	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f003 fbaa 	bl	8006a82 <USB_ReadChInterrupts>
 800332e:	4603      	mov	r3, r0
 8003330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003338:	d111      	bne.n	800335e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003346:	461a      	mov	r2, r3
 8003348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800334c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	4611      	mov	r1, r2
 8003356:	4618      	mov	r0, r3
 8003358:	f004 f8d5 	bl	8007506 <USB_HC_Halt>
 800335c:	e3da      	b.n	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f003 fb8b 	bl	8006a82 <USB_ReadChInterrupts>
 800336c:	4603      	mov	r3, r0
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d168      	bne.n	8003448 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	3344      	adds	r3, #68	@ 0x44
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fb75 	bl	8006a82 <USB_ReadChInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339e:	2b40      	cmp	r3, #64	@ 0x40
 80033a0:	d112      	bne.n	80033c8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	3319      	adds	r3, #25
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c2:	461a      	mov	r2, r3
 80033c4:	2340      	movs	r3, #64	@ 0x40
 80033c6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	331b      	adds	r3, #27
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d019      	beq.n	8003412 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	331b      	adds	r3, #27
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	0151      	lsls	r1, r2, #5
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	440a      	add	r2, r1
 8003408:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800340c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003410:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4413      	add	r3, r2
 800341a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800341e:	461a      	mov	r2, r3
 8003420:	2301      	movs	r3, #1
 8003422:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334d      	adds	r3, #77	@ 0x4d
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f004 f860 	bl	8007506 <USB_HC_Halt>
 8003446:	e365      	b.n	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f003 fb16 	bl	8006a82 <USB_ReadChInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345c:	2b40      	cmp	r3, #64	@ 0x40
 800345e:	d139      	bne.n	80034d4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334d      	adds	r3, #77	@ 0x4d
 8003470:	2205      	movs	r2, #5
 8003472:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	331a      	adds	r3, #26
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3319      	adds	r3, #25
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3344      	adds	r3, #68	@ 0x44
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f004 f823 	bl	8007506 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034cc:	461a      	mov	r2, r3
 80034ce:	2340      	movs	r3, #64	@ 0x40
 80034d0:	6093      	str	r3, [r2, #8]
 80034d2:	e31f      	b.n	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f003 fad0 	bl	8006a82 <USB_ReadChInterrupts>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d11a      	bne.n	8003522 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f8:	461a      	mov	r2, r3
 80034fa:	2308      	movs	r3, #8
 80034fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	334d      	adds	r3, #77	@ 0x4d
 800350e:	2206      	movs	r2, #6
 8003510:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f003 fff3 	bl	8007506 <USB_HC_Halt>
 8003520:	e2f8      	b.n	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f003 faa9 	bl	8006a82 <USB_ReadChInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b10      	cmp	r3, #16
 8003538:	d144      	bne.n	80035c4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3344      	adds	r3, #68	@ 0x44
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	334d      	adds	r3, #77	@ 0x4d
 800355e:	2204      	movs	r2, #4
 8003560:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3319      	adds	r3, #25
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d114      	bne.n	80035a2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3318      	adds	r3, #24
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3319      	adds	r3, #25
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f003 ffab 	bl	8007506 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035bc:	461a      	mov	r2, r3
 80035be:	2310      	movs	r3, #16
 80035c0:	6093      	str	r3, [r2, #8]
 80035c2:	e2a7      	b.n	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 fa58 	bl	8006a82 <USB_ReadChInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d8:	2b80      	cmp	r3, #128	@ 0x80
 80035da:	f040 8083 	bne.w	80036e4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	799b      	ldrb	r3, [r3, #6]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d111      	bne.n	800360a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	334d      	adds	r3, #77	@ 0x4d
 80035f6:	2207      	movs	r2, #7
 80035f8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f003 ff7f 	bl	8007506 <USB_HC_Halt>
 8003608:	e062      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3344      	adds	r3, #68	@ 0x44
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	1c59      	adds	r1, r3, #1
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4403      	add	r3, r0
 800362a:	3344      	adds	r3, #68	@ 0x44
 800362c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3344      	adds	r3, #68	@ 0x44
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d922      	bls.n	800368a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3344      	adds	r3, #68	@ 0x44
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	334c      	adds	r3, #76	@ 0x4c
 8003668:	2204      	movs	r2, #4
 800366a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	334c      	adds	r3, #76	@ 0x4c
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f009 fc90 	bl	800cfa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003688:	e022      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	334c      	adds	r3, #76	@ 0x4c
 800369a:	2202      	movs	r2, #2
 800369c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036b4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036bc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036dc:	461a      	mov	r2, r3
 80036de:	2380      	movs	r3, #128	@ 0x80
 80036e0:	6093      	str	r3, [r2, #8]
 80036e2:	e217      	b.n	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f003 f9c8 	bl	8006a82 <USB_ReadChInterrupts>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fc:	d11b      	bne.n	8003736 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	334d      	adds	r3, #77	@ 0x4d
 800370e:	2209      	movs	r2, #9
 8003710:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f003 fef3 	bl	8007506 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800372c:	461a      	mov	r2, r3
 800372e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003732:	6093      	str	r3, [r2, #8]
 8003734:	e1ee      	b.n	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f003 f99f 	bl	8006a82 <USB_ReadChInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b02      	cmp	r3, #2
 800374c:	f040 81df 	bne.w	8003b0e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800375c:	461a      	mov	r2, r3
 800375e:	2302      	movs	r3, #2
 8003760:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	334d      	adds	r3, #77	@ 0x4d
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	f040 8093 	bne.w	80038a0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	334d      	adds	r3, #77	@ 0x4d
 800378a:	2202      	movs	r2, #2
 800378c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	334c      	adds	r3, #76	@ 0x4c
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3326      	adds	r3, #38	@ 0x26
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d00b      	beq.n	80037d0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3326      	adds	r3, #38	@ 0x26
 80037c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	f040 8190 	bne.w	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	799b      	ldrb	r3, [r3, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d115      	bne.n	8003804 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	333d      	adds	r3, #61	@ 0x3d
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	f083 0301 	eor.w	r3, r3, #1
 80037f0:	b2d8      	uxtb	r0, r3
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	333d      	adds	r3, #61	@ 0x3d
 8003800:	4602      	mov	r2, r0
 8003802:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	799b      	ldrb	r3, [r3, #6]
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 8171 	bne.w	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3334      	adds	r3, #52	@ 0x34
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8165 	beq.w	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	3334      	adds	r3, #52	@ 0x34
 8003836:	6819      	ldr	r1, [r3, #0]
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4403      	add	r3, r0
 8003846:	3328      	adds	r3, #40	@ 0x28
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	440b      	add	r3, r1
 800384c:	1e59      	subs	r1, r3, #1
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4403      	add	r3, r0
 800385c:	3328      	adds	r3, #40	@ 0x28
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	fbb1 f3f3 	udiv	r3, r1, r3
 8003864:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 813f 	beq.w	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	333d      	adds	r3, #61	@ 0x3d
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	f083 0301 	eor.w	r3, r3, #1
 800388a:	b2d8      	uxtb	r0, r3
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	333d      	adds	r3, #61	@ 0x3d
 800389a:	4602      	mov	r2, r0
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e127      	b.n	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	334d      	adds	r3, #77	@ 0x4d
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d120      	bne.n	80038f8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	334d      	adds	r3, #77	@ 0x4d
 80038c6:	2202      	movs	r2, #2
 80038c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	331b      	adds	r3, #27
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	f040 8107 	bne.w	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	334c      	adds	r3, #76	@ 0x4c
 80038f2:	2202      	movs	r2, #2
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e0fb      	b.n	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	334d      	adds	r3, #77	@ 0x4d
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d13a      	bne.n	8003984 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	334d      	adds	r3, #77	@ 0x4d
 800391e:	2202      	movs	r2, #2
 8003920:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	334c      	adds	r3, #76	@ 0x4c
 8003932:	2202      	movs	r2, #2
 8003934:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	331b      	adds	r3, #27
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	f040 80d1 	bne.w	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	331b      	adds	r3, #27
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4413      	add	r3, r2
 800396a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	0151      	lsls	r1, r2, #5
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	440a      	add	r2, r1
 8003978:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800397c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003980:	6053      	str	r3, [r2, #4]
 8003982:	e0b5      	b.n	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	334d      	adds	r3, #77	@ 0x4d
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d114      	bne.n	80039c4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	334d      	adds	r3, #77	@ 0x4d
 80039aa:	2202      	movs	r2, #2
 80039ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	334c      	adds	r3, #76	@ 0x4c
 80039be:	2202      	movs	r2, #2
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e095      	b.n	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	334d      	adds	r3, #77	@ 0x4d
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d114      	bne.n	8003a04 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	334d      	adds	r3, #77	@ 0x4d
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	334c      	adds	r3, #76	@ 0x4c
 80039fe:	2205      	movs	r2, #5
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	e075      	b.n	8003af0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	334d      	adds	r3, #77	@ 0x4d
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b07      	cmp	r3, #7
 8003a18:	d00a      	beq.n	8003a30 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	334d      	adds	r3, #77	@ 0x4d
 8003a2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a2c:	2b09      	cmp	r3, #9
 8003a2e:	d170      	bne.n	8003b12 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	334d      	adds	r3, #77	@ 0x4d
 8003a40:	2202      	movs	r2, #2
 8003a42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	3344      	adds	r3, #68	@ 0x44
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	1c59      	adds	r1, r3, #1
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4403      	add	r3, r0
 8003a64:	3344      	adds	r3, #68	@ 0x44
 8003a66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	3344      	adds	r3, #68	@ 0x44
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d914      	bls.n	8003aa8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3344      	adds	r3, #68	@ 0x44
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	334c      	adds	r3, #76	@ 0x4c
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003aa6:	e022      	b.n	8003aee <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	334c      	adds	r3, #76	@ 0x4c
 8003ab8:	2202      	movs	r2, #2
 8003aba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ad2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ada:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003aee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	334c      	adds	r3, #76	@ 0x4c
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	4619      	mov	r1, r3
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f009 fa4e 	bl	800cfa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b0c:	e002      	b.n	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003b12:	bf00      	nop
  }
}
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b08a      	sub	sp, #40	@ 0x28
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	0c5b      	lsrs	r3, r3, #17
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b4e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d004      	beq.n	8003b60 <HCD_RXQLVL_IRQHandler+0x46>
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b05      	cmp	r3, #5
 8003b5a:	f000 80b6 	beq.w	8003cca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b5e:	e0b7      	b.n	8003cd0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80b3 	beq.w	8003cce <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	332c      	adds	r3, #44	@ 0x2c
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80a7 	beq.w	8003cce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4613      	mov	r3, r2
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	3338      	adds	r3, #56	@ 0x38
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	18d1      	adds	r1, r2, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4403      	add	r3, r0
 8003ba4:	3334      	adds	r3, #52	@ 0x34
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4299      	cmp	r1, r3
 8003baa:	f200 8083 	bhi.w	8003cb4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	332c      	adds	r3, #44	@ 0x2c
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	b292      	uxth	r2, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f002 feef 	bl	80069ac <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	332c      	adds	r3, #44	@ 0x2c
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	18d1      	adds	r1, r2, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4403      	add	r3, r0
 8003bf2:	332c      	adds	r3, #44	@ 0x2c
 8003bf4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	3338      	adds	r3, #56	@ 0x38
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	18d1      	adds	r1, r2, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4403      	add	r3, r0
 8003c1a:	3338      	adds	r3, #56	@ 0x38
 8003c1c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	0cdb      	lsrs	r3, r3, #19
 8003c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c32:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3328      	adds	r3, #40	@ 0x28
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d13f      	bne.n	8003cce <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d03c      	beq.n	8003cce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c6a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c72:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c80:	461a      	mov	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	333c      	adds	r3, #60	@ 0x3c
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	f083 0301 	eor.w	r3, r3, #1
 8003c9c:	b2d8      	uxtb	r0, r3
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	333c      	adds	r3, #60	@ 0x3c
 8003cae:	4602      	mov	r2, r0
 8003cb0:	701a      	strb	r2, [r3, #0]
      break;
 8003cb2:	e00c      	b.n	8003cce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334c      	adds	r3, #76	@ 0x4c
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	701a      	strb	r2, [r3, #0]
      break;
 8003cc8:	e001      	b.n	8003cce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003cce:	bf00      	nop
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	3728      	adds	r7, #40	@ 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003d04:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d10b      	bne.n	8003d28 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d102      	bne.n	8003d20 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f009 f928 	bl	800cf70 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f043 0302 	orr.w	r3, r3, #2
 8003d26:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d132      	bne.n	8003d98 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f043 0308 	orr.w	r3, r3, #8
 8003d38:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d126      	bne.n	8003d92 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	7a5b      	ldrb	r3, [r3, #9]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d113      	bne.n	8003d74 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003d52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d56:	d106      	bne.n	8003d66 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f002 ff9e 	bl	8006ca0 <USB_InitFSLSPClkSel>
 8003d64:	e011      	b.n	8003d8a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f002 ff97 	bl	8006ca0 <USB_InitFSLSPClkSel>
 8003d72:	e00a      	b.n	8003d8a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	79db      	ldrb	r3, [r3, #7]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d106      	bne.n	8003d8a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d82:	461a      	mov	r2, r3
 8003d84:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003d88:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f009 f91e 	bl	800cfcc <HAL_HCD_PortEnabled_Callback>
 8003d90:	e002      	b.n	8003d98 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f009 f928 	bl	800cfe8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d103      	bne.n	8003daa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f043 0320 	orr.w	r3, r3, #32
 8003da8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003db0:	461a      	mov	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	6013      	str	r3, [r2, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e12b      	b.n	800402a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd f880 	bl	8000eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2224      	movs	r2, #36	@ 0x24
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e24:	f001 fa20 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 8003e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4a81      	ldr	r2, [pc, #516]	@ (8004034 <HAL_I2C_Init+0x274>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d807      	bhi.n	8003e44 <HAL_I2C_Init+0x84>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a80      	ldr	r2, [pc, #512]	@ (8004038 <HAL_I2C_Init+0x278>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	bf94      	ite	ls
 8003e3c:	2301      	movls	r3, #1
 8003e3e:	2300      	movhi	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e006      	b.n	8003e52 <HAL_I2C_Init+0x92>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4a7d      	ldr	r2, [pc, #500]	@ (800403c <HAL_I2C_Init+0x27c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	bf94      	ite	ls
 8003e4c:	2301      	movls	r3, #1
 8003e4e:	2300      	movhi	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0e7      	b.n	800402a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a78      	ldr	r2, [pc, #480]	@ (8004040 <HAL_I2C_Init+0x280>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	0c9b      	lsrs	r3, r3, #18
 8003e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4a6a      	ldr	r2, [pc, #424]	@ (8004034 <HAL_I2C_Init+0x274>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d802      	bhi.n	8003e94 <HAL_I2C_Init+0xd4>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	3301      	adds	r3, #1
 8003e92:	e009      	b.n	8003ea8 <HAL_I2C_Init+0xe8>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	4a69      	ldr	r2, [pc, #420]	@ (8004044 <HAL_I2C_Init+0x284>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003eba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	495c      	ldr	r1, [pc, #368]	@ (8004034 <HAL_I2C_Init+0x274>)
 8003ec4:	428b      	cmp	r3, r1
 8003ec6:	d819      	bhi.n	8003efc <HAL_I2C_Init+0x13c>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1e59      	subs	r1, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed6:	1c59      	adds	r1, r3, #1
 8003ed8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003edc:	400b      	ands	r3, r1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_I2C_Init+0x138>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1e59      	subs	r1, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef6:	e051      	b.n	8003f9c <HAL_I2C_Init+0x1dc>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	e04f      	b.n	8003f9c <HAL_I2C_Init+0x1dc>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d111      	bne.n	8003f28 <HAL_I2C_Init+0x168>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1e58      	subs	r0, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	440b      	add	r3, r1
 8003f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f16:	3301      	adds	r3, #1
 8003f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	e012      	b.n	8003f4e <HAL_I2C_Init+0x18e>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1e58      	subs	r0, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6859      	ldr	r1, [r3, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	0099      	lsls	r1, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf0c      	ite	eq
 8003f48:	2301      	moveq	r3, #1
 8003f4a:	2300      	movne	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_Init+0x196>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e022      	b.n	8003f9c <HAL_I2C_Init+0x1dc>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10e      	bne.n	8003f7c <HAL_I2C_Init+0x1bc>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1e58      	subs	r0, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	440b      	add	r3, r1
 8003f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f7a:	e00f      	b.n	8003f9c <HAL_I2C_Init+0x1dc>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1e58      	subs	r0, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	0099      	lsls	r1, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f92:	3301      	adds	r3, #1
 8003f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	6809      	ldr	r1, [r1, #0]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003fca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6911      	ldr	r1, [r2, #16]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68d2      	ldr	r2, [r2, #12]
 8003fd6:	4311      	orrs	r1, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	000186a0 	.word	0x000186a0
 8004038:	001e847f 	.word	0x001e847f
 800403c:	003d08ff 	.word	0x003d08ff
 8004040:	431bde83 	.word	0x431bde83
 8004044:	10624dd3 	.word	0x10624dd3

08004048 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e128      	b.n	80042ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a90      	ldr	r2, [pc, #576]	@ (80042b4 <HAL_I2S_Init+0x26c>)
 8004072:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fc ff81 	bl	8000f7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004090:	f023 030f 	bic.w	r3, r3, #15
 8004094:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2202      	movs	r2, #2
 800409c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d060      	beq.n	8004168 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80040ae:	2310      	movs	r3, #16
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e001      	b.n	80040b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80040b4:	2320      	movs	r3, #32
 80040b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d802      	bhi.n	80040c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80040c6:	2001      	movs	r0, #1
 80040c8:	f001 fa04 	bl	80054d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80040cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040d6:	d125      	bne.n	8004124 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	461a      	mov	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	3305      	adds	r3, #5
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	e01f      	b.n	8004142 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	fbb2 f2f3 	udiv	r2, r2, r3
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	3305      	adds	r3, #5
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	e00e      	b.n	8004142 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	fbb2 f2f3 	udiv	r2, r2, r3
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	fbb2 f3f3 	udiv	r3, r2, r3
 800413e:	3305      	adds	r3, #5
 8004140:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4a5c      	ldr	r2, [pc, #368]	@ (80042b8 <HAL_I2S_Init+0x270>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	08db      	lsrs	r3, r3, #3
 800414c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e003      	b.n	8004170 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004168:	2302      	movs	r3, #2
 800416a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d902      	bls.n	800417c <HAL_I2S_Init+0x134>
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2bff      	cmp	r3, #255	@ 0xff
 800417a:	d907      	bls.n	800418c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004180:	f043 0210 	orr.w	r2, r3, #16
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e08f      	b.n	80042ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	ea42 0103 	orr.w	r1, r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	430a      	orrs	r2, r1
 800419e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80041aa:	f023 030f 	bic.w	r3, r3, #15
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6851      	ldr	r1, [r2, #4]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6892      	ldr	r2, [r2, #8]
 80041b6:	4311      	orrs	r1, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	68d2      	ldr	r2, [r2, #12]
 80041bc:	4311      	orrs	r1, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6992      	ldr	r2, [r2, #24]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d161      	bne.n	800429c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a38      	ldr	r2, [pc, #224]	@ (80042bc <HAL_I2S_Init+0x274>)
 80041dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a37      	ldr	r2, [pc, #220]	@ (80042c0 <HAL_I2S_Init+0x278>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_I2S_Init+0x1a4>
 80041e8:	4b36      	ldr	r3, [pc, #216]	@ (80042c4 <HAL_I2S_Init+0x27c>)
 80041ea:	e001      	b.n	80041f0 <HAL_I2S_Init+0x1a8>
 80041ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	4932      	ldr	r1, [pc, #200]	@ (80042c0 <HAL_I2S_Init+0x278>)
 80041f8:	428a      	cmp	r2, r1
 80041fa:	d101      	bne.n	8004200 <HAL_I2S_Init+0x1b8>
 80041fc:	4a31      	ldr	r2, [pc, #196]	@ (80042c4 <HAL_I2S_Init+0x27c>)
 80041fe:	e001      	b.n	8004204 <HAL_I2S_Init+0x1bc>
 8004200:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004204:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004208:	f023 030f 	bic.w	r3, r3, #15
 800420c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2b      	ldr	r2, [pc, #172]	@ (80042c0 <HAL_I2S_Init+0x278>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <HAL_I2S_Init+0x1d4>
 8004218:	4b2a      	ldr	r3, [pc, #168]	@ (80042c4 <HAL_I2S_Init+0x27c>)
 800421a:	e001      	b.n	8004220 <HAL_I2S_Init+0x1d8>
 800421c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004220:	2202      	movs	r2, #2
 8004222:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a25      	ldr	r2, [pc, #148]	@ (80042c0 <HAL_I2S_Init+0x278>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d101      	bne.n	8004232 <HAL_I2S_Init+0x1ea>
 800422e:	4b25      	ldr	r3, [pc, #148]	@ (80042c4 <HAL_I2S_Init+0x27c>)
 8004230:	e001      	b.n	8004236 <HAL_I2S_Init+0x1ee>
 8004232:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004242:	d003      	beq.n	800424c <HAL_I2S_Init+0x204>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800424c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	e001      	b.n	8004258 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004262:	4313      	orrs	r3, r2
 8004264:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800426c:	4313      	orrs	r3, r2
 800426e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004276:	4313      	orrs	r3, r2
 8004278:	b29a      	uxth	r2, r3
 800427a:	897b      	ldrh	r3, [r7, #10]
 800427c:	4313      	orrs	r3, r2
 800427e:	b29b      	uxth	r3, r3
 8004280:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004284:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a0d      	ldr	r2, [pc, #52]	@ (80042c0 <HAL_I2S_Init+0x278>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d101      	bne.n	8004294 <HAL_I2S_Init+0x24c>
 8004290:	4b0c      	ldr	r3, [pc, #48]	@ (80042c4 <HAL_I2S_Init+0x27c>)
 8004292:	e001      	b.n	8004298 <HAL_I2S_Init+0x250>
 8004294:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004298:	897a      	ldrh	r2, [r7, #10]
 800429a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	080043bf 	.word	0x080043bf
 80042b8:	cccccccd 	.word	0xcccccccd
 80042bc:	080044d5 	.word	0x080044d5
 80042c0:	40003800 	.word	0x40003800
 80042c4:	40003400 	.word	0x40003400

080042c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	881a      	ldrh	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	1c9a      	adds	r2, r3, #2
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10e      	bne.n	8004358 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004348:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff ffb8 	bl	80042c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	b292      	uxth	r2, r2
 8004374:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437a:	1c9a      	adds	r2, r3, #2
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10e      	bne.n	80043b6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff93 	bl	80042dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d13a      	bne.n	8004450 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d109      	bne.n	80043f8 <I2S_IRQHandler+0x3a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ee:	2b40      	cmp	r3, #64	@ 0x40
 80043f0:	d102      	bne.n	80043f8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff ffb4 	bl	8004360 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	d126      	bne.n	8004450 <I2S_IRQHandler+0x92>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d11f      	bne.n	8004450 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800441e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004442:	f043 0202 	orr.w	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ff50 	bl	80042f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b03      	cmp	r3, #3
 800445a:	d136      	bne.n	80044ca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d109      	bne.n	800447a <I2S_IRQHandler+0xbc>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	2b80      	cmp	r3, #128	@ 0x80
 8004472:	d102      	bne.n	800447a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff ff45 	bl	8004304 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b08      	cmp	r3, #8
 8004482:	d122      	bne.n	80044ca <I2S_IRQHandler+0x10c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b20      	cmp	r3, #32
 8004490:	d11b      	bne.n	80044ca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044a0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044bc:	f043 0204 	orr.w	r2, r3, #4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff13 	bl	80042f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a92      	ldr	r2, [pc, #584]	@ (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80044ee:	4b92      	ldr	r3, [pc, #584]	@ (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044f0:	e001      	b.n	80044f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a8b      	ldr	r2, [pc, #556]	@ (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800450c:	4b8a      	ldr	r3, [pc, #552]	@ (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800450e:	e001      	b.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004510:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004520:	d004      	beq.n	800452c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f040 8099 	bne.w	800465e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	d107      	bne.n	8004546 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f925 	bl	8004790 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d107      	bne.n	8004560 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9c8 	bl	80048f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004566:	2b40      	cmp	r3, #64	@ 0x40
 8004568:	d13a      	bne.n	80045e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d035      	beq.n	80045e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6e      	ldr	r2, [pc, #440]	@ (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800457e:	4b6e      	ldr	r3, [pc, #440]	@ (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004580:	e001      	b.n	8004586 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004582:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4969      	ldr	r1, [pc, #420]	@ (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800458e:	428b      	cmp	r3, r1
 8004590:	d101      	bne.n	8004596 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004592:	4b69      	ldr	r3, [pc, #420]	@ (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004594:	e001      	b.n	800459a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004596:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800459a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800459e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d2:	f043 0202 	orr.w	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff fe88 	bl	80042f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	f040 80c3 	bne.w	8004772 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80bd 	beq.w	8004772 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004606:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a49      	ldr	r2, [pc, #292]	@ (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d101      	bne.n	8004616 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004612:	4b49      	ldr	r3, [pc, #292]	@ (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004614:	e001      	b.n	800461a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004616:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4944      	ldr	r1, [pc, #272]	@ (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004622:	428b      	cmp	r3, r1
 8004624:	d101      	bne.n	800462a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004626:	4b44      	ldr	r3, [pc, #272]	@ (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004628:	e001      	b.n	800462e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800462a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800462e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004632:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004634:	2300      	movs	r3, #0
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fe4a 	bl	80042f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800465c:	e089      	b.n	8004772 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d107      	bne.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8be 	bl	80047f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f8fd 	bl	800488c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d12f      	bne.n	80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d02a      	beq.n	80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80046c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046c2:	e001      	b.n	80046c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80046c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4919      	ldr	r1, [pc, #100]	@ (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046d0:	428b      	cmp	r3, r1
 80046d2:	d101      	bne.n	80046d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80046d4:	4b18      	ldr	r3, [pc, #96]	@ (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046d6:	e001      	b.n	80046dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80046d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	f043 0202 	orr.w	r2, r3, #2
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff fdfa 	bl	80042f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	d136      	bne.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d031      	beq.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a07      	ldr	r2, [pc, #28]	@ (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800471a:	4b07      	ldr	r3, [pc, #28]	@ (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800471c:	e001      	b.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800471e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4902      	ldr	r1, [pc, #8]	@ (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800472a:	428b      	cmp	r3, r1
 800472c:	d106      	bne.n	800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800472e:	4b02      	ldr	r3, [pc, #8]	@ (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004730:	e006      	b.n	8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004732:	bf00      	nop
 8004734:	40003800 	.word	0x40003800
 8004738:	40003400 	.word	0x40003400
 800473c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004740:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004744:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004754:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004762:	f043 0204 	orr.w	r2, r3, #4
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fdc0 	bl	80042f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004770:	e000      	b.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004772:	bf00      	nop
}
 8004774:	bf00      	nop
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	1c99      	adds	r1, r3, #2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6251      	str	r1, [r2, #36]	@ 0x24
 80047a2:	881a      	ldrh	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d113      	bne.n	80047ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ffc9 	bl	800477c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	1c99      	adds	r1, r3, #2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6251      	str	r1, [r2, #36]	@ 0x24
 8004806:	8819      	ldrh	r1, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1d      	ldr	r2, [pc, #116]	@ (8004884 <I2SEx_TxISR_I2SExt+0x90>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <I2SEx_TxISR_I2SExt+0x22>
 8004812:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <I2SEx_TxISR_I2SExt+0x94>)
 8004814:	e001      	b.n	800481a <I2SEx_TxISR_I2SExt+0x26>
 8004816:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800481a:	460a      	mov	r2, r1
 800481c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d121      	bne.n	800487a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a12      	ldr	r2, [pc, #72]	@ (8004884 <I2SEx_TxISR_I2SExt+0x90>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <I2SEx_TxISR_I2SExt+0x50>
 8004840:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <I2SEx_TxISR_I2SExt+0x94>)
 8004842:	e001      	b.n	8004848 <I2SEx_TxISR_I2SExt+0x54>
 8004844:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	490d      	ldr	r1, [pc, #52]	@ (8004884 <I2SEx_TxISR_I2SExt+0x90>)
 8004850:	428b      	cmp	r3, r1
 8004852:	d101      	bne.n	8004858 <I2SEx_TxISR_I2SExt+0x64>
 8004854:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <I2SEx_TxISR_I2SExt+0x94>)
 8004856:	e001      	b.n	800485c <I2SEx_TxISR_I2SExt+0x68>
 8004858:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800485c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004860:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff81 	bl	800477c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40003800 	.word	0x40003800
 8004888:	40003400 	.word	0x40003400

0800488c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68d8      	ldr	r0, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	1c99      	adds	r1, r3, #2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80048a4:	b282      	uxth	r2, r0
 80048a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d113      	bne.n	80048e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ff4a 	bl	800477c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a20      	ldr	r2, [pc, #128]	@ (8004980 <I2SEx_RxISR_I2SExt+0x90>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <I2SEx_RxISR_I2SExt+0x16>
 8004902:	4b20      	ldr	r3, [pc, #128]	@ (8004984 <I2SEx_RxISR_I2SExt+0x94>)
 8004904:	e001      	b.n	800490a <I2SEx_RxISR_I2SExt+0x1a>
 8004906:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800490a:	68d8      	ldr	r0, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004910:	1c99      	adds	r1, r3, #2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004916:	b282      	uxth	r2, r0
 8004918:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d121      	bne.n	8004976 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <I2SEx_RxISR_I2SExt+0x90>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <I2SEx_RxISR_I2SExt+0x50>
 800493c:	4b11      	ldr	r3, [pc, #68]	@ (8004984 <I2SEx_RxISR_I2SExt+0x94>)
 800493e:	e001      	b.n	8004944 <I2SEx_RxISR_I2SExt+0x54>
 8004940:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	490d      	ldr	r1, [pc, #52]	@ (8004980 <I2SEx_RxISR_I2SExt+0x90>)
 800494c:	428b      	cmp	r3, r1
 800494e:	d101      	bne.n	8004954 <I2SEx_RxISR_I2SExt+0x64>
 8004950:	4b0c      	ldr	r3, [pc, #48]	@ (8004984 <I2SEx_RxISR_I2SExt+0x94>)
 8004952:	e001      	b.n	8004958 <I2SEx_RxISR_I2SExt+0x68>
 8004954:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004958:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800495c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ff03 	bl	800477c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40003800 	.word	0x40003800
 8004984:	40003400 	.word	0x40003400

08004988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e267      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d075      	beq.n	8004a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049a6:	4b88      	ldr	r3, [pc, #544]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d00c      	beq.n	80049cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049b2:	4b85      	ldr	r3, [pc, #532]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d112      	bne.n	80049e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049be:	4b82      	ldr	r3, [pc, #520]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049ca:	d10b      	bne.n	80049e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049cc:	4b7e      	ldr	r3, [pc, #504]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d05b      	beq.n	8004a90 <HAL_RCC_OscConfig+0x108>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d157      	bne.n	8004a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e242      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ec:	d106      	bne.n	80049fc <HAL_RCC_OscConfig+0x74>
 80049ee:	4b76      	ldr	r3, [pc, #472]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a75      	ldr	r2, [pc, #468]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e01d      	b.n	8004a38 <HAL_RCC_OscConfig+0xb0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x98>
 8004a06:	4b70      	ldr	r3, [pc, #448]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a6f      	ldr	r2, [pc, #444]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4b6d      	ldr	r3, [pc, #436]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a6c      	ldr	r2, [pc, #432]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0xb0>
 8004a20:	4b69      	ldr	r3, [pc, #420]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a68      	ldr	r2, [pc, #416]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	4b66      	ldr	r3, [pc, #408]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a65      	ldr	r2, [pc, #404]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d013      	beq.n	8004a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fc fdc0 	bl	80015c4 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a48:	f7fc fdbc 	bl	80015c4 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	@ 0x64
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e207      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0xc0>
 8004a66:	e014      	b.n	8004a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fc fdac 	bl	80015c4 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a70:	f7fc fda8 	bl	80015c4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	@ 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e1f3      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a82:	4b51      	ldr	r3, [pc, #324]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0xe8>
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d063      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aaa:	4b47      	ldr	r3, [pc, #284]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d11c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab6:	4b44      	ldr	r3, [pc, #272]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d116      	bne.n	8004af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac2:	4b41      	ldr	r3, [pc, #260]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_RCC_OscConfig+0x152>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d001      	beq.n	8004ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e1c7      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ada:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4937      	ldr	r1, [pc, #220]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aee:	e03a      	b.n	8004b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af8:	4b34      	ldr	r3, [pc, #208]	@ (8004bcc <HAL_RCC_OscConfig+0x244>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fc fd61 	bl	80015c4 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b06:	f7fc fd5d 	bl	80015c4 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e1a8      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b24:	4b28      	ldr	r3, [pc, #160]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4925      	ldr	r1, [pc, #148]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]
 8004b38:	e015      	b.n	8004b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3a:	4b24      	ldr	r3, [pc, #144]	@ (8004bcc <HAL_RCC_OscConfig+0x244>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fc fd40 	bl	80015c4 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b48:	f7fc fd3c 	bl	80015c4 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e187      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d036      	beq.n	8004be0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d016      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b7a:	4b15      	ldr	r3, [pc, #84]	@ (8004bd0 <HAL_RCC_OscConfig+0x248>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fc fd20 	bl	80015c4 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b88:	f7fc fd1c 	bl	80015c4 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e167      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0x200>
 8004ba6:	e01b      	b.n	8004be0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba8:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <HAL_RCC_OscConfig+0x248>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bae:	f7fc fd09 	bl	80015c4 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb4:	e00e      	b.n	8004bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb6:	f7fc fd05 	bl	80015c4 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d907      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e150      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	42470000 	.word	0x42470000
 8004bd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd4:	4b88      	ldr	r3, [pc, #544]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ea      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8097 	beq.w	8004d1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf2:	4b81      	ldr	r3, [pc, #516]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10f      	bne.n	8004c1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	4b7d      	ldr	r3, [pc, #500]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c06:	4a7c      	ldr	r2, [pc, #496]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1e:	4b77      	ldr	r3, [pc, #476]	@ (8004dfc <HAL_RCC_OscConfig+0x474>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d118      	bne.n	8004c5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c2a:	4b74      	ldr	r3, [pc, #464]	@ (8004dfc <HAL_RCC_OscConfig+0x474>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a73      	ldr	r2, [pc, #460]	@ (8004dfc <HAL_RCC_OscConfig+0x474>)
 8004c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c36:	f7fc fcc5 	bl	80015c4 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3e:	f7fc fcc1 	bl	80015c4 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e10c      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c50:	4b6a      	ldr	r3, [pc, #424]	@ (8004dfc <HAL_RCC_OscConfig+0x474>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d106      	bne.n	8004c72 <HAL_RCC_OscConfig+0x2ea>
 8004c64:	4b64      	ldr	r3, [pc, #400]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c68:	4a63      	ldr	r2, [pc, #396]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c70:	e01c      	b.n	8004cac <HAL_RCC_OscConfig+0x324>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x30c>
 8004c7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7e:	4a5e      	ldr	r2, [pc, #376]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c80:	f043 0304 	orr.w	r3, r3, #4
 8004c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c86:	4b5c      	ldr	r3, [pc, #368]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8a:	4a5b      	ldr	r2, [pc, #364]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c92:	e00b      	b.n	8004cac <HAL_RCC_OscConfig+0x324>
 8004c94:	4b58      	ldr	r3, [pc, #352]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c98:	4a57      	ldr	r2, [pc, #348]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca0:	4b55      	ldr	r3, [pc, #340]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca4:	4a54      	ldr	r2, [pc, #336]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	f023 0304 	bic.w	r3, r3, #4
 8004caa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d015      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fc fc86 	bl	80015c4 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cbc:	f7fc fc82 	bl	80015c4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e0cb      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd2:	4b49      	ldr	r3, [pc, #292]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0ee      	beq.n	8004cbc <HAL_RCC_OscConfig+0x334>
 8004cde:	e014      	b.n	8004d0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce0:	f7fc fc70 	bl	80015c4 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce8:	f7fc fc6c 	bl	80015c4 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e0b5      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1ee      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d10:	4b39      	ldr	r3, [pc, #228]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	4a38      	ldr	r2, [pc, #224]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80a1 	beq.w	8004e68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d26:	4b34      	ldr	r3, [pc, #208]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d05c      	beq.n	8004dec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d141      	bne.n	8004dbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3a:	4b31      	ldr	r3, [pc, #196]	@ (8004e00 <HAL_RCC_OscConfig+0x478>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d40:	f7fc fc40 	bl	80015c4 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fc fc3c 	bl	80015c4 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e087      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	4b27      	ldr	r3, [pc, #156]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d74:	019b      	lsls	r3, r3, #6
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	061b      	lsls	r3, r3, #24
 8004d8a:	491b      	ldr	r1, [pc, #108]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d90:	4b1b      	ldr	r3, [pc, #108]	@ (8004e00 <HAL_RCC_OscConfig+0x478>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d96:	f7fc fc15 	bl	80015c4 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9e:	f7fc fc11 	bl	80015c4 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e05c      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db0:	4b11      	ldr	r3, [pc, #68]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCC_OscConfig+0x416>
 8004dbc:	e054      	b.n	8004e68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbe:	4b10      	ldr	r3, [pc, #64]	@ (8004e00 <HAL_RCC_OscConfig+0x478>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7fc fbfe 	bl	80015c4 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dcc:	f7fc fbfa 	bl	80015c4 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e045      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dde:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x444>
 8004dea:	e03d      	b.n	8004e68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d107      	bne.n	8004e04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e038      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	40007000 	.word	0x40007000
 8004e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e04:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <HAL_RCC_OscConfig+0x4ec>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d028      	beq.n	8004e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d121      	bne.n	8004e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d11a      	bne.n	8004e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e34:	4013      	ands	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d111      	bne.n	8004e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800

08004e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0cc      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e8c:	4b68      	ldr	r3, [pc, #416]	@ (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d90c      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	4b65      	ldr	r3, [pc, #404]	@ (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b63      	ldr	r3, [pc, #396]	@ (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0b8      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d020      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ecc:	4b59      	ldr	r3, [pc, #356]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4a58      	ldr	r2, [pc, #352]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ed6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ee4:	4b53      	ldr	r3, [pc, #332]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4a52      	ldr	r2, [pc, #328]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef0:	4b50      	ldr	r3, [pc, #320]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	494d      	ldr	r1, [pc, #308]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d044      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d107      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f16:	4b47      	ldr	r3, [pc, #284]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d119      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e07f      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f36:	4b3f      	ldr	r3, [pc, #252]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e06f      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f46:	4b3b      	ldr	r3, [pc, #236]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e067      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f56:	4b37      	ldr	r3, [pc, #220]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f023 0203 	bic.w	r2, r3, #3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4934      	ldr	r1, [pc, #208]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f68:	f7fc fb2c 	bl	80015c4 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6e:	e00a      	b.n	8004f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f70:	f7fc fb28 	bl	80015c4 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e04f      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f86:	4b2b      	ldr	r3, [pc, #172]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 020c 	and.w	r2, r3, #12
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d1eb      	bne.n	8004f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f98:	4b25      	ldr	r3, [pc, #148]	@ (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d20c      	bcs.n	8004fc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b22      	ldr	r3, [pc, #136]	@ (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fae:	4b20      	ldr	r3, [pc, #128]	@ (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e032      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fcc:	4b19      	ldr	r3, [pc, #100]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	4916      	ldr	r1, [pc, #88]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fea:	4b12      	ldr	r3, [pc, #72]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	490e      	ldr	r1, [pc, #56]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ffe:	f000 f821 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8005002:	4602      	mov	r2, r0
 8005004:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	490a      	ldr	r1, [pc, #40]	@ (8005038 <HAL_RCC_ClockConfig+0x1c0>)
 8005010:	5ccb      	ldrb	r3, [r1, r3]
 8005012:	fa22 f303 	lsr.w	r3, r2, r3
 8005016:	4a09      	ldr	r2, [pc, #36]	@ (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800501a:	4b09      	ldr	r3, [pc, #36]	@ (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f7fc f97c 	bl	800131c <HAL_InitTick>

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40023c00 	.word	0x40023c00
 8005034:	40023800 	.word	0x40023800
 8005038:	0800d808 	.word	0x0800d808
 800503c:	20000000 	.word	0x20000000
 8005040:	20000004 	.word	0x20000004

08005044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005048:	b094      	sub	sp, #80	@ 0x50
 800504a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800505c:	4b79      	ldr	r3, [pc, #484]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b08      	cmp	r3, #8
 8005066:	d00d      	beq.n	8005084 <HAL_RCC_GetSysClockFreq+0x40>
 8005068:	2b08      	cmp	r3, #8
 800506a:	f200 80e1 	bhi.w	8005230 <HAL_RCC_GetSysClockFreq+0x1ec>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_RCC_GetSysClockFreq+0x34>
 8005072:	2b04      	cmp	r3, #4
 8005074:	d003      	beq.n	800507e <HAL_RCC_GetSysClockFreq+0x3a>
 8005076:	e0db      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005078:	4b73      	ldr	r3, [pc, #460]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x204>)
 800507a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800507c:	e0db      	b.n	8005236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800507e:	4b73      	ldr	r3, [pc, #460]	@ (800524c <HAL_RCC_GetSysClockFreq+0x208>)
 8005080:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005082:	e0d8      	b.n	8005236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005084:	4b6f      	ldr	r3, [pc, #444]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800508c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800508e:	4b6d      	ldr	r3, [pc, #436]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d063      	beq.n	8005162 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509a:	4b6a      	ldr	r3, [pc, #424]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	099b      	lsrs	r3, r3, #6
 80050a0:	2200      	movs	r2, #0
 80050a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ae:	2300      	movs	r3, #0
 80050b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	f04f 0000 	mov.w	r0, #0
 80050be:	f04f 0100 	mov.w	r1, #0
 80050c2:	0159      	lsls	r1, r3, #5
 80050c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050c8:	0150      	lsls	r0, r2, #5
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4621      	mov	r1, r4
 80050d0:	1a51      	subs	r1, r2, r1
 80050d2:	6139      	str	r1, [r7, #16]
 80050d4:	4629      	mov	r1, r5
 80050d6:	eb63 0301 	sbc.w	r3, r3, r1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050e8:	4659      	mov	r1, fp
 80050ea:	018b      	lsls	r3, r1, #6
 80050ec:	4651      	mov	r1, sl
 80050ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050f2:	4651      	mov	r1, sl
 80050f4:	018a      	lsls	r2, r1, #6
 80050f6:	4651      	mov	r1, sl
 80050f8:	ebb2 0801 	subs.w	r8, r2, r1
 80050fc:	4659      	mov	r1, fp
 80050fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800510e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005116:	4690      	mov	r8, r2
 8005118:	4699      	mov	r9, r3
 800511a:	4623      	mov	r3, r4
 800511c:	eb18 0303 	adds.w	r3, r8, r3
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	462b      	mov	r3, r5
 8005124:	eb49 0303 	adc.w	r3, r9, r3
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005136:	4629      	mov	r1, r5
 8005138:	024b      	lsls	r3, r1, #9
 800513a:	4621      	mov	r1, r4
 800513c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005140:	4621      	mov	r1, r4
 8005142:	024a      	lsls	r2, r1, #9
 8005144:	4610      	mov	r0, r2
 8005146:	4619      	mov	r1, r3
 8005148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514a:	2200      	movs	r2, #0
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800514e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005154:	f7fb f844 	bl	80001e0 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4613      	mov	r3, r2
 800515e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005160:	e058      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005162:	4b38      	ldr	r3, [pc, #224]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	099b      	lsrs	r3, r3, #6
 8005168:	2200      	movs	r2, #0
 800516a:	4618      	mov	r0, r3
 800516c:	4611      	mov	r1, r2
 800516e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	2300      	movs	r3, #0
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
 8005178:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	f04f 0000 	mov.w	r0, #0
 8005184:	f04f 0100 	mov.w	r1, #0
 8005188:	0159      	lsls	r1, r3, #5
 800518a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800518e:	0150      	lsls	r0, r2, #5
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4641      	mov	r1, r8
 8005196:	ebb2 0a01 	subs.w	sl, r2, r1
 800519a:	4649      	mov	r1, r9
 800519c:	eb63 0b01 	sbc.w	fp, r3, r1
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051b4:	ebb2 040a 	subs.w	r4, r2, sl
 80051b8:	eb63 050b 	sbc.w	r5, r3, fp
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	00eb      	lsls	r3, r5, #3
 80051c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ca:	00e2      	lsls	r2, r4, #3
 80051cc:	4614      	mov	r4, r2
 80051ce:	461d      	mov	r5, r3
 80051d0:	4643      	mov	r3, r8
 80051d2:	18e3      	adds	r3, r4, r3
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	464b      	mov	r3, r9
 80051d8:	eb45 0303 	adc.w	r3, r5, r3
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051ea:	4629      	mov	r1, r5
 80051ec:	028b      	lsls	r3, r1, #10
 80051ee:	4621      	mov	r1, r4
 80051f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051f4:	4621      	mov	r1, r4
 80051f6:	028a      	lsls	r2, r1, #10
 80051f8:	4610      	mov	r0, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051fe:	2200      	movs	r2, #0
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	61fa      	str	r2, [r7, #28]
 8005204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005208:	f7fa ffea 	bl	80001e0 <__aeabi_uldivmod>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4613      	mov	r3, r2
 8005212:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005214:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	0c1b      	lsrs	r3, r3, #16
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	3301      	adds	r3, #1
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005224:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800522e:	e002      	b.n	8005236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005230:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x204>)
 8005232:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005238:	4618      	mov	r0, r3
 800523a:	3750      	adds	r7, #80	@ 0x50
 800523c:	46bd      	mov	sp, r7
 800523e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005242:	bf00      	nop
 8005244:	40023800 	.word	0x40023800
 8005248:	00f42400 	.word	0x00f42400
 800524c:	007a1200 	.word	0x007a1200

08005250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005254:	4b03      	ldr	r3, [pc, #12]	@ (8005264 <HAL_RCC_GetHCLKFreq+0x14>)
 8005256:	681b      	ldr	r3, [r3, #0]
}
 8005258:	4618      	mov	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000000 	.word	0x20000000

08005268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800526c:	f7ff fff0 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	0a9b      	lsrs	r3, r3, #10
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	4903      	ldr	r1, [pc, #12]	@ (800528c <HAL_RCC_GetPCLK1Freq+0x24>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40023800 	.word	0x40023800
 800528c:	0800d818 	.word	0x0800d818

08005290 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	220f      	movs	r2, #15
 800529e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052a0:	4b12      	ldr	r3, [pc, #72]	@ (80052ec <HAL_RCC_GetClockConfig+0x5c>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0203 	and.w	r2, r3, #3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052ac:	4b0f      	ldr	r3, [pc, #60]	@ (80052ec <HAL_RCC_GetClockConfig+0x5c>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052b8:	4b0c      	ldr	r3, [pc, #48]	@ (80052ec <HAL_RCC_GetClockConfig+0x5c>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052c4:	4b09      	ldr	r3, [pc, #36]	@ (80052ec <HAL_RCC_GetClockConfig+0x5c>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	08db      	lsrs	r3, r3, #3
 80052ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052d2:	4b07      	ldr	r3, [pc, #28]	@ (80052f0 <HAL_RCC_GetClockConfig+0x60>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0207 	and.w	r2, r3, #7
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	601a      	str	r2, [r3, #0]
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40023c00 	.word	0x40023c00

080052f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d105      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005318:	2b00      	cmp	r3, #0
 800531a:	d038      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800531c:	4b68      	ldr	r3, [pc, #416]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005322:	f7fc f94f 	bl	80015c4 <HAL_GetTick>
 8005326:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005328:	e008      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800532a:	f7fc f94b 	bl	80015c4 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e0bd      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800533c:	4b61      	ldr	r3, [pc, #388]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f0      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	019b      	lsls	r3, r3, #6
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	071b      	lsls	r3, r3, #28
 800535a:	495a      	ldr	r1, [pc, #360]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005362:	4b57      	ldr	r3, [pc, #348]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005368:	f7fc f92c 	bl	80015c4 <HAL_GetTick>
 800536c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005370:	f7fc f928 	bl	80015c4 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e09a      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005382:	4b50      	ldr	r3, [pc, #320]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8083 	beq.w	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	4b48      	ldr	r3, [pc, #288]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	4a47      	ldr	r2, [pc, #284]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ac:	4b45      	ldr	r3, [pc, #276]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053b8:	4b43      	ldr	r3, [pc, #268]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a42      	ldr	r2, [pc, #264]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053c2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053c4:	f7fc f8fe 	bl	80015c4 <HAL_GetTick>
 80053c8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053cc:	f7fc f8fa 	bl	80015c4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e06c      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053de:	4b3a      	ldr	r3, [pc, #232]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f0      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053ea:	4b36      	ldr	r3, [pc, #216]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053f2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d02f      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	429a      	cmp	r2, r3
 8005406:	d028      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005408:	4b2e      	ldr	r3, [pc, #184]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005410:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005412:	4b2e      	ldr	r3, [pc, #184]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005414:	2201      	movs	r2, #1
 8005416:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005418:	4b2c      	ldr	r3, [pc, #176]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800541e:	4a29      	ldr	r2, [pc, #164]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005424:	4b27      	ldr	r3, [pc, #156]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b01      	cmp	r3, #1
 800542e:	d114      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005430:	f7fc f8c8 	bl	80015c4 <HAL_GetTick>
 8005434:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005436:	e00a      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005438:	f7fc f8c4 	bl	80015c4 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e034      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544e:	4b1d      	ldr	r3, [pc, #116]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0ee      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005466:	d10d      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005468:	4b16      	ldr	r3, [pc, #88]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800547c:	4911      	ldr	r1, [pc, #68]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
 8005482:	e005      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005484:	4b0f      	ldr	r3, [pc, #60]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4a0e      	ldr	r2, [pc, #56]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800548e:	6093      	str	r3, [r2, #8]
 8005490:	4b0c      	ldr	r3, [pc, #48]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005492:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800549c:	4909      	ldr	r1, [pc, #36]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	7d1a      	ldrb	r2, [r3, #20]
 80054b2:	4b07      	ldr	r3, [pc, #28]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80054b4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	42470068 	.word	0x42470068
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40007000 	.word	0x40007000
 80054cc:	42470e40 	.word	0x42470e40
 80054d0:	424711e0 	.word	0x424711e0

080054d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d141      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80054f2:	4b25      	ldr	r3, [pc, #148]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005508:	d131      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800550a:	4b20      	ldr	r3, [pc, #128]	@ (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800550c:	617b      	str	r3, [r7, #20]
          break;
 800550e:	e031      	b.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005510:	4b1d      	ldr	r3, [pc, #116]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005518:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800551c:	d109      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800551e:	4b1a      	ldr	r3, [pc, #104]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005528:	4a19      	ldr	r2, [pc, #100]	@ (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800552a:	fbb2 f3f3 	udiv	r3, r2, r3
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	e008      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005532:	4b15      	ldr	r3, [pc, #84]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800553c:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005544:	4b10      	ldr	r3, [pc, #64]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800554a:	099b      	lsrs	r3, r3, #6
 800554c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005558:	4b0b      	ldr	r3, [pc, #44]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800555a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800555e:	0f1b      	lsrs	r3, r3, #28
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	fbb2 f3f3 	udiv	r3, r2, r3
 800556a:	617b      	str	r3, [r7, #20]
          break;
 800556c:	e002      	b.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
          break;
 8005572:	bf00      	nop
        }
      }
      break;
 8005574:	e000      	b.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8005576:	bf00      	nop
    }
  }
  return frequency;
 8005578:	697b      	ldr	r3, [r7, #20]
}
 800557a:	4618      	mov	r0, r3
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40023800 	.word	0x40023800
 800558c:	00bb8000 	.word	0x00bb8000
 8005590:	007a1200 	.word	0x007a1200
 8005594:	00f42400 	.word	0x00f42400

08005598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e07b      	b.n	80056a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d108      	bne.n	80055c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ba:	d009      	beq.n	80055d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	61da      	str	r2, [r3, #28]
 80055c2:	e005      	b.n	80055d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fb fd94 	bl	8001118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005606:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005654:	ea42 0103 	orr.w	r1, r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	0c1b      	lsrs	r3, r3, #16
 800566e:	f003 0104 	and.w	r1, r3, #4
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005676:	f003 0210 	and.w	r2, r3, #16
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005690:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e041      	b.n	8005740 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d106      	bne.n	80056d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7fb fd69 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f000 fc95 	bl	8006018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d001      	beq.n	8005760 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e03c      	b.n	80057da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1e      	ldr	r2, [pc, #120]	@ (80057e8 <HAL_TIM_Base_Start+0xa0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_TIM_Base_Start+0x5c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577a:	d013      	beq.n	80057a4 <HAL_TIM_Base_Start+0x5c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1a      	ldr	r2, [pc, #104]	@ (80057ec <HAL_TIM_Base_Start+0xa4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_TIM_Base_Start+0x5c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a19      	ldr	r2, [pc, #100]	@ (80057f0 <HAL_TIM_Base_Start+0xa8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_TIM_Base_Start+0x5c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a17      	ldr	r2, [pc, #92]	@ (80057f4 <HAL_TIM_Base_Start+0xac>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIM_Base_Start+0x5c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a16      	ldr	r2, [pc, #88]	@ (80057f8 <HAL_TIM_Base_Start+0xb0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d111      	bne.n	80057c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d010      	beq.n	80057d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0201 	orr.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c6:	e007      	b.n	80057d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40010000 	.word	0x40010000
 80057ec:	40000400 	.word	0x40000400
 80057f0:	40000800 	.word	0x40000800
 80057f4:	40000c00 	.word	0x40000c00
 80057f8:	40014000 	.word	0x40014000

080057fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d001      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e044      	b.n	800589e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1e      	ldr	r2, [pc, #120]	@ (80058ac <HAL_TIM_Base_Start_IT+0xb0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d018      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x6c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583e:	d013      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x6c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1a      	ldr	r2, [pc, #104]	@ (80058b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00e      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x6c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a19      	ldr	r2, [pc, #100]	@ (80058b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d009      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x6c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a17      	ldr	r2, [pc, #92]	@ (80058b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x6c>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a16      	ldr	r2, [pc, #88]	@ (80058bc <HAL_TIM_Base_Start_IT+0xc0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d111      	bne.n	800588c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b06      	cmp	r3, #6
 8005878:	d010      	beq.n	800589c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	e007      	b.n	800589c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40014000 	.word	0x40014000

080058c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e041      	b.n	8005956 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f839 	bl	800595e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f000 fb8a 	bl	8006018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d109      	bne.n	8005998 <HAL_TIM_PWM_Start+0x24>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	bf14      	ite	ne
 8005990:	2301      	movne	r3, #1
 8005992:	2300      	moveq	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	e022      	b.n	80059de <HAL_TIM_PWM_Start+0x6a>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b04      	cmp	r3, #4
 800599c:	d109      	bne.n	80059b2 <HAL_TIM_PWM_Start+0x3e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	e015      	b.n	80059de <HAL_TIM_PWM_Start+0x6a>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d109      	bne.n	80059cc <HAL_TIM_PWM_Start+0x58>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e008      	b.n	80059de <HAL_TIM_PWM_Start+0x6a>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	bf14      	ite	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	2300      	moveq	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e068      	b.n	8005ab8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_PWM_Start+0x82>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059f4:	e013      	b.n	8005a1e <HAL_TIM_PWM_Start+0xaa>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d104      	bne.n	8005a06 <HAL_TIM_PWM_Start+0x92>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a04:	e00b      	b.n	8005a1e <HAL_TIM_PWM_Start+0xaa>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d104      	bne.n	8005a16 <HAL_TIM_PWM_Start+0xa2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a14:	e003      	b.n	8005a1e <HAL_TIM_PWM_Start+0xaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fda8 	bl	800657c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a23      	ldr	r2, [pc, #140]	@ (8005ac0 <HAL_TIM_PWM_Start+0x14c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d107      	bne.n	8005a46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac0 <HAL_TIM_PWM_Start+0x14c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d018      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x10e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a58:	d013      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x10e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a19      	ldr	r2, [pc, #100]	@ (8005ac4 <HAL_TIM_PWM_Start+0x150>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00e      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x10e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a17      	ldr	r2, [pc, #92]	@ (8005ac8 <HAL_TIM_PWM_Start+0x154>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x10e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a16      	ldr	r2, [pc, #88]	@ (8005acc <HAL_TIM_PWM_Start+0x158>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x10e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a14      	ldr	r2, [pc, #80]	@ (8005ad0 <HAL_TIM_PWM_Start+0x15c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d111      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b06      	cmp	r3, #6
 8005a92:	d010      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa4:	e007      	b.n	8005ab6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0201 	orr.w	r2, r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	40000800 	.word	0x40000800
 8005acc:	40000c00 	.word	0x40000c00
 8005ad0:	40014000 	.word	0x40014000

08005ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d020      	beq.n	8005b38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01b      	beq.n	8005b38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0202 	mvn.w	r2, #2
 8005b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa5b 	bl	8005fda <HAL_TIM_IC_CaptureCallback>
 8005b24:	e005      	b.n	8005b32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa4d 	bl	8005fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fa5e 	bl	8005fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d020      	beq.n	8005b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01b      	beq.n	8005b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0204 	mvn.w	r2, #4
 8005b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fa35 	bl	8005fda <HAL_TIM_IC_CaptureCallback>
 8005b70:	e005      	b.n	8005b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fa27 	bl	8005fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fa38 	bl	8005fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d020      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01b      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0208 	mvn.w	r2, #8
 8005ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa0f 	bl	8005fda <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa01 	bl	8005fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa12 	bl	8005fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 0310 	and.w	r3, r3, #16
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d020      	beq.n	8005c1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01b      	beq.n	8005c1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0210 	mvn.w	r2, #16
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f9e9 	bl	8005fda <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f9db 	bl	8005fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f9ec 	bl	8005fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00c      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d007      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0201 	mvn.w	r2, #1
 8005c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fb f912 	bl	8000e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00c      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fd2a 	bl	80066b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f9bd 	bl	8006002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00c      	beq.n	8005cac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0220 	mvn.w	r2, #32
 8005ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fcfc 	bl	80066a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e0ae      	b.n	8005e30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b0c      	cmp	r3, #12
 8005cde:	f200 809f 	bhi.w	8005e20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d1d 	.word	0x08005d1d
 8005cec:	08005e21 	.word	0x08005e21
 8005cf0:	08005e21 	.word	0x08005e21
 8005cf4:	08005e21 	.word	0x08005e21
 8005cf8:	08005d5d 	.word	0x08005d5d
 8005cfc:	08005e21 	.word	0x08005e21
 8005d00:	08005e21 	.word	0x08005e21
 8005d04:	08005e21 	.word	0x08005e21
 8005d08:	08005d9f 	.word	0x08005d9f
 8005d0c:	08005e21 	.word	0x08005e21
 8005d10:	08005e21 	.word	0x08005e21
 8005d14:	08005e21 	.word	0x08005e21
 8005d18:	08005ddf 	.word	0x08005ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fa04 	bl	8006130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0208 	orr.w	r2, r2, #8
 8005d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0204 	bic.w	r2, r2, #4
 8005d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6999      	ldr	r1, [r3, #24]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	619a      	str	r2, [r3, #24]
      break;
 8005d5a:	e064      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fa4a 	bl	80061fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6999      	ldr	r1, [r3, #24]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	021a      	lsls	r2, r3, #8
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	619a      	str	r2, [r3, #24]
      break;
 8005d9c:	e043      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fa95 	bl	80062d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0208 	orr.w	r2, r2, #8
 8005db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0204 	bic.w	r2, r2, #4
 8005dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69d9      	ldr	r1, [r3, #28]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	61da      	str	r2, [r3, #28]
      break;
 8005ddc:	e023      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fadf 	bl	80063a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69d9      	ldr	r1, [r3, #28]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	021a      	lsls	r2, r3, #8
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	61da      	str	r2, [r3, #28]
      break;
 8005e1e:	e002      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	75fb      	strb	r3, [r7, #23]
      break;
 8005e24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_TIM_ConfigClockSource+0x1c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e0b4      	b.n	8005fbe <HAL_TIM_ConfigClockSource+0x186>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e8c:	d03e      	beq.n	8005f0c <HAL_TIM_ConfigClockSource+0xd4>
 8005e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e92:	f200 8087 	bhi.w	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e9a:	f000 8086 	beq.w	8005faa <HAL_TIM_ConfigClockSource+0x172>
 8005e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea2:	d87f      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea4:	2b70      	cmp	r3, #112	@ 0x70
 8005ea6:	d01a      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0xa6>
 8005ea8:	2b70      	cmp	r3, #112	@ 0x70
 8005eaa:	d87b      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eac:	2b60      	cmp	r3, #96	@ 0x60
 8005eae:	d050      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x11a>
 8005eb0:	2b60      	cmp	r3, #96	@ 0x60
 8005eb2:	d877      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb4:	2b50      	cmp	r3, #80	@ 0x50
 8005eb6:	d03c      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0xfa>
 8005eb8:	2b50      	cmp	r3, #80	@ 0x50
 8005eba:	d873      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ebc:	2b40      	cmp	r3, #64	@ 0x40
 8005ebe:	d058      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x13a>
 8005ec0:	2b40      	cmp	r3, #64	@ 0x40
 8005ec2:	d86f      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec4:	2b30      	cmp	r3, #48	@ 0x30
 8005ec6:	d064      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ec8:	2b30      	cmp	r3, #48	@ 0x30
 8005eca:	d86b      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d060      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d867      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d05c      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d05a      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005edc:	e062      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eee:	f000 fb25 	bl	800653c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	609a      	str	r2, [r3, #8]
      break;
 8005f0a:	e04f      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f1c:	f000 fb0e 	bl	800653c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f2e:	609a      	str	r2, [r3, #8]
      break;
 8005f30:	e03c      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f000 fa82 	bl	8006448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2150      	movs	r1, #80	@ 0x50
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fadb 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005f50:	e02c      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f000 faa1 	bl	80064a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2160      	movs	r1, #96	@ 0x60
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 facb 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005f70:	e01c      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f000 fa62 	bl	8006448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2140      	movs	r1, #64	@ 0x40
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fabb 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005f90:	e00c      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f000 fab2 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005fa2:	e003      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa8:	e000      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
	...

08006018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a3a      	ldr	r2, [pc, #232]	@ (8006114 <TIM_Base_SetConfig+0xfc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00f      	beq.n	8006050 <TIM_Base_SetConfig+0x38>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006036:	d00b      	beq.n	8006050 <TIM_Base_SetConfig+0x38>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a37      	ldr	r2, [pc, #220]	@ (8006118 <TIM_Base_SetConfig+0x100>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d007      	beq.n	8006050 <TIM_Base_SetConfig+0x38>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a36      	ldr	r2, [pc, #216]	@ (800611c <TIM_Base_SetConfig+0x104>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0x38>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a35      	ldr	r2, [pc, #212]	@ (8006120 <TIM_Base_SetConfig+0x108>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d108      	bne.n	8006062 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2b      	ldr	r2, [pc, #172]	@ (8006114 <TIM_Base_SetConfig+0xfc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01b      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006070:	d017      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a28      	ldr	r2, [pc, #160]	@ (8006118 <TIM_Base_SetConfig+0x100>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a27      	ldr	r2, [pc, #156]	@ (800611c <TIM_Base_SetConfig+0x104>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00f      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a26      	ldr	r2, [pc, #152]	@ (8006120 <TIM_Base_SetConfig+0x108>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a25      	ldr	r2, [pc, #148]	@ (8006124 <TIM_Base_SetConfig+0x10c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a24      	ldr	r2, [pc, #144]	@ (8006128 <TIM_Base_SetConfig+0x110>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a23      	ldr	r2, [pc, #140]	@ (800612c <TIM_Base_SetConfig+0x114>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d108      	bne.n	80060b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0e      	ldr	r2, [pc, #56]	@ (8006114 <TIM_Base_SetConfig+0xfc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d103      	bne.n	80060e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d105      	bne.n	8006106 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f023 0201 	bic.w	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	611a      	str	r2, [r3, #16]
  }
}
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40014000 	.word	0x40014000
 8006128:	40014400 	.word	0x40014400
 800612c:	40014800 	.word	0x40014800

08006130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	f023 0201 	bic.w	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 0302 	bic.w	r3, r3, #2
 8006178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a1c      	ldr	r2, [pc, #112]	@ (80061f8 <TIM_OC1_SetConfig+0xc8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d10c      	bne.n	80061a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0308 	bic.w	r3, r3, #8
 8006192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 0304 	bic.w	r3, r3, #4
 80061a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a13      	ldr	r2, [pc, #76]	@ (80061f8 <TIM_OC1_SetConfig+0xc8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d111      	bne.n	80061d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	621a      	str	r2, [r3, #32]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	40010000 	.word	0x40010000

080061fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	f023 0210 	bic.w	r2, r3, #16
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800622a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0320 	bic.w	r3, r3, #32
 8006246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a1e      	ldr	r2, [pc, #120]	@ (80062d0 <TIM_OC2_SetConfig+0xd4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d10d      	bne.n	8006278 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a15      	ldr	r2, [pc, #84]	@ (80062d0 <TIM_OC2_SetConfig+0xd4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d113      	bne.n	80062a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800628e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40010000 	.word	0x40010000

080062d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800631c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a1d      	ldr	r2, [pc, #116]	@ (80063a4 <TIM_OC3_SetConfig+0xd0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10d      	bne.n	800634e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800634c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a14      	ldr	r2, [pc, #80]	@ (80063a4 <TIM_OC3_SetConfig+0xd0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d113      	bne.n	800637e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800635c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	621a      	str	r2, [r3, #32]
}
 8006398:	bf00      	nop
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40010000 	.word	0x40010000

080063a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	031b      	lsls	r3, r3, #12
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a10      	ldr	r2, [pc, #64]	@ (8006444 <TIM_OC4_SetConfig+0x9c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d109      	bne.n	800641c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800640e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	019b      	lsls	r3, r3, #6
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40010000 	.word	0x40010000

08006448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f023 0201 	bic.w	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f023 030a 	bic.w	r3, r3, #10
 8006484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b087      	sub	sp, #28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	f023 0210 	bic.w	r2, r3, #16
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	f043 0307 	orr.w	r3, r3, #7
 8006528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	431a      	orrs	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	609a      	str	r2, [r3, #8]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2201      	movs	r2, #1
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	43db      	mvns	r3, r3
 800659e:	401a      	ands	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1a      	ldr	r2, [r3, #32]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	fa01 f303 	lsl.w	r3, r1, r3
 80065b4:	431a      	orrs	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065dc:	2302      	movs	r3, #2
 80065de:	e050      	b.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a1c      	ldr	r2, [pc, #112]	@ (8006690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d018      	beq.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662c:	d013      	beq.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a18      	ldr	r2, [pc, #96]	@ (8006694 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00e      	beq.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a16      	ldr	r2, [pc, #88]	@ (8006698 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d009      	beq.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a15      	ldr	r2, [pc, #84]	@ (800669c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d004      	beq.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a13      	ldr	r2, [pc, #76]	@ (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d10c      	bne.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800665c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	4313      	orrs	r3, r2
 8006666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40010000 	.word	0x40010000
 8006694:	40000400 	.word	0x40000400
 8006698:	40000800 	.word	0x40000800
 800669c:	40000c00 	.word	0x40000c00
 80066a0:	40014000 	.word	0x40014000

080066a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066cc:	b084      	sub	sp, #16
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	f107 001c 	add.w	r0, r7, #28
 80066da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d123      	bne.n	800672e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80066fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800670e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006712:	2b01      	cmp	r3, #1
 8006714:	d105      	bne.n	8006722 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f9dc 	bl	8006ae0 <USB_CoreReset>
 8006728:	4603      	mov	r3, r0
 800672a:	73fb      	strb	r3, [r7, #15]
 800672c:	e01b      	b.n	8006766 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9d0 	bl	8006ae0 <USB_CoreReset>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006744:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006750:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	639a      	str	r2, [r3, #56]	@ 0x38
 8006758:	e005      	b.n	8006766 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006766:	7fbb      	ldrb	r3, [r7, #30]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d10b      	bne.n	8006784 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f043 0206 	orr.w	r2, r3, #6
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006790:	b004      	add	sp, #16
 8006792:	4770      	bx	lr

08006794 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f043 0201 	orr.w	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f023 0201 	bic.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d115      	bne.n	8006826 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006806:	200a      	movs	r0, #10
 8006808:	f7fa fee8 	bl	80015dc <HAL_Delay>
      ms += 10U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	330a      	adds	r3, #10
 8006810:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f956 	bl	8006ac4 <USB_GetMode>
 8006818:	4603      	mov	r3, r0
 800681a:	2b01      	cmp	r3, #1
 800681c:	d01e      	beq.n	800685c <USB_SetCurrentMode+0x84>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2bc7      	cmp	r3, #199	@ 0xc7
 8006822:	d9f0      	bls.n	8006806 <USB_SetCurrentMode+0x2e>
 8006824:	e01a      	b.n	800685c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d115      	bne.n	8006858 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006838:	200a      	movs	r0, #10
 800683a:	f7fa fecf 	bl	80015dc <HAL_Delay>
      ms += 10U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	330a      	adds	r3, #10
 8006842:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f93d 	bl	8006ac4 <USB_GetMode>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <USB_SetCurrentMode+0x84>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2bc7      	cmp	r3, #199	@ 0xc7
 8006854:	d9f0      	bls.n	8006838 <USB_SetCurrentMode+0x60>
 8006856:	e001      	b.n	800685c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e005      	b.n	8006868 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006860:	d101      	bne.n	8006866 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3301      	adds	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800688a:	d901      	bls.n	8006890 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e01b      	b.n	80068c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	daf2      	bge.n	800687e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	019b      	lsls	r3, r3, #6
 80068a0:	f043 0220 	orr.w	r2, r3, #32
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068b4:	d901      	bls.n	80068ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e006      	b.n	80068c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d0f0      	beq.n	80068a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3301      	adds	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068ec:	d901      	bls.n	80068f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e018      	b.n	8006924 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	daf2      	bge.n	80068e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2210      	movs	r2, #16
 8006902:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006910:	d901      	bls.n	8006916 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e006      	b.n	8006924 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0310 	and.w	r3, r3, #16
 800691e:	2b10      	cmp	r3, #16
 8006920:	d0f0      	beq.n	8006904 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006930:	b480      	push	{r7}
 8006932:	b089      	sub	sp, #36	@ 0x24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	4611      	mov	r1, r2
 800693c:	461a      	mov	r2, r3
 800693e:	460b      	mov	r3, r1
 8006940:	71fb      	strb	r3, [r7, #7]
 8006942:	4613      	mov	r3, r2
 8006944:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800694e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d123      	bne.n	800699e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006956:	88bb      	ldrh	r3, [r7, #4]
 8006958:	3303      	adds	r3, #3
 800695a:	089b      	lsrs	r3, r3, #2
 800695c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800695e:	2300      	movs	r3, #0
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	e018      	b.n	8006996 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	031a      	lsls	r2, r3, #12
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	4413      	add	r3, r2
 800696c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006970:	461a      	mov	r2, r3
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	3301      	adds	r3, #1
 800697c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3301      	adds	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	3301      	adds	r3, #1
 8006988:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	3301      	adds	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	3301      	adds	r3, #1
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	429a      	cmp	r2, r3
 800699c:	d3e2      	bcc.n	8006964 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3724      	adds	r7, #36	@ 0x24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b08b      	sub	sp, #44	@ 0x2c
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	4613      	mov	r3, r2
 80069b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	089b      	lsrs	r3, r3, #2
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069d2:	2300      	movs	r3, #0
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	e014      	b.n	8006a02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	3301      	adds	r3, #1
 80069e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	3301      	adds	r3, #1
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	3301      	adds	r3, #1
 80069f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	3301      	adds	r3, #1
 80069fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	3301      	adds	r3, #1
 8006a00:	623b      	str	r3, [r7, #32]
 8006a02:	6a3a      	ldr	r2, [r7, #32]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d3e6      	bcc.n	80069d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a0a:	8bfb      	ldrh	r3, [r7, #30]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01e      	beq.n	8006a4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f107 0310 	add.w	r3, r7, #16
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a34:	701a      	strb	r2, [r3, #0]
      i++;
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3e:	3301      	adds	r3, #1
 8006a40:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006a42:	8bfb      	ldrh	r3, [r7, #30]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a48:	8bfb      	ldrh	r3, [r7, #30]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1ea      	bne.n	8006a24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	372c      	adds	r7, #44	@ 0x2c
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4013      	ands	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a74:	68fb      	ldr	r3, [r7, #12]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b085      	sub	sp, #20
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3301      	adds	r3, #1
 8006af0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006af8:	d901      	bls.n	8006afe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e01b      	b.n	8006b36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	daf2      	bge.n	8006aec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f043 0201 	orr.w	r2, r3, #1
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b22:	d901      	bls.n	8006b28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e006      	b.n	8006b36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d0f0      	beq.n	8006b16 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
	...

08006b44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b44:	b084      	sub	sp, #16
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b086      	sub	sp, #24
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b64:	461a      	mov	r2, r3
 8006b66:	2300      	movs	r3, #0
 8006b68:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b86:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d119      	bne.n	8006bce <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d10a      	bne.n	8006bb8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bb0:	f043 0304 	orr.w	r3, r3, #4
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	e014      	b.n	8006be2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bc6:	f023 0304 	bic.w	r3, r3, #4
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	e009      	b.n	8006be2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bdc:	f023 0304 	bic.w	r3, r3, #4
 8006be0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006be2:	2110      	movs	r1, #16
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff fe43 	bl	8006870 <USB_FlushTxFifo>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff fe6d 	bl	80068d4 <USB_FlushRxFifo>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c04:	2300      	movs	r3, #0
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	e015      	b.n	8006c36 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c16:	461a      	mov	r2, r3
 8006c18:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	3301      	adds	r3, #1
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d3e3      	bcc.n	8006c0a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4e:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2280      	movs	r2, #128	@ 0x80
 8006c54:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a0e      	ldr	r2, [pc, #56]	@ (8006c94 <USB_HostInit+0x150>)
 8006c5a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006c98 <USB_HostInit+0x154>)
 8006c60:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d105      	bne.n	8006c78 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	f043 0210 	orr.w	r2, r3, #16
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <USB_HostInit+0x158>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c90:	b004      	add	sp, #16
 8006c92:	4770      	bx	lr
 8006c94:	00600080 	.word	0x00600080
 8006c98:	004000e0 	.word	0x004000e0
 8006c9c:	a3200008 	.word	0xa3200008

08006ca0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006cbe:	f023 0303 	bic.w	r3, r3, #3
 8006cc2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	68f9      	ldr	r1, [r7, #12]
 8006cd4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d107      	bne.n	8006cf2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006cee:	6053      	str	r3, [r2, #4]
 8006cf0:	e00c      	b.n	8006d0c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d107      	bne.n	8006d08 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006d04:	6053      	str	r3, [r2, #4]
 8006d06:	e001      	b.n	8006d0c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006d3a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d48:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006d4a:	2064      	movs	r0, #100	@ 0x64
 8006d4c:	f7fa fc46 	bl	80015dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d5c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006d5e:	200a      	movs	r0, #10
 8006d60:	f7fa fc3c 	bl	80015dc <HAL_Delay>

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006d92:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <USB_DriveVbus+0x44>
 8006d9e:	78fb      	ldrb	r3, [r7, #3]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d106      	bne.n	8006db2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006dac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006db0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dbc:	d109      	bne.n	8006dd2 <USB_DriveVbus+0x64>
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d106      	bne.n	8006dd2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006dcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dd0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	0c5b      	lsrs	r3, r3, #17
 8006dfe:	f003 0303 	and.w	r3, r3, #3
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	b29b      	uxth	r3, r3
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	4608      	mov	r0, r1
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	70fb      	strb	r3, [r7, #3]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70bb      	strb	r3, [r7, #2]
 8006e46:	4613      	mov	r3, r2
 8006e48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f04f 33ff 	mov.w	r3, #4294967295
 8006e64:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006e66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d867      	bhi.n	8006f3e <USB_HC_Init+0x10e>
 8006e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e74 <USB_HC_Init+0x44>)
 8006e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e74:	08006e85 	.word	0x08006e85
 8006e78:	08006f01 	.word	0x08006f01
 8006e7c:	08006e85 	.word	0x08006e85
 8006e80:	08006ec3 	.word	0x08006ec3
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e90:	461a      	mov	r2, r3
 8006e92:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006e96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006e98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	da51      	bge.n	8006f44 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	78fa      	ldrb	r2, [r7, #3]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ebe:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006ec0:	e040      	b.n	8006f44 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ec2:	78fb      	ldrb	r3, [r7, #3]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006ed4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ed6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	da34      	bge.n	8006f48 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	78fa      	ldrb	r2, [r7, #3]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006efc:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006efe:	e023      	b.n	8006f48 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f240 2325 	movw	r3, #549	@ 0x225
 8006f12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	da17      	bge.n	8006f4c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f36:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006f3a:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006f3c:	e006      	b.n	8006f4c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	77fb      	strb	r3, [r7, #31]
      break;
 8006f42:	e004      	b.n	8006f4e <USB_HC_Init+0x11e>
      break;
 8006f44:	bf00      	nop
 8006f46:	e002      	b.n	8006f4e <USB_HC_Init+0x11e>
      break;
 8006f48:	bf00      	nop
 8006f4a:	e000      	b.n	8006f4e <USB_HC_Init+0x11e>
      break;
 8006f4c:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	78fa      	ldrb	r2, [r7, #3]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f7a:	f043 0302 	orr.w	r3, r3, #2
 8006f7e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	2101      	movs	r1, #1
 8006f90:	fa01 f303 	lsl.w	r3, r1, r3
 8006f94:	6939      	ldr	r1, [r7, #16]
 8006f96:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006faa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	da03      	bge.n	8006fba <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fb6:	61bb      	str	r3, [r7, #24]
 8006fb8:	e001      	b.n	8006fbe <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff ff0e 	bl	8006de0 <USB_GetHostSpeed>
 8006fc4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d106      	bne.n	8006fdc <USB_HC_Init+0x1ac>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d003      	beq.n	8006fdc <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	e001      	b.n	8006fe0 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006fe0:	787b      	ldrb	r3, [r7, #1]
 8006fe2:	059b      	lsls	r3, r3, #22
 8006fe4:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006fe8:	78bb      	ldrb	r3, [r7, #2]
 8006fea:	02db      	lsls	r3, r3, #11
 8006fec:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ff0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ff2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ff6:	049b      	lsls	r3, r3, #18
 8006ff8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ffc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006ffe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007000:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007004:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	431a      	orrs	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	0151      	lsls	r1, r2, #5
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	440a      	add	r2, r1
 8007016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800701a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800701e:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007020:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007024:	2b03      	cmp	r3, #3
 8007026:	d003      	beq.n	8007030 <USB_HC_Init+0x200>
 8007028:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800702c:	2b01      	cmp	r3, #1
 800702e:	d10f      	bne.n	8007050 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	4413      	add	r3, r2
 8007038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	440a      	add	r2, r1
 8007046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800704a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800704e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007050:	7ffb      	ldrb	r3, [r7, #31]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop

0800705c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08c      	sub	sp, #48	@ 0x30
 8007060:	af02      	add	r7, sp, #8
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	4613      	mov	r3, r2
 8007068:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	785b      	ldrb	r3, [r3, #1]
 8007072:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007078:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	799b      	ldrb	r3, [r3, #6]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d158      	bne.n	8007134 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007082:	2301      	movs	r3, #1
 8007084:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	78db      	ldrb	r3, [r3, #3]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800708e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	8a92      	ldrh	r2, [r2, #20]
 8007094:	fb03 f202 	mul.w	r2, r3, r2
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	61da      	str	r2, [r3, #28]
 800709c:	e079      	b.n	8007192 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	7c9b      	ldrb	r3, [r3, #18]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d130      	bne.n	8007108 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	2bbc      	cmp	r3, #188	@ 0xbc
 80070ac:	d918      	bls.n	80070e0 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	8a9b      	ldrh	r3, [r3, #20]
 80070b2:	461a      	mov	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	69da      	ldr	r2, [r3, #28]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d003      	beq.n	80070d0 <USB_HC_StartXfer+0x74>
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d103      	bne.n	80070d8 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2202      	movs	r2, #2
 80070d4:	60da      	str	r2, [r3, #12]
 80070d6:	e05c      	b.n	8007192 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2201      	movs	r2, #1
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	e058      	b.n	8007192 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	6a1a      	ldr	r2, [r3, #32]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d007      	beq.n	8007100 <USB_HC_StartXfer+0xa4>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d003      	beq.n	8007100 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2204      	movs	r2, #4
 80070fc:	60da      	str	r2, [r3, #12]
 80070fe:	e048      	b.n	8007192 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2203      	movs	r2, #3
 8007104:	60da      	str	r2, [r3, #12]
 8007106:	e044      	b.n	8007192 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d10d      	bne.n	800712a <USB_HC_StartXfer+0xce>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	8a92      	ldrh	r2, [r2, #20]
 8007116:	4293      	cmp	r3, r2
 8007118:	d907      	bls.n	800712a <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800711a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	8a92      	ldrh	r2, [r2, #20]
 8007120:	fb03 f202 	mul.w	r2, r3, r2
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	61da      	str	r2, [r3, #28]
 8007128:	e033      	b.n	8007192 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6a1a      	ldr	r2, [r3, #32]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	61da      	str	r2, [r3, #28]
 8007132:	e02e      	b.n	8007192 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d018      	beq.n	800716e <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	8a92      	ldrh	r2, [r2, #20]
 8007144:	4413      	add	r3, r2
 8007146:	3b01      	subs	r3, #1
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	8a92      	ldrh	r2, [r2, #20]
 800714c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007150:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007152:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007154:	8b7b      	ldrh	r3, [r7, #26]
 8007156:	429a      	cmp	r2, r3
 8007158:	d90b      	bls.n	8007172 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800715a:	8b7b      	ldrh	r3, [r7, #26]
 800715c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800715e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	8a92      	ldrh	r2, [r2, #20]
 8007164:	fb03 f202 	mul.w	r2, r3, r2
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	61da      	str	r2, [r3, #28]
 800716c:	e001      	b.n	8007172 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800716e:	2301      	movs	r3, #1
 8007170:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	78db      	ldrb	r3, [r3, #3]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d007      	beq.n	800718a <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800717a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	8a92      	ldrh	r2, [r2, #20]
 8007180:	fb03 f202 	mul.w	r2, r3, r2
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	61da      	str	r2, [r3, #28]
 8007188:	e003      	b.n	8007192 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	6a1a      	ldr	r2, [r3, #32]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800719a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800719c:	04d9      	lsls	r1, r3, #19
 800719e:	4ba4      	ldr	r3, [pc, #656]	@ (8007430 <USB_HC_StartXfer+0x3d4>)
 80071a0:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071a2:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	7d9b      	ldrb	r3, [r3, #22]
 80071a8:	075b      	lsls	r3, r3, #29
 80071aa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071ae:	69f9      	ldr	r1, [r7, #28]
 80071b0:	0148      	lsls	r0, r1, #5
 80071b2:	6a39      	ldr	r1, [r7, #32]
 80071b4:	4401      	add	r1, r0
 80071b6:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071ba:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071bc:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6999      	ldr	r1, [r3, #24]
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d4:	460a      	mov	r2, r1
 80071d6:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bf0c      	ite	eq
 80071e8:	2301      	moveq	r3, #1
 80071ea:	2300      	movne	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	6a3a      	ldr	r2, [r7, #32]
 8007204:	440a      	add	r2, r1
 8007206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800720a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800720e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	4413      	add	r3, r2
 8007218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	7e7b      	ldrb	r3, [r7, #25]
 8007220:	075b      	lsls	r3, r3, #29
 8007222:	69f9      	ldr	r1, [r7, #28]
 8007224:	0148      	lsls	r0, r1, #5
 8007226:	6a39      	ldr	r1, [r7, #32]
 8007228:	4401      	add	r1, r0
 800722a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800722e:	4313      	orrs	r3, r2
 8007230:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	799b      	ldrb	r3, [r3, #6]
 8007236:	2b01      	cmp	r3, #1
 8007238:	f040 80c4 	bne.w	80073c4 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	7c5b      	ldrb	r3, [r3, #17]
 8007240:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007246:	4313      	orrs	r3, r2
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	0151      	lsls	r1, r2, #5
 800724c:	6a3a      	ldr	r2, [r7, #32]
 800724e:	440a      	add	r2, r1
 8007250:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007254:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007258:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	4413      	add	r3, r2
 8007262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	69fa      	ldr	r2, [r7, #28]
 800726a:	0151      	lsls	r1, r2, #5
 800726c:	6a3a      	ldr	r2, [r7, #32]
 800726e:	440a      	add	r2, r1
 8007270:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007274:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007278:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	79db      	ldrb	r3, [r3, #7]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d123      	bne.n	80072ca <USB_HC_StartXfer+0x26e>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	78db      	ldrb	r3, [r3, #3]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d11f      	bne.n	80072ca <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	4413      	add	r3, r2
 8007292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072a8:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	0151      	lsls	r1, r2, #5
 80072bc:	6a3a      	ldr	r2, [r7, #32]
 80072be:	440a      	add	r2, r1
 80072c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072c8:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	7c9b      	ldrb	r3, [r3, #18]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d003      	beq.n	80072da <USB_HC_StartXfer+0x27e>
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	7c9b      	ldrb	r3, [r3, #18]
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d117      	bne.n	800730a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d113      	bne.n	800730a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	78db      	ldrb	r3, [r3, #3]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d10f      	bne.n	800730a <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	0151      	lsls	r1, r2, #5
 80072fc:	6a3a      	ldr	r2, [r7, #32]
 80072fe:	440a      	add	r2, r1
 8007300:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007308:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	7c9b      	ldrb	r3, [r3, #18]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d163      	bne.n	80073da <USB_HC_StartXfer+0x37e>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	78db      	ldrb	r3, [r3, #3]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d15f      	bne.n	80073da <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	3b01      	subs	r3, #1
 8007320:	2b03      	cmp	r3, #3
 8007322:	d859      	bhi.n	80073d8 <USB_HC_StartXfer+0x37c>
 8007324:	a201      	add	r2, pc, #4	@ (adr r2, 800732c <USB_HC_StartXfer+0x2d0>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	0800733d 	.word	0x0800733d
 8007330:	0800735f 	.word	0x0800735f
 8007334:	08007381 	.word	0x08007381
 8007338:	080073a3 	.word	0x080073a3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	4413      	add	r3, r2
 8007344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	6a3a      	ldr	r2, [r7, #32]
 8007350:	440a      	add	r2, r1
 8007352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800735a:	6053      	str	r3, [r2, #4]
          break;
 800735c:	e03d      	b.n	80073da <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	4413      	add	r3, r2
 8007366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	6a3a      	ldr	r2, [r7, #32]
 8007372:	440a      	add	r2, r1
 8007374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007378:	f043 030e 	orr.w	r3, r3, #14
 800737c:	6053      	str	r3, [r2, #4]
          break;
 800737e:	e02c      	b.n	80073da <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	4413      	add	r3, r2
 8007388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	6a3a      	ldr	r2, [r7, #32]
 8007394:	440a      	add	r2, r1
 8007396:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800739a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800739e:	6053      	str	r3, [r2, #4]
          break;
 80073a0:	e01b      	b.n	80073da <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	6a3a      	ldr	r2, [r7, #32]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073c0:	6053      	str	r3, [r2, #4]
          break;
 80073c2:	e00a      	b.n	80073da <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073d0:	461a      	mov	r2, r3
 80073d2:	2300      	movs	r3, #0
 80073d4:	6053      	str	r3, [r2, #4]
 80073d6:	e000      	b.n	80073da <USB_HC_StartXfer+0x37e>
          break;
 80073d8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80073f0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	78db      	ldrb	r3, [r3, #3]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	e003      	b.n	800740c <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800740a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007412:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	4413      	add	r3, r2
 800741c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007420:	461a      	mov	r2, r3
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d003      	beq.n	8007434 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e055      	b.n	80074dc <USB_HC_StartXfer+0x480>
 8007430:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	78db      	ldrb	r3, [r3, #3]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d14e      	bne.n	80074da <USB_HC_StartXfer+0x47e>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d04a      	beq.n	80074da <USB_HC_StartXfer+0x47e>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	79db      	ldrb	r3, [r3, #7]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d146      	bne.n	80074da <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	7c9b      	ldrb	r3, [r3, #18]
 8007450:	2b03      	cmp	r3, #3
 8007452:	d831      	bhi.n	80074b8 <USB_HC_StartXfer+0x45c>
 8007454:	a201      	add	r2, pc, #4	@ (adr r2, 800745c <USB_HC_StartXfer+0x400>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	0800746d 	.word	0x0800746d
 8007460:	08007491 	.word	0x08007491
 8007464:	0800746d 	.word	0x0800746d
 8007468:	08007491 	.word	0x08007491
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	3303      	adds	r3, #3
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007476:	8afa      	ldrh	r2, [r7, #22]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747c:	b29b      	uxth	r3, r3
 800747e:	429a      	cmp	r2, r3
 8007480:	d91c      	bls.n	80074bc <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	f043 0220 	orr.w	r2, r3, #32
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	619a      	str	r2, [r3, #24]
        }
        break;
 800748e:	e015      	b.n	80074bc <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	3303      	adds	r3, #3
 8007496:	089b      	lsrs	r3, r3, #2
 8007498:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800749a:	8afa      	ldrh	r2, [r7, #22]
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d90a      	bls.n	80074c0 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80074b6:	e003      	b.n	80074c0 <USB_HC_StartXfer+0x464>

      default:
        break;
 80074b8:	bf00      	nop
 80074ba:	e002      	b.n	80074c2 <USB_HC_StartXfer+0x466>
        break;
 80074bc:	bf00      	nop
 80074be:	e000      	b.n	80074c2 <USB_HC_StartXfer+0x466>
        break;
 80074c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6999      	ldr	r1, [r3, #24]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	785a      	ldrb	r2, [r3, #1]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2000      	movs	r0, #0
 80074d2:	9000      	str	r0, [sp, #0]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff fa2b 	bl	8006930 <USB_WritePacket>
  }

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3728      	adds	r7, #40	@ 0x28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	b29b      	uxth	r3, r3
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007506:	b480      	push	{r7}
 8007508:	b089      	sub	sp, #36	@ 0x24
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	0c9b      	lsrs	r3, r3, #18
 800752e:	f003 0303 	and.w	r3, r3, #3
 8007532:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	4413      	add	r3, r2
 800753c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	0fdb      	lsrs	r3, r3, #31
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	0fdb      	lsrs	r3, r3, #31
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b20      	cmp	r3, #32
 800756a:	d10d      	bne.n	8007588 <USB_HC_Halt+0x82>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10a      	bne.n	8007588 <USB_HC_Halt+0x82>
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d002      	beq.n	8007584 <USB_HC_Halt+0x7e>
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b03      	cmp	r3, #3
 8007582:	d101      	bne.n	8007588 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	e0d8      	b.n	800773a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <USB_HC_Halt+0x8e>
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d173      	bne.n	800767c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	4413      	add	r3, r2
 800759c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d14a      	bne.n	8007656 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d133      	bne.n	8007634 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	0151      	lsls	r1, r2, #5
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	440a      	add	r2, r1
 80075e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075ea:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	440a      	add	r2, r1
 8007602:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007606:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800760a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	3301      	adds	r3, #1
 8007610:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007618:	d82e      	bhi.n	8007678 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800762c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007630:	d0ec      	beq.n	800760c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007632:	e081      	b.n	8007738 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	440a      	add	r2, r1
 800764a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800764e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007652:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007654:	e070      	b.n	8007738 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	440a      	add	r2, r1
 800766c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007670:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007674:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007676:	e05f      	b.n	8007738 <USB_HC_Halt+0x232>
            break;
 8007678:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800767a:	e05d      	b.n	8007738 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	440a      	add	r2, r1
 8007692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007696:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800769a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d133      	bne.n	8007714 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	0151      	lsls	r1, r2, #5
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	440a      	add	r2, r1
 80076c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076ea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	3301      	adds	r3, #1
 80076f0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80076f8:	d81d      	bhi.n	8007736 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800770c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007710:	d0ec      	beq.n	80076ec <USB_HC_Halt+0x1e6>
 8007712:	e011      	b.n	8007738 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	4413      	add	r3, r2
 800771c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	440a      	add	r2, r1
 800772a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800772e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	e000      	b.n	8007738 <USB_HC_Halt+0x232>
          break;
 8007736:	bf00      	nop
    }
  }

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3724      	adds	r7, #36	@ 0x24
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b088      	sub	sp, #32
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff f82b 	bl	80067b6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007760:	2110      	movs	r1, #16
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff f884 	bl	8006870 <USB_FlushTxFifo>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff f8ae 	bl	80068d4 <USB_FlushRxFifo>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007782:	2300      	movs	r3, #0
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	e01f      	b.n	80077c8 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	4413      	add	r3, r2
 8007790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800779e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077a6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077ae:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077bc:	461a      	mov	r2, r3
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	3301      	adds	r3, #1
 80077c6:	61bb      	str	r3, [r7, #24]
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	2b0f      	cmp	r3, #15
 80077cc:	d9dc      	bls.n	8007788 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80077ce:	2300      	movs	r3, #0
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	e034      	b.n	800783e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077ea:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077f2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077fa:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	4413      	add	r3, r2
 8007804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007808:	461a      	mov	r2, r3
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3301      	adds	r3, #1
 8007812:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800781a:	d80c      	bhi.n	8007836 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	4413      	add	r3, r2
 8007824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800782e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007832:	d0ec      	beq.n	800780e <USB_StopHost+0xc8>
 8007834:	e000      	b.n	8007838 <USB_StopHost+0xf2>
        break;
 8007836:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	3301      	adds	r3, #1
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	2b0f      	cmp	r3, #15
 8007842:	d9c7      	bls.n	80077d4 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800784a:	461a      	mov	r2, r3
 800784c:	f04f 33ff 	mov.w	r3, #4294967295
 8007850:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f04f 32ff 	mov.w	r2, #4294967295
 8007858:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fe ff9a 	bl	8006794 <USB_EnableGlobalInt>

  return ret;
 8007860:	7ffb      	ldrb	r3, [r7, #31]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800786a:	b590      	push	{r4, r7, lr}
 800786c:	b089      	sub	sp, #36	@ 0x24
 800786e:	af04      	add	r7, sp, #16
 8007870:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007872:	2301      	movs	r3, #1
 8007874:	2202      	movs	r2, #2
 8007876:	2102      	movs	r1, #2
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fcd2 	bl	8008222 <USBH_FindInterface>
 800787e:	4603      	mov	r3, r0
 8007880:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	2bff      	cmp	r3, #255	@ 0xff
 8007886:	d002      	beq.n	800788e <USBH_CDC_InterfaceInit+0x24>
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d901      	bls.n	8007892 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800788e:	2302      	movs	r3, #2
 8007890:	e13d      	b.n	8007b0e <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fca7 	bl	80081ea <USBH_SelectInterface>
 800789c:	4603      	mov	r3, r0
 800789e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80078a6:	2302      	movs	r3, #2
 80078a8:	e131      	b.n	8007b0e <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80078b0:	2050      	movs	r0, #80	@ 0x50
 80078b2:	f005 fd9d 	bl	800d3f0 <malloc>
 80078b6:	4603      	mov	r3, r0
 80078b8:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80078ca:	2302      	movs	r3, #2
 80078cc:	e11f      	b.n	8007b0e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80078ce:	2250      	movs	r2, #80	@ 0x50
 80078d0:	2100      	movs	r1, #0
 80078d2:	68b8      	ldr	r0, [r7, #8]
 80078d4:	f005 fe4a 	bl	800d56c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	211a      	movs	r1, #26
 80078de:	fb01 f303 	mul.w	r3, r1, r3
 80078e2:	4413      	add	r3, r2
 80078e4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b25b      	sxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	da15      	bge.n	800791c <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	211a      	movs	r1, #26
 80078f6:	fb01 f303 	mul.w	r3, r1, r3
 80078fa:	4413      	add	r3, r2
 80078fc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007900:	781a      	ldrb	r2, [r3, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	211a      	movs	r1, #26
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	4413      	add	r3, r2
 8007912:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007916:	881a      	ldrh	r2, [r3, #0]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f002 fa19 	bl	8009d5a <USBH_AllocPipe>
 8007928:	4603      	mov	r3, r0
 800792a:	461a      	mov	r2, r3
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	7819      	ldrb	r1, [r3, #0]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	7858      	ldrb	r0, [r3, #1]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	8952      	ldrh	r2, [r2, #10]
 8007948:	9202      	str	r2, [sp, #8]
 800794a:	2203      	movs	r2, #3
 800794c:	9201      	str	r2, [sp, #4]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4623      	mov	r3, r4
 8007952:	4602      	mov	r2, r0
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f002 f9d1 	bl	8009cfc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2200      	movs	r2, #0
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f005 fcbe 	bl	800d2e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007968:	2300      	movs	r3, #0
 800796a:	2200      	movs	r2, #0
 800796c:	210a      	movs	r1, #10
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fc57 	bl	8008222 <USBH_FindInterface>
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	2bff      	cmp	r3, #255	@ 0xff
 800797c:	d002      	beq.n	8007984 <USBH_CDC_InterfaceInit+0x11a>
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d901      	bls.n	8007988 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007984:	2302      	movs	r3, #2
 8007986:	e0c2      	b.n	8007b0e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	211a      	movs	r1, #26
 800798e:	fb01 f303 	mul.w	r3, r1, r3
 8007992:	4413      	add	r3, r2
 8007994:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	b25b      	sxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	da16      	bge.n	80079ce <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	211a      	movs	r1, #26
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80079b0:	781a      	ldrb	r2, [r3, #0]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	211a      	movs	r1, #26
 80079bc:	fb01 f303 	mul.w	r3, r1, r3
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80079c6:	881a      	ldrh	r2, [r3, #0]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	835a      	strh	r2, [r3, #26]
 80079cc:	e015      	b.n	80079fa <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	211a      	movs	r1, #26
 80079d4:	fb01 f303 	mul.w	r3, r1, r3
 80079d8:	4413      	add	r3, r2
 80079da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80079de:	781a      	ldrb	r2, [r3, #0]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	211a      	movs	r1, #26
 80079ea:	fb01 f303 	mul.w	r3, r1, r3
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80079f4:	881a      	ldrh	r2, [r3, #0]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	211a      	movs	r1, #26
 8007a00:	fb01 f303 	mul.w	r3, r1, r3
 8007a04:	4413      	add	r3, r2
 8007a06:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	b25b      	sxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	da16      	bge.n	8007a40 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	211a      	movs	r1, #26
 8007a18:	fb01 f303 	mul.w	r3, r1, r3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007a22:	781a      	ldrb	r2, [r3, #0]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	211a      	movs	r1, #26
 8007a2e:	fb01 f303 	mul.w	r3, r1, r3
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007a38:	881a      	ldrh	r2, [r3, #0]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	835a      	strh	r2, [r3, #26]
 8007a3e:	e015      	b.n	8007a6c <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	211a      	movs	r1, #26
 8007a46:	fb01 f303 	mul.w	r3, r1, r3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	211a      	movs	r1, #26
 8007a5c:	fb01 f303 	mul.w	r3, r1, r3
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007a66:	881a      	ldrh	r2, [r3, #0]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	7b9b      	ldrb	r3, [r3, #14]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f002 f971 	bl	8009d5a <USBH_AllocPipe>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	7bdb      	ldrb	r3, [r3, #15]
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f002 f967 	bl	8009d5a <USBH_AllocPipe>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	7b59      	ldrb	r1, [r3, #13]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	7b98      	ldrb	r0, [r3, #14]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	8b12      	ldrh	r2, [r2, #24]
 8007aac:	9202      	str	r2, [sp, #8]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	9201      	str	r2, [sp, #4]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f002 f91f 	bl	8009cfc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	7b19      	ldrb	r1, [r3, #12]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	7bd8      	ldrb	r0, [r3, #15]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	8b52      	ldrh	r2, [r2, #26]
 8007ad6:	9202      	str	r2, [sp, #8]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	9201      	str	r2, [sp, #4]
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	4623      	mov	r3, r4
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f002 f90a 	bl	8009cfc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	7b5b      	ldrb	r3, [r3, #13]
 8007af4:	2200      	movs	r2, #0
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f005 fbf3 	bl	800d2e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	7b1b      	ldrb	r3, [r3, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f005 fbec 	bl	800d2e4 <USBH_LL_SetToggle>

  return USBH_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd90      	pop	{r4, r7, pc}

08007b16 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b084      	sub	sp, #16
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00e      	beq.n	8007b4e <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f002 f8ff 	bl	8009d3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f002 f92a 	bl	8009d9c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	7b1b      	ldrb	r3, [r3, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00e      	beq.n	8007b74 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	7b1b      	ldrb	r3, [r3, #12]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f002 f8ec 	bl	8009d3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	7b1b      	ldrb	r3, [r3, #12]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f002 f917 	bl	8009d9c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	7b5b      	ldrb	r3, [r3, #13]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00e      	beq.n	8007b9a <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	7b5b      	ldrb	r3, [r3, #13]
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f002 f8d9 	bl	8009d3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	7b5b      	ldrb	r3, [r3, #13]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f002 f904 	bl	8009d9c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00b      	beq.n	8007bbe <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f005 fc26 	bl	800d400 <free>
    phost->pActiveClass->pData = 0U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bba:	2200      	movs	r2, #0
 8007bbc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3340      	adds	r3, #64	@ 0x40
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f8b2 	bl	8007d4a <GetLineCoding>
 8007be6:	4603      	mov	r3, r0
 8007be8:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d105      	bne.n	8007bfc <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c10:	2301      	movs	r3, #1
 8007c12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d877      	bhi.n	8007d1c <USBH_CDC_Process+0x114>
 8007c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c34 <USBH_CDC_Process+0x2c>)
 8007c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c32:	bf00      	nop
 8007c34:	08007c49 	.word	0x08007c49
 8007c38:	08007c4f 	.word	0x08007c4f
 8007c3c:	08007c7f 	.word	0x08007c7f
 8007c40:	08007cf3 	.word	0x08007cf3
 8007c44:	08007d01 	.word	0x08007d01
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4c:	e06d      	b.n	8007d2a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f897 	bl	8007d88 <SetLineCoding>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d104      	bne.n	8007c6e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c6c:	e058      	b.n	8007d20 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d055      	beq.n	8007d20 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2204      	movs	r2, #4
 8007c78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007c7c:	e050      	b.n	8007d20 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3340      	adds	r3, #64	@ 0x40
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f860 	bl	8007d4a <GetLineCoding>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d126      	bne.n	8007ce2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ca6:	791b      	ldrb	r3, [r3, #4]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d13b      	bne.n	8007d24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d133      	bne.n	8007d24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d12b      	bne.n	8007d24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cd4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d124      	bne.n	8007d24 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f982 	bl	8007fe4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007ce0:	e020      	b.n	8007d24 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d01d      	beq.n	8007d24 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2204      	movs	r2, #4
 8007cec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007cf0:	e018      	b.n	8007d24 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f867 	bl	8007dc6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f8f6 	bl	8007eea <CDC_ProcessReception>
      break;
 8007cfe:	e014      	b.n	8007d2a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007d00:	2100      	movs	r1, #0
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 f984 	bl	8009010 <USBH_ClrFeature>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007d1a:	e005      	b.n	8007d28 <USBH_CDC_Process+0x120>

    default:
      break;
 8007d1c:	bf00      	nop
 8007d1e:	e004      	b.n	8007d2a <USBH_CDC_Process+0x122>
      break;
 8007d20:	bf00      	nop
 8007d22:	e002      	b.n	8007d2a <USBH_CDC_Process+0x122>
      break;
 8007d24:	bf00      	nop
 8007d26:	e000      	b.n	8007d2a <USBH_CDC_Process+0x122>
      break;
 8007d28:	bf00      	nop

  }

  return status;
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	22a1      	movs	r2, #161	@ 0xa1
 8007d58:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2221      	movs	r2, #33	@ 0x21
 8007d5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2207      	movs	r2, #7
 8007d70:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2207      	movs	r2, #7
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fc7e 	bl	800967a <USBH_CtlReq>
 8007d7e:	4603      	mov	r3, r0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2221      	movs	r2, #33	@ 0x21
 8007d96:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2207      	movs	r2, #7
 8007dae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2207      	movs	r2, #7
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 fc5f 	bl	800967a <USBH_CtlReq>
 8007dbc:	4603      	mov	r3, r0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af02      	add	r7, sp, #8
 8007dcc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d002      	beq.n	8007dec <CDC_ProcessTransmission+0x26>
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d023      	beq.n	8007e32 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007dea:	e07a      	b.n	8007ee2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	8b12      	ldrh	r2, [r2, #24]
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d90b      	bls.n	8007e10 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	69d9      	ldr	r1, [r3, #28]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8b1a      	ldrh	r2, [r3, #24]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	7b5b      	ldrb	r3, [r3, #13]
 8007e04:	2001      	movs	r0, #1
 8007e06:	9000      	str	r0, [sp, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 ff34 	bl	8009c76 <USBH_BulkSendData>
 8007e0e:	e00b      	b.n	8007e28 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	7b5b      	ldrb	r3, [r3, #13]
 8007e1e:	2001      	movs	r0, #1
 8007e20:	9000      	str	r0, [sp, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 ff27 	bl	8009c76 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007e30:	e057      	b.n	8007ee2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	7b5b      	ldrb	r3, [r3, #13]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f005 fa29 	bl	800d290 <USBH_LL_GetURBState>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007e42:	7afb      	ldrb	r3, [r7, #11]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d136      	bne.n	8007eb6 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	8b12      	ldrh	r2, [r2, #24]
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d90e      	bls.n	8007e72 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	8b12      	ldrh	r2, [r2, #24]
 8007e5c:	1a9a      	subs	r2, r3, r2
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	8b12      	ldrh	r2, [r2, #24]
 8007e6a:	441a      	add	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	61da      	str	r2, [r3, #28]
 8007e70:	e002      	b.n	8007e78 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8007e88:	e006      	b.n	8007e98 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f892 	bl	8007fbc <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007eac:	2300      	movs	r3, #0
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f002 f964 	bl	800a17c <osMessageQueuePut>
      break;
 8007eb4:	e014      	b.n	8007ee0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007eb6:	7afb      	ldrb	r3, [r7, #11]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d111      	bne.n	8007ee0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2204      	movs	r2, #4
 8007ec8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2200      	movs	r2, #0
 8007edc:	f002 f94e 	bl	800a17c <osMessageQueuePut>
      break;
 8007ee0:	bf00      	nop
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b086      	sub	sp, #24
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007efc:	2300      	movs	r3, #0
 8007efe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d002      	beq.n	8007f10 <CDC_ProcessReception+0x26>
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d00e      	beq.n	8007f2c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007f0e:	e051      	b.n	8007fb4 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	6a19      	ldr	r1, [r3, #32]
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	8b5a      	ldrh	r2, [r3, #26]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	7b1b      	ldrb	r3, [r3, #12]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 fecf 	bl	8009cc0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2204      	movs	r2, #4
 8007f26:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007f2a:	e043      	b.n	8007fb4 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	7b1b      	ldrb	r3, [r3, #12]
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f005 f9ac 	bl	800d290 <USBH_LL_GetURBState>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007f3c:	7cfb      	ldrb	r3, [r7, #19]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d137      	bne.n	8007fb2 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	7b1b      	ldrb	r3, [r3, #12]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f005 f90f 	bl	800d16c <USBH_LL_GetLastXferSize>
 8007f4e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d016      	beq.n	8007f88 <CDC_ProcessReception+0x9e>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	8b5b      	ldrh	r3, [r3, #26]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d110      	bne.n	8007f88 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	1ad2      	subs	r2, r2, r3
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	6a1a      	ldr	r2, [r3, #32]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	441a      	add	r2, r3
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2203      	movs	r2, #3
 8007f82:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8007f86:	e006      	b.n	8007f96 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f81d 	bl	8007fd0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2204      	movs	r2, #4
 8007f9a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007faa:	2300      	movs	r3, #0
 8007fac:	2200      	movs	r2, #0
 8007fae:	f002 f8e5 	bl	800a17c <osMessageQueuePut>
      break;
 8007fb2:	bf00      	nop
  }
}
 8007fb4:	bf00      	nop
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800800c:	2302      	movs	r3, #2
 800800e:	e044      	b.n	800809a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	79fa      	ldrb	r2, [r7, #7]
 8008014:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f841 	bl	80080b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800805c:	2200      	movs	r2, #0
 800805e:	2104      	movs	r1, #4
 8008060:	2010      	movs	r0, #16
 8008062:	f002 f818 	bl	800a096 <osMessageQueueNew>
 8008066:	4602      	mov	r2, r0
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800806e:	4b0d      	ldr	r3, [pc, #52]	@ (80080a4 <USBH_Init+0xac>)
 8008070:	4a0d      	ldr	r2, [pc, #52]	@ (80080a8 <USBH_Init+0xb0>)
 8008072:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8008074:	4b0b      	ldr	r3, [pc, #44]	@ (80080a4 <USBH_Init+0xac>)
 8008076:	2280      	movs	r2, #128	@ 0x80
 8008078:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800807a:	4b0a      	ldr	r3, [pc, #40]	@ (80080a4 <USBH_Init+0xac>)
 800807c:	2218      	movs	r2, #24
 800807e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8008080:	4a08      	ldr	r2, [pc, #32]	@ (80080a4 <USBH_Init+0xac>)
 8008082:	68f9      	ldr	r1, [r7, #12]
 8008084:	4809      	ldr	r0, [pc, #36]	@ (80080ac <USBH_Init+0xb4>)
 8008086:	f001 ff59 	bl	8009f3c <osThreadNew>
 800808a:	4602      	mov	r2, r0
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f004 ffb6 	bl	800d004 <USBH_LL_Init>

  return USBH_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	200002d4 	.word	0x200002d4
 80080a8:	0800d7c0 	.word	0x0800d7c0
 80080ac:	08008d61 	.word	0x08008d61

080080b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	e009      	b.n	80080d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	33e0      	adds	r3, #224	@ 0xe0
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	2200      	movs	r2, #0
 80080ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b0f      	cmp	r3, #15
 80080da:	d9f2      	bls.n	80080c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	e009      	b.n	80080f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080fc:	d3f1      	bcc.n	80080e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2240      	movs	r2, #64	@ 0x40
 8008122:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	331c      	adds	r3, #28
 800814e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008152:	2100      	movs	r1, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f005 fa09 	bl	800d56c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008164:	2100      	movs	r1, #0
 8008166:	4618      	mov	r0, r3
 8008168:	f005 fa00 	bl	800d56c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008172:	2212      	movs	r2, #18
 8008174:	2100      	movs	r1, #0
 8008176:	4618      	mov	r0, r3
 8008178:	f005 f9f8 	bl	800d56c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008182:	223e      	movs	r2, #62	@ 0x3e
 8008184:	2100      	movs	r1, #0
 8008186:	4618      	mov	r0, r3
 8008188:	f005 f9f0 	bl	800d56c <memset>

  return USBH_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008196:	b480      	push	{r7}
 8008198:	b085      	sub	sp, #20
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d016      	beq.n	80081d8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10e      	bne.n	80081d2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80081ba:	1c59      	adds	r1, r3, #1
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	33de      	adds	r3, #222	@ 0xde
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
 80081d0:	e004      	b.n	80081dc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80081d2:	2302      	movs	r3, #2
 80081d4:	73fb      	strb	r3, [r7, #15]
 80081d6:	e001      	b.n	80081dc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80081d8:	2302      	movs	r3, #2
 80081da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008200:	78fa      	ldrb	r2, [r7, #3]
 8008202:	429a      	cmp	r2, r3
 8008204:	d204      	bcs.n	8008210 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	78fa      	ldrb	r2, [r7, #3]
 800820a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800820e:	e001      	b.n	8008214 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008210:	2302      	movs	r3, #2
 8008212:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008222:	b480      	push	{r7}
 8008224:	b087      	sub	sp, #28
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	4608      	mov	r0, r1
 800822c:	4611      	mov	r1, r2
 800822e:	461a      	mov	r2, r3
 8008230:	4603      	mov	r3, r0
 8008232:	70fb      	strb	r3, [r7, #3]
 8008234:	460b      	mov	r3, r1
 8008236:	70bb      	strb	r3, [r7, #2]
 8008238:	4613      	mov	r3, r2
 800823a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008240:	2300      	movs	r3, #0
 8008242:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800824a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800824c:	e025      	b.n	800829a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800824e:	7dfb      	ldrb	r3, [r7, #23]
 8008250:	221a      	movs	r2, #26
 8008252:	fb02 f303 	mul.w	r3, r2, r3
 8008256:	3308      	adds	r3, #8
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	3302      	adds	r3, #2
 800825e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	795b      	ldrb	r3, [r3, #5]
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	429a      	cmp	r2, r3
 8008268:	d002      	beq.n	8008270 <USBH_FindInterface+0x4e>
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	2bff      	cmp	r3, #255	@ 0xff
 800826e:	d111      	bne.n	8008294 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008274:	78ba      	ldrb	r2, [r7, #2]
 8008276:	429a      	cmp	r2, r3
 8008278:	d002      	beq.n	8008280 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800827a:	78bb      	ldrb	r3, [r7, #2]
 800827c:	2bff      	cmp	r3, #255	@ 0xff
 800827e:	d109      	bne.n	8008294 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008284:	787a      	ldrb	r2, [r7, #1]
 8008286:	429a      	cmp	r2, r3
 8008288:	d002      	beq.n	8008290 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800828a:	787b      	ldrb	r3, [r7, #1]
 800828c:	2bff      	cmp	r3, #255	@ 0xff
 800828e:	d101      	bne.n	8008294 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	e006      	b.n	80082a2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	3301      	adds	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d9d6      	bls.n	800824e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80082a0:	23ff      	movs	r3, #255	@ 0xff
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f004 fee0 	bl	800d07c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80082bc:	2101      	movs	r1, #1
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f004 fff9 	bl	800d2b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af04      	add	r7, sp, #16
 80082d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80082d8:	2302      	movs	r3, #2
 80082da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d102      	bne.n	80082f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2203      	movs	r2, #3
 80082f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b0b      	cmp	r3, #11
 80082fa:	f200 8244 	bhi.w	8008786 <USBH_Process+0x4b6>
 80082fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <USBH_Process+0x34>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008335 	.word	0x08008335
 8008308:	08008383 	.word	0x08008383
 800830c:	08008407 	.word	0x08008407
 8008310:	08008705 	.word	0x08008705
 8008314:	08008787 	.word	0x08008787
 8008318:	080084c3 	.word	0x080084c3
 800831c:	0800868f 	.word	0x0800868f
 8008320:	08008515 	.word	0x08008515
 8008324:	08008551 	.word	0x08008551
 8008328:	08008589 	.word	0x08008589
 800832c:	080085e7 	.word	0x080085e7
 8008330:	080086ed 	.word	0x080086ed
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8224 	beq.w	800878a <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008348:	20c8      	movs	r0, #200	@ 0xc8
 800834a:	f004 fffe 	bl	800d34a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f004 fef1 	bl	800d136 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008378:	2300      	movs	r3, #0
 800837a:	2200      	movs	r2, #0
 800837c:	f001 fefe 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008380:	e203      	b.n	800878a <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008388:	2b01      	cmp	r3, #1
 800838a:	d107      	bne.n	800839c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	e025      	b.n	80083e8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80083a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083a6:	d914      	bls.n	80083d2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80083ae:	3301      	adds	r3, #1
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d903      	bls.n	80083ca <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	220d      	movs	r2, #13
 80083c6:	701a      	strb	r2, [r3, #0]
 80083c8:	e00e      	b.n	80083e8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	e00a      	b.n	80083e8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80083d8:	f103 020a 	add.w	r2, r3, #10
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80083e2:	200a      	movs	r0, #10
 80083e4:	f004 ffb1 	bl	800d34a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80083fc:	2300      	movs	r3, #0
 80083fe:	2200      	movs	r2, #0
 8008400:	f001 febc 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      break;
 8008404:	e1c8      	b.n	8008798 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008416:	2104      	movs	r1, #4
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800841c:	2064      	movs	r0, #100	@ 0x64
 800841e:	f004 ff94 	bl	800d34a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f004 fe60 	bl	800d0e8 <USBH_LL_GetSpeed>
 8008428:	4603      	mov	r3, r0
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2205      	movs	r2, #5
 8008436:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008438:	2100      	movs	r1, #0
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 fc8d 	bl	8009d5a <USBH_AllocPipe>
 8008440:	4603      	mov	r3, r0
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008448:	2180      	movs	r1, #128	@ 0x80
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 fc85 	bl	8009d5a <USBH_AllocPipe>
 8008450:	4603      	mov	r3, r0
 8008452:	461a      	mov	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	7919      	ldrb	r1, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800846c:	9202      	str	r2, [sp, #8]
 800846e:	2200      	movs	r2, #0
 8008470:	9201      	str	r2, [sp, #4]
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	4603      	mov	r3, r0
 8008476:	2280      	movs	r2, #128	@ 0x80
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f001 fc3f 	bl	8009cfc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	7959      	ldrb	r1, [r3, #5]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008492:	9202      	str	r2, [sp, #8]
 8008494:	2200      	movs	r2, #0
 8008496:	9201      	str	r2, [sp, #4]
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	4603      	mov	r3, r0
 800849c:	2200      	movs	r2, #0
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f001 fc2c 	bl	8009cfc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80084b8:	2300      	movs	r3, #0
 80084ba:	2200      	movs	r2, #0
 80084bc:	f001 fe5e 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      break;
 80084c0:	e16a      	b.n	8008798 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f96e 	bl	80087a4 <USBH_HandleEnum>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f040 815c 	bne.w	800878e <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d103      	bne.n	80084f0 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2208      	movs	r2, #8
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	e002      	b.n	80084f6 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2207      	movs	r2, #7
 80084f4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2205      	movs	r2, #5
 80084fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800850a:	2300      	movs	r3, #0
 800850c:	2200      	movs	r2, #0
 800850e:	f001 fe35 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008512:	e13c      	b.n	800878e <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 8139 	beq.w	8008792 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008526:	2101      	movs	r1, #1
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2208      	movs	r2, #8
 8008530:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2205      	movs	r2, #5
 8008536:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008546:	2300      	movs	r3, #0
 8008548:	2200      	movs	r2, #0
 800854a:	f001 fe17 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800854e:	e120      	b.n	8008792 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fd12 	bl	8008f82 <USBH_SetCfg>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2209      	movs	r2, #9
 8008568:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800857e:	2300      	movs	r3, #0
 8008580:	2200      	movs	r2, #0
 8008582:	f001 fdfb 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      break;
 8008586:	e107      	b.n	8008798 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b00      	cmp	r3, #0
 8008594:	d015      	beq.n	80085c2 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008596:	2101      	movs	r1, #1
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fd15 	bl	8008fc8 <USBH_SetFeature>
 800859e:	4603      	mov	r3, r0
 80085a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d103      	bne.n	80085b2 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	220a      	movs	r2, #10
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	e00a      	b.n	80085c8 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d106      	bne.n	80085c8 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	220a      	movs	r2, #10
 80085be:	701a      	strb	r2, [r3, #0]
 80085c0:	e002      	b.n	80085c8 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	220a      	movs	r2, #10
 80085c6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80085dc:	2300      	movs	r3, #0
 80085de:	2200      	movs	r2, #0
 80085e0:	f001 fdcc 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      break;
 80085e4:	e0d8      	b.n	8008798 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d03f      	beq.n	8008670 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
 80085fc:	e016      	b.n	800862c <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80085fe:	7bfa      	ldrb	r2, [r7, #15]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	32de      	adds	r2, #222	@ 0xde
 8008604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008608:	791a      	ldrb	r2, [r3, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008610:	429a      	cmp	r2, r3
 8008612:	d108      	bne.n	8008626 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008614:	7bfa      	ldrb	r2, [r7, #15]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	32de      	adds	r2, #222	@ 0xde
 800861a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008624:	e005      	b.n	8008632 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	3301      	adds	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0e5      	beq.n	80085fe <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d016      	beq.n	800866a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	4798      	blx	r3
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d109      	bne.n	8008662 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2206      	movs	r2, #6
 8008652:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800865a:	2103      	movs	r1, #3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
 8008660:	e006      	b.n	8008670 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	220d      	movs	r2, #13
 8008666:	701a      	strb	r2, [r3, #0]
 8008668:	e002      	b.n	8008670 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	220d      	movs	r2, #13
 800866e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2205      	movs	r2, #5
 8008674:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008684:	2300      	movs	r3, #0
 8008686:	2200      	movs	r2, #0
 8008688:	f001 fd78 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      break;
 800868c:	e084      	b.n	8008798 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d017      	beq.n	80086c8 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
 80086a4:	4603      	mov	r3, r0
 80086a6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d103      	bne.n	80086b8 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	220b      	movs	r2, #11
 80086b4:	701a      	strb	r2, [r3, #0]
 80086b6:	e00a      	b.n	80086ce <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d106      	bne.n	80086ce <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	220d      	movs	r2, #13
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	e002      	b.n	80086ce <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	220d      	movs	r2, #13
 80086cc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2205      	movs	r2, #5
 80086d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086e2:	2300      	movs	r3, #0
 80086e4:	2200      	movs	r2, #0
 80086e6:	f001 fd49 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      break;
 80086ea:	e055      	b.n	8008798 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d04f      	beq.n	8008796 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
      }
      break;
 8008702:	e048      	b.n	8008796 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7ff fccf 	bl	80080b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008718:	2b00      	cmp	r3, #0
 800871a:	d009      	beq.n	8008730 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008740:	2105      	movs	r1, #5
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b01      	cmp	r3, #1
 8008750:	d107      	bne.n	8008762 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff fda7 	bl	80082ae <USBH_Start>
 8008760:	e002      	b.n	8008768 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f004 fc8a 	bl	800d07c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800877c:	2300      	movs	r3, #0
 800877e:	2200      	movs	r2, #0
 8008780:	f001 fcfc 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      break;
 8008784:	e008      	b.n	8008798 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008786:	bf00      	nop
 8008788:	e006      	b.n	8008798 <USBH_Process+0x4c8>
      break;
 800878a:	bf00      	nop
 800878c:	e004      	b.n	8008798 <USBH_Process+0x4c8>
      break;
 800878e:	bf00      	nop
 8008790:	e002      	b.n	8008798 <USBH_Process+0x4c8>
    break;
 8008792:	bf00      	nop
 8008794:	e000      	b.n	8008798 <USBH_Process+0x4c8>
      break;
 8008796:	bf00      	nop
  }
  return USBH_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop

080087a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af04      	add	r7, sp, #16
 80087aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80087b0:	2301      	movs	r3, #1
 80087b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	785b      	ldrb	r3, [r3, #1]
 80087b8:	2b07      	cmp	r3, #7
 80087ba:	f200 8204 	bhi.w	8008bc6 <USBH_HandleEnum+0x422>
 80087be:	a201      	add	r2, pc, #4	@ (adr r2, 80087c4 <USBH_HandleEnum+0x20>)
 80087c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c4:	080087e5 	.word	0x080087e5
 80087c8:	0800889f 	.word	0x0800889f
 80087cc:	08008909 	.word	0x08008909
 80087d0:	08008993 	.word	0x08008993
 80087d4:	080089fd 	.word	0x080089fd
 80087d8:	08008a6d 	.word	0x08008a6d
 80087dc:	08008b09 	.word	0x08008b09
 80087e0:	08008b87 	.word	0x08008b87
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80087e4:	2108      	movs	r1, #8
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fae8 	bl	8008dbc <USBH_Get_DevDesc>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d12e      	bne.n	8008854 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	7919      	ldrb	r1, [r3, #4]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800881a:	9202      	str	r2, [sp, #8]
 800881c:	2200      	movs	r2, #0
 800881e:	9201      	str	r2, [sp, #4]
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	4603      	mov	r3, r0
 8008824:	2280      	movs	r2, #128	@ 0x80
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 fa68 	bl	8009cfc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7959      	ldrb	r1, [r3, #5]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008840:	9202      	str	r2, [sp, #8]
 8008842:	2200      	movs	r2, #0
 8008844:	9201      	str	r2, [sp, #4]
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	4603      	mov	r3, r0
 800884a:	2200      	movs	r2, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 fa55 	bl	8009cfc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008852:	e1ba      	b.n	8008bca <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	2b03      	cmp	r3, #3
 8008858:	f040 81b7 	bne.w	8008bca <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008862:	3301      	adds	r3, #1
 8008864:	b2da      	uxtb	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008872:	2b03      	cmp	r3, #3
 8008874:	d903      	bls.n	800887e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	220d      	movs	r2, #13
 800887a:	701a      	strb	r2, [r3, #0]
      break;
 800887c:	e1a5      	b.n	8008bca <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	795b      	ldrb	r3, [r3, #5]
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 fa89 	bl	8009d9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	791b      	ldrb	r3, [r3, #4]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 fa83 	bl	8009d9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
      break;
 800889c:	e195      	b.n	8008bca <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800889e:	2112      	movs	r1, #18
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fa8b 	bl	8008dbc <USBH_Get_DevDesc>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088b6:	e18a      	b.n	8008bce <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	f040 8187 	bne.w	8008bce <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088c6:	3301      	adds	r3, #1
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d903      	bls.n	80088e2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	220d      	movs	r2, #13
 80088de:	701a      	strb	r2, [r3, #0]
      break;
 80088e0:	e175      	b.n	8008bce <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	795b      	ldrb	r3, [r3, #5]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 fa57 	bl	8009d9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	791b      	ldrb	r3, [r3, #4]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 fa51 	bl	8009d9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	701a      	strb	r2, [r3, #0]
      break;
 8008906:	e162      	b.n	8008bce <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008908:	2101      	movs	r1, #1
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fb15 	bl	8008f3a <USBH_SetAddress>
 8008910:	4603      	mov	r3, r0
 8008912:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d130      	bne.n	800897c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800891a:	2002      	movs	r0, #2
 800891c:	f004 fd15 	bl	800d34a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2203      	movs	r2, #3
 800892c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	7919      	ldrb	r1, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008942:	9202      	str	r2, [sp, #8]
 8008944:	2200      	movs	r2, #0
 8008946:	9201      	str	r2, [sp, #4]
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	4603      	mov	r3, r0
 800894c:	2280      	movs	r2, #128	@ 0x80
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 f9d4 	bl	8009cfc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	7959      	ldrb	r1, [r3, #5]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008968:	9202      	str	r2, [sp, #8]
 800896a:	2200      	movs	r2, #0
 800896c:	9201      	str	r2, [sp, #4]
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	4603      	mov	r3, r0
 8008972:	2200      	movs	r2, #0
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 f9c1 	bl	8009cfc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800897a:	e12a      	b.n	8008bd2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	2b03      	cmp	r3, #3
 8008980:	f040 8127 	bne.w	8008bd2 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	220d      	movs	r2, #13
 8008988:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	705a      	strb	r2, [r3, #1]
      break;
 8008990:	e11f      	b.n	8008bd2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008992:	2109      	movs	r1, #9
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fa3d 	bl	8008e14 <USBH_Get_CfgDesc>
 800899a:	4603      	mov	r3, r0
 800899c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2204      	movs	r2, #4
 80089a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089aa:	e114      	b.n	8008bd6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	f040 8111 	bne.w	8008bd6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089ba:	3301      	adds	r3, #1
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d903      	bls.n	80089d6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	220d      	movs	r2, #13
 80089d2:	701a      	strb	r2, [r3, #0]
      break;
 80089d4:	e0ff      	b.n	8008bd6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	795b      	ldrb	r3, [r3, #5]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 f9dd 	bl	8009d9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	791b      	ldrb	r3, [r3, #4]
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f001 f9d7 	bl	8009d9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
      break;
 80089fa:	e0ec      	b.n	8008bd6 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fa05 	bl	8008e14 <USBH_Get_CfgDesc>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d103      	bne.n	8008a1c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2205      	movs	r2, #5
 8008a18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a1a:	e0de      	b.n	8008bda <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	f040 80db 	bne.w	8008bda <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d903      	bls.n	8008a46 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	220d      	movs	r2, #13
 8008a42:	701a      	strb	r2, [r3, #0]
      break;
 8008a44:	e0c9      	b.n	8008bda <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	795b      	ldrb	r3, [r3, #5]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 f9a5 	bl	8009d9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	791b      	ldrb	r3, [r3, #4]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 f99f 	bl	8009d9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	701a      	strb	r2, [r3, #0]
      break;
 8008a6a:	e0b6      	b.n	8008bda <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d036      	beq.n	8008ae4 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a82:	23ff      	movs	r3, #255	@ 0xff
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9ef 	bl	8008e68 <USBH_Get_StringDesc>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a8e:	7bbb      	ldrb	r3, [r7, #14]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d111      	bne.n	8008ab8 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2206      	movs	r2, #6
 8008a98:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2205      	movs	r2, #5
 8008a9e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f001 fb63 	bl	800a17c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ab6:	e092      	b.n	8008bde <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	f040 808f 	bne.w	8008bde <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2206      	movs	r2, #6
 8008ac4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2205      	movs	r2, #5
 8008aca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ada:	2300      	movs	r3, #0
 8008adc:	2200      	movs	r2, #0
 8008ade:	f001 fb4d 	bl	800a17c <osMessageQueuePut>
      break;
 8008ae2:	e07c      	b.n	8008bde <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2206      	movs	r2, #6
 8008ae8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2205      	movs	r2, #5
 8008aee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008afe:	2300      	movs	r3, #0
 8008b00:	2200      	movs	r2, #0
 8008b02:	f001 fb3b 	bl	800a17c <osMessageQueuePut>
      break;
 8008b06:	e06a      	b.n	8008bde <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d027      	beq.n	8008b62 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b1e:	23ff      	movs	r3, #255	@ 0xff
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f9a1 	bl	8008e68 <USBH_Get_StringDesc>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d103      	bne.n	8008b38 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2207      	movs	r2, #7
 8008b34:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b36:	e054      	b.n	8008be2 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d151      	bne.n	8008be2 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2207      	movs	r2, #7
 8008b42:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2205      	movs	r2, #5
 8008b48:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b58:	2300      	movs	r3, #0
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f001 fb0e 	bl	800a17c <osMessageQueuePut>
      break;
 8008b60:	e03f      	b.n	8008be2 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2207      	movs	r2, #7
 8008b66:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2205      	movs	r2, #5
 8008b6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f001 fafc 	bl	800a17c <osMessageQueuePut>
      break;
 8008b84:	e02d      	b.n	8008be2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d017      	beq.n	8008bc0 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b9c:	23ff      	movs	r3, #255	@ 0xff
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f962 	bl	8008e68 <USBH_Get_StringDesc>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008bb2:	e018      	b.n	8008be6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d115      	bne.n	8008be6 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbe:	e012      	b.n	8008be6 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc4:	e00f      	b.n	8008be6 <USBH_HandleEnum+0x442>

    default:
      break;
 8008bc6:	bf00      	nop
 8008bc8:	e00e      	b.n	8008be8 <USBH_HandleEnum+0x444>
      break;
 8008bca:	bf00      	nop
 8008bcc:	e00c      	b.n	8008be8 <USBH_HandleEnum+0x444>
      break;
 8008bce:	bf00      	nop
 8008bd0:	e00a      	b.n	8008be8 <USBH_HandleEnum+0x444>
      break;
 8008bd2:	bf00      	nop
 8008bd4:	e008      	b.n	8008be8 <USBH_HandleEnum+0x444>
      break;
 8008bd6:	bf00      	nop
 8008bd8:	e006      	b.n	8008be8 <USBH_HandleEnum+0x444>
      break;
 8008bda:	bf00      	nop
 8008bdc:	e004      	b.n	8008be8 <USBH_HandleEnum+0x444>
      break;
 8008bde:	bf00      	nop
 8008be0:	e002      	b.n	8008be8 <USBH_HandleEnum+0x444>
      break;
 8008be2:	bf00      	nop
 8008be4:	e000      	b.n	8008be8 <USBH_HandleEnum+0x444>
      break;
 8008be6:	bf00      	nop
  }
  return Status;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop

08008bf4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f804 	bl	8008c36 <USBH_HandleSof>
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b0b      	cmp	r3, #11
 8008c46:	d10a      	bne.n	8008c5e <USBH_HandleSof+0x28>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	4798      	blx	r3
  }
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f001 fa75 	bl	800a17c <osMessageQueuePut>
#endif
#endif

  return;
 8008c92:	bf00      	nop
}
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b083      	sub	sp, #12
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008caa:	bf00      	nop
}
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008cea:	2300      	movs	r3, #0
 8008cec:	2200      	movs	r2, #0
 8008cee:	f001 fa45 	bl	800a17c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f004 f9c8 	bl	800d0b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	791b      	ldrb	r3, [r3, #4]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 f837 	bl	8009d9c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	795b      	ldrb	r3, [r3, #5]
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 f831 	bl	8009d9c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2200      	movs	r2, #0
 8008d52:	f001 fa13 	bl	800a17c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008d74:	f04f 33ff 	mov.w	r3, #4294967295
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f001 fa5f 	bl	800a23c <osMessageQueueGet>
 8008d7e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1f0      	bne.n	8008d68 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7ff faa2 	bl	80082d0 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008d8c:	e7ec      	b.n	8008d68 <USBH_Process_OS+0x8>

08008d8e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008daa:	2300      	movs	r3, #0
 8008dac:	2200      	movs	r2, #0
 8008dae:	f001 f9e5 	bl	800a17c <osMessageQueuePut>
#endif

  return USBH_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008dc8:	887b      	ldrh	r3, [r7, #2]
 8008dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dce:	d901      	bls.n	8008dd4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e01b      	b.n	8008e0c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008dda:	887b      	ldrh	r3, [r7, #2]
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	4613      	mov	r3, r2
 8008de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008de4:	2100      	movs	r1, #0
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f872 	bl	8008ed0 <USBH_GetDescriptor>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008dfc:	887a      	ldrh	r2, [r7, #2]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f929 	bl	8009058 <USBH_ParseDevDesc>
 8008e06:	4603      	mov	r3, r0
 8008e08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	331c      	adds	r3, #28
 8008e24:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008e26:	887b      	ldrh	r3, [r7, #2]
 8008e28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e2c:	d901      	bls.n	8008e32 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e016      	b.n	8008e60 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008e32:	887b      	ldrh	r3, [r7, #2]
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f846 	bl	8008ed0 <USBH_GetDescriptor>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d107      	bne.n	8008e5e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008e4e:	887b      	ldrh	r3, [r7, #2]
 8008e50:	461a      	mov	r2, r3
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f9af 	bl	80091b8 <USBH_ParseCfgDesc>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	607a      	str	r2, [r7, #4]
 8008e72:	461a      	mov	r2, r3
 8008e74:	460b      	mov	r3, r1
 8008e76:	72fb      	strb	r3, [r7, #11]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008e7c:	893b      	ldrh	r3, [r7, #8]
 8008e7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e82:	d802      	bhi.n	8008e8a <USBH_Get_StringDesc+0x22>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e01c      	b.n	8008ec8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008e8e:	7afb      	ldrb	r3, [r7, #11]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008e96:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008e9e:	893b      	ldrh	r3, [r7, #8]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f812 	bl	8008ed0 <USBH_GetDescriptor>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d107      	bne.n	8008ec6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ebc:	893a      	ldrh	r2, [r7, #8]
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fb8d 	bl	80095e0 <USBH_ParseStringDesc>
  }

  return status;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	460b      	mov	r3, r1
 8008edc:	72fb      	strb	r3, [r7, #11]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	789b      	ldrb	r3, [r3, #2]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d11c      	bne.n	8008f24 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2206      	movs	r2, #6
 8008efa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	893a      	ldrh	r2, [r7, #8]
 8008f00:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008f02:	893b      	ldrh	r3, [r7, #8]
 8008f04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008f08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f0c:	d104      	bne.n	8008f18 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f240 4209 	movw	r2, #1033	@ 0x409
 8008f14:	829a      	strh	r2, [r3, #20]
 8008f16:	e002      	b.n	8008f1e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8b3a      	ldrh	r2, [r7, #24]
 8008f22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008f24:	8b3b      	ldrh	r3, [r7, #24]
 8008f26:	461a      	mov	r2, r3
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 fba5 	bl	800967a <USBH_CtlReq>
 8008f30:	4603      	mov	r3, r0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	789b      	ldrb	r3, [r3, #2]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d10f      	bne.n	8008f6e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2205      	movs	r2, #5
 8008f58:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fb81 	bl	800967a <USBH_CtlReq>
 8008f78:	4603      	mov	r3, r0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	789b      	ldrb	r3, [r3, #2]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d10e      	bne.n	8008fb4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2209      	movs	r2, #9
 8008fa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	887a      	ldrh	r2, [r7, #2]
 8008fa6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fb5e 	bl	800967a <USBH_CtlReq>
 8008fbe:	4603      	mov	r3, r0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	789b      	ldrb	r3, [r3, #2]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d10f      	bne.n	8008ffc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2100      	movs	r1, #0
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fb3a 	bl	800967a <USBH_CtlReq>
 8009006:	4603      	mov	r3, r0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	789b      	ldrb	r3, [r3, #2]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d10f      	bne.n	8009044 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2202      	movs	r2, #2
 8009028:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009036:	78fb      	ldrb	r3, [r7, #3]
 8009038:	b29a      	uxth	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009044:	2200      	movs	r2, #0
 8009046:	2100      	movs	r1, #0
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fb16 	bl	800967a <USBH_CtlReq>
 800904e:	4603      	mov	r3, r0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	4613      	mov	r3, r2
 8009064:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800906c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009078:	2302      	movs	r3, #2
 800907a:	e094      	b.n	80091a6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	781a      	ldrb	r2, [r3, #0]
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	785a      	ldrb	r2, [r3, #1]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	3302      	adds	r3, #2
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	3303      	adds	r3, #3
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	b29b      	uxth	r3, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	791a      	ldrb	r2, [r3, #4]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	795a      	ldrb	r2, [r3, #5]
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	799a      	ldrb	r2, [r3, #6]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	79da      	ldrb	r2, [r3, #7]
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d004      	beq.n	80090da <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d11b      	bne.n	8009112 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	79db      	ldrb	r3, [r3, #7]
 80090de:	2b20      	cmp	r3, #32
 80090e0:	dc0f      	bgt.n	8009102 <USBH_ParseDevDesc+0xaa>
 80090e2:	2b08      	cmp	r3, #8
 80090e4:	db0f      	blt.n	8009106 <USBH_ParseDevDesc+0xae>
 80090e6:	3b08      	subs	r3, #8
 80090e8:	4a32      	ldr	r2, [pc, #200]	@ (80091b4 <USBH_ParseDevDesc+0x15c>)
 80090ea:	fa22 f303 	lsr.w	r3, r2, r3
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	bf14      	ite	ne
 80090f6:	2301      	movne	r3, #1
 80090f8:	2300      	moveq	r3, #0
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d106      	bne.n	800910e <USBH_ParseDevDesc+0xb6>
 8009100:	e001      	b.n	8009106 <USBH_ParseDevDesc+0xae>
 8009102:	2b40      	cmp	r3, #64	@ 0x40
 8009104:	d003      	beq.n	800910e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2208      	movs	r2, #8
 800910a:	71da      	strb	r2, [r3, #7]
        break;
 800910c:	e000      	b.n	8009110 <USBH_ParseDevDesc+0xb8>
        break;
 800910e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009110:	e00e      	b.n	8009130 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009118:	2b02      	cmp	r3, #2
 800911a:	d107      	bne.n	800912c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	79db      	ldrb	r3, [r3, #7]
 8009120:	2b08      	cmp	r3, #8
 8009122:	d005      	beq.n	8009130 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2208      	movs	r2, #8
 8009128:	71da      	strb	r2, [r3, #7]
 800912a:	e001      	b.n	8009130 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800912c:	2303      	movs	r3, #3
 800912e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009130:	88fb      	ldrh	r3, [r7, #6]
 8009132:	2b08      	cmp	r3, #8
 8009134:	d936      	bls.n	80091a4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	3308      	adds	r3, #8
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	3309      	adds	r3, #9
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	b29b      	uxth	r3, r3
 8009148:	4313      	orrs	r3, r2
 800914a:	b29a      	uxth	r2, r3
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	330a      	adds	r3, #10
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	330b      	adds	r3, #11
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	b29b      	uxth	r3, r3
 8009162:	4313      	orrs	r3, r2
 8009164:	b29a      	uxth	r2, r3
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	330c      	adds	r3, #12
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	330d      	adds	r3, #13
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	021b      	lsls	r3, r3, #8
 800917a:	b29b      	uxth	r3, r3
 800917c:	4313      	orrs	r3, r2
 800917e:	b29a      	uxth	r2, r3
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	7b9a      	ldrb	r2, [r3, #14]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	7bda      	ldrb	r2, [r3, #15]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	7c1a      	ldrb	r2, [r3, #16]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	7c5a      	ldrb	r2, [r3, #17]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	01000101 	.word	0x01000101

080091b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08c      	sub	sp, #48	@ 0x30
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80091cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80091e6:	2302      	movs	r3, #2
 80091e8:	e0da      	b.n	80093a0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80091ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b09      	cmp	r3, #9
 80091f4:	d002      	beq.n	80091fc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80091f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f8:	2209      	movs	r2, #9
 80091fa:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	781a      	ldrb	r2, [r3, #0]
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	785a      	ldrb	r2, [r3, #1]
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	3302      	adds	r3, #2
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	3303      	adds	r3, #3
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	b29b      	uxth	r3, r3
 800921e:	4313      	orrs	r3, r2
 8009220:	b29b      	uxth	r3, r3
 8009222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009226:	bf28      	it	cs
 8009228:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800922c:	b29a      	uxth	r2, r3
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	791a      	ldrb	r2, [r3, #4]
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	795a      	ldrb	r2, [r3, #5]
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	799a      	ldrb	r2, [r3, #6]
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	79da      	ldrb	r2, [r3, #7]
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	7a1a      	ldrb	r2, [r3, #8]
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	2b09      	cmp	r3, #9
 800925e:	f240 809d 	bls.w	800939c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009262:	2309      	movs	r3, #9
 8009264:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800926a:	e081      	b.n	8009370 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800926c:	f107 0316 	add.w	r3, r7, #22
 8009270:	4619      	mov	r1, r3
 8009272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009274:	f000 f9e7 	bl	8009646 <USBH_GetNextDesc>
 8009278:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800927a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927c:	785b      	ldrb	r3, [r3, #1]
 800927e:	2b04      	cmp	r3, #4
 8009280:	d176      	bne.n	8009370 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b09      	cmp	r3, #9
 8009288:	d002      	beq.n	8009290 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800928a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928c:	2209      	movs	r2, #9
 800928e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009294:	221a      	movs	r2, #26
 8009296:	fb02 f303 	mul.w	r3, r2, r3
 800929a:	3308      	adds	r3, #8
 800929c:	6a3a      	ldr	r2, [r7, #32]
 800929e:	4413      	add	r3, r2
 80092a0:	3302      	adds	r3, #2
 80092a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80092a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092a6:	69f8      	ldr	r0, [r7, #28]
 80092a8:	f000 f87e 	bl	80093a8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80092b6:	e043      	b.n	8009340 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80092b8:	f107 0316 	add.w	r3, r7, #22
 80092bc:	4619      	mov	r1, r3
 80092be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092c0:	f000 f9c1 	bl	8009646 <USBH_GetNextDesc>
 80092c4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c8:	785b      	ldrb	r3, [r3, #1]
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	d138      	bne.n	8009340 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	795b      	ldrb	r3, [r3, #5]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d113      	bne.n	80092fe <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d003      	beq.n	80092e6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	799b      	ldrb	r3, [r3, #6]
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d10b      	bne.n	80092fe <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	79db      	ldrb	r3, [r3, #7]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10b      	bne.n	8009306 <USBH_ParseCfgDesc+0x14e>
 80092ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b09      	cmp	r3, #9
 80092f4:	d007      	beq.n	8009306 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80092f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f8:	2209      	movs	r2, #9
 80092fa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80092fc:	e003      	b.n	8009306 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80092fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009300:	2207      	movs	r2, #7
 8009302:	701a      	strb	r2, [r3, #0]
 8009304:	e000      	b.n	8009308 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009306:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800930c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009310:	3201      	adds	r2, #1
 8009312:	00d2      	lsls	r2, r2, #3
 8009314:	211a      	movs	r1, #26
 8009316:	fb01 f303 	mul.w	r3, r1, r3
 800931a:	4413      	add	r3, r2
 800931c:	3308      	adds	r3, #8
 800931e:	6a3a      	ldr	r2, [r7, #32]
 8009320:	4413      	add	r3, r2
 8009322:	3304      	adds	r3, #4
 8009324:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009328:	69b9      	ldr	r1, [r7, #24]
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 f870 	bl	8009410 <USBH_ParseEPDesc>
 8009330:	4603      	mov	r3, r0
 8009332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009336:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800933a:	3301      	adds	r3, #1
 800933c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	791b      	ldrb	r3, [r3, #4]
 8009344:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009348:	429a      	cmp	r2, r3
 800934a:	d204      	bcs.n	8009356 <USBH_ParseCfgDesc+0x19e>
 800934c:	6a3b      	ldr	r3, [r7, #32]
 800934e:	885a      	ldrh	r2, [r3, #2]
 8009350:	8afb      	ldrh	r3, [r7, #22]
 8009352:	429a      	cmp	r2, r3
 8009354:	d8b0      	bhi.n	80092b8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	791b      	ldrb	r3, [r3, #4]
 800935a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800935e:	429a      	cmp	r2, r3
 8009360:	d201      	bcs.n	8009366 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009362:	2303      	movs	r3, #3
 8009364:	e01c      	b.n	80093a0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800936a:	3301      	adds	r3, #1
 800936c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009374:	2b01      	cmp	r3, #1
 8009376:	d805      	bhi.n	8009384 <USBH_ParseCfgDesc+0x1cc>
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	885a      	ldrh	r2, [r3, #2]
 800937c:	8afb      	ldrh	r3, [r7, #22]
 800937e:	429a      	cmp	r2, r3
 8009380:	f63f af74 	bhi.w	800926c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	791b      	ldrb	r3, [r3, #4]
 8009388:	2b02      	cmp	r3, #2
 800938a:	bf28      	it	cs
 800938c:	2302      	movcs	r3, #2
 800938e:	b2db      	uxtb	r3, r3
 8009390:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009394:	429a      	cmp	r2, r3
 8009396:	d201      	bcs.n	800939c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009398:	2303      	movs	r3, #3
 800939a:	e001      	b.n	80093a0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800939c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3730      	adds	r7, #48	@ 0x30
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781a      	ldrb	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	785a      	ldrb	r2, [r3, #1]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	789a      	ldrb	r2, [r3, #2]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	78da      	ldrb	r2, [r3, #3]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	3304      	adds	r3, #4
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b02      	cmp	r3, #2
 80093da:	bf28      	it	cs
 80093dc:	2302      	movcs	r3, #2
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	795a      	ldrb	r2, [r3, #5]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	799a      	ldrb	r2, [r3, #6]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	79da      	ldrb	r2, [r3, #7]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	7a1a      	ldrb	r2, [r3, #8]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	721a      	strb	r2, [r3, #8]
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009410:	b480      	push	{r7}
 8009412:	b087      	sub	sp, #28
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	781a      	ldrb	r2, [r3, #0]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	785a      	ldrb	r2, [r3, #1]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	789a      	ldrb	r2, [r3, #2]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	78da      	ldrb	r2, [r3, #3]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3304      	adds	r3, #4
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3305      	adds	r3, #5
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	021b      	lsls	r3, r3, #8
 8009450:	b29b      	uxth	r3, r3
 8009452:	4313      	orrs	r3, r2
 8009454:	b29a      	uxth	r2, r3
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	799a      	ldrb	r2, [r3, #6]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	889b      	ldrh	r3, [r3, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d009      	beq.n	800947e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800946e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009472:	d804      	bhi.n	800947e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800947c:	d901      	bls.n	8009482 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800947e:	2303      	movs	r3, #3
 8009480:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009488:	2b00      	cmp	r3, #0
 800948a:	d136      	bne.n	80094fa <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	78db      	ldrb	r3, [r3, #3]
 8009490:	f003 0303 	and.w	r3, r3, #3
 8009494:	2b02      	cmp	r3, #2
 8009496:	d108      	bne.n	80094aa <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	889b      	ldrh	r3, [r3, #4]
 800949c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094a0:	f240 8097 	bls.w	80095d2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094a4:	2303      	movs	r3, #3
 80094a6:	75fb      	strb	r3, [r7, #23]
 80094a8:	e093      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	78db      	ldrb	r3, [r3, #3]
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d107      	bne.n	80094c6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	889b      	ldrh	r3, [r3, #4]
 80094ba:	2b40      	cmp	r3, #64	@ 0x40
 80094bc:	f240 8089 	bls.w	80095d2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094c0:	2303      	movs	r3, #3
 80094c2:	75fb      	strb	r3, [r7, #23]
 80094c4:	e085      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	78db      	ldrb	r3, [r3, #3]
 80094ca:	f003 0303 	and.w	r3, r3, #3
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d005      	beq.n	80094de <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	78db      	ldrb	r3, [r3, #3]
 80094d6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d10a      	bne.n	80094f4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	799b      	ldrb	r3, [r3, #6]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <USBH_ParseEPDesc+0xde>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	799b      	ldrb	r3, [r3, #6]
 80094ea:	2b10      	cmp	r3, #16
 80094ec:	d970      	bls.n	80095d0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80094ee:	2303      	movs	r3, #3
 80094f0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80094f2:	e06d      	b.n	80095d0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80094f4:	2303      	movs	r3, #3
 80094f6:	75fb      	strb	r3, [r7, #23]
 80094f8:	e06b      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009500:	2b01      	cmp	r3, #1
 8009502:	d13c      	bne.n	800957e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	78db      	ldrb	r3, [r3, #3]
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	2b02      	cmp	r3, #2
 800950e:	d005      	beq.n	800951c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	78db      	ldrb	r3, [r3, #3]
 8009514:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009518:	2b00      	cmp	r3, #0
 800951a:	d106      	bne.n	800952a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	889b      	ldrh	r3, [r3, #4]
 8009520:	2b40      	cmp	r3, #64	@ 0x40
 8009522:	d956      	bls.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009524:	2303      	movs	r3, #3
 8009526:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009528:	e053      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	78db      	ldrb	r3, [r3, #3]
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	2b01      	cmp	r3, #1
 8009534:	d10e      	bne.n	8009554 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	799b      	ldrb	r3, [r3, #6]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d007      	beq.n	800954e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009542:	2b10      	cmp	r3, #16
 8009544:	d803      	bhi.n	800954e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800954a:	2b40      	cmp	r3, #64	@ 0x40
 800954c:	d941      	bls.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800954e:	2303      	movs	r3, #3
 8009550:	75fb      	strb	r3, [r7, #23]
 8009552:	e03e      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	78db      	ldrb	r3, [r3, #3]
 8009558:	f003 0303 	and.w	r3, r3, #3
 800955c:	2b03      	cmp	r3, #3
 800955e:	d10b      	bne.n	8009578 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	799b      	ldrb	r3, [r3, #6]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d004      	beq.n	8009572 <USBH_ParseEPDesc+0x162>
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	889b      	ldrh	r3, [r3, #4]
 800956c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009570:	d32f      	bcc.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009572:	2303      	movs	r3, #3
 8009574:	75fb      	strb	r3, [r7, #23]
 8009576:	e02c      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009578:	2303      	movs	r3, #3
 800957a:	75fb      	strb	r3, [r7, #23]
 800957c:	e029      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009584:	2b02      	cmp	r3, #2
 8009586:	d120      	bne.n	80095ca <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	78db      	ldrb	r3, [r3, #3]
 800958c:	f003 0303 	and.w	r3, r3, #3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d106      	bne.n	80095a2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	889b      	ldrh	r3, [r3, #4]
 8009598:	2b08      	cmp	r3, #8
 800959a:	d01a      	beq.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800959c:	2303      	movs	r3, #3
 800959e:	75fb      	strb	r3, [r7, #23]
 80095a0:	e017      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	78db      	ldrb	r3, [r3, #3]
 80095a6:	f003 0303 	and.w	r3, r3, #3
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d10a      	bne.n	80095c4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	799b      	ldrb	r3, [r3, #6]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <USBH_ParseEPDesc+0x1ae>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	889b      	ldrh	r3, [r3, #4]
 80095ba:	2b08      	cmp	r3, #8
 80095bc:	d909      	bls.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80095be:	2303      	movs	r3, #3
 80095c0:	75fb      	strb	r3, [r7, #23]
 80095c2:	e006      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80095c4:	2303      	movs	r3, #3
 80095c6:	75fb      	strb	r3, [r7, #23]
 80095c8:	e003      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80095ca:	2303      	movs	r3, #3
 80095cc:	75fb      	strb	r3, [r7, #23]
 80095ce:	e000      	b.n	80095d2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80095d0:	bf00      	nop
  }

  return status;
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	371c      	adds	r7, #28
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4613      	mov	r3, r2
 80095ec:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3301      	adds	r3, #1
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d120      	bne.n	800963a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	1e9a      	subs	r2, r3, #2
 80095fe:	88fb      	ldrh	r3, [r7, #6]
 8009600:	4293      	cmp	r3, r2
 8009602:	bf28      	it	cs
 8009604:	4613      	movcs	r3, r2
 8009606:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	3302      	adds	r3, #2
 800960c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800960e:	2300      	movs	r3, #0
 8009610:	82fb      	strh	r3, [r7, #22]
 8009612:	e00b      	b.n	800962c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009614:	8afb      	ldrh	r3, [r7, #22]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	4413      	add	r3, r2
 800961a:	781a      	ldrb	r2, [r3, #0]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	3301      	adds	r3, #1
 8009624:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009626:	8afb      	ldrh	r3, [r7, #22]
 8009628:	3302      	adds	r3, #2
 800962a:	82fb      	strh	r3, [r7, #22]
 800962c:	8afa      	ldrh	r2, [r7, #22]
 800962e:	8abb      	ldrh	r3, [r7, #20]
 8009630:	429a      	cmp	r2, r3
 8009632:	d3ef      	bcc.n	8009614 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
  }
}
 800963a:	bf00      	nop
 800963c:	371c      	adds	r7, #28
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009646:	b480      	push	{r7}
 8009648:	b085      	sub	sp, #20
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	7812      	ldrb	r2, [r2, #0]
 8009658:	4413      	add	r3, r2
 800965a:	b29a      	uxth	r2, r3
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4413      	add	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800966c:	68fb      	ldr	r3, [r7, #12]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b086      	sub	sp, #24
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	4613      	mov	r3, r2
 8009686:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009688:	2301      	movs	r3, #1
 800968a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	789b      	ldrb	r3, [r3, #2]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d002      	beq.n	800969a <USBH_CtlReq+0x20>
 8009694:	2b02      	cmp	r3, #2
 8009696:	d01d      	beq.n	80096d4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009698:	e043      	b.n	8009722 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	88fa      	ldrh	r2, [r7, #6]
 80096a4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2201      	movs	r2, #1
 80096aa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2202      	movs	r2, #2
 80096b0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80096b2:	2301      	movs	r3, #1
 80096b4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2203      	movs	r2, #3
 80096ba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80096ca:	2300      	movs	r3, #0
 80096cc:	2200      	movs	r2, #0
 80096ce:	f000 fd55 	bl	800a17c <osMessageQueuePut>
      break;
 80096d2:	e026      	b.n	8009722 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 f829 	bl	800972c <USBH_HandleControl>
 80096da:	4603      	mov	r3, r0
 80096dc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <USBH_CtlReq+0x70>
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d106      	bne.n	80096f8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2201      	movs	r2, #1
 80096ee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	761a      	strb	r2, [r3, #24]
 80096f6:	e005      	b.n	8009704 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d102      	bne.n	8009704 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2203      	movs	r2, #3
 8009708:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009718:	2300      	movs	r3, #0
 800971a:	2200      	movs	r2, #0
 800971c:	f000 fd2e 	bl	800a17c <osMessageQueuePut>
      break;
 8009720:	bf00      	nop
  }
  return status;
 8009722:	7dfb      	ldrb	r3, [r7, #23]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af02      	add	r7, sp, #8
 8009732:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009734:	2301      	movs	r3, #1
 8009736:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009738:	2300      	movs	r3, #0
 800973a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	7e1b      	ldrb	r3, [r3, #24]
 8009740:	3b01      	subs	r3, #1
 8009742:	2b0a      	cmp	r3, #10
 8009744:	f200 8229 	bhi.w	8009b9a <USBH_HandleControl+0x46e>
 8009748:	a201      	add	r2, pc, #4	@ (adr r2, 8009750 <USBH_HandleControl+0x24>)
 800974a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974e:	bf00      	nop
 8009750:	0800977d 	.word	0x0800977d
 8009754:	08009797 	.word	0x08009797
 8009758:	08009839 	.word	0x08009839
 800975c:	0800985f 	.word	0x0800985f
 8009760:	080098eb 	.word	0x080098eb
 8009764:	08009915 	.word	0x08009915
 8009768:	080099d7 	.word	0x080099d7
 800976c:	080099f9 	.word	0x080099f9
 8009770:	08009a8b 	.word	0x08009a8b
 8009774:	08009ab1 	.word	0x08009ab1
 8009778:	08009b43 	.word	0x08009b43
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f103 0110 	add.w	r1, r3, #16
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	795b      	ldrb	r3, [r3, #5]
 8009786:	461a      	mov	r2, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fa17 	bl	8009bbc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2202      	movs	r2, #2
 8009792:	761a      	strb	r2, [r3, #24]
      break;
 8009794:	e20c      	b.n	8009bb0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	795b      	ldrb	r3, [r3, #5]
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f003 fd77 	bl	800d290 <USBH_LL_GetURBState>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d12c      	bne.n	8009806 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	7c1b      	ldrb	r3, [r3, #16]
 80097b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80097b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	8adb      	ldrh	r3, [r3, #22]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00a      	beq.n	80097d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80097be:	7b7b      	ldrb	r3, [r7, #13]
 80097c0:	2b80      	cmp	r3, #128	@ 0x80
 80097c2:	d103      	bne.n	80097cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2203      	movs	r2, #3
 80097c8:	761a      	strb	r2, [r3, #24]
 80097ca:	e00d      	b.n	80097e8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2205      	movs	r2, #5
 80097d0:	761a      	strb	r2, [r3, #24]
 80097d2:	e009      	b.n	80097e8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80097d4:	7b7b      	ldrb	r3, [r7, #13]
 80097d6:	2b80      	cmp	r3, #128	@ 0x80
 80097d8:	d103      	bne.n	80097e2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2209      	movs	r2, #9
 80097de:	761a      	strb	r2, [r3, #24]
 80097e0:	e002      	b.n	80097e8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2207      	movs	r2, #7
 80097e6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2203      	movs	r2, #3
 80097ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80097fc:	2300      	movs	r3, #0
 80097fe:	2200      	movs	r2, #0
 8009800:	f000 fcbc 	bl	800a17c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009804:	e1cb      	b.n	8009b9e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	2b04      	cmp	r3, #4
 800980a:	d003      	beq.n	8009814 <USBH_HandleControl+0xe8>
 800980c:	7bbb      	ldrb	r3, [r7, #14]
 800980e:	2b02      	cmp	r3, #2
 8009810:	f040 81c5 	bne.w	8009b9e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	220b      	movs	r2, #11
 8009818:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2203      	movs	r2, #3
 800981e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800982e:	2300      	movs	r3, #0
 8009830:	2200      	movs	r2, #0
 8009832:	f000 fca3 	bl	800a17c <osMessageQueuePut>
      break;
 8009836:	e1b2      	b.n	8009b9e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800983e:	b29a      	uxth	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6899      	ldr	r1, [r3, #8]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	899a      	ldrh	r2, [r3, #12]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	791b      	ldrb	r3, [r3, #4]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f9f2 	bl	8009c3a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2204      	movs	r2, #4
 800985a:	761a      	strb	r2, [r3, #24]
      break;
 800985c:	e1a8      	b.n	8009bb0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	791b      	ldrb	r3, [r3, #4]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f003 fd13 	bl	800d290 <USBH_LL_GetURBState>
 800986a:	4603      	mov	r3, r0
 800986c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d110      	bne.n	8009896 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2209      	movs	r2, #9
 8009878:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2203      	movs	r2, #3
 800987e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800988e:	2300      	movs	r3, #0
 8009890:	2200      	movs	r2, #0
 8009892:	f000 fc73 	bl	800a17c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009896:	7bbb      	ldrb	r3, [r7, #14]
 8009898:	2b05      	cmp	r3, #5
 800989a:	d110      	bne.n	80098be <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800989c:	2303      	movs	r3, #3
 800989e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2203      	movs	r2, #3
 80098a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80098b4:	2300      	movs	r3, #0
 80098b6:	2200      	movs	r2, #0
 80098b8:	f000 fc60 	bl	800a17c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80098bc:	e171      	b.n	8009ba2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	f040 816e 	bne.w	8009ba2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	220b      	movs	r2, #11
 80098ca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2203      	movs	r2, #3
 80098d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80098e0:	2300      	movs	r3, #0
 80098e2:	2200      	movs	r2, #0
 80098e4:	f000 fc4a 	bl	800a17c <osMessageQueuePut>
      break;
 80098e8:	e15b      	b.n	8009ba2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6899      	ldr	r1, [r3, #8]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	899a      	ldrh	r2, [r3, #12]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	795b      	ldrb	r3, [r3, #5]
 80098f6:	2001      	movs	r0, #1
 80098f8:	9000      	str	r0, [sp, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f978 	bl	8009bf0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009906:	b29a      	uxth	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2206      	movs	r2, #6
 8009910:	761a      	strb	r2, [r3, #24]
      break;
 8009912:	e14d      	b.n	8009bb0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	795b      	ldrb	r3, [r3, #5]
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f003 fcb8 	bl	800d290 <USBH_LL_GetURBState>
 8009920:	4603      	mov	r3, r0
 8009922:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d111      	bne.n	800994e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2207      	movs	r2, #7
 800992e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2203      	movs	r2, #3
 8009934:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009944:	2300      	movs	r3, #0
 8009946:	2200      	movs	r2, #0
 8009948:	f000 fc18 	bl	800a17c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800994c:	e12b      	b.n	8009ba6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b05      	cmp	r3, #5
 8009952:	d113      	bne.n	800997c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	220c      	movs	r2, #12
 8009958:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800995a:	2303      	movs	r3, #3
 800995c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2203      	movs	r2, #3
 8009962:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009972:	2300      	movs	r3, #0
 8009974:	2200      	movs	r2, #0
 8009976:	f000 fc01 	bl	800a17c <osMessageQueuePut>
      break;
 800997a:	e114      	b.n	8009ba6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	2b02      	cmp	r3, #2
 8009980:	d111      	bne.n	80099a6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2205      	movs	r2, #5
 8009986:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2203      	movs	r2, #3
 800998c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800999c:	2300      	movs	r3, #0
 800999e:	2200      	movs	r2, #0
 80099a0:	f000 fbec 	bl	800a17c <osMessageQueuePut>
      break;
 80099a4:	e0ff      	b.n	8009ba6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	f040 80fc 	bne.w	8009ba6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	220b      	movs	r2, #11
 80099b2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80099b4:	2302      	movs	r3, #2
 80099b6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2203      	movs	r2, #3
 80099bc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80099cc:	2300      	movs	r3, #0
 80099ce:	2200      	movs	r2, #0
 80099d0:	f000 fbd4 	bl	800a17c <osMessageQueuePut>
      break;
 80099d4:	e0e7      	b.n	8009ba6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	791b      	ldrb	r3, [r3, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	2100      	movs	r1, #0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f92b 	bl	8009c3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2208      	movs	r2, #8
 80099f4:	761a      	strb	r2, [r3, #24]

      break;
 80099f6:	e0db      	b.n	8009bb0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	791b      	ldrb	r3, [r3, #4]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f003 fc46 	bl	800d290 <USBH_LL_GetURBState>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d113      	bne.n	8009a36 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	220d      	movs	r2, #13
 8009a12:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2203      	movs	r2, #3
 8009a1c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f000 fba4 	bl	800a17c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a34:	e0b9      	b.n	8009baa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d111      	bne.n	8009a60 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	220b      	movs	r2, #11
 8009a40:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2203      	movs	r2, #3
 8009a46:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009a56:	2300      	movs	r3, #0
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f000 fb8f 	bl	800a17c <osMessageQueuePut>
      break;
 8009a5e:	e0a4      	b.n	8009baa <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
 8009a62:	2b05      	cmp	r3, #5
 8009a64:	f040 80a1 	bne.w	8009baa <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2203      	movs	r2, #3
 8009a70:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009a80:	2300      	movs	r3, #0
 8009a82:	2200      	movs	r2, #0
 8009a84:	f000 fb7a 	bl	800a17c <osMessageQueuePut>
      break;
 8009a88:	e08f      	b.n	8009baa <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	795b      	ldrb	r3, [r3, #5]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	9200      	str	r2, [sp, #0]
 8009a92:	2200      	movs	r2, #0
 8009a94:	2100      	movs	r1, #0
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f8aa 	bl	8009bf0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	220a      	movs	r2, #10
 8009aac:	761a      	strb	r2, [r3, #24]
      break;
 8009aae:	e07f      	b.n	8009bb0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	795b      	ldrb	r3, [r3, #5]
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f003 fbea 	bl	800d290 <USBH_LL_GetURBState>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d113      	bne.n	8009aee <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	220d      	movs	r2, #13
 8009ace:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2203      	movs	r2, #3
 8009ad4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f000 fb48 	bl	800a17c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009aec:	e05f      	b.n	8009bae <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d111      	bne.n	8009b18 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2209      	movs	r2, #9
 8009af8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2203      	movs	r2, #3
 8009afe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009b0e:	2300      	movs	r3, #0
 8009b10:	2200      	movs	r2, #0
 8009b12:	f000 fb33 	bl	800a17c <osMessageQueuePut>
      break;
 8009b16:	e04a      	b.n	8009bae <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	d147      	bne.n	8009bae <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	220b      	movs	r2, #11
 8009b22:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2203      	movs	r2, #3
 8009b28:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009b38:	2300      	movs	r3, #0
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f000 fb1e 	bl	800a17c <osMessageQueuePut>
      break;
 8009b40:	e035      	b.n	8009bae <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	7e5b      	ldrb	r3, [r3, #25]
 8009b46:	3301      	adds	r3, #1
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	765a      	strb	r2, [r3, #25]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	7e5b      	ldrb	r3, [r3, #25]
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d806      	bhi.n	8009b64 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009b62:	e025      	b.n	8009bb0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b6a:	2106      	movs	r1, #6
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	795b      	ldrb	r3, [r3, #5]
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f90d 	bl	8009d9c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	791b      	ldrb	r3, [r3, #4]
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f907 	bl	8009d9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b94:	2302      	movs	r3, #2
 8009b96:	73fb      	strb	r3, [r7, #15]
      break;
 8009b98:	e00a      	b.n	8009bb0 <USBH_HandleControl+0x484>

    default:
      break;
 8009b9a:	bf00      	nop
 8009b9c:	e008      	b.n	8009bb0 <USBH_HandleControl+0x484>
      break;
 8009b9e:	bf00      	nop
 8009ba0:	e006      	b.n	8009bb0 <USBH_HandleControl+0x484>
      break;
 8009ba2:	bf00      	nop
 8009ba4:	e004      	b.n	8009bb0 <USBH_HandleControl+0x484>
      break;
 8009ba6:	bf00      	nop
 8009ba8:	e002      	b.n	8009bb0 <USBH_HandleControl+0x484>
      break;
 8009baa:	bf00      	nop
 8009bac:	e000      	b.n	8009bb0 <USBH_HandleControl+0x484>
      break;
 8009bae:	bf00      	nop
  }

  return status;
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop

08009bbc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af04      	add	r7, sp, #16
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bca:	79f9      	ldrb	r1, [r7, #7]
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9303      	str	r3, [sp, #12]
 8009bd0:	2308      	movs	r3, #8
 8009bd2:	9302      	str	r3, [sp, #8]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	2200      	movs	r2, #0
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f003 fb24 	bl	800d22e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af04      	add	r7, sp, #16
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	460b      	mov	r3, r1
 8009c00:	80fb      	strh	r3, [r7, #6]
 8009c02:	4613      	mov	r3, r2
 8009c04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c14:	7979      	ldrb	r1, [r7, #5]
 8009c16:	7e3b      	ldrb	r3, [r7, #24]
 8009c18:	9303      	str	r3, [sp, #12]
 8009c1a:	88fb      	ldrh	r3, [r7, #6]
 8009c1c:	9302      	str	r3, [sp, #8]
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	2301      	movs	r3, #1
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	2300      	movs	r3, #0
 8009c28:	2200      	movs	r2, #0
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f003 faff 	bl	800d22e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b088      	sub	sp, #32
 8009c3e:	af04      	add	r7, sp, #16
 8009c40:	60f8      	str	r0, [r7, #12]
 8009c42:	60b9      	str	r1, [r7, #8]
 8009c44:	4611      	mov	r1, r2
 8009c46:	461a      	mov	r2, r3
 8009c48:	460b      	mov	r3, r1
 8009c4a:	80fb      	strh	r3, [r7, #6]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c50:	7979      	ldrb	r1, [r7, #5]
 8009c52:	2300      	movs	r3, #0
 8009c54:	9303      	str	r3, [sp, #12]
 8009c56:	88fb      	ldrh	r3, [r7, #6]
 8009c58:	9302      	str	r3, [sp, #8]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	2300      	movs	r3, #0
 8009c64:	2201      	movs	r2, #1
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f003 fae1 	bl	800d22e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c6c:	2300      	movs	r3, #0

}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b088      	sub	sp, #32
 8009c7a:	af04      	add	r7, sp, #16
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	60b9      	str	r1, [r7, #8]
 8009c80:	4611      	mov	r1, r2
 8009c82:	461a      	mov	r2, r3
 8009c84:	460b      	mov	r3, r1
 8009c86:	80fb      	strh	r3, [r7, #6]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c9a:	7979      	ldrb	r1, [r7, #5]
 8009c9c:	7e3b      	ldrb	r3, [r7, #24]
 8009c9e:	9303      	str	r3, [sp, #12]
 8009ca0:	88fb      	ldrh	r3, [r7, #6]
 8009ca2:	9302      	str	r3, [sp, #8]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	2301      	movs	r3, #1
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	2302      	movs	r3, #2
 8009cae:	2200      	movs	r2, #0
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f003 fabc 	bl	800d22e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b088      	sub	sp, #32
 8009cc4:	af04      	add	r7, sp, #16
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	4611      	mov	r1, r2
 8009ccc:	461a      	mov	r2, r3
 8009cce:	460b      	mov	r3, r1
 8009cd0:	80fb      	strh	r3, [r7, #6]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cd6:	7979      	ldrb	r1, [r7, #5]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9303      	str	r3, [sp, #12]
 8009cdc:	88fb      	ldrh	r3, [r7, #6]
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	2302      	movs	r3, #2
 8009cea:	2201      	movs	r2, #1
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f003 fa9e 	bl	800d22e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af04      	add	r7, sp, #16
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	4608      	mov	r0, r1
 8009d06:	4611      	mov	r1, r2
 8009d08:	461a      	mov	r2, r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	70fb      	strb	r3, [r7, #3]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	70bb      	strb	r3, [r7, #2]
 8009d12:	4613      	mov	r3, r2
 8009d14:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009d16:	7878      	ldrb	r0, [r7, #1]
 8009d18:	78ba      	ldrb	r2, [r7, #2]
 8009d1a:	78f9      	ldrb	r1, [r7, #3]
 8009d1c:	8b3b      	ldrh	r3, [r7, #24]
 8009d1e:	9302      	str	r3, [sp, #8]
 8009d20:	7d3b      	ldrb	r3, [r7, #20]
 8009d22:	9301      	str	r3, [sp, #4]
 8009d24:	7c3b      	ldrb	r3, [r7, #16]
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	4603      	mov	r3, r0
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f003 fa31 	bl	800d192 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	460b      	mov	r3, r1
 8009d44:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009d46:	78fb      	ldrb	r3, [r7, #3]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f003 fa50 	bl	800d1f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	460b      	mov	r3, r1
 8009d64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f836 	bl	8009dd8 <USBH_GetFreePipe>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d70:	89fb      	ldrh	r3, [r7, #14]
 8009d72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00a      	beq.n	8009d90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	89fb      	ldrh	r3, [r7, #14]
 8009d7e:	f003 030f 	and.w	r3, r3, #15
 8009d82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	33e0      	adds	r3, #224	@ 0xe0
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	440b      	add	r3, r1
 8009d8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d90:	89fb      	ldrh	r3, [r7, #14]
 8009d92:	b2db      	uxtb	r3, r3
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	2b0f      	cmp	r3, #15
 8009dac:	d80d      	bhi.n	8009dca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	33e0      	adds	r3, #224	@ 0xe0
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	33e0      	adds	r3, #224	@ 0xe0
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	440b      	add	r3, r1
 8009dc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009de4:	2300      	movs	r3, #0
 8009de6:	73fb      	strb	r3, [r7, #15]
 8009de8:	e00f      	b.n	8009e0a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	33e0      	adds	r3, #224	@ 0xe0
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	e007      	b.n	8009e14 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	3301      	adds	r3, #1
 8009e08:	73fb      	strb	r3, [r7, #15]
 8009e0a:	7bfb      	ldrb	r3, [r7, #15]
 8009e0c:	2b0f      	cmp	r3, #15
 8009e0e:	d9ec      	bls.n	8009dea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009e10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <__NVIC_SetPriority>:
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	db0a      	blt.n	8009e4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	490c      	ldr	r1, [pc, #48]	@ (8009e6c <__NVIC_SetPriority+0x4c>)
 8009e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e3e:	0112      	lsls	r2, r2, #4
 8009e40:	b2d2      	uxtb	r2, r2
 8009e42:	440b      	add	r3, r1
 8009e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009e48:	e00a      	b.n	8009e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	4908      	ldr	r1, [pc, #32]	@ (8009e70 <__NVIC_SetPriority+0x50>)
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	f003 030f 	and.w	r3, r3, #15
 8009e56:	3b04      	subs	r3, #4
 8009e58:	0112      	lsls	r2, r2, #4
 8009e5a:	b2d2      	uxtb	r2, r2
 8009e5c:	440b      	add	r3, r1
 8009e5e:	761a      	strb	r2, [r3, #24]
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	e000e100 	.word	0xe000e100
 8009e70:	e000ed00 	.word	0xe000ed00

08009e74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009e78:	4b05      	ldr	r3, [pc, #20]	@ (8009e90 <SysTick_Handler+0x1c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009e7c:	f001 ff34 	bl	800bce8 <xTaskGetSchedulerState>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d001      	beq.n	8009e8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009e86:	f002 fd2f 	bl	800c8e8 <xPortSysTickHandler>
  }
}
 8009e8a:	bf00      	nop
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	e000e010 	.word	0xe000e010

08009e94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009e98:	2100      	movs	r1, #0
 8009e9a:	f06f 0004 	mvn.w	r0, #4
 8009e9e:	f7ff ffbf 	bl	8009e20 <__NVIC_SetPriority>
#endif
}
 8009ea2:	bf00      	nop
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eae:	f3ef 8305 	mrs	r3, IPSR
 8009eb2:	603b      	str	r3, [r7, #0]
  return(result);
 8009eb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009eba:	f06f 0305 	mvn.w	r3, #5
 8009ebe:	607b      	str	r3, [r7, #4]
 8009ec0:	e00c      	b.n	8009edc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8009eec <osKernelInitialize+0x44>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d105      	bne.n	8009ed6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009eca:	4b08      	ldr	r3, [pc, #32]	@ (8009eec <osKernelInitialize+0x44>)
 8009ecc:	2201      	movs	r2, #1
 8009ece:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	607b      	str	r3, [r7, #4]
 8009ed4:	e002      	b.n	8009edc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009edc:	687b      	ldr	r3, [r7, #4]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	200002f8 	.word	0x200002f8

08009ef0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ef6:	f3ef 8305 	mrs	r3, IPSR
 8009efa:	603b      	str	r3, [r7, #0]
  return(result);
 8009efc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d003      	beq.n	8009f0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009f02:	f06f 0305 	mvn.w	r3, #5
 8009f06:	607b      	str	r3, [r7, #4]
 8009f08:	e010      	b.n	8009f2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f38 <osKernelStart+0x48>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d109      	bne.n	8009f26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009f12:	f7ff ffbf 	bl	8009e94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009f16:	4b08      	ldr	r3, [pc, #32]	@ (8009f38 <osKernelStart+0x48>)
 8009f18:	2202      	movs	r2, #2
 8009f1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009f1c:	f001 fa80 	bl	800b420 <vTaskStartScheduler>
      stat = osOK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	607b      	str	r3, [r7, #4]
 8009f24:	e002      	b.n	8009f2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009f26:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f2c:	687b      	ldr	r3, [r7, #4]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	200002f8 	.word	0x200002f8

08009f3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08e      	sub	sp, #56	@ 0x38
 8009f40:	af04      	add	r7, sp, #16
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f4c:	f3ef 8305 	mrs	r3, IPSR
 8009f50:	617b      	str	r3, [r7, #20]
  return(result);
 8009f52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d17e      	bne.n	800a056 <osThreadNew+0x11a>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d07b      	beq.n	800a056 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009f5e:	2380      	movs	r3, #128	@ 0x80
 8009f60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009f62:	2318      	movs	r3, #24
 8009f64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d045      	beq.n	800a002 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d002      	beq.n	8009f84 <osThreadNew+0x48>
        name = attr->name;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d008      	beq.n	8009faa <osThreadNew+0x6e>
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	2b38      	cmp	r3, #56	@ 0x38
 8009f9c:	d805      	bhi.n	8009faa <osThreadNew+0x6e>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <osThreadNew+0x72>
        return (NULL);
 8009faa:	2300      	movs	r3, #0
 8009fac:	e054      	b.n	800a058 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	089b      	lsrs	r3, r3, #2
 8009fbc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00e      	beq.n	8009fe4 <osThreadNew+0xa8>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	2ba7      	cmp	r3, #167	@ 0xa7
 8009fcc:	d90a      	bls.n	8009fe4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d006      	beq.n	8009fe4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <osThreadNew+0xa8>
        mem = 1;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	61bb      	str	r3, [r7, #24]
 8009fe2:	e010      	b.n	800a006 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10c      	bne.n	800a006 <osThreadNew+0xca>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d108      	bne.n	800a006 <osThreadNew+0xca>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d104      	bne.n	800a006 <osThreadNew+0xca>
          mem = 0;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	61bb      	str	r3, [r7, #24]
 800a000:	e001      	b.n	800a006 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d110      	bne.n	800a02e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a014:	9202      	str	r2, [sp, #8]
 800a016:	9301      	str	r3, [sp, #4]
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	6a3a      	ldr	r2, [r7, #32]
 800a020:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f001 f808 	bl	800b038 <xTaskCreateStatic>
 800a028:	4603      	mov	r3, r0
 800a02a:	613b      	str	r3, [r7, #16]
 800a02c:	e013      	b.n	800a056 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d110      	bne.n	800a056 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	b29a      	uxth	r2, r3
 800a038:	f107 0310 	add.w	r3, r7, #16
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f001 f856 	bl	800b0f8 <xTaskCreate>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d001      	beq.n	800a056 <osThreadNew+0x11a>
            hTask = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a056:	693b      	ldr	r3, [r7, #16]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3728      	adds	r7, #40	@ 0x28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a068:	f3ef 8305 	mrs	r3, IPSR
 800a06c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a06e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <osDelay+0x1c>
    stat = osErrorISR;
 800a074:	f06f 0305 	mvn.w	r3, #5
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	e007      	b.n	800a08c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f001 f994 	bl	800b3b4 <vTaskDelay>
    }
  }

  return (stat);
 800a08c:	68fb      	ldr	r3, [r7, #12]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a096:	b580      	push	{r7, lr}
 800a098:	b08a      	sub	sp, #40	@ 0x28
 800a09a:	af02      	add	r7, sp, #8
 800a09c:	60f8      	str	r0, [r7, #12]
 800a09e:	60b9      	str	r1, [r7, #8]
 800a0a0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0a6:	f3ef 8305 	mrs	r3, IPSR
 800a0aa:	613b      	str	r3, [r7, #16]
  return(result);
 800a0ac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d15f      	bne.n	800a172 <osMessageQueueNew+0xdc>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d05c      	beq.n	800a172 <osMessageQueueNew+0xdc>
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d059      	beq.n	800a172 <osMessageQueueNew+0xdc>
    mem = -1;
 800a0be:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d029      	beq.n	800a11e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d012      	beq.n	800a0f8 <osMessageQueueNew+0x62>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	2b4f      	cmp	r3, #79	@ 0x4f
 800a0d8:	d90e      	bls.n	800a0f8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	695a      	ldr	r2, [r3, #20]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	68b9      	ldr	r1, [r7, #8]
 800a0ea:	fb01 f303 	mul.w	r3, r1, r3
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d302      	bcc.n	800a0f8 <osMessageQueueNew+0x62>
        mem = 1;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	61bb      	str	r3, [r7, #24]
 800a0f6:	e014      	b.n	800a122 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d110      	bne.n	800a122 <osMessageQueueNew+0x8c>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10c      	bne.n	800a122 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d108      	bne.n	800a122 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d104      	bne.n	800a122 <osMessageQueueNew+0x8c>
          mem = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	61bb      	str	r3, [r7, #24]
 800a11c:	e001      	b.n	800a122 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d10b      	bne.n	800a140 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	2100      	movs	r1, #0
 800a132:	9100      	str	r1, [sp, #0]
 800a134:	68b9      	ldr	r1, [r7, #8]
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 fa30 	bl	800a59c <xQueueGenericCreateStatic>
 800a13c:	61f8      	str	r0, [r7, #28]
 800a13e:	e008      	b.n	800a152 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d105      	bne.n	800a152 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a146:	2200      	movs	r2, #0
 800a148:	68b9      	ldr	r1, [r7, #8]
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 faa3 	bl	800a696 <xQueueGenericCreate>
 800a150:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00c      	beq.n	800a172 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	e001      	b.n	800a16a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a166:	2300      	movs	r3, #0
 800a168:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a16a:	6979      	ldr	r1, [r7, #20]
 800a16c:	69f8      	ldr	r0, [r7, #28]
 800a16e:	f000 ff05 	bl	800af7c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a172:	69fb      	ldr	r3, [r7, #28]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	603b      	str	r3, [r7, #0]
 800a188:	4613      	mov	r3, r2
 800a18a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a190:	2300      	movs	r3, #0
 800a192:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a194:	f3ef 8305 	mrs	r3, IPSR
 800a198:	617b      	str	r3, [r7, #20]
  return(result);
 800a19a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d028      	beq.n	800a1f2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d005      	beq.n	800a1b2 <osMessageQueuePut+0x36>
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <osMessageQueuePut+0x36>
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a1b2:	f06f 0303 	mvn.w	r3, #3
 800a1b6:	61fb      	str	r3, [r7, #28]
 800a1b8:	e038      	b.n	800a22c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a1be:	f107 0210 	add.w	r2, r7, #16
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	68b9      	ldr	r1, [r7, #8]
 800a1c6:	69b8      	ldr	r0, [r7, #24]
 800a1c8:	f000 fbc6 	bl	800a958 <xQueueGenericSendFromISR>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d003      	beq.n	800a1da <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a1d2:	f06f 0302 	mvn.w	r3, #2
 800a1d6:	61fb      	str	r3, [r7, #28]
 800a1d8:	e028      	b.n	800a22c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d025      	beq.n	800a22c <osMessageQueuePut+0xb0>
 800a1e0:	4b15      	ldr	r3, [pc, #84]	@ (800a238 <osMessageQueuePut+0xbc>)
 800a1e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	e01c      	b.n	800a22c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <osMessageQueuePut+0x82>
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d103      	bne.n	800a206 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a1fe:	f06f 0303 	mvn.w	r3, #3
 800a202:	61fb      	str	r3, [r7, #28]
 800a204:	e012      	b.n	800a22c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a206:	2300      	movs	r3, #0
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	68b9      	ldr	r1, [r7, #8]
 800a20c:	69b8      	ldr	r0, [r7, #24]
 800a20e:	f000 faa1 	bl	800a754 <xQueueGenericSend>
 800a212:	4603      	mov	r3, r0
 800a214:	2b01      	cmp	r3, #1
 800a216:	d009      	beq.n	800a22c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a21e:	f06f 0301 	mvn.w	r3, #1
 800a222:	61fb      	str	r3, [r7, #28]
 800a224:	e002      	b.n	800a22c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a226:	f06f 0302 	mvn.w	r3, #2
 800a22a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a22c:	69fb      	ldr	r3, [r7, #28]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3720      	adds	r7, #32
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	e000ed04 	.word	0xe000ed04

0800a23c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a24e:	2300      	movs	r3, #0
 800a250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a252:	f3ef 8305 	mrs	r3, IPSR
 800a256:	617b      	str	r3, [r7, #20]
  return(result);
 800a258:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d028      	beq.n	800a2b0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d005      	beq.n	800a270 <osMessageQueueGet+0x34>
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <osMessageQueueGet+0x34>
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a270:	f06f 0303 	mvn.w	r3, #3
 800a274:	61fb      	str	r3, [r7, #28]
 800a276:	e037      	b.n	800a2e8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a278:	2300      	movs	r3, #0
 800a27a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a27c:	f107 0310 	add.w	r3, r7, #16
 800a280:	461a      	mov	r2, r3
 800a282:	68b9      	ldr	r1, [r7, #8]
 800a284:	69b8      	ldr	r0, [r7, #24]
 800a286:	f000 fce7 	bl	800ac58 <xQueueReceiveFromISR>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d003      	beq.n	800a298 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a290:	f06f 0302 	mvn.w	r3, #2
 800a294:	61fb      	str	r3, [r7, #28]
 800a296:	e027      	b.n	800a2e8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d024      	beq.n	800a2e8 <osMessageQueueGet+0xac>
 800a29e:	4b15      	ldr	r3, [pc, #84]	@ (800a2f4 <osMessageQueueGet+0xb8>)
 800a2a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	e01b      	b.n	800a2e8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <osMessageQueueGet+0x80>
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d103      	bne.n	800a2c4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a2bc:	f06f 0303 	mvn.w	r3, #3
 800a2c0:	61fb      	str	r3, [r7, #28]
 800a2c2:	e011      	b.n	800a2e8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	69b8      	ldr	r0, [r7, #24]
 800a2ca:	f000 fbe3 	bl	800aa94 <xQueueReceive>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d009      	beq.n	800a2e8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a2da:	f06f 0301 	mvn.w	r3, #1
 800a2de:	61fb      	str	r3, [r7, #28]
 800a2e0:	e002      	b.n	800a2e8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a2e2:	f06f 0302 	mvn.w	r3, #2
 800a2e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a2e8:	69fb      	ldr	r3, [r7, #28]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3720      	adds	r7, #32
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4a07      	ldr	r2, [pc, #28]	@ (800a324 <vApplicationGetIdleTaskMemory+0x2c>)
 800a308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	4a06      	ldr	r2, [pc, #24]	@ (800a328 <vApplicationGetIdleTaskMemory+0x30>)
 800a30e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2280      	movs	r2, #128	@ 0x80
 800a314:	601a      	str	r2, [r3, #0]
}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	200002fc 	.word	0x200002fc
 800a328:	200003a4 	.word	0x200003a4

0800a32c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4a07      	ldr	r2, [pc, #28]	@ (800a358 <vApplicationGetTimerTaskMemory+0x2c>)
 800a33c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	4a06      	ldr	r2, [pc, #24]	@ (800a35c <vApplicationGetTimerTaskMemory+0x30>)
 800a342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a34a:	601a      	str	r2, [r3, #0]
}
 800a34c:	bf00      	nop
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	200005a4 	.word	0x200005a4
 800a35c:	2000064c 	.word	0x2000064c

0800a360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f103 0208 	add.w	r2, r3, #8
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f04f 32ff 	mov.w	r2, #4294967295
 800a378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f103 0208 	add.w	r2, r3, #8
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f103 0208 	add.w	r2, r3, #8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b085      	sub	sp, #20
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	689a      	ldr	r2, [r3, #8]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	1c5a      	adds	r2, r3, #1
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	601a      	str	r2, [r3, #0]
}
 800a3f6:	bf00      	nop
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a402:	b480      	push	{r7}
 800a404:	b085      	sub	sp, #20
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a418:	d103      	bne.n	800a422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e00c      	b.n	800a43c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3308      	adds	r3, #8
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	e002      	b.n	800a430 <vListInsert+0x2e>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d2f6      	bcs.n	800a42a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	601a      	str	r2, [r3, #0]
}
 800a468:	bf00      	nop
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6892      	ldr	r2, [r2, #8]
 800a48a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	6852      	ldr	r2, [r2, #4]
 800a494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d103      	bne.n	800a4a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	689a      	ldr	r2, [r3, #8]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	1e5a      	subs	r2, r3, #1
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10b      	bne.n	800a4f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a4ee:	bf00      	nop
 800a4f0:	bf00      	nop
 800a4f2:	e7fd      	b.n	800a4f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a4f4:	f002 f968 	bl	800c7c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a500:	68f9      	ldr	r1, [r7, #12]
 800a502:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a504:	fb01 f303 	mul.w	r3, r1, r3
 800a508:	441a      	add	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a524:	3b01      	subs	r3, #1
 800a526:	68f9      	ldr	r1, [r7, #12]
 800a528:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a52a:	fb01 f303 	mul.w	r3, r1, r3
 800a52e:	441a      	add	r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	22ff      	movs	r2, #255	@ 0xff
 800a538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	22ff      	movs	r2, #255	@ 0xff
 800a540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d114      	bne.n	800a574 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d01a      	beq.n	800a588 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3310      	adds	r3, #16
 800a556:	4618      	mov	r0, r3
 800a558:	f001 fa00 	bl	800b95c <xTaskRemoveFromEventList>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d012      	beq.n	800a588 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a562:	4b0d      	ldr	r3, [pc, #52]	@ (800a598 <xQueueGenericReset+0xd0>)
 800a564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	e009      	b.n	800a588 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	3310      	adds	r3, #16
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff fef1 	bl	800a360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3324      	adds	r3, #36	@ 0x24
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff feec 	bl	800a360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a588:	f002 f950 	bl	800c82c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a58c:	2301      	movs	r3, #1
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08e      	sub	sp, #56	@ 0x38
 800a5a0:	af02      	add	r7, sp, #8
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10b      	bne.n	800a5c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5c2:	bf00      	nop
 800a5c4:	bf00      	nop
 800a5c6:	e7fd      	b.n	800a5c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10b      	bne.n	800a5e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5e0:	bf00      	nop
 800a5e2:	bf00      	nop
 800a5e4:	e7fd      	b.n	800a5e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <xQueueGenericCreateStatic+0x56>
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <xQueueGenericCreateStatic+0x5a>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e000      	b.n	800a5f8 <xQueueGenericCreateStatic+0x5c>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10b      	bne.n	800a614 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	623b      	str	r3, [r7, #32]
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	e7fd      	b.n	800a610 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d102      	bne.n	800a620 <xQueueGenericCreateStatic+0x84>
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <xQueueGenericCreateStatic+0x88>
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <xQueueGenericCreateStatic+0x8a>
 800a624:	2300      	movs	r3, #0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10b      	bne.n	800a642 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	61fb      	str	r3, [r7, #28]
}
 800a63c:	bf00      	nop
 800a63e:	bf00      	nop
 800a640:	e7fd      	b.n	800a63e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a642:	2350      	movs	r3, #80	@ 0x50
 800a644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2b50      	cmp	r3, #80	@ 0x50
 800a64a:	d00b      	beq.n	800a664 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	61bb      	str	r3, [r7, #24]
}
 800a65e:	bf00      	nop
 800a660:	bf00      	nop
 800a662:	e7fd      	b.n	800a660 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a664:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00d      	beq.n	800a68c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a678:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	4613      	mov	r3, r2
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	68b9      	ldr	r1, [r7, #8]
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f000 f840 	bl	800a70c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a68e:	4618      	mov	r0, r3
 800a690:	3730      	adds	r7, #48	@ 0x30
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a696:	b580      	push	{r7, lr}
 800a698:	b08a      	sub	sp, #40	@ 0x28
 800a69a:	af02      	add	r7, sp, #8
 800a69c:	60f8      	str	r0, [r7, #12]
 800a69e:	60b9      	str	r1, [r7, #8]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10b      	bne.n	800a6c2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	613b      	str	r3, [r7, #16]
}
 800a6bc:	bf00      	nop
 800a6be:	bf00      	nop
 800a6c0:	e7fd      	b.n	800a6be <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	3350      	adds	r3, #80	@ 0x50
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f002 f99b 	bl	800ca0c <pvPortMalloc>
 800a6d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d011      	beq.n	800a702 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	3350      	adds	r3, #80	@ 0x50
 800a6e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6f0:	79fa      	ldrb	r2, [r7, #7]
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	68b9      	ldr	r1, [r7, #8]
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 f805 	bl	800a70c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a702:	69bb      	ldr	r3, [r7, #24]
	}
 800a704:	4618      	mov	r0, r3
 800a706:	3720      	adds	r7, #32
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d103      	bne.n	800a728 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	69ba      	ldr	r2, [r7, #24]
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	e002      	b.n	800a72e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	68ba      	ldr	r2, [r7, #8]
 800a738:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a73a:	2101      	movs	r1, #1
 800a73c:	69b8      	ldr	r0, [r7, #24]
 800a73e:	f7ff fec3 	bl	800a4c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	78fa      	ldrb	r2, [r7, #3]
 800a746:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a74a:	bf00      	nop
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b08e      	sub	sp, #56	@ 0x38
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a762:	2300      	movs	r3, #0
 800a764:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10b      	bne.n	800a788 <xQueueGenericSend+0x34>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	e7fd      	b.n	800a784 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d103      	bne.n	800a796 <xQueueGenericSend+0x42>
 800a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d101      	bne.n	800a79a <xQueueGenericSend+0x46>
 800a796:	2301      	movs	r3, #1
 800a798:	e000      	b.n	800a79c <xQueueGenericSend+0x48>
 800a79a:	2300      	movs	r3, #0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10b      	bne.n	800a7b8 <xQueueGenericSend+0x64>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d103      	bne.n	800a7c6 <xQueueGenericSend+0x72>
 800a7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d101      	bne.n	800a7ca <xQueueGenericSend+0x76>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e000      	b.n	800a7cc <xQueueGenericSend+0x78>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10b      	bne.n	800a7e8 <xQueueGenericSend+0x94>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	623b      	str	r3, [r7, #32]
}
 800a7e2:	bf00      	nop
 800a7e4:	bf00      	nop
 800a7e6:	e7fd      	b.n	800a7e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7e8:	f001 fa7e 	bl	800bce8 <xTaskGetSchedulerState>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d102      	bne.n	800a7f8 <xQueueGenericSend+0xa4>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d101      	bne.n	800a7fc <xQueueGenericSend+0xa8>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e000      	b.n	800a7fe <xQueueGenericSend+0xaa>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10b      	bne.n	800a81a <xQueueGenericSend+0xc6>
	__asm volatile
 800a802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	61fb      	str	r3, [r7, #28]
}
 800a814:	bf00      	nop
 800a816:	bf00      	nop
 800a818:	e7fd      	b.n	800a816 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a81a:	f001 ffd5 	bl	800c7c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a826:	429a      	cmp	r2, r3
 800a828:	d302      	bcc.n	800a830 <xQueueGenericSend+0xdc>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d129      	bne.n	800a884 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	68b9      	ldr	r1, [r7, #8]
 800a834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a836:	f000 fa91 	bl	800ad5c <prvCopyDataToQueue>
 800a83a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a840:	2b00      	cmp	r3, #0
 800a842:	d010      	beq.n	800a866 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a846:	3324      	adds	r3, #36	@ 0x24
 800a848:	4618      	mov	r0, r3
 800a84a:	f001 f887 	bl	800b95c <xTaskRemoveFromEventList>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d013      	beq.n	800a87c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a854:	4b3f      	ldr	r3, [pc, #252]	@ (800a954 <xQueueGenericSend+0x200>)
 800a856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	e00a      	b.n	800a87c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d007      	beq.n	800a87c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a86c:	4b39      	ldr	r3, [pc, #228]	@ (800a954 <xQueueGenericSend+0x200>)
 800a86e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a87c:	f001 ffd6 	bl	800c82c <vPortExitCritical>
				return pdPASS;
 800a880:	2301      	movs	r3, #1
 800a882:	e063      	b.n	800a94c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d103      	bne.n	800a892 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a88a:	f001 ffcf 	bl	800c82c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a88e:	2300      	movs	r3, #0
 800a890:	e05c      	b.n	800a94c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a894:	2b00      	cmp	r3, #0
 800a896:	d106      	bne.n	800a8a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a898:	f107 0314 	add.w	r3, r7, #20
 800a89c:	4618      	mov	r0, r3
 800a89e:	f001 f8c1 	bl	800ba24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8a6:	f001 ffc1 	bl	800c82c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8aa:	f000 fe29 	bl	800b500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8ae:	f001 ff8b 	bl	800c7c8 <vPortEnterCritical>
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8b8:	b25b      	sxtb	r3, r3
 800a8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8be:	d103      	bne.n	800a8c8 <xQueueGenericSend+0x174>
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8ce:	b25b      	sxtb	r3, r3
 800a8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d4:	d103      	bne.n	800a8de <xQueueGenericSend+0x18a>
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8de:	f001 ffa5 	bl	800c82c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8e2:	1d3a      	adds	r2, r7, #4
 800a8e4:	f107 0314 	add.w	r3, r7, #20
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f001 f8b0 	bl	800ba50 <xTaskCheckForTimeOut>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d124      	bne.n	800a940 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8f8:	f000 fb28 	bl	800af4c <prvIsQueueFull>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d018      	beq.n	800a934 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	3310      	adds	r3, #16
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	4611      	mov	r1, r2
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 ffd4 	bl	800b8b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a910:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a912:	f000 fab3 	bl	800ae7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a916:	f000 fe01 	bl	800b51c <xTaskResumeAll>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f47f af7c 	bne.w	800a81a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a922:	4b0c      	ldr	r3, [pc, #48]	@ (800a954 <xQueueGenericSend+0x200>)
 800a924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	e772      	b.n	800a81a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a934:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a936:	f000 faa1 	bl	800ae7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a93a:	f000 fdef 	bl	800b51c <xTaskResumeAll>
 800a93e:	e76c      	b.n	800a81a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a942:	f000 fa9b 	bl	800ae7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a946:	f000 fde9 	bl	800b51c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a94a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3738      	adds	r7, #56	@ 0x38
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	e000ed04 	.word	0xe000ed04

0800a958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b090      	sub	sp, #64	@ 0x40
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10b      	bne.n	800a988 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	e7fd      	b.n	800a984 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d103      	bne.n	800a996 <xQueueGenericSendFromISR+0x3e>
 800a98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <xQueueGenericSendFromISR+0x42>
 800a996:	2301      	movs	r3, #1
 800a998:	e000      	b.n	800a99c <xQueueGenericSendFromISR+0x44>
 800a99a:	2300      	movs	r3, #0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10b      	bne.n	800a9b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	e7fd      	b.n	800a9b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d103      	bne.n	800a9c6 <xQueueGenericSendFromISR+0x6e>
 800a9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d101      	bne.n	800a9ca <xQueueGenericSendFromISR+0x72>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e000      	b.n	800a9cc <xQueueGenericSendFromISR+0x74>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10b      	bne.n	800a9e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	623b      	str	r3, [r7, #32]
}
 800a9e2:	bf00      	nop
 800a9e4:	bf00      	nop
 800a9e6:	e7fd      	b.n	800a9e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9e8:	f001 ffce 	bl	800c988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9ec:	f3ef 8211 	mrs	r2, BASEPRI
 800a9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	61fa      	str	r2, [r7, #28]
 800aa02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d302      	bcc.n	800aa1a <xQueueGenericSendFromISR+0xc2>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d12f      	bne.n	800aa7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	68b9      	ldr	r1, [r7, #8]
 800aa2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aa30:	f000 f994 	bl	800ad5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aa38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3c:	d112      	bne.n	800aa64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d016      	beq.n	800aa74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa48:	3324      	adds	r3, #36	@ 0x24
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 ff86 	bl	800b95c <xTaskRemoveFromEventList>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00e      	beq.n	800aa74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00b      	beq.n	800aa74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	e007      	b.n	800aa74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aa68:	3301      	adds	r3, #1
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	b25a      	sxtb	r2, r3
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aa74:	2301      	movs	r3, #1
 800aa76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aa78:	e001      	b.n	800aa7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3740      	adds	r7, #64	@ 0x40
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b08c      	sub	sp, #48	@ 0x30
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aaa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10b      	bne.n	800aac6 <xQueueReceive+0x32>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	623b      	str	r3, [r7, #32]
}
 800aac0:	bf00      	nop
 800aac2:	bf00      	nop
 800aac4:	e7fd      	b.n	800aac2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d103      	bne.n	800aad4 <xQueueReceive+0x40>
 800aacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <xQueueReceive+0x44>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e000      	b.n	800aada <xQueueReceive+0x46>
 800aad8:	2300      	movs	r3, #0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10b      	bne.n	800aaf6 <xQueueReceive+0x62>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	61fb      	str	r3, [r7, #28]
}
 800aaf0:	bf00      	nop
 800aaf2:	bf00      	nop
 800aaf4:	e7fd      	b.n	800aaf2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaf6:	f001 f8f7 	bl	800bce8 <xTaskGetSchedulerState>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d102      	bne.n	800ab06 <xQueueReceive+0x72>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <xQueueReceive+0x76>
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <xQueueReceive+0x78>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10b      	bne.n	800ab28 <xQueueReceive+0x94>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	61bb      	str	r3, [r7, #24]
}
 800ab22:	bf00      	nop
 800ab24:	bf00      	nop
 800ab26:	e7fd      	b.n	800ab24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab28:	f001 fe4e 	bl	800c7c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01f      	beq.n	800ab78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab38:	68b9      	ldr	r1, [r7, #8]
 800ab3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab3c:	f000 f978 	bl	800ae30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab42:	1e5a      	subs	r2, r3, #1
 800ab44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00f      	beq.n	800ab70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab52:	3310      	adds	r3, #16
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 ff01 	bl	800b95c <xTaskRemoveFromEventList>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab60:	4b3c      	ldr	r3, [pc, #240]	@ (800ac54 <xQueueReceive+0x1c0>)
 800ab62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab70:	f001 fe5c 	bl	800c82c <vPortExitCritical>
				return pdPASS;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e069      	b.n	800ac4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d103      	bne.n	800ab86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab7e:	f001 fe55 	bl	800c82c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab82:	2300      	movs	r3, #0
 800ab84:	e062      	b.n	800ac4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d106      	bne.n	800ab9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab8c:	f107 0310 	add.w	r3, r7, #16
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 ff47 	bl	800ba24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab96:	2301      	movs	r3, #1
 800ab98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab9a:	f001 fe47 	bl	800c82c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab9e:	f000 fcaf 	bl	800b500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aba2:	f001 fe11 	bl	800c7c8 <vPortEnterCritical>
 800aba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abac:	b25b      	sxtb	r3, r3
 800abae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb2:	d103      	bne.n	800abbc <xQueueReceive+0x128>
 800abb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abc2:	b25b      	sxtb	r3, r3
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc8:	d103      	bne.n	800abd2 <xQueueReceive+0x13e>
 800abca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abd2:	f001 fe2b 	bl	800c82c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abd6:	1d3a      	adds	r2, r7, #4
 800abd8:	f107 0310 	add.w	r3, r7, #16
 800abdc:	4611      	mov	r1, r2
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 ff36 	bl	800ba50 <xTaskCheckForTimeOut>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d123      	bne.n	800ac32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abec:	f000 f998 	bl	800af20 <prvIsQueueEmpty>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d017      	beq.n	800ac26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf8:	3324      	adds	r3, #36	@ 0x24
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	4611      	mov	r1, r2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 fe5a 	bl	800b8b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac06:	f000 f939 	bl	800ae7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac0a:	f000 fc87 	bl	800b51c <xTaskResumeAll>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d189      	bne.n	800ab28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ac14:	4b0f      	ldr	r3, [pc, #60]	@ (800ac54 <xQueueReceive+0x1c0>)
 800ac16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	e780      	b.n	800ab28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac28:	f000 f928 	bl	800ae7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac2c:	f000 fc76 	bl	800b51c <xTaskResumeAll>
 800ac30:	e77a      	b.n	800ab28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac34:	f000 f922 	bl	800ae7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac38:	f000 fc70 	bl	800b51c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac3e:	f000 f96f 	bl	800af20 <prvIsQueueEmpty>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f43f af6f 	beq.w	800ab28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3730      	adds	r7, #48	@ 0x30
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	e000ed04 	.word	0xe000ed04

0800ac58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08e      	sub	sp, #56	@ 0x38
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ac68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10b      	bne.n	800ac86 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	623b      	str	r3, [r7, #32]
}
 800ac80:	bf00      	nop
 800ac82:	bf00      	nop
 800ac84:	e7fd      	b.n	800ac82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d103      	bne.n	800ac94 <xQueueReceiveFromISR+0x3c>
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <xQueueReceiveFromISR+0x40>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e000      	b.n	800ac9a <xQueueReceiveFromISR+0x42>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10b      	bne.n	800acb6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	61fb      	str	r3, [r7, #28]
}
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
 800acb4:	e7fd      	b.n	800acb2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acb6:	f001 fe67 	bl	800c988 <vPortValidateInterruptPriority>
	__asm volatile
 800acba:	f3ef 8211 	mrs	r2, BASEPRI
 800acbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	61ba      	str	r2, [r7, #24]
 800acd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800acd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d02f      	beq.n	800ad42 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ace8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acec:	68b9      	ldr	r1, [r7, #8]
 800acee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acf0:	f000 f89e 	bl	800ae30 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf6:	1e5a      	subs	r2, r3, #1
 800acf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800acfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ad00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad04:	d112      	bne.n	800ad2c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d016      	beq.n	800ad3c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad10:	3310      	adds	r3, #16
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 fe22 	bl	800b95c <xTaskRemoveFromEventList>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00e      	beq.n	800ad3c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00b      	beq.n	800ad3c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	e007      	b.n	800ad3c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ad2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad30:	3301      	adds	r3, #1
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	b25a      	sxtb	r2, r3
 800ad36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad40:	e001      	b.n	800ad46 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad48:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	f383 8811 	msr	BASEPRI, r3
}
 800ad50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3738      	adds	r7, #56	@ 0x38
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10d      	bne.n	800ad96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d14d      	bne.n	800ae1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 ffcc 	bl	800bd24 <xTaskPriorityDisinherit>
 800ad8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	609a      	str	r2, [r3, #8]
 800ad94:	e043      	b.n	800ae1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d119      	bne.n	800add0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6858      	ldr	r0, [r3, #4]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada4:	461a      	mov	r2, r3
 800ada6:	68b9      	ldr	r1, [r7, #8]
 800ada8:	f002 fc7a 	bl	800d6a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb4:	441a      	add	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	685a      	ldr	r2, [r3, #4]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d32b      	bcc.n	800ae1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	605a      	str	r2, [r3, #4]
 800adce:	e026      	b.n	800ae1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	68d8      	ldr	r0, [r3, #12]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add8:	461a      	mov	r2, r3
 800adda:	68b9      	ldr	r1, [r7, #8]
 800addc:	f002 fc60 	bl	800d6a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	68da      	ldr	r2, [r3, #12]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade8:	425b      	negs	r3, r3
 800adea:	441a      	add	r2, r3
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	68da      	ldr	r2, [r3, #12]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d207      	bcs.n	800ae0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	689a      	ldr	r2, [r3, #8]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae04:	425b      	negs	r3, r3
 800ae06:	441a      	add	r2, r3
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d105      	bne.n	800ae1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ae26:	697b      	ldr	r3, [r7, #20]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d018      	beq.n	800ae74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68da      	ldr	r2, [r3, #12]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4a:	441a      	add	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68da      	ldr	r2, [r3, #12]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d303      	bcc.n	800ae64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	68d9      	ldr	r1, [r3, #12]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	6838      	ldr	r0, [r7, #0]
 800ae70:	f002 fc16 	bl	800d6a0 <memcpy>
	}
}
 800ae74:	bf00      	nop
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae84:	f001 fca0 	bl	800c7c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae90:	e011      	b.n	800aeb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d012      	beq.n	800aec0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3324      	adds	r3, #36	@ 0x24
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 fd5c 	bl	800b95c <xTaskRemoveFromEventList>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aeaa:	f000 fe35 	bl	800bb18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	dce9      	bgt.n	800ae92 <prvUnlockQueue+0x16>
 800aebe:	e000      	b.n	800aec2 <prvUnlockQueue+0x46>
					break;
 800aec0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	22ff      	movs	r2, #255	@ 0xff
 800aec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aeca:	f001 fcaf 	bl	800c82c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aece:	f001 fc7b 	bl	800c7c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aed8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeda:	e011      	b.n	800af00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d012      	beq.n	800af0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3310      	adds	r3, #16
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 fd37 	bl	800b95c <xTaskRemoveFromEventList>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aef4:	f000 fe10 	bl	800bb18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	3b01      	subs	r3, #1
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af04:	2b00      	cmp	r3, #0
 800af06:	dce9      	bgt.n	800aedc <prvUnlockQueue+0x60>
 800af08:	e000      	b.n	800af0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	22ff      	movs	r2, #255	@ 0xff
 800af10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800af14:	f001 fc8a 	bl	800c82c <vPortExitCritical>
}
 800af18:	bf00      	nop
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af28:	f001 fc4e 	bl	800c7c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af30:	2b00      	cmp	r3, #0
 800af32:	d102      	bne.n	800af3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af34:	2301      	movs	r3, #1
 800af36:	60fb      	str	r3, [r7, #12]
 800af38:	e001      	b.n	800af3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af3e:	f001 fc75 	bl	800c82c <vPortExitCritical>

	return xReturn;
 800af42:	68fb      	ldr	r3, [r7, #12]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af54:	f001 fc38 	bl	800c7c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af60:	429a      	cmp	r2, r3
 800af62:	d102      	bne.n	800af6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af64:	2301      	movs	r3, #1
 800af66:	60fb      	str	r3, [r7, #12]
 800af68:	e001      	b.n	800af6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af6a:	2300      	movs	r3, #0
 800af6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af6e:	f001 fc5d 	bl	800c82c <vPortExitCritical>

	return xReturn;
 800af72:	68fb      	ldr	r3, [r7, #12]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
 800af8a:	e014      	b.n	800afb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af8c:	4a0f      	ldr	r2, [pc, #60]	@ (800afcc <vQueueAddToRegistry+0x50>)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10b      	bne.n	800afb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af98:	490c      	ldr	r1, [pc, #48]	@ (800afcc <vQueueAddToRegistry+0x50>)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	683a      	ldr	r2, [r7, #0]
 800af9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800afa2:	4a0a      	ldr	r2, [pc, #40]	@ (800afcc <vQueueAddToRegistry+0x50>)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	4413      	add	r3, r2
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800afae:	e006      	b.n	800afbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	3301      	adds	r3, #1
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2b07      	cmp	r3, #7
 800afba:	d9e7      	bls.n	800af8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800afbc:	bf00      	nop
 800afbe:	bf00      	nop
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	20000a4c 	.word	0x20000a4c

0800afd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800afe0:	f001 fbf2 	bl	800c7c8 <vPortEnterCritical>
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afea:	b25b      	sxtb	r3, r3
 800afec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff0:	d103      	bne.n	800affa <vQueueWaitForMessageRestricted+0x2a>
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b000:	b25b      	sxtb	r3, r3
 800b002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b006:	d103      	bne.n	800b010 <vQueueWaitForMessageRestricted+0x40>
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b010:	f001 fc0c 	bl	800c82c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d106      	bne.n	800b02a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	3324      	adds	r3, #36	@ 0x24
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	68b9      	ldr	r1, [r7, #8]
 800b024:	4618      	mov	r0, r3
 800b026:	f000 fc6d 	bl	800b904 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b02a:	6978      	ldr	r0, [r7, #20]
 800b02c:	f7ff ff26 	bl	800ae7c <prvUnlockQueue>
	}
 800b030:	bf00      	nop
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08e      	sub	sp, #56	@ 0x38
 800b03c:	af04      	add	r7, sp, #16
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10b      	bne.n	800b064 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	623b      	str	r3, [r7, #32]
}
 800b05e:	bf00      	nop
 800b060:	bf00      	nop
 800b062:	e7fd      	b.n	800b060 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10b      	bne.n	800b082 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	61fb      	str	r3, [r7, #28]
}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	e7fd      	b.n	800b07e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b082:	23a8      	movs	r3, #168	@ 0xa8
 800b084:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	2ba8      	cmp	r3, #168	@ 0xa8
 800b08a:	d00b      	beq.n	800b0a4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	61bb      	str	r3, [r7, #24]
}
 800b09e:	bf00      	nop
 800b0a0:	bf00      	nop
 800b0a2:	e7fd      	b.n	800b0a0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d01e      	beq.n	800b0ea <xTaskCreateStatic+0xb2>
 800b0ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d01b      	beq.n	800b0ea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0be:	2202      	movs	r2, #2
 800b0c0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9303      	str	r3, [sp, #12]
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ca:	9302      	str	r3, [sp, #8]
 800b0cc:	f107 0314 	add.w	r3, r7, #20
 800b0d0:	9301      	str	r3, [sp, #4]
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	68b9      	ldr	r1, [r7, #8]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 f851 	bl	800b184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0e4:	f000 f8f6 	bl	800b2d4 <prvAddNewTaskToReadyList>
 800b0e8:	e001      	b.n	800b0ee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0ee:	697b      	ldr	r3, [r7, #20]
	}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3728      	adds	r7, #40	@ 0x28
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08c      	sub	sp, #48	@ 0x30
 800b0fc:	af04      	add	r7, sp, #16
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	603b      	str	r3, [r7, #0]
 800b104:	4613      	mov	r3, r2
 800b106:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b108:	88fb      	ldrh	r3, [r7, #6]
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f001 fc7d 	bl	800ca0c <pvPortMalloc>
 800b112:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00e      	beq.n	800b138 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b11a:	20a8      	movs	r0, #168	@ 0xa8
 800b11c:	f001 fc76 	bl	800ca0c <pvPortMalloc>
 800b120:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d003      	beq.n	800b130 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b12e:	e005      	b.n	800b13c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b130:	6978      	ldr	r0, [r7, #20]
 800b132:	f001 fd39 	bl	800cba8 <vPortFree>
 800b136:	e001      	b.n	800b13c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b138:	2300      	movs	r3, #0
 800b13a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d017      	beq.n	800b172 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b14a:	88fa      	ldrh	r2, [r7, #6]
 800b14c:	2300      	movs	r3, #0
 800b14e:	9303      	str	r3, [sp, #12]
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	9302      	str	r3, [sp, #8]
 800b154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b156:	9301      	str	r3, [sp, #4]
 800b158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	68b9      	ldr	r1, [r7, #8]
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f000 f80f 	bl	800b184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b166:	69f8      	ldr	r0, [r7, #28]
 800b168:	f000 f8b4 	bl	800b2d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b16c:	2301      	movs	r3, #1
 800b16e:	61bb      	str	r3, [r7, #24]
 800b170:	e002      	b.n	800b178 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b172:	f04f 33ff 	mov.w	r3, #4294967295
 800b176:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b178:	69bb      	ldr	r3, [r7, #24]
	}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3720      	adds	r7, #32
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
	...

0800b184 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b194:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	461a      	mov	r2, r3
 800b19c:	21a5      	movs	r1, #165	@ 0xa5
 800b19e:	f002 f9e5 	bl	800d56c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	f023 0307 	bic.w	r3, r3, #7
 800b1ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	f003 0307 	and.w	r3, r3, #7
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00b      	beq.n	800b1de <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	617b      	str	r3, [r7, #20]
}
 800b1d8:	bf00      	nop
 800b1da:	bf00      	nop
 800b1dc:	e7fd      	b.n	800b1da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01f      	beq.n	800b224 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	61fb      	str	r3, [r7, #28]
 800b1e8:	e012      	b.n	800b210 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	7819      	ldrb	r1, [r3, #0]
 800b1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3334      	adds	r3, #52	@ 0x34
 800b1fa:	460a      	mov	r2, r1
 800b1fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	4413      	add	r3, r2
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d006      	beq.n	800b218 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	3301      	adds	r3, #1
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	2b0f      	cmp	r3, #15
 800b214:	d9e9      	bls.n	800b1ea <prvInitialiseNewTask+0x66>
 800b216:	e000      	b.n	800b21a <prvInitialiseNewTask+0x96>
			{
				break;
 800b218:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b222:	e003      	b.n	800b22c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22e:	2b37      	cmp	r3, #55	@ 0x37
 800b230:	d901      	bls.n	800b236 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b232:	2337      	movs	r3, #55	@ 0x37
 800b234:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b23a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b240:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b244:	2200      	movs	r2, #0
 800b246:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	3304      	adds	r3, #4
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff f8a7 	bl	800a3a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	3318      	adds	r3, #24
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff f8a2 	bl	800a3a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b260:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b264:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b270:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b274:	2200      	movs	r2, #0
 800b276:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b284:	3354      	adds	r3, #84	@ 0x54
 800b286:	224c      	movs	r2, #76	@ 0x4c
 800b288:	2100      	movs	r1, #0
 800b28a:	4618      	mov	r0, r3
 800b28c:	f002 f96e 	bl	800d56c <memset>
 800b290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b292:	4a0d      	ldr	r2, [pc, #52]	@ (800b2c8 <prvInitialiseNewTask+0x144>)
 800b294:	659a      	str	r2, [r3, #88]	@ 0x58
 800b296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b298:	4a0c      	ldr	r2, [pc, #48]	@ (800b2cc <prvInitialiseNewTask+0x148>)
 800b29a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29e:	4a0c      	ldr	r2, [pc, #48]	@ (800b2d0 <prvInitialiseNewTask+0x14c>)
 800b2a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	68f9      	ldr	r1, [r7, #12]
 800b2a6:	69b8      	ldr	r0, [r7, #24]
 800b2a8:	f001 f95a 	bl	800c560 <pxPortInitialiseStack>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2be:	bf00      	nop
 800b2c0:	3720      	adds	r7, #32
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200054b0 	.word	0x200054b0
 800b2cc:	20005518 	.word	0x20005518
 800b2d0:	20005580 	.word	0x20005580

0800b2d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2dc:	f001 fa74 	bl	800c7c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2e0:	4b2d      	ldr	r3, [pc, #180]	@ (800b398 <prvAddNewTaskToReadyList+0xc4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	4a2c      	ldr	r2, [pc, #176]	@ (800b398 <prvAddNewTaskToReadyList+0xc4>)
 800b2e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2ea:	4b2c      	ldr	r3, [pc, #176]	@ (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d109      	bne.n	800b306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2f2:	4a2a      	ldr	r2, [pc, #168]	@ (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2f8:	4b27      	ldr	r3, [pc, #156]	@ (800b398 <prvAddNewTaskToReadyList+0xc4>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d110      	bne.n	800b322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b300:	f000 fc2e 	bl	800bb60 <prvInitialiseTaskLists>
 800b304:	e00d      	b.n	800b322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b306:	4b26      	ldr	r3, [pc, #152]	@ (800b3a0 <prvAddNewTaskToReadyList+0xcc>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d109      	bne.n	800b322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b30e:	4b23      	ldr	r3, [pc, #140]	@ (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b318:	429a      	cmp	r2, r3
 800b31a:	d802      	bhi.n	800b322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b31c:	4a1f      	ldr	r2, [pc, #124]	@ (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b322:	4b20      	ldr	r3, [pc, #128]	@ (800b3a4 <prvAddNewTaskToReadyList+0xd0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	3301      	adds	r3, #1
 800b328:	4a1e      	ldr	r2, [pc, #120]	@ (800b3a4 <prvAddNewTaskToReadyList+0xd0>)
 800b32a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b32c:	4b1d      	ldr	r3, [pc, #116]	@ (800b3a4 <prvAddNewTaskToReadyList+0xd0>)
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b338:	4b1b      	ldr	r3, [pc, #108]	@ (800b3a8 <prvAddNewTaskToReadyList+0xd4>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d903      	bls.n	800b348 <prvAddNewTaskToReadyList+0x74>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b344:	4a18      	ldr	r2, [pc, #96]	@ (800b3a8 <prvAddNewTaskToReadyList+0xd4>)
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34c:	4613      	mov	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4a15      	ldr	r2, [pc, #84]	@ (800b3ac <prvAddNewTaskToReadyList+0xd8>)
 800b356:	441a      	add	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3304      	adds	r3, #4
 800b35c:	4619      	mov	r1, r3
 800b35e:	4610      	mov	r0, r2
 800b360:	f7ff f82b 	bl	800a3ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b364:	f001 fa62 	bl	800c82c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b368:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a0 <prvAddNewTaskToReadyList+0xcc>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00e      	beq.n	800b38e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b370:	4b0a      	ldr	r3, [pc, #40]	@ (800b39c <prvAddNewTaskToReadyList+0xc8>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d207      	bcs.n	800b38e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b37e:	4b0c      	ldr	r3, [pc, #48]	@ (800b3b0 <prvAddNewTaskToReadyList+0xdc>)
 800b380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20000f60 	.word	0x20000f60
 800b39c:	20000a8c 	.word	0x20000a8c
 800b3a0:	20000f6c 	.word	0x20000f6c
 800b3a4:	20000f7c 	.word	0x20000f7c
 800b3a8:	20000f68 	.word	0x20000f68
 800b3ac:	20000a90 	.word	0x20000a90
 800b3b0:	e000ed04 	.word	0xe000ed04

0800b3b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d018      	beq.n	800b3f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3c6:	4b14      	ldr	r3, [pc, #80]	@ (800b418 <vTaskDelay+0x64>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00b      	beq.n	800b3e6 <vTaskDelay+0x32>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	60bb      	str	r3, [r7, #8]
}
 800b3e0:	bf00      	nop
 800b3e2:	bf00      	nop
 800b3e4:	e7fd      	b.n	800b3e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3e6:	f000 f88b 	bl	800b500 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fd09 	bl	800be04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3f2:	f000 f893 	bl	800b51c <xTaskResumeAll>
 800b3f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d107      	bne.n	800b40e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b3fe:	4b07      	ldr	r3, [pc, #28]	@ (800b41c <vTaskDelay+0x68>)
 800b400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b40e:	bf00      	nop
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	20000f88 	.word	0x20000f88
 800b41c:	e000ed04 	.word	0xe000ed04

0800b420 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08a      	sub	sp, #40	@ 0x28
 800b424:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b42e:	463a      	mov	r2, r7
 800b430:	1d39      	adds	r1, r7, #4
 800b432:	f107 0308 	add.w	r3, r7, #8
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe ff5e 	bl	800a2f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	9202      	str	r2, [sp, #8]
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	2300      	movs	r3, #0
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	2300      	movs	r3, #0
 800b44c:	460a      	mov	r2, r1
 800b44e:	4924      	ldr	r1, [pc, #144]	@ (800b4e0 <vTaskStartScheduler+0xc0>)
 800b450:	4824      	ldr	r0, [pc, #144]	@ (800b4e4 <vTaskStartScheduler+0xc4>)
 800b452:	f7ff fdf1 	bl	800b038 <xTaskCreateStatic>
 800b456:	4603      	mov	r3, r0
 800b458:	4a23      	ldr	r2, [pc, #140]	@ (800b4e8 <vTaskStartScheduler+0xc8>)
 800b45a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b45c:	4b22      	ldr	r3, [pc, #136]	@ (800b4e8 <vTaskStartScheduler+0xc8>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b464:	2301      	movs	r3, #1
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	e001      	b.n	800b46e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d102      	bne.n	800b47a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b474:	f000 fd1a 	bl	800beac <xTimerCreateTimerTask>
 800b478:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d11b      	bne.n	800b4b8 <vTaskStartScheduler+0x98>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	613b      	str	r3, [r7, #16]
}
 800b492:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b494:	4b15      	ldr	r3, [pc, #84]	@ (800b4ec <vTaskStartScheduler+0xcc>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3354      	adds	r3, #84	@ 0x54
 800b49a:	4a15      	ldr	r2, [pc, #84]	@ (800b4f0 <vTaskStartScheduler+0xd0>)
 800b49c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b49e:	4b15      	ldr	r3, [pc, #84]	@ (800b4f4 <vTaskStartScheduler+0xd4>)
 800b4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4a6:	4b14      	ldr	r3, [pc, #80]	@ (800b4f8 <vTaskStartScheduler+0xd8>)
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4ac:	4b13      	ldr	r3, [pc, #76]	@ (800b4fc <vTaskStartScheduler+0xdc>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4b2:	f001 f8e5 	bl	800c680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4b6:	e00f      	b.n	800b4d8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4be:	d10b      	bne.n	800b4d8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	60fb      	str	r3, [r7, #12]
}
 800b4d2:	bf00      	nop
 800b4d4:	bf00      	nop
 800b4d6:	e7fd      	b.n	800b4d4 <vTaskStartScheduler+0xb4>
}
 800b4d8:	bf00      	nop
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	0800d7cc 	.word	0x0800d7cc
 800b4e4:	0800bb31 	.word	0x0800bb31
 800b4e8:	20000f84 	.word	0x20000f84
 800b4ec:	20000a8c 	.word	0x20000a8c
 800b4f0:	20000030 	.word	0x20000030
 800b4f4:	20000f80 	.word	0x20000f80
 800b4f8:	20000f6c 	.word	0x20000f6c
 800b4fc:	20000f64 	.word	0x20000f64

0800b500 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b500:	b480      	push	{r7}
 800b502:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b504:	4b04      	ldr	r3, [pc, #16]	@ (800b518 <vTaskSuspendAll+0x18>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3301      	adds	r3, #1
 800b50a:	4a03      	ldr	r2, [pc, #12]	@ (800b518 <vTaskSuspendAll+0x18>)
 800b50c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b50e:	bf00      	nop
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	20000f88 	.word	0x20000f88

0800b51c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b522:	2300      	movs	r3, #0
 800b524:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b526:	2300      	movs	r3, #0
 800b528:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b52a:	4b42      	ldr	r3, [pc, #264]	@ (800b634 <xTaskResumeAll+0x118>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10b      	bne.n	800b54a <xTaskResumeAll+0x2e>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	603b      	str	r3, [r7, #0]
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop
 800b548:	e7fd      	b.n	800b546 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b54a:	f001 f93d 	bl	800c7c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b54e:	4b39      	ldr	r3, [pc, #228]	@ (800b634 <xTaskResumeAll+0x118>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3b01      	subs	r3, #1
 800b554:	4a37      	ldr	r2, [pc, #220]	@ (800b634 <xTaskResumeAll+0x118>)
 800b556:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b558:	4b36      	ldr	r3, [pc, #216]	@ (800b634 <xTaskResumeAll+0x118>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d162      	bne.n	800b626 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b560:	4b35      	ldr	r3, [pc, #212]	@ (800b638 <xTaskResumeAll+0x11c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d05e      	beq.n	800b626 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b568:	e02f      	b.n	800b5ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b56a:	4b34      	ldr	r3, [pc, #208]	@ (800b63c <xTaskResumeAll+0x120>)
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	3318      	adds	r3, #24
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe ff7c 	bl	800a474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	3304      	adds	r3, #4
 800b580:	4618      	mov	r0, r3
 800b582:	f7fe ff77 	bl	800a474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b58a:	4b2d      	ldr	r3, [pc, #180]	@ (800b640 <xTaskResumeAll+0x124>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d903      	bls.n	800b59a <xTaskResumeAll+0x7e>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b596:	4a2a      	ldr	r2, [pc, #168]	@ (800b640 <xTaskResumeAll+0x124>)
 800b598:	6013      	str	r3, [r2, #0]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b59e:	4613      	mov	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4a27      	ldr	r2, [pc, #156]	@ (800b644 <xTaskResumeAll+0x128>)
 800b5a8:	441a      	add	r2, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	f7fe ff02 	bl	800a3ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ba:	4b23      	ldr	r3, [pc, #140]	@ (800b648 <xTaskResumeAll+0x12c>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d302      	bcc.n	800b5ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b5c4:	4b21      	ldr	r3, [pc, #132]	@ (800b64c <xTaskResumeAll+0x130>)
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5ca:	4b1c      	ldr	r3, [pc, #112]	@ (800b63c <xTaskResumeAll+0x120>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1cb      	bne.n	800b56a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d001      	beq.n	800b5dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5d8:	f000 fb66 	bl	800bca8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5dc:	4b1c      	ldr	r3, [pc, #112]	@ (800b650 <xTaskResumeAll+0x134>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d010      	beq.n	800b60a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5e8:	f000 f846 	bl	800b678 <xTaskIncrementTick>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b5f2:	4b16      	ldr	r3, [pc, #88]	@ (800b64c <xTaskResumeAll+0x130>)
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1f1      	bne.n	800b5e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b604:	4b12      	ldr	r3, [pc, #72]	@ (800b650 <xTaskResumeAll+0x134>)
 800b606:	2200      	movs	r2, #0
 800b608:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b60a:	4b10      	ldr	r3, [pc, #64]	@ (800b64c <xTaskResumeAll+0x130>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d009      	beq.n	800b626 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b612:	2301      	movs	r3, #1
 800b614:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b616:	4b0f      	ldr	r3, [pc, #60]	@ (800b654 <xTaskResumeAll+0x138>)
 800b618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b61c:	601a      	str	r2, [r3, #0]
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b626:	f001 f901 	bl	800c82c <vPortExitCritical>

	return xAlreadyYielded;
 800b62a:	68bb      	ldr	r3, [r7, #8]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	20000f88 	.word	0x20000f88
 800b638:	20000f60 	.word	0x20000f60
 800b63c:	20000f20 	.word	0x20000f20
 800b640:	20000f68 	.word	0x20000f68
 800b644:	20000a90 	.word	0x20000a90
 800b648:	20000a8c 	.word	0x20000a8c
 800b64c:	20000f74 	.word	0x20000f74
 800b650:	20000f70 	.word	0x20000f70
 800b654:	e000ed04 	.word	0xe000ed04

0800b658 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b65e:	4b05      	ldr	r3, [pc, #20]	@ (800b674 <xTaskGetTickCount+0x1c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b664:	687b      	ldr	r3, [r7, #4]
}
 800b666:	4618      	mov	r0, r3
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	20000f64 	.word	0x20000f64

0800b678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b67e:	2300      	movs	r3, #0
 800b680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b682:	4b4f      	ldr	r3, [pc, #316]	@ (800b7c0 <xTaskIncrementTick+0x148>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f040 8090 	bne.w	800b7ac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b68c:	4b4d      	ldr	r3, [pc, #308]	@ (800b7c4 <xTaskIncrementTick+0x14c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3301      	adds	r3, #1
 800b692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b694:	4a4b      	ldr	r2, [pc, #300]	@ (800b7c4 <xTaskIncrementTick+0x14c>)
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d121      	bne.n	800b6e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b6a0:	4b49      	ldr	r3, [pc, #292]	@ (800b7c8 <xTaskIncrementTick+0x150>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00b      	beq.n	800b6c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	603b      	str	r3, [r7, #0]
}
 800b6bc:	bf00      	nop
 800b6be:	bf00      	nop
 800b6c0:	e7fd      	b.n	800b6be <xTaskIncrementTick+0x46>
 800b6c2:	4b41      	ldr	r3, [pc, #260]	@ (800b7c8 <xTaskIncrementTick+0x150>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	60fb      	str	r3, [r7, #12]
 800b6c8:	4b40      	ldr	r3, [pc, #256]	@ (800b7cc <xTaskIncrementTick+0x154>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a3e      	ldr	r2, [pc, #248]	@ (800b7c8 <xTaskIncrementTick+0x150>)
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	4a3e      	ldr	r2, [pc, #248]	@ (800b7cc <xTaskIncrementTick+0x154>)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	4b3e      	ldr	r3, [pc, #248]	@ (800b7d0 <xTaskIncrementTick+0x158>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	4a3c      	ldr	r2, [pc, #240]	@ (800b7d0 <xTaskIncrementTick+0x158>)
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	f000 fae2 	bl	800bca8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6e4:	4b3b      	ldr	r3, [pc, #236]	@ (800b7d4 <xTaskIncrementTick+0x15c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d349      	bcc.n	800b782 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6ee:	4b36      	ldr	r3, [pc, #216]	@ (800b7c8 <xTaskIncrementTick+0x150>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d104      	bne.n	800b702 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6f8:	4b36      	ldr	r3, [pc, #216]	@ (800b7d4 <xTaskIncrementTick+0x15c>)
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fe:	601a      	str	r2, [r3, #0]
					break;
 800b700:	e03f      	b.n	800b782 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b702:	4b31      	ldr	r3, [pc, #196]	@ (800b7c8 <xTaskIncrementTick+0x150>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	429a      	cmp	r2, r3
 800b718:	d203      	bcs.n	800b722 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b71a:	4a2e      	ldr	r2, [pc, #184]	@ (800b7d4 <xTaskIncrementTick+0x15c>)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b720:	e02f      	b.n	800b782 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	3304      	adds	r3, #4
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe fea4 	bl	800a474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b730:	2b00      	cmp	r3, #0
 800b732:	d004      	beq.n	800b73e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	3318      	adds	r3, #24
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fe fe9b 	bl	800a474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b742:	4b25      	ldr	r3, [pc, #148]	@ (800b7d8 <xTaskIncrementTick+0x160>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	429a      	cmp	r2, r3
 800b748:	d903      	bls.n	800b752 <xTaskIncrementTick+0xda>
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74e:	4a22      	ldr	r2, [pc, #136]	@ (800b7d8 <xTaskIncrementTick+0x160>)
 800b750:	6013      	str	r3, [r2, #0]
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b756:	4613      	mov	r3, r2
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	4413      	add	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4a1f      	ldr	r2, [pc, #124]	@ (800b7dc <xTaskIncrementTick+0x164>)
 800b760:	441a      	add	r2, r3
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	3304      	adds	r3, #4
 800b766:	4619      	mov	r1, r3
 800b768:	4610      	mov	r0, r2
 800b76a:	f7fe fe26 	bl	800a3ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b772:	4b1b      	ldr	r3, [pc, #108]	@ (800b7e0 <xTaskIncrementTick+0x168>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b778:	429a      	cmp	r2, r3
 800b77a:	d3b8      	bcc.n	800b6ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b77c:	2301      	movs	r3, #1
 800b77e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b780:	e7b5      	b.n	800b6ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b782:	4b17      	ldr	r3, [pc, #92]	@ (800b7e0 <xTaskIncrementTick+0x168>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b788:	4914      	ldr	r1, [pc, #80]	@ (800b7dc <xTaskIncrementTick+0x164>)
 800b78a:	4613      	mov	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4413      	add	r3, r2
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	440b      	add	r3, r1
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d901      	bls.n	800b79e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b79a:	2301      	movs	r3, #1
 800b79c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b79e:	4b11      	ldr	r3, [pc, #68]	@ (800b7e4 <xTaskIncrementTick+0x16c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	617b      	str	r3, [r7, #20]
 800b7aa:	e004      	b.n	800b7b6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b7ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b7e8 <xTaskIncrementTick+0x170>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	4a0d      	ldr	r2, [pc, #52]	@ (800b7e8 <xTaskIncrementTick+0x170>)
 800b7b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b7b6:	697b      	ldr	r3, [r7, #20]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20000f88 	.word	0x20000f88
 800b7c4:	20000f64 	.word	0x20000f64
 800b7c8:	20000f18 	.word	0x20000f18
 800b7cc:	20000f1c 	.word	0x20000f1c
 800b7d0:	20000f78 	.word	0x20000f78
 800b7d4:	20000f80 	.word	0x20000f80
 800b7d8:	20000f68 	.word	0x20000f68
 800b7dc:	20000a90 	.word	0x20000a90
 800b7e0:	20000a8c 	.word	0x20000a8c
 800b7e4:	20000f74 	.word	0x20000f74
 800b7e8:	20000f70 	.word	0x20000f70

0800b7ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7f2:	4b2b      	ldr	r3, [pc, #172]	@ (800b8a0 <vTaskSwitchContext+0xb4>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d003      	beq.n	800b802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7fa:	4b2a      	ldr	r3, [pc, #168]	@ (800b8a4 <vTaskSwitchContext+0xb8>)
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b800:	e047      	b.n	800b892 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b802:	4b28      	ldr	r3, [pc, #160]	@ (800b8a4 <vTaskSwitchContext+0xb8>)
 800b804:	2200      	movs	r2, #0
 800b806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b808:	4b27      	ldr	r3, [pc, #156]	@ (800b8a8 <vTaskSwitchContext+0xbc>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	e011      	b.n	800b834 <vTaskSwitchContext+0x48>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10b      	bne.n	800b82e <vTaskSwitchContext+0x42>
	__asm volatile
 800b816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	607b      	str	r3, [r7, #4]
}
 800b828:	bf00      	nop
 800b82a:	bf00      	nop
 800b82c:	e7fd      	b.n	800b82a <vTaskSwitchContext+0x3e>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3b01      	subs	r3, #1
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	491d      	ldr	r1, [pc, #116]	@ (800b8ac <vTaskSwitchContext+0xc0>)
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4613      	mov	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	440b      	add	r3, r1
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0e3      	beq.n	800b810 <vTaskSwitchContext+0x24>
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	4613      	mov	r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4413      	add	r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	4a16      	ldr	r2, [pc, #88]	@ (800b8ac <vTaskSwitchContext+0xc0>)
 800b854:	4413      	add	r3, r2
 800b856:	60bb      	str	r3, [r7, #8]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	605a      	str	r2, [r3, #4]
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	3308      	adds	r3, #8
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d104      	bne.n	800b878 <vTaskSwitchContext+0x8c>
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	605a      	str	r2, [r3, #4]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	4a0c      	ldr	r2, [pc, #48]	@ (800b8b0 <vTaskSwitchContext+0xc4>)
 800b880:	6013      	str	r3, [r2, #0]
 800b882:	4a09      	ldr	r2, [pc, #36]	@ (800b8a8 <vTaskSwitchContext+0xbc>)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b888:	4b09      	ldr	r3, [pc, #36]	@ (800b8b0 <vTaskSwitchContext+0xc4>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3354      	adds	r3, #84	@ 0x54
 800b88e:	4a09      	ldr	r2, [pc, #36]	@ (800b8b4 <vTaskSwitchContext+0xc8>)
 800b890:	6013      	str	r3, [r2, #0]
}
 800b892:	bf00      	nop
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	20000f88 	.word	0x20000f88
 800b8a4:	20000f74 	.word	0x20000f74
 800b8a8:	20000f68 	.word	0x20000f68
 800b8ac:	20000a90 	.word	0x20000a90
 800b8b0:	20000a8c 	.word	0x20000a8c
 800b8b4:	20000030 	.word	0x20000030

0800b8b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d10b      	bne.n	800b8e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	60fb      	str	r3, [r7, #12]
}
 800b8da:	bf00      	nop
 800b8dc:	bf00      	nop
 800b8de:	e7fd      	b.n	800b8dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8e0:	4b07      	ldr	r3, [pc, #28]	@ (800b900 <vTaskPlaceOnEventList+0x48>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	3318      	adds	r3, #24
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7fe fd8a 	bl	800a402 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8ee:	2101      	movs	r1, #1
 800b8f0:	6838      	ldr	r0, [r7, #0]
 800b8f2:	f000 fa87 	bl	800be04 <prvAddCurrentTaskToDelayedList>
}
 800b8f6:	bf00      	nop
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20000a8c 	.word	0x20000a8c

0800b904 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b904:	b580      	push	{r7, lr}
 800b906:	b086      	sub	sp, #24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10b      	bne.n	800b92e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	617b      	str	r3, [r7, #20]
}
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
 800b92c:	e7fd      	b.n	800b92a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b92e:	4b0a      	ldr	r3, [pc, #40]	@ (800b958 <vTaskPlaceOnEventListRestricted+0x54>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3318      	adds	r3, #24
 800b934:	4619      	mov	r1, r3
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7fe fd3f 	bl	800a3ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d002      	beq.n	800b948 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b942:	f04f 33ff 	mov.w	r3, #4294967295
 800b946:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b948:	6879      	ldr	r1, [r7, #4]
 800b94a:	68b8      	ldr	r0, [r7, #8]
 800b94c:	f000 fa5a 	bl	800be04 <prvAddCurrentTaskToDelayedList>
	}
 800b950:	bf00      	nop
 800b952:	3718      	adds	r7, #24
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20000a8c 	.word	0x20000a8c

0800b95c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b086      	sub	sp, #24
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10b      	bne.n	800b98a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	60fb      	str	r3, [r7, #12]
}
 800b984:	bf00      	nop
 800b986:	bf00      	nop
 800b988:	e7fd      	b.n	800b986 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	3318      	adds	r3, #24
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fe fd70 	bl	800a474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b994:	4b1d      	ldr	r3, [pc, #116]	@ (800ba0c <xTaskRemoveFromEventList+0xb0>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d11d      	bne.n	800b9d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe fd67 	bl	800a474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9aa:	4b19      	ldr	r3, [pc, #100]	@ (800ba10 <xTaskRemoveFromEventList+0xb4>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d903      	bls.n	800b9ba <xTaskRemoveFromEventList+0x5e>
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b6:	4a16      	ldr	r2, [pc, #88]	@ (800ba10 <xTaskRemoveFromEventList+0xb4>)
 800b9b8:	6013      	str	r3, [r2, #0]
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9be:	4613      	mov	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4a13      	ldr	r2, [pc, #76]	@ (800ba14 <xTaskRemoveFromEventList+0xb8>)
 800b9c8:	441a      	add	r2, r3
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	f7fe fcf2 	bl	800a3ba <vListInsertEnd>
 800b9d6:	e005      	b.n	800b9e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	3318      	adds	r3, #24
 800b9dc:	4619      	mov	r1, r3
 800b9de:	480e      	ldr	r0, [pc, #56]	@ (800ba18 <xTaskRemoveFromEventList+0xbc>)
 800b9e0:	f7fe fceb 	bl	800a3ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e8:	4b0c      	ldr	r3, [pc, #48]	@ (800ba1c <xTaskRemoveFromEventList+0xc0>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d905      	bls.n	800b9fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9f6:	4b0a      	ldr	r3, [pc, #40]	@ (800ba20 <xTaskRemoveFromEventList+0xc4>)
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	601a      	str	r2, [r3, #0]
 800b9fc:	e001      	b.n	800ba02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba02:	697b      	ldr	r3, [r7, #20]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	20000f88 	.word	0x20000f88
 800ba10:	20000f68 	.word	0x20000f68
 800ba14:	20000a90 	.word	0x20000a90
 800ba18:	20000f20 	.word	0x20000f20
 800ba1c:	20000a8c 	.word	0x20000a8c
 800ba20:	20000f74 	.word	0x20000f74

0800ba24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba2c:	4b06      	ldr	r3, [pc, #24]	@ (800ba48 <vTaskInternalSetTimeOutState+0x24>)
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba34:	4b05      	ldr	r3, [pc, #20]	@ (800ba4c <vTaskInternalSetTimeOutState+0x28>)
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	605a      	str	r2, [r3, #4]
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	20000f78 	.word	0x20000f78
 800ba4c:	20000f64 	.word	0x20000f64

0800ba50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10b      	bne.n	800ba78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	613b      	str	r3, [r7, #16]
}
 800ba72:	bf00      	nop
 800ba74:	bf00      	nop
 800ba76:	e7fd      	b.n	800ba74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10b      	bne.n	800ba96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	60fb      	str	r3, [r7, #12]
}
 800ba90:	bf00      	nop
 800ba92:	bf00      	nop
 800ba94:	e7fd      	b.n	800ba92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba96:	f000 fe97 	bl	800c7c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba9a:	4b1d      	ldr	r3, [pc, #116]	@ (800bb10 <xTaskCheckForTimeOut+0xc0>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	69ba      	ldr	r2, [r7, #24]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab2:	d102      	bne.n	800baba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bab4:	2300      	movs	r3, #0
 800bab6:	61fb      	str	r3, [r7, #28]
 800bab8:	e023      	b.n	800bb02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	4b15      	ldr	r3, [pc, #84]	@ (800bb14 <xTaskCheckForTimeOut+0xc4>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d007      	beq.n	800bad6 <xTaskCheckForTimeOut+0x86>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	69ba      	ldr	r2, [r7, #24]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d302      	bcc.n	800bad6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	61fb      	str	r3, [r7, #28]
 800bad4:	e015      	b.n	800bb02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	429a      	cmp	r2, r3
 800bade:	d20b      	bcs.n	800baf8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	1ad2      	subs	r2, r2, r3
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff ff99 	bl	800ba24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800baf2:	2300      	movs	r3, #0
 800baf4:	61fb      	str	r3, [r7, #28]
 800baf6:	e004      	b.n	800bb02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bafe:	2301      	movs	r3, #1
 800bb00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb02:	f000 fe93 	bl	800c82c <vPortExitCritical>

	return xReturn;
 800bb06:	69fb      	ldr	r3, [r7, #28]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3720      	adds	r7, #32
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20000f64 	.word	0x20000f64
 800bb14:	20000f78 	.word	0x20000f78

0800bb18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb18:	b480      	push	{r7}
 800bb1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb1c:	4b03      	ldr	r3, [pc, #12]	@ (800bb2c <vTaskMissedYield+0x14>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	601a      	str	r2, [r3, #0]
}
 800bb22:	bf00      	nop
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	20000f74 	.word	0x20000f74

0800bb30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb38:	f000 f852 	bl	800bbe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb3c:	4b06      	ldr	r3, [pc, #24]	@ (800bb58 <prvIdleTask+0x28>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d9f9      	bls.n	800bb38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb44:	4b05      	ldr	r3, [pc, #20]	@ (800bb5c <prvIdleTask+0x2c>)
 800bb46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb4a:	601a      	str	r2, [r3, #0]
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb54:	e7f0      	b.n	800bb38 <prvIdleTask+0x8>
 800bb56:	bf00      	nop
 800bb58:	20000a90 	.word	0x20000a90
 800bb5c:	e000ed04 	.word	0xe000ed04

0800bb60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb66:	2300      	movs	r3, #0
 800bb68:	607b      	str	r3, [r7, #4]
 800bb6a:	e00c      	b.n	800bb86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4a12      	ldr	r2, [pc, #72]	@ (800bbc0 <prvInitialiseTaskLists+0x60>)
 800bb78:	4413      	add	r3, r2
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fe fbf0 	bl	800a360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3301      	adds	r3, #1
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b37      	cmp	r3, #55	@ 0x37
 800bb8a:	d9ef      	bls.n	800bb6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb8c:	480d      	ldr	r0, [pc, #52]	@ (800bbc4 <prvInitialiseTaskLists+0x64>)
 800bb8e:	f7fe fbe7 	bl	800a360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb92:	480d      	ldr	r0, [pc, #52]	@ (800bbc8 <prvInitialiseTaskLists+0x68>)
 800bb94:	f7fe fbe4 	bl	800a360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb98:	480c      	ldr	r0, [pc, #48]	@ (800bbcc <prvInitialiseTaskLists+0x6c>)
 800bb9a:	f7fe fbe1 	bl	800a360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb9e:	480c      	ldr	r0, [pc, #48]	@ (800bbd0 <prvInitialiseTaskLists+0x70>)
 800bba0:	f7fe fbde 	bl	800a360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bba4:	480b      	ldr	r0, [pc, #44]	@ (800bbd4 <prvInitialiseTaskLists+0x74>)
 800bba6:	f7fe fbdb 	bl	800a360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbaa:	4b0b      	ldr	r3, [pc, #44]	@ (800bbd8 <prvInitialiseTaskLists+0x78>)
 800bbac:	4a05      	ldr	r2, [pc, #20]	@ (800bbc4 <prvInitialiseTaskLists+0x64>)
 800bbae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbdc <prvInitialiseTaskLists+0x7c>)
 800bbb2:	4a05      	ldr	r2, [pc, #20]	@ (800bbc8 <prvInitialiseTaskLists+0x68>)
 800bbb4:	601a      	str	r2, [r3, #0]
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20000a90 	.word	0x20000a90
 800bbc4:	20000ef0 	.word	0x20000ef0
 800bbc8:	20000f04 	.word	0x20000f04
 800bbcc:	20000f20 	.word	0x20000f20
 800bbd0:	20000f34 	.word	0x20000f34
 800bbd4:	20000f4c 	.word	0x20000f4c
 800bbd8:	20000f18 	.word	0x20000f18
 800bbdc:	20000f1c 	.word	0x20000f1c

0800bbe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbe6:	e019      	b.n	800bc1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbe8:	f000 fdee 	bl	800c7c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbec:	4b10      	ldr	r3, [pc, #64]	@ (800bc30 <prvCheckTasksWaitingTermination+0x50>)
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fe fc3b 	bl	800a474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbfe:	4b0d      	ldr	r3, [pc, #52]	@ (800bc34 <prvCheckTasksWaitingTermination+0x54>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3b01      	subs	r3, #1
 800bc04:	4a0b      	ldr	r2, [pc, #44]	@ (800bc34 <prvCheckTasksWaitingTermination+0x54>)
 800bc06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc08:	4b0b      	ldr	r3, [pc, #44]	@ (800bc38 <prvCheckTasksWaitingTermination+0x58>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	4a0a      	ldr	r2, [pc, #40]	@ (800bc38 <prvCheckTasksWaitingTermination+0x58>)
 800bc10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc12:	f000 fe0b 	bl	800c82c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f810 	bl	800bc3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc1c:	4b06      	ldr	r3, [pc, #24]	@ (800bc38 <prvCheckTasksWaitingTermination+0x58>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e1      	bne.n	800bbe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc24:	bf00      	nop
 800bc26:	bf00      	nop
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	20000f34 	.word	0x20000f34
 800bc34:	20000f60 	.word	0x20000f60
 800bc38:	20000f48 	.word	0x20000f48

0800bc3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	3354      	adds	r3, #84	@ 0x54
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f001 fc97 	bl	800d57c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d108      	bne.n	800bc6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 ffa3 	bl	800cba8 <vPortFree>
				vPortFree( pxTCB );
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 ffa0 	bl	800cba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc68:	e019      	b.n	800bc9e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d103      	bne.n	800bc7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 ff97 	bl	800cba8 <vPortFree>
	}
 800bc7a:	e010      	b.n	800bc9e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d00b      	beq.n	800bc9e <prvDeleteTCB+0x62>
	__asm volatile
 800bc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	60fb      	str	r3, [r7, #12]
}
 800bc98:	bf00      	nop
 800bc9a:	bf00      	nop
 800bc9c:	e7fd      	b.n	800bc9a <prvDeleteTCB+0x5e>
	}
 800bc9e:	bf00      	nop
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
	...

0800bca8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcae:	4b0c      	ldr	r3, [pc, #48]	@ (800bce0 <prvResetNextTaskUnblockTime+0x38>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d104      	bne.n	800bcc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcb8:	4b0a      	ldr	r3, [pc, #40]	@ (800bce4 <prvResetNextTaskUnblockTime+0x3c>)
 800bcba:	f04f 32ff 	mov.w	r2, #4294967295
 800bcbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcc0:	e008      	b.n	800bcd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcc2:	4b07      	ldr	r3, [pc, #28]	@ (800bce0 <prvResetNextTaskUnblockTime+0x38>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	4a04      	ldr	r2, [pc, #16]	@ (800bce4 <prvResetNextTaskUnblockTime+0x3c>)
 800bcd2:	6013      	str	r3, [r2, #0]
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	20000f18 	.word	0x20000f18
 800bce4:	20000f80 	.word	0x20000f80

0800bce8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bcee:	4b0b      	ldr	r3, [pc, #44]	@ (800bd1c <xTaskGetSchedulerState+0x34>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d102      	bne.n	800bcfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	607b      	str	r3, [r7, #4]
 800bcfa:	e008      	b.n	800bd0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcfc:	4b08      	ldr	r3, [pc, #32]	@ (800bd20 <xTaskGetSchedulerState+0x38>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d102      	bne.n	800bd0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd04:	2302      	movs	r3, #2
 800bd06:	607b      	str	r3, [r7, #4]
 800bd08:	e001      	b.n	800bd0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd0e:	687b      	ldr	r3, [r7, #4]
	}
 800bd10:	4618      	mov	r0, r3
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr
 800bd1c:	20000f6c 	.word	0x20000f6c
 800bd20:	20000f88 	.word	0x20000f88

0800bd24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d058      	beq.n	800bdec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bdf8 <xTaskPriorityDisinherit+0xd4>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d00b      	beq.n	800bd5c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	60fb      	str	r3, [r7, #12]
}
 800bd56:	bf00      	nop
 800bd58:	bf00      	nop
 800bd5a:	e7fd      	b.n	800bd58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10b      	bne.n	800bd7c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	60bb      	str	r3, [r7, #8]
}
 800bd76:	bf00      	nop
 800bd78:	bf00      	nop
 800bd7a:	e7fd      	b.n	800bd78 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd80:	1e5a      	subs	r2, r3, #1
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d02c      	beq.n	800bdec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d128      	bne.n	800bdec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fe fb68 	bl	800a474 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdbc:	4b0f      	ldr	r3, [pc, #60]	@ (800bdfc <xTaskPriorityDisinherit+0xd8>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d903      	bls.n	800bdcc <xTaskPriorityDisinherit+0xa8>
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc8:	4a0c      	ldr	r2, [pc, #48]	@ (800bdfc <xTaskPriorityDisinherit+0xd8>)
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4a09      	ldr	r2, [pc, #36]	@ (800be00 <xTaskPriorityDisinherit+0xdc>)
 800bdda:	441a      	add	r2, r3
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	3304      	adds	r3, #4
 800bde0:	4619      	mov	r1, r3
 800bde2:	4610      	mov	r0, r2
 800bde4:	f7fe fae9 	bl	800a3ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bde8:	2301      	movs	r3, #1
 800bdea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdec:	697b      	ldr	r3, [r7, #20]
	}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20000a8c 	.word	0x20000a8c
 800bdfc:	20000f68 	.word	0x20000f68
 800be00:	20000a90 	.word	0x20000a90

0800be04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be0e:	4b21      	ldr	r3, [pc, #132]	@ (800be94 <prvAddCurrentTaskToDelayedList+0x90>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be14:	4b20      	ldr	r3, [pc, #128]	@ (800be98 <prvAddCurrentTaskToDelayedList+0x94>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	3304      	adds	r3, #4
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe fb2a 	bl	800a474 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be26:	d10a      	bne.n	800be3e <prvAddCurrentTaskToDelayedList+0x3a>
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d007      	beq.n	800be3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be2e:	4b1a      	ldr	r3, [pc, #104]	@ (800be98 <prvAddCurrentTaskToDelayedList+0x94>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3304      	adds	r3, #4
 800be34:	4619      	mov	r1, r3
 800be36:	4819      	ldr	r0, [pc, #100]	@ (800be9c <prvAddCurrentTaskToDelayedList+0x98>)
 800be38:	f7fe fabf 	bl	800a3ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be3c:	e026      	b.n	800be8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4413      	add	r3, r2
 800be44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be46:	4b14      	ldr	r3, [pc, #80]	@ (800be98 <prvAddCurrentTaskToDelayedList+0x94>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	429a      	cmp	r2, r3
 800be54:	d209      	bcs.n	800be6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be56:	4b12      	ldr	r3, [pc, #72]	@ (800bea0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	4b0f      	ldr	r3, [pc, #60]	@ (800be98 <prvAddCurrentTaskToDelayedList+0x94>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	3304      	adds	r3, #4
 800be60:	4619      	mov	r1, r3
 800be62:	4610      	mov	r0, r2
 800be64:	f7fe facd 	bl	800a402 <vListInsert>
}
 800be68:	e010      	b.n	800be8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be6a:	4b0e      	ldr	r3, [pc, #56]	@ (800bea4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	4b0a      	ldr	r3, [pc, #40]	@ (800be98 <prvAddCurrentTaskToDelayedList+0x94>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	3304      	adds	r3, #4
 800be74:	4619      	mov	r1, r3
 800be76:	4610      	mov	r0, r2
 800be78:	f7fe fac3 	bl	800a402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bea8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	429a      	cmp	r2, r3
 800be84:	d202      	bcs.n	800be8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be86:	4a08      	ldr	r2, [pc, #32]	@ (800bea8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	6013      	str	r3, [r2, #0]
}
 800be8c:	bf00      	nop
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	20000f64 	.word	0x20000f64
 800be98:	20000a8c 	.word	0x20000a8c
 800be9c:	20000f4c 	.word	0x20000f4c
 800bea0:	20000f1c 	.word	0x20000f1c
 800bea4:	20000f18 	.word	0x20000f18
 800bea8:	20000f80 	.word	0x20000f80

0800beac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b08a      	sub	sp, #40	@ 0x28
 800beb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800beb2:	2300      	movs	r3, #0
 800beb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800beb6:	f000 fb13 	bl	800c4e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800beba:	4b1d      	ldr	r3, [pc, #116]	@ (800bf30 <xTimerCreateTimerTask+0x84>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d021      	beq.n	800bf06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800beca:	1d3a      	adds	r2, r7, #4
 800becc:	f107 0108 	add.w	r1, r7, #8
 800bed0:	f107 030c 	add.w	r3, r7, #12
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7fe fa29 	bl	800a32c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	9202      	str	r2, [sp, #8]
 800bee2:	9301      	str	r3, [sp, #4]
 800bee4:	2302      	movs	r3, #2
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	2300      	movs	r3, #0
 800beea:	460a      	mov	r2, r1
 800beec:	4911      	ldr	r1, [pc, #68]	@ (800bf34 <xTimerCreateTimerTask+0x88>)
 800beee:	4812      	ldr	r0, [pc, #72]	@ (800bf38 <xTimerCreateTimerTask+0x8c>)
 800bef0:	f7ff f8a2 	bl	800b038 <xTaskCreateStatic>
 800bef4:	4603      	mov	r3, r0
 800bef6:	4a11      	ldr	r2, [pc, #68]	@ (800bf3c <xTimerCreateTimerTask+0x90>)
 800bef8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800befa:	4b10      	ldr	r3, [pc, #64]	@ (800bf3c <xTimerCreateTimerTask+0x90>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d001      	beq.n	800bf06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf02:	2301      	movs	r3, #1
 800bf04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10b      	bne.n	800bf24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	613b      	str	r3, [r7, #16]
}
 800bf1e:	bf00      	nop
 800bf20:	bf00      	nop
 800bf22:	e7fd      	b.n	800bf20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf24:	697b      	ldr	r3, [r7, #20]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20000fbc 	.word	0x20000fbc
 800bf34:	0800d7d4 	.word	0x0800d7d4
 800bf38:	0800c079 	.word	0x0800c079
 800bf3c:	20000fc0 	.word	0x20000fc0

0800bf40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08a      	sub	sp, #40	@ 0x28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
 800bf4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10b      	bne.n	800bf70 <xTimerGenericCommand+0x30>
	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	623b      	str	r3, [r7, #32]
}
 800bf6a:	bf00      	nop
 800bf6c:	bf00      	nop
 800bf6e:	e7fd      	b.n	800bf6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf70:	4b19      	ldr	r3, [pc, #100]	@ (800bfd8 <xTimerGenericCommand+0x98>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d02a      	beq.n	800bfce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2b05      	cmp	r3, #5
 800bf88:	dc18      	bgt.n	800bfbc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf8a:	f7ff fead 	bl	800bce8 <xTaskGetSchedulerState>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d109      	bne.n	800bfa8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf94:	4b10      	ldr	r3, [pc, #64]	@ (800bfd8 <xTimerGenericCommand+0x98>)
 800bf96:	6818      	ldr	r0, [r3, #0]
 800bf98:	f107 0110 	add.w	r1, r7, #16
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfa0:	f7fe fbd8 	bl	800a754 <xQueueGenericSend>
 800bfa4:	6278      	str	r0, [r7, #36]	@ 0x24
 800bfa6:	e012      	b.n	800bfce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bfa8:	4b0b      	ldr	r3, [pc, #44]	@ (800bfd8 <xTimerGenericCommand+0x98>)
 800bfaa:	6818      	ldr	r0, [r3, #0]
 800bfac:	f107 0110 	add.w	r1, r7, #16
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f7fe fbce 	bl	800a754 <xQueueGenericSend>
 800bfb8:	6278      	str	r0, [r7, #36]	@ 0x24
 800bfba:	e008      	b.n	800bfce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bfbc:	4b06      	ldr	r3, [pc, #24]	@ (800bfd8 <xTimerGenericCommand+0x98>)
 800bfbe:	6818      	ldr	r0, [r3, #0]
 800bfc0:	f107 0110 	add.w	r1, r7, #16
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	f7fe fcc6 	bl	800a958 <xQueueGenericSendFromISR>
 800bfcc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3728      	adds	r7, #40	@ 0x28
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	20000fbc 	.word	0x20000fbc

0800bfdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af02      	add	r7, sp, #8
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfe6:	4b23      	ldr	r3, [pc, #140]	@ (800c074 <prvProcessExpiredTimer+0x98>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	3304      	adds	r3, #4
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fe fa3d 	bl	800a474 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	2b00      	cmp	r3, #0
 800c006:	d023      	beq.n	800c050 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	699a      	ldr	r2, [r3, #24]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	18d1      	adds	r1, r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	6978      	ldr	r0, [r7, #20]
 800c016:	f000 f8d5 	bl	800c1c4 <prvInsertTimerInActiveList>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d020      	beq.n	800c062 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c020:	2300      	movs	r3, #0
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	2300      	movs	r3, #0
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	2100      	movs	r1, #0
 800c02a:	6978      	ldr	r0, [r7, #20]
 800c02c:	f7ff ff88 	bl	800bf40 <xTimerGenericCommand>
 800c030:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d114      	bne.n	800c062 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	60fb      	str	r3, [r7, #12]
}
 800c04a:	bf00      	nop
 800c04c:	bf00      	nop
 800c04e:	e7fd      	b.n	800c04c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c056:	f023 0301 	bic.w	r3, r3, #1
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	6978      	ldr	r0, [r7, #20]
 800c068:	4798      	blx	r3
}
 800c06a:	bf00      	nop
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20000fb4 	.word	0x20000fb4

0800c078 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c080:	f107 0308 	add.w	r3, r7, #8
 800c084:	4618      	mov	r0, r3
 800c086:	f000 f859 	bl	800c13c <prvGetNextExpireTime>
 800c08a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	4619      	mov	r1, r3
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f000 f805 	bl	800c0a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c096:	f000 f8d7 	bl	800c248 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c09a:	bf00      	nop
 800c09c:	e7f0      	b.n	800c080 <prvTimerTask+0x8>
	...

0800c0a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c0aa:	f7ff fa29 	bl	800b500 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0ae:	f107 0308 	add.w	r3, r7, #8
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 f866 	bl	800c184 <prvSampleTimeNow>
 800c0b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d130      	bne.n	800c122 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10a      	bne.n	800c0dc <prvProcessTimerOrBlockTask+0x3c>
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d806      	bhi.n	800c0dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c0ce:	f7ff fa25 	bl	800b51c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0d2:	68f9      	ldr	r1, [r7, #12]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7ff ff81 	bl	800bfdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c0da:	e024      	b.n	800c126 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d008      	beq.n	800c0f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0e2:	4b13      	ldr	r3, [pc, #76]	@ (800c130 <prvProcessTimerOrBlockTask+0x90>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <prvProcessTimerOrBlockTask+0x50>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e000      	b.n	800c0f2 <prvProcessTimerOrBlockTask+0x52>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0f4:	4b0f      	ldr	r3, [pc, #60]	@ (800c134 <prvProcessTimerOrBlockTask+0x94>)
 800c0f6:	6818      	ldr	r0, [r3, #0]
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	4619      	mov	r1, r3
 800c102:	f7fe ff65 	bl	800afd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c106:	f7ff fa09 	bl	800b51c <xTaskResumeAll>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10a      	bne.n	800c126 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c110:	4b09      	ldr	r3, [pc, #36]	@ (800c138 <prvProcessTimerOrBlockTask+0x98>)
 800c112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	f3bf 8f6f 	isb	sy
}
 800c120:	e001      	b.n	800c126 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c122:	f7ff f9fb 	bl	800b51c <xTaskResumeAll>
}
 800c126:	bf00      	nop
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	20000fb8 	.word	0x20000fb8
 800c134:	20000fbc 	.word	0x20000fbc
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c144:	4b0e      	ldr	r3, [pc, #56]	@ (800c180 <prvGetNextExpireTime+0x44>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <prvGetNextExpireTime+0x16>
 800c14e:	2201      	movs	r2, #1
 800c150:	e000      	b.n	800c154 <prvGetNextExpireTime+0x18>
 800c152:	2200      	movs	r2, #0
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d105      	bne.n	800c16c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c160:	4b07      	ldr	r3, [pc, #28]	@ (800c180 <prvGetNextExpireTime+0x44>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	60fb      	str	r3, [r7, #12]
 800c16a:	e001      	b.n	800c170 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c16c:	2300      	movs	r3, #0
 800c16e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c170:	68fb      	ldr	r3, [r7, #12]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	20000fb4 	.word	0x20000fb4

0800c184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c18c:	f7ff fa64 	bl	800b658 <xTaskGetTickCount>
 800c190:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c192:	4b0b      	ldr	r3, [pc, #44]	@ (800c1c0 <prvSampleTimeNow+0x3c>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d205      	bcs.n	800c1a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c19c:	f000 f93a 	bl	800c414 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	601a      	str	r2, [r3, #0]
 800c1a6:	e002      	b.n	800c1ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c1ae:	4a04      	ldr	r2, [pc, #16]	@ (800c1c0 <prvSampleTimeNow+0x3c>)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	20000fc4 	.word	0x20000fc4

0800c1c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b086      	sub	sp, #24
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d812      	bhi.n	800c210 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	1ad2      	subs	r2, r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	699b      	ldr	r3, [r3, #24]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d302      	bcc.n	800c1fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	617b      	str	r3, [r7, #20]
 800c1fc:	e01b      	b.n	800c236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1fe:	4b10      	ldr	r3, [pc, #64]	@ (800c240 <prvInsertTimerInActiveList+0x7c>)
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3304      	adds	r3, #4
 800c206:	4619      	mov	r1, r3
 800c208:	4610      	mov	r0, r2
 800c20a:	f7fe f8fa 	bl	800a402 <vListInsert>
 800c20e:	e012      	b.n	800c236 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	429a      	cmp	r2, r3
 800c216:	d206      	bcs.n	800c226 <prvInsertTimerInActiveList+0x62>
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d302      	bcc.n	800c226 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c220:	2301      	movs	r3, #1
 800c222:	617b      	str	r3, [r7, #20]
 800c224:	e007      	b.n	800c236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c226:	4b07      	ldr	r3, [pc, #28]	@ (800c244 <prvInsertTimerInActiveList+0x80>)
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	3304      	adds	r3, #4
 800c22e:	4619      	mov	r1, r3
 800c230:	4610      	mov	r0, r2
 800c232:	f7fe f8e6 	bl	800a402 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c236:	697b      	ldr	r3, [r7, #20]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3718      	adds	r7, #24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	20000fb8 	.word	0x20000fb8
 800c244:	20000fb4 	.word	0x20000fb4

0800c248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08e      	sub	sp, #56	@ 0x38
 800c24c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c24e:	e0ce      	b.n	800c3ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	da19      	bge.n	800c28a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c256:	1d3b      	adds	r3, r7, #4
 800c258:	3304      	adds	r3, #4
 800c25a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10b      	bne.n	800c27a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c266:	f383 8811 	msr	BASEPRI, r3
 800c26a:	f3bf 8f6f 	isb	sy
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	61fb      	str	r3, [r7, #28]
}
 800c274:	bf00      	nop
 800c276:	bf00      	nop
 800c278:	e7fd      	b.n	800c276 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c280:	6850      	ldr	r0, [r2, #4]
 800c282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c284:	6892      	ldr	r2, [r2, #8]
 800c286:	4611      	mov	r1, r2
 800c288:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f2c0 80ae 	blt.w	800c3ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d004      	beq.n	800c2a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fe f8e6 	bl	800a474 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2a8:	463b      	mov	r3, r7
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff ff6a 	bl	800c184 <prvSampleTimeNow>
 800c2b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b09      	cmp	r3, #9
 800c2b6:	f200 8097 	bhi.w	800c3e8 <prvProcessReceivedCommands+0x1a0>
 800c2ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c0 <prvProcessReceivedCommands+0x78>)
 800c2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c0:	0800c2e9 	.word	0x0800c2e9
 800c2c4:	0800c2e9 	.word	0x0800c2e9
 800c2c8:	0800c2e9 	.word	0x0800c2e9
 800c2cc:	0800c35f 	.word	0x0800c35f
 800c2d0:	0800c373 	.word	0x0800c373
 800c2d4:	0800c3bf 	.word	0x0800c3bf
 800c2d8:	0800c2e9 	.word	0x0800c2e9
 800c2dc:	0800c2e9 	.word	0x0800c2e9
 800c2e0:	0800c35f 	.word	0x0800c35f
 800c2e4:	0800c373 	.word	0x0800c373
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2ee:	f043 0301 	orr.w	r3, r3, #1
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	18d1      	adds	r1, r2, r3
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c308:	f7ff ff5c 	bl	800c1c4 <prvInsertTimerInActiveList>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d06c      	beq.n	800c3ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c314:	6a1b      	ldr	r3, [r3, #32]
 800c316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c318:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c31c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b00      	cmp	r3, #0
 800c326:	d061      	beq.n	800c3ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c32c:	699b      	ldr	r3, [r3, #24]
 800c32e:	441a      	add	r2, r3
 800c330:	2300      	movs	r3, #0
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	2300      	movs	r3, #0
 800c336:	2100      	movs	r1, #0
 800c338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c33a:	f7ff fe01 	bl	800bf40 <xTimerGenericCommand>
 800c33e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c340:	6a3b      	ldr	r3, [r7, #32]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d152      	bne.n	800c3ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	61bb      	str	r3, [r7, #24]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c364:	f023 0301 	bic.w	r3, r3, #1
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c370:	e03d      	b.n	800c3ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c378:	f043 0301 	orr.w	r3, r3, #1
 800c37c:	b2da      	uxtb	r2, r3
 800c37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c380:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c384:	68ba      	ldr	r2, [r7, #8]
 800c386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c388:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38c:	699b      	ldr	r3, [r3, #24]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10b      	bne.n	800c3aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	617b      	str	r3, [r7, #20]
}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop
 800c3a8:	e7fd      	b.n	800c3a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ac:	699a      	ldr	r2, [r3, #24]
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b0:	18d1      	adds	r1, r2, r3
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3b8:	f7ff ff04 	bl	800c1c4 <prvInsertTimerInActiveList>
					break;
 800c3bc:	e017      	b.n	800c3ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3c4:	f003 0302 	and.w	r3, r3, #2
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d103      	bne.n	800c3d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c3cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3ce:	f000 fbeb 	bl	800cba8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c3d2:	e00c      	b.n	800c3ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3da:	f023 0301 	bic.w	r3, r3, #1
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c3e6:	e002      	b.n	800c3ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c3e8:	bf00      	nop
 800c3ea:	e000      	b.n	800c3ee <prvProcessReceivedCommands+0x1a6>
					break;
 800c3ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3ee:	4b08      	ldr	r3, [pc, #32]	@ (800c410 <prvProcessReceivedCommands+0x1c8>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	1d39      	adds	r1, r7, #4
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fe fb4c 	bl	800aa94 <xQueueReceive>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f47f af26 	bne.w	800c250 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop
 800c408:	3730      	adds	r7, #48	@ 0x30
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	20000fbc 	.word	0x20000fbc

0800c414 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b088      	sub	sp, #32
 800c418:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c41a:	e049      	b.n	800c4b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c41c:	4b2e      	ldr	r3, [pc, #184]	@ (800c4d8 <prvSwitchTimerLists+0xc4>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c426:	4b2c      	ldr	r3, [pc, #176]	@ (800c4d8 <prvSwitchTimerLists+0xc4>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	3304      	adds	r3, #4
 800c434:	4618      	mov	r0, r3
 800c436:	f7fe f81d 	bl	800a474 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c448:	f003 0304 	and.w	r3, r3, #4
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d02f      	beq.n	800c4b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	4413      	add	r3, r2
 800c458:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d90e      	bls.n	800c480 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c46e:	4b1a      	ldr	r3, [pc, #104]	@ (800c4d8 <prvSwitchTimerLists+0xc4>)
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	3304      	adds	r3, #4
 800c476:	4619      	mov	r1, r3
 800c478:	4610      	mov	r0, r2
 800c47a:	f7fd ffc2 	bl	800a402 <vListInsert>
 800c47e:	e017      	b.n	800c4b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c480:	2300      	movs	r3, #0
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	2300      	movs	r3, #0
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	2100      	movs	r1, #0
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f7ff fd58 	bl	800bf40 <xTimerGenericCommand>
 800c490:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10b      	bne.n	800c4b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	603b      	str	r3, [r7, #0]
}
 800c4aa:	bf00      	nop
 800c4ac:	bf00      	nop
 800c4ae:	e7fd      	b.n	800c4ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4b0:	4b09      	ldr	r3, [pc, #36]	@ (800c4d8 <prvSwitchTimerLists+0xc4>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1b0      	bne.n	800c41c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c4ba:	4b07      	ldr	r3, [pc, #28]	@ (800c4d8 <prvSwitchTimerLists+0xc4>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c4c0:	4b06      	ldr	r3, [pc, #24]	@ (800c4dc <prvSwitchTimerLists+0xc8>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a04      	ldr	r2, [pc, #16]	@ (800c4d8 <prvSwitchTimerLists+0xc4>)
 800c4c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c4c8:	4a04      	ldr	r2, [pc, #16]	@ (800c4dc <prvSwitchTimerLists+0xc8>)
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	6013      	str	r3, [r2, #0]
}
 800c4ce:	bf00      	nop
 800c4d0:	3718      	adds	r7, #24
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20000fb4 	.word	0x20000fb4
 800c4dc:	20000fb8 	.word	0x20000fb8

0800c4e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c4e6:	f000 f96f 	bl	800c7c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c4ea:	4b15      	ldr	r3, [pc, #84]	@ (800c540 <prvCheckForValidListAndQueue+0x60>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d120      	bne.n	800c534 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c4f2:	4814      	ldr	r0, [pc, #80]	@ (800c544 <prvCheckForValidListAndQueue+0x64>)
 800c4f4:	f7fd ff34 	bl	800a360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c4f8:	4813      	ldr	r0, [pc, #76]	@ (800c548 <prvCheckForValidListAndQueue+0x68>)
 800c4fa:	f7fd ff31 	bl	800a360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c4fe:	4b13      	ldr	r3, [pc, #76]	@ (800c54c <prvCheckForValidListAndQueue+0x6c>)
 800c500:	4a10      	ldr	r2, [pc, #64]	@ (800c544 <prvCheckForValidListAndQueue+0x64>)
 800c502:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c504:	4b12      	ldr	r3, [pc, #72]	@ (800c550 <prvCheckForValidListAndQueue+0x70>)
 800c506:	4a10      	ldr	r2, [pc, #64]	@ (800c548 <prvCheckForValidListAndQueue+0x68>)
 800c508:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c50a:	2300      	movs	r3, #0
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	4b11      	ldr	r3, [pc, #68]	@ (800c554 <prvCheckForValidListAndQueue+0x74>)
 800c510:	4a11      	ldr	r2, [pc, #68]	@ (800c558 <prvCheckForValidListAndQueue+0x78>)
 800c512:	2110      	movs	r1, #16
 800c514:	200a      	movs	r0, #10
 800c516:	f7fe f841 	bl	800a59c <xQueueGenericCreateStatic>
 800c51a:	4603      	mov	r3, r0
 800c51c:	4a08      	ldr	r2, [pc, #32]	@ (800c540 <prvCheckForValidListAndQueue+0x60>)
 800c51e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c520:	4b07      	ldr	r3, [pc, #28]	@ (800c540 <prvCheckForValidListAndQueue+0x60>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d005      	beq.n	800c534 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c528:	4b05      	ldr	r3, [pc, #20]	@ (800c540 <prvCheckForValidListAndQueue+0x60>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	490b      	ldr	r1, [pc, #44]	@ (800c55c <prvCheckForValidListAndQueue+0x7c>)
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fe fd24 	bl	800af7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c534:	f000 f97a 	bl	800c82c <vPortExitCritical>
}
 800c538:	bf00      	nop
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	20000fbc 	.word	0x20000fbc
 800c544:	20000f8c 	.word	0x20000f8c
 800c548:	20000fa0 	.word	0x20000fa0
 800c54c:	20000fb4 	.word	0x20000fb4
 800c550:	20000fb8 	.word	0x20000fb8
 800c554:	20001068 	.word	0x20001068
 800c558:	20000fc8 	.word	0x20000fc8
 800c55c:	0800d7dc 	.word	0x0800d7dc

0800c560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3b04      	subs	r3, #4
 800c570:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3b04      	subs	r3, #4
 800c57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	f023 0201 	bic.w	r2, r3, #1
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	3b04      	subs	r3, #4
 800c58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c590:	4a0c      	ldr	r2, [pc, #48]	@ (800c5c4 <pxPortInitialiseStack+0x64>)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3b14      	subs	r3, #20
 800c59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	3b04      	subs	r3, #4
 800c5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f06f 0202 	mvn.w	r2, #2
 800c5ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	3b20      	subs	r3, #32
 800c5b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	0800c5c9 	.word	0x0800c5c9

0800c5c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5d2:	4b13      	ldr	r3, [pc, #76]	@ (800c620 <prvTaskExitError+0x58>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5da:	d00b      	beq.n	800c5f4 <prvTaskExitError+0x2c>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	60fb      	str	r3, [r7, #12]
}
 800c5ee:	bf00      	nop
 800c5f0:	bf00      	nop
 800c5f2:	e7fd      	b.n	800c5f0 <prvTaskExitError+0x28>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	60bb      	str	r3, [r7, #8]
}
 800c606:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c608:	bf00      	nop
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0fc      	beq.n	800c60a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c610:	bf00      	nop
 800c612:	bf00      	nop
 800c614:	3714      	adds	r7, #20
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	2000002c 	.word	0x2000002c
	...

0800c630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c630:	4b07      	ldr	r3, [pc, #28]	@ (800c650 <pxCurrentTCBConst2>)
 800c632:	6819      	ldr	r1, [r3, #0]
 800c634:	6808      	ldr	r0, [r1, #0]
 800c636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63a:	f380 8809 	msr	PSP, r0
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f04f 0000 	mov.w	r0, #0
 800c646:	f380 8811 	msr	BASEPRI, r0
 800c64a:	4770      	bx	lr
 800c64c:	f3af 8000 	nop.w

0800c650 <pxCurrentTCBConst2>:
 800c650:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c654:	bf00      	nop
 800c656:	bf00      	nop

0800c658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c658:	4808      	ldr	r0, [pc, #32]	@ (800c67c <prvPortStartFirstTask+0x24>)
 800c65a:	6800      	ldr	r0, [r0, #0]
 800c65c:	6800      	ldr	r0, [r0, #0]
 800c65e:	f380 8808 	msr	MSP, r0
 800c662:	f04f 0000 	mov.w	r0, #0
 800c666:	f380 8814 	msr	CONTROL, r0
 800c66a:	b662      	cpsie	i
 800c66c:	b661      	cpsie	f
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	df00      	svc	0
 800c678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c67a:	bf00      	nop
 800c67c:	e000ed08 	.word	0xe000ed08

0800c680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c686:	4b47      	ldr	r3, [pc, #284]	@ (800c7a4 <xPortStartScheduler+0x124>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a47      	ldr	r2, [pc, #284]	@ (800c7a8 <xPortStartScheduler+0x128>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d10b      	bne.n	800c6a8 <xPortStartScheduler+0x28>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	613b      	str	r3, [r7, #16]
}
 800c6a2:	bf00      	nop
 800c6a4:	bf00      	nop
 800c6a6:	e7fd      	b.n	800c6a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c6a8:	4b3e      	ldr	r3, [pc, #248]	@ (800c7a4 <xPortStartScheduler+0x124>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a3f      	ldr	r2, [pc, #252]	@ (800c7ac <xPortStartScheduler+0x12c>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d10b      	bne.n	800c6ca <xPortStartScheduler+0x4a>
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	60fb      	str	r3, [r7, #12]
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop
 800c6c8:	e7fd      	b.n	800c6c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6ca:	4b39      	ldr	r3, [pc, #228]	@ (800c7b0 <xPortStartScheduler+0x130>)
 800c6cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	22ff      	movs	r2, #255	@ 0xff
 800c6da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6e4:	78fb      	ldrb	r3, [r7, #3]
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	4b31      	ldr	r3, [pc, #196]	@ (800c7b4 <xPortStartScheduler+0x134>)
 800c6f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6f2:	4b31      	ldr	r3, [pc, #196]	@ (800c7b8 <xPortStartScheduler+0x138>)
 800c6f4:	2207      	movs	r2, #7
 800c6f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6f8:	e009      	b.n	800c70e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c6fa:	4b2f      	ldr	r3, [pc, #188]	@ (800c7b8 <xPortStartScheduler+0x138>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	3b01      	subs	r3, #1
 800c700:	4a2d      	ldr	r2, [pc, #180]	@ (800c7b8 <xPortStartScheduler+0x138>)
 800c702:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c704:	78fb      	ldrb	r3, [r7, #3]
 800c706:	b2db      	uxtb	r3, r3
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c70e:	78fb      	ldrb	r3, [r7, #3]
 800c710:	b2db      	uxtb	r3, r3
 800c712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c716:	2b80      	cmp	r3, #128	@ 0x80
 800c718:	d0ef      	beq.n	800c6fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c71a:	4b27      	ldr	r3, [pc, #156]	@ (800c7b8 <xPortStartScheduler+0x138>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f1c3 0307 	rsb	r3, r3, #7
 800c722:	2b04      	cmp	r3, #4
 800c724:	d00b      	beq.n	800c73e <xPortStartScheduler+0xbe>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	60bb      	str	r3, [r7, #8]
}
 800c738:	bf00      	nop
 800c73a:	bf00      	nop
 800c73c:	e7fd      	b.n	800c73a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c73e:	4b1e      	ldr	r3, [pc, #120]	@ (800c7b8 <xPortStartScheduler+0x138>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	021b      	lsls	r3, r3, #8
 800c744:	4a1c      	ldr	r2, [pc, #112]	@ (800c7b8 <xPortStartScheduler+0x138>)
 800c746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c748:	4b1b      	ldr	r3, [pc, #108]	@ (800c7b8 <xPortStartScheduler+0x138>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c750:	4a19      	ldr	r2, [pc, #100]	@ (800c7b8 <xPortStartScheduler+0x138>)
 800c752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	b2da      	uxtb	r2, r3
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c75c:	4b17      	ldr	r3, [pc, #92]	@ (800c7bc <xPortStartScheduler+0x13c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a16      	ldr	r2, [pc, #88]	@ (800c7bc <xPortStartScheduler+0x13c>)
 800c762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c768:	4b14      	ldr	r3, [pc, #80]	@ (800c7bc <xPortStartScheduler+0x13c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a13      	ldr	r2, [pc, #76]	@ (800c7bc <xPortStartScheduler+0x13c>)
 800c76e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c774:	f000 f8da 	bl	800c92c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c778:	4b11      	ldr	r3, [pc, #68]	@ (800c7c0 <xPortStartScheduler+0x140>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c77e:	f000 f8f9 	bl	800c974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c782:	4b10      	ldr	r3, [pc, #64]	@ (800c7c4 <xPortStartScheduler+0x144>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a0f      	ldr	r2, [pc, #60]	@ (800c7c4 <xPortStartScheduler+0x144>)
 800c788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c78c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c78e:	f7ff ff63 	bl	800c658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c792:	f7ff f82b 	bl	800b7ec <vTaskSwitchContext>
	prvTaskExitError();
 800c796:	f7ff ff17 	bl	800c5c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	e000ed00 	.word	0xe000ed00
 800c7a8:	410fc271 	.word	0x410fc271
 800c7ac:	410fc270 	.word	0x410fc270
 800c7b0:	e000e400 	.word	0xe000e400
 800c7b4:	200010b8 	.word	0x200010b8
 800c7b8:	200010bc 	.word	0x200010bc
 800c7bc:	e000ed20 	.word	0xe000ed20
 800c7c0:	2000002c 	.word	0x2000002c
 800c7c4:	e000ef34 	.word	0xe000ef34

0800c7c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	607b      	str	r3, [r7, #4]
}
 800c7e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7e2:	4b10      	ldr	r3, [pc, #64]	@ (800c824 <vPortEnterCritical+0x5c>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	4a0e      	ldr	r2, [pc, #56]	@ (800c824 <vPortEnterCritical+0x5c>)
 800c7ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c824 <vPortEnterCritical+0x5c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d110      	bne.n	800c816 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c828 <vPortEnterCritical+0x60>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00b      	beq.n	800c816 <vPortEnterCritical+0x4e>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	603b      	str	r3, [r7, #0]
}
 800c810:	bf00      	nop
 800c812:	bf00      	nop
 800c814:	e7fd      	b.n	800c812 <vPortEnterCritical+0x4a>
	}
}
 800c816:	bf00      	nop
 800c818:	370c      	adds	r7, #12
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	2000002c 	.word	0x2000002c
 800c828:	e000ed04 	.word	0xe000ed04

0800c82c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c832:	4b12      	ldr	r3, [pc, #72]	@ (800c87c <vPortExitCritical+0x50>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10b      	bne.n	800c852 <vPortExitCritical+0x26>
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	607b      	str	r3, [r7, #4]
}
 800c84c:	bf00      	nop
 800c84e:	bf00      	nop
 800c850:	e7fd      	b.n	800c84e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c852:	4b0a      	ldr	r3, [pc, #40]	@ (800c87c <vPortExitCritical+0x50>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	3b01      	subs	r3, #1
 800c858:	4a08      	ldr	r2, [pc, #32]	@ (800c87c <vPortExitCritical+0x50>)
 800c85a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c85c:	4b07      	ldr	r3, [pc, #28]	@ (800c87c <vPortExitCritical+0x50>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d105      	bne.n	800c870 <vPortExitCritical+0x44>
 800c864:	2300      	movs	r3, #0
 800c866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	f383 8811 	msr	BASEPRI, r3
}
 800c86e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c870:	bf00      	nop
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	2000002c 	.word	0x2000002c

0800c880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c880:	f3ef 8009 	mrs	r0, PSP
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	4b15      	ldr	r3, [pc, #84]	@ (800c8e0 <pxCurrentTCBConst>)
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	f01e 0f10 	tst.w	lr, #16
 800c890:	bf08      	it	eq
 800c892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89a:	6010      	str	r0, [r2, #0]
 800c89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c8a4:	f380 8811 	msr	BASEPRI, r0
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f7fe ff9c 	bl	800b7ec <vTaskSwitchContext>
 800c8b4:	f04f 0000 	mov.w	r0, #0
 800c8b8:	f380 8811 	msr	BASEPRI, r0
 800c8bc:	bc09      	pop	{r0, r3}
 800c8be:	6819      	ldr	r1, [r3, #0]
 800c8c0:	6808      	ldr	r0, [r1, #0]
 800c8c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c6:	f01e 0f10 	tst.w	lr, #16
 800c8ca:	bf08      	it	eq
 800c8cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8d0:	f380 8809 	msr	PSP, r0
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	f3af 8000 	nop.w

0800c8e0 <pxCurrentTCBConst>:
 800c8e0:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop

0800c8e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	607b      	str	r3, [r7, #4]
}
 800c900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c902:	f7fe feb9 	bl	800b678 <xTaskIncrementTick>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d003      	beq.n	800c914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c90c:	4b06      	ldr	r3, [pc, #24]	@ (800c928 <xPortSysTickHandler+0x40>)
 800c90e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c912:	601a      	str	r2, [r3, #0]
 800c914:	2300      	movs	r3, #0
 800c916:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	f383 8811 	msr	BASEPRI, r3
}
 800c91e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	e000ed04 	.word	0xe000ed04

0800c92c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c92c:	b480      	push	{r7}
 800c92e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c930:	4b0b      	ldr	r3, [pc, #44]	@ (800c960 <vPortSetupTimerInterrupt+0x34>)
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c936:	4b0b      	ldr	r3, [pc, #44]	@ (800c964 <vPortSetupTimerInterrupt+0x38>)
 800c938:	2200      	movs	r2, #0
 800c93a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c93c:	4b0a      	ldr	r3, [pc, #40]	@ (800c968 <vPortSetupTimerInterrupt+0x3c>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a0a      	ldr	r2, [pc, #40]	@ (800c96c <vPortSetupTimerInterrupt+0x40>)
 800c942:	fba2 2303 	umull	r2, r3, r2, r3
 800c946:	099b      	lsrs	r3, r3, #6
 800c948:	4a09      	ldr	r2, [pc, #36]	@ (800c970 <vPortSetupTimerInterrupt+0x44>)
 800c94a:	3b01      	subs	r3, #1
 800c94c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c94e:	4b04      	ldr	r3, [pc, #16]	@ (800c960 <vPortSetupTimerInterrupt+0x34>)
 800c950:	2207      	movs	r2, #7
 800c952:	601a      	str	r2, [r3, #0]
}
 800c954:	bf00      	nop
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	e000e010 	.word	0xe000e010
 800c964:	e000e018 	.word	0xe000e018
 800c968:	20000000 	.word	0x20000000
 800c96c:	10624dd3 	.word	0x10624dd3
 800c970:	e000e014 	.word	0xe000e014

0800c974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c984 <vPortEnableVFP+0x10>
 800c978:	6801      	ldr	r1, [r0, #0]
 800c97a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c97e:	6001      	str	r1, [r0, #0]
 800c980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c982:	bf00      	nop
 800c984:	e000ed88 	.word	0xe000ed88

0800c988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c98e:	f3ef 8305 	mrs	r3, IPSR
 800c992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2b0f      	cmp	r3, #15
 800c998:	d915      	bls.n	800c9c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c99a:	4a18      	ldr	r2, [pc, #96]	@ (800c9fc <vPortValidateInterruptPriority+0x74>)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	4413      	add	r3, r2
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c9a4:	4b16      	ldr	r3, [pc, #88]	@ (800ca00 <vPortValidateInterruptPriority+0x78>)
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	7afa      	ldrb	r2, [r7, #11]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d20b      	bcs.n	800c9c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	607b      	str	r3, [r7, #4]
}
 800c9c0:	bf00      	nop
 800c9c2:	bf00      	nop
 800c9c4:	e7fd      	b.n	800c9c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9c6:	4b0f      	ldr	r3, [pc, #60]	@ (800ca04 <vPortValidateInterruptPriority+0x7c>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c9ce:	4b0e      	ldr	r3, [pc, #56]	@ (800ca08 <vPortValidateInterruptPriority+0x80>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d90b      	bls.n	800c9ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	603b      	str	r3, [r7, #0]
}
 800c9e8:	bf00      	nop
 800c9ea:	bf00      	nop
 800c9ec:	e7fd      	b.n	800c9ea <vPortValidateInterruptPriority+0x62>
	}
 800c9ee:	bf00      	nop
 800c9f0:	3714      	adds	r7, #20
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	e000e3f0 	.word	0xe000e3f0
 800ca00:	200010b8 	.word	0x200010b8
 800ca04:	e000ed0c 	.word	0xe000ed0c
 800ca08:	200010bc 	.word	0x200010bc

0800ca0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b08a      	sub	sp, #40	@ 0x28
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca14:	2300      	movs	r3, #0
 800ca16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca18:	f7fe fd72 	bl	800b500 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca1c:	4b5c      	ldr	r3, [pc, #368]	@ (800cb90 <pvPortMalloc+0x184>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d101      	bne.n	800ca28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca24:	f000 f924 	bl	800cc70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca28:	4b5a      	ldr	r3, [pc, #360]	@ (800cb94 <pvPortMalloc+0x188>)
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4013      	ands	r3, r2
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f040 8095 	bne.w	800cb60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d01e      	beq.n	800ca7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ca3c:	2208      	movs	r2, #8
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4413      	add	r3, r2
 800ca42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f003 0307 	and.w	r3, r3, #7
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d015      	beq.n	800ca7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f023 0307 	bic.w	r3, r3, #7
 800ca54:	3308      	adds	r3, #8
 800ca56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f003 0307 	and.w	r3, r3, #7
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00b      	beq.n	800ca7a <pvPortMalloc+0x6e>
	__asm volatile
 800ca62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca66:	f383 8811 	msr	BASEPRI, r3
 800ca6a:	f3bf 8f6f 	isb	sy
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	617b      	str	r3, [r7, #20]
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop
 800ca78:	e7fd      	b.n	800ca76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d06f      	beq.n	800cb60 <pvPortMalloc+0x154>
 800ca80:	4b45      	ldr	r3, [pc, #276]	@ (800cb98 <pvPortMalloc+0x18c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d86a      	bhi.n	800cb60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca8a:	4b44      	ldr	r3, [pc, #272]	@ (800cb9c <pvPortMalloc+0x190>)
 800ca8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca8e:	4b43      	ldr	r3, [pc, #268]	@ (800cb9c <pvPortMalloc+0x190>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca94:	e004      	b.n	800caa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ca96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d903      	bls.n	800cab2 <pvPortMalloc+0xa6>
 800caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1f1      	bne.n	800ca96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cab2:	4b37      	ldr	r3, [pc, #220]	@ (800cb90 <pvPortMalloc+0x184>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cab8:	429a      	cmp	r2, r3
 800caba:	d051      	beq.n	800cb60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cabc:	6a3b      	ldr	r3, [r7, #32]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2208      	movs	r2, #8
 800cac2:	4413      	add	r3, r2
 800cac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad0:	685a      	ldr	r2, [r3, #4]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	1ad2      	subs	r2, r2, r3
 800cad6:	2308      	movs	r3, #8
 800cad8:	005b      	lsls	r3, r3, #1
 800cada:	429a      	cmp	r2, r3
 800cadc:	d920      	bls.n	800cb20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4413      	add	r3, r2
 800cae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	f003 0307 	and.w	r3, r3, #7
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00b      	beq.n	800cb08 <pvPortMalloc+0xfc>
	__asm volatile
 800caf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf4:	f383 8811 	msr	BASEPRI, r3
 800caf8:	f3bf 8f6f 	isb	sy
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	613b      	str	r3, [r7, #16]
}
 800cb02:	bf00      	nop
 800cb04:	bf00      	nop
 800cb06:	e7fd      	b.n	800cb04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	1ad2      	subs	r2, r2, r3
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb1a:	69b8      	ldr	r0, [r7, #24]
 800cb1c:	f000 f90a 	bl	800cd34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb20:	4b1d      	ldr	r3, [pc, #116]	@ (800cb98 <pvPortMalloc+0x18c>)
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	4a1b      	ldr	r2, [pc, #108]	@ (800cb98 <pvPortMalloc+0x18c>)
 800cb2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb2e:	4b1a      	ldr	r3, [pc, #104]	@ (800cb98 <pvPortMalloc+0x18c>)
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	4b1b      	ldr	r3, [pc, #108]	@ (800cba0 <pvPortMalloc+0x194>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d203      	bcs.n	800cb42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb3a:	4b17      	ldr	r3, [pc, #92]	@ (800cb98 <pvPortMalloc+0x18c>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a18      	ldr	r2, [pc, #96]	@ (800cba0 <pvPortMalloc+0x194>)
 800cb40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb44:	685a      	ldr	r2, [r3, #4]
 800cb46:	4b13      	ldr	r3, [pc, #76]	@ (800cb94 <pvPortMalloc+0x188>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	431a      	orrs	r2, r3
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb52:	2200      	movs	r2, #0
 800cb54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb56:	4b13      	ldr	r3, [pc, #76]	@ (800cba4 <pvPortMalloc+0x198>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	4a11      	ldr	r2, [pc, #68]	@ (800cba4 <pvPortMalloc+0x198>)
 800cb5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb60:	f7fe fcdc 	bl	800b51c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	f003 0307 	and.w	r3, r3, #7
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00b      	beq.n	800cb86 <pvPortMalloc+0x17a>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	60fb      	str	r3, [r7, #12]
}
 800cb80:	bf00      	nop
 800cb82:	bf00      	nop
 800cb84:	e7fd      	b.n	800cb82 <pvPortMalloc+0x176>
	return pvReturn;
 800cb86:	69fb      	ldr	r3, [r7, #28]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3728      	adds	r7, #40	@ 0x28
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	20004cc8 	.word	0x20004cc8
 800cb94:	20004cdc 	.word	0x20004cdc
 800cb98:	20004ccc 	.word	0x20004ccc
 800cb9c:	20004cc0 	.word	0x20004cc0
 800cba0:	20004cd0 	.word	0x20004cd0
 800cba4:	20004cd4 	.word	0x20004cd4

0800cba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d04f      	beq.n	800cc5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbba:	2308      	movs	r3, #8
 800cbbc:	425b      	negs	r3, r3
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	4b25      	ldr	r3, [pc, #148]	@ (800cc64 <vPortFree+0xbc>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d10b      	bne.n	800cbee <vPortFree+0x46>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	60fb      	str	r3, [r7, #12]
}
 800cbe8:	bf00      	nop
 800cbea:	bf00      	nop
 800cbec:	e7fd      	b.n	800cbea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00b      	beq.n	800cc0e <vPortFree+0x66>
	__asm volatile
 800cbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	60bb      	str	r3, [r7, #8]
}
 800cc08:	bf00      	nop
 800cc0a:	bf00      	nop
 800cc0c:	e7fd      	b.n	800cc0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	685a      	ldr	r2, [r3, #4]
 800cc12:	4b14      	ldr	r3, [pc, #80]	@ (800cc64 <vPortFree+0xbc>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4013      	ands	r3, r2
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d01e      	beq.n	800cc5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d11a      	bne.n	800cc5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	685a      	ldr	r2, [r3, #4]
 800cc28:	4b0e      	ldr	r3, [pc, #56]	@ (800cc64 <vPortFree+0xbc>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	43db      	mvns	r3, r3
 800cc2e:	401a      	ands	r2, r3
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc34:	f7fe fc64 	bl	800b500 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	4b0a      	ldr	r3, [pc, #40]	@ (800cc68 <vPortFree+0xc0>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4413      	add	r3, r2
 800cc42:	4a09      	ldr	r2, [pc, #36]	@ (800cc68 <vPortFree+0xc0>)
 800cc44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc46:	6938      	ldr	r0, [r7, #16]
 800cc48:	f000 f874 	bl	800cd34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc4c:	4b07      	ldr	r3, [pc, #28]	@ (800cc6c <vPortFree+0xc4>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3301      	adds	r3, #1
 800cc52:	4a06      	ldr	r2, [pc, #24]	@ (800cc6c <vPortFree+0xc4>)
 800cc54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc56:	f7fe fc61 	bl	800b51c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc5a:	bf00      	nop
 800cc5c:	3718      	adds	r7, #24
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	20004cdc 	.word	0x20004cdc
 800cc68:	20004ccc 	.word	0x20004ccc
 800cc6c:	20004cd8 	.word	0x20004cd8

0800cc70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cc7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc7c:	4b27      	ldr	r3, [pc, #156]	@ (800cd1c <prvHeapInit+0xac>)
 800cc7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f003 0307 	and.w	r3, r3, #7
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00c      	beq.n	800cca4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	3307      	adds	r3, #7
 800cc8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f023 0307 	bic.w	r3, r3, #7
 800cc96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	4a1f      	ldr	r2, [pc, #124]	@ (800cd1c <prvHeapInit+0xac>)
 800cca0:	4413      	add	r3, r2
 800cca2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cca8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd20 <prvHeapInit+0xb0>)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ccae:	4b1c      	ldr	r3, [pc, #112]	@ (800cd20 <prvHeapInit+0xb0>)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	4413      	add	r3, r2
 800ccba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ccbc:	2208      	movs	r2, #8
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	1a9b      	subs	r3, r3, r2
 800ccc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f023 0307 	bic.w	r3, r3, #7
 800ccca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	4a15      	ldr	r2, [pc, #84]	@ (800cd24 <prvHeapInit+0xb4>)
 800ccd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccd2:	4b14      	ldr	r3, [pc, #80]	@ (800cd24 <prvHeapInit+0xb4>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccda:	4b12      	ldr	r3, [pc, #72]	@ (800cd24 <prvHeapInit+0xb4>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2200      	movs	r2, #0
 800cce0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	1ad2      	subs	r2, r2, r3
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ccf0:	4b0c      	ldr	r3, [pc, #48]	@ (800cd24 <prvHeapInit+0xb4>)
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	4a0a      	ldr	r2, [pc, #40]	@ (800cd28 <prvHeapInit+0xb8>)
 800ccfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	4a09      	ldr	r2, [pc, #36]	@ (800cd2c <prvHeapInit+0xbc>)
 800cd06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd08:	4b09      	ldr	r3, [pc, #36]	@ (800cd30 <prvHeapInit+0xc0>)
 800cd0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cd0e:	601a      	str	r2, [r3, #0]
}
 800cd10:	bf00      	nop
 800cd12:	3714      	adds	r7, #20
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	200010c0 	.word	0x200010c0
 800cd20:	20004cc0 	.word	0x20004cc0
 800cd24:	20004cc8 	.word	0x20004cc8
 800cd28:	20004cd0 	.word	0x20004cd0
 800cd2c:	20004ccc 	.word	0x20004ccc
 800cd30:	20004cdc 	.word	0x20004cdc

0800cd34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd3c:	4b28      	ldr	r3, [pc, #160]	@ (800cde0 <prvInsertBlockIntoFreeList+0xac>)
 800cd3e:	60fb      	str	r3, [r7, #12]
 800cd40:	e002      	b.n	800cd48 <prvInsertBlockIntoFreeList+0x14>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d8f7      	bhi.n	800cd42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d108      	bne.n	800cd76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	685a      	ldr	r2, [r3, #4]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	441a      	add	r2, r3
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	441a      	add	r2, r3
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d118      	bne.n	800cdbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	4b15      	ldr	r3, [pc, #84]	@ (800cde4 <prvInsertBlockIntoFreeList+0xb0>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d00d      	beq.n	800cdb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	685a      	ldr	r2, [r3, #4]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	441a      	add	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	601a      	str	r2, [r3, #0]
 800cdb0:	e008      	b.n	800cdc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cdb2:	4b0c      	ldr	r3, [pc, #48]	@ (800cde4 <prvInsertBlockIntoFreeList+0xb0>)
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	e003      	b.n	800cdc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d002      	beq.n	800cdd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdd2:	bf00      	nop
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	20004cc0 	.word	0x20004cc0
 800cde4:	20004cc8 	.word	0x20004cc8

0800cde8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800cdec:	2201      	movs	r2, #1
 800cdee:	490e      	ldr	r1, [pc, #56]	@ (800ce28 <MX_USB_HOST_Init+0x40>)
 800cdf0:	480e      	ldr	r0, [pc, #56]	@ (800ce2c <MX_USB_HOST_Init+0x44>)
 800cdf2:	f7fb f901 	bl	8007ff8 <USBH_Init>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d001      	beq.n	800ce00 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cdfc:	f7f4 f844 	bl	8000e88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ce00:	490b      	ldr	r1, [pc, #44]	@ (800ce30 <MX_USB_HOST_Init+0x48>)
 800ce02:	480a      	ldr	r0, [pc, #40]	@ (800ce2c <MX_USB_HOST_Init+0x44>)
 800ce04:	f7fb f9c7 	bl	8008196 <USBH_RegisterClass>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d001      	beq.n	800ce12 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ce0e:	f7f4 f83b 	bl	8000e88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ce12:	4806      	ldr	r0, [pc, #24]	@ (800ce2c <MX_USB_HOST_Init+0x44>)
 800ce14:	f7fb fa4b 	bl	80082ae <USBH_Start>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d001      	beq.n	800ce22 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ce1e:	f7f4 f833 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ce22:	bf00      	nop
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	0800ce35 	.word	0x0800ce35
 800ce2c:	20004ce0 	.word	0x20004ce0
 800ce30:	2000000c 	.word	0x2000000c

0800ce34 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ce40:	78fb      	ldrb	r3, [r7, #3]
 800ce42:	3b01      	subs	r3, #1
 800ce44:	2b04      	cmp	r3, #4
 800ce46:	d819      	bhi.n	800ce7c <USBH_UserProcess+0x48>
 800ce48:	a201      	add	r2, pc, #4	@ (adr r2, 800ce50 <USBH_UserProcess+0x1c>)
 800ce4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4e:	bf00      	nop
 800ce50:	0800ce7d 	.word	0x0800ce7d
 800ce54:	0800ce6d 	.word	0x0800ce6d
 800ce58:	0800ce7d 	.word	0x0800ce7d
 800ce5c:	0800ce75 	.word	0x0800ce75
 800ce60:	0800ce65 	.word	0x0800ce65
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ce64:	4b09      	ldr	r3, [pc, #36]	@ (800ce8c <USBH_UserProcess+0x58>)
 800ce66:	2203      	movs	r2, #3
 800ce68:	701a      	strb	r2, [r3, #0]
  break;
 800ce6a:	e008      	b.n	800ce7e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ce6c:	4b07      	ldr	r3, [pc, #28]	@ (800ce8c <USBH_UserProcess+0x58>)
 800ce6e:	2202      	movs	r2, #2
 800ce70:	701a      	strb	r2, [r3, #0]
  break;
 800ce72:	e004      	b.n	800ce7e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ce74:	4b05      	ldr	r3, [pc, #20]	@ (800ce8c <USBH_UserProcess+0x58>)
 800ce76:	2201      	movs	r2, #1
 800ce78:	701a      	strb	r2, [r3, #0]
  break;
 800ce7a:	e000      	b.n	800ce7e <USBH_UserProcess+0x4a>

  default:
  break;
 800ce7c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ce7e:	bf00      	nop
 800ce80:	370c      	adds	r7, #12
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	200050c4 	.word	0x200050c4

0800ce90 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08a      	sub	sp, #40	@ 0x28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce98:	f107 0314 	add.w	r3, r7, #20
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	605a      	str	r2, [r3, #4]
 800cea2:	609a      	str	r2, [r3, #8]
 800cea4:	60da      	str	r2, [r3, #12]
 800cea6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ceb0:	d147      	bne.n	800cf42 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	613b      	str	r3, [r7, #16]
 800ceb6:	4b25      	ldr	r3, [pc, #148]	@ (800cf4c <HAL_HCD_MspInit+0xbc>)
 800ceb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceba:	4a24      	ldr	r2, [pc, #144]	@ (800cf4c <HAL_HCD_MspInit+0xbc>)
 800cebc:	f043 0301 	orr.w	r3, r3, #1
 800cec0:	6313      	str	r3, [r2, #48]	@ 0x30
 800cec2:	4b22      	ldr	r3, [pc, #136]	@ (800cf4c <HAL_HCD_MspInit+0xbc>)
 800cec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cec6:	f003 0301 	and.w	r3, r3, #1
 800ceca:	613b      	str	r3, [r7, #16]
 800cecc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cece:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ced2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ced4:	2300      	movs	r3, #0
 800ced6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ced8:	2300      	movs	r3, #0
 800ceda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cedc:	f107 0314 	add.w	r3, r7, #20
 800cee0:	4619      	mov	r1, r3
 800cee2:	481b      	ldr	r0, [pc, #108]	@ (800cf50 <HAL_HCD_MspInit+0xc0>)
 800cee4:	f7f4 fc80 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800cee8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ceec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceee:	2302      	movs	r3, #2
 800cef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cef2:	2300      	movs	r3, #0
 800cef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cef6:	2303      	movs	r3, #3
 800cef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cefa:	230a      	movs	r3, #10
 800cefc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cefe:	f107 0314 	add.w	r3, r7, #20
 800cf02:	4619      	mov	r1, r3
 800cf04:	4812      	ldr	r0, [pc, #72]	@ (800cf50 <HAL_HCD_MspInit+0xc0>)
 800cf06:	f7f4 fc6f 	bl	80017e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cf0a:	4b10      	ldr	r3, [pc, #64]	@ (800cf4c <HAL_HCD_MspInit+0xbc>)
 800cf0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf0e:	4a0f      	ldr	r2, [pc, #60]	@ (800cf4c <HAL_HCD_MspInit+0xbc>)
 800cf10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf14:	6353      	str	r3, [r2, #52]	@ 0x34
 800cf16:	2300      	movs	r3, #0
 800cf18:	60fb      	str	r3, [r7, #12]
 800cf1a:	4b0c      	ldr	r3, [pc, #48]	@ (800cf4c <HAL_HCD_MspInit+0xbc>)
 800cf1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf1e:	4a0b      	ldr	r2, [pc, #44]	@ (800cf4c <HAL_HCD_MspInit+0xbc>)
 800cf20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cf24:	6453      	str	r3, [r2, #68]	@ 0x44
 800cf26:	4b09      	ldr	r3, [pc, #36]	@ (800cf4c <HAL_HCD_MspInit+0xbc>)
 800cf28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800cf32:	2200      	movs	r2, #0
 800cf34:	2105      	movs	r1, #5
 800cf36:	2043      	movs	r0, #67	@ 0x43
 800cf38:	f7f4 fc2c 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cf3c:	2043      	movs	r0, #67	@ 0x43
 800cf3e:	f7f4 fc45 	bl	80017cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cf42:	bf00      	nop
 800cf44:	3728      	adds	r7, #40	@ 0x28
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	40023800 	.word	0x40023800
 800cf50:	40020000 	.word	0x40020000

0800cf54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fb fe55 	bl	8008c12 <USBH_LL_IncTimer>
}
 800cf68:	bf00      	nop
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fb fe99 	bl	8008cb6 <USBH_LL_Connect>
}
 800cf84:	bf00      	nop
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fb feae 	bl	8008cfc <USBH_LL_Disconnect>
}
 800cfa0:	bf00      	nop
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	70fb      	strb	r3, [r7, #3]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fb fee5 	bl	8008d8e <USBH_LL_NotifyURBChange>
#endif
}
 800cfc4:	bf00      	nop
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fb fe43 	bl	8008c66 <USBH_LL_PortEnabled>
}
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fb fe4f 	bl	8008c9a <USBH_LL_PortDisabled>
}
 800cffc:	bf00      	nop
 800cffe:	3708      	adds	r7, #8
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d012:	2b01      	cmp	r3, #1
 800d014:	d12a      	bne.n	800d06c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d016:	4a18      	ldr	r2, [pc, #96]	@ (800d078 <USBH_LL_Init+0x74>)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4a15      	ldr	r2, [pc, #84]	@ (800d078 <USBH_LL_Init+0x74>)
 800d022:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d026:	4b14      	ldr	r3, [pc, #80]	@ (800d078 <USBH_LL_Init+0x74>)
 800d028:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d02c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d02e:	4b12      	ldr	r3, [pc, #72]	@ (800d078 <USBH_LL_Init+0x74>)
 800d030:	2208      	movs	r2, #8
 800d032:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d034:	4b10      	ldr	r3, [pc, #64]	@ (800d078 <USBH_LL_Init+0x74>)
 800d036:	2201      	movs	r2, #1
 800d038:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d03a:	4b0f      	ldr	r3, [pc, #60]	@ (800d078 <USBH_LL_Init+0x74>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d040:	4b0d      	ldr	r3, [pc, #52]	@ (800d078 <USBH_LL_Init+0x74>)
 800d042:	2202      	movs	r2, #2
 800d044:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d046:	4b0c      	ldr	r3, [pc, #48]	@ (800d078 <USBH_LL_Init+0x74>)
 800d048:	2200      	movs	r2, #0
 800d04a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d04c:	480a      	ldr	r0, [pc, #40]	@ (800d078 <USBH_LL_Init+0x74>)
 800d04e:	f7f4 fd82 	bl	8001b56 <HAL_HCD_Init>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d001      	beq.n	800d05c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d058:	f7f3 ff16 	bl	8000e88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d05c:	4806      	ldr	r0, [pc, #24]	@ (800d078 <USBH_LL_Init+0x74>)
 800d05e:	f7f5 f9e3 	bl	8002428 <HAL_HCD_GetCurrentFrame>
 800d062:	4603      	mov	r3, r0
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7fb fdc4 	bl	8008bf4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3708      	adds	r7, #8
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	200050c8 	.word	0x200050c8

0800d07c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d084:	2300      	movs	r3, #0
 800d086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d088:	2300      	movs	r3, #0
 800d08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d092:	4618      	mov	r0, r3
 800d094:	f7f5 f950 	bl	8002338 <HAL_HCD_Start>
 800d098:	4603      	mov	r3, r0
 800d09a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d09c:	7bfb      	ldrb	r3, [r7, #15]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 f95e 	bl	800d360 <USBH_Get_USB_Status>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7f5 f958 	bl	800237e <HAL_HCD_Stop>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f000 f943 	bl	800d360 <USBH_Get_USB_Status>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0de:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7f5 f9a2 	bl	8002444 <HAL_HCD_GetCurrentSpeed>
 800d100:	4603      	mov	r3, r0
 800d102:	2b02      	cmp	r3, #2
 800d104:	d00c      	beq.n	800d120 <USBH_LL_GetSpeed+0x38>
 800d106:	2b02      	cmp	r3, #2
 800d108:	d80d      	bhi.n	800d126 <USBH_LL_GetSpeed+0x3e>
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d002      	beq.n	800d114 <USBH_LL_GetSpeed+0x2c>
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d003      	beq.n	800d11a <USBH_LL_GetSpeed+0x32>
 800d112:	e008      	b.n	800d126 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d114:	2300      	movs	r3, #0
 800d116:	73fb      	strb	r3, [r7, #15]
    break;
 800d118:	e008      	b.n	800d12c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d11a:	2301      	movs	r3, #1
 800d11c:	73fb      	strb	r3, [r7, #15]
    break;
 800d11e:	e005      	b.n	800d12c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d120:	2302      	movs	r3, #2
 800d122:	73fb      	strb	r3, [r7, #15]
    break;
 800d124:	e002      	b.n	800d12c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d126:	2301      	movs	r3, #1
 800d128:	73fb      	strb	r3, [r7, #15]
    break;
 800d12a:	bf00      	nop
  }
  return  speed;
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b084      	sub	sp, #16
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7f5 f933 	bl	80023b8 <HAL_HCD_ResetPort>
 800d152:	4603      	mov	r3, r0
 800d154:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d156:	7bfb      	ldrb	r3, [r7, #15]
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 f901 	bl	800d360 <USBH_Get_USB_Status>
 800d15e:	4603      	mov	r3, r0
 800d160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d162:	7bbb      	ldrb	r3, [r7, #14]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d17e:	78fa      	ldrb	r2, [r7, #3]
 800d180:	4611      	mov	r1, r2
 800d182:	4618      	mov	r0, r3
 800d184:	f7f5 f93b 	bl	80023fe <HAL_HCD_HC_GetXferCount>
 800d188:	4603      	mov	r3, r0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d192:	b590      	push	{r4, r7, lr}
 800d194:	b089      	sub	sp, #36	@ 0x24
 800d196:	af04      	add	r7, sp, #16
 800d198:	6078      	str	r0, [r7, #4]
 800d19a:	4608      	mov	r0, r1
 800d19c:	4611      	mov	r1, r2
 800d19e:	461a      	mov	r2, r3
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	70fb      	strb	r3, [r7, #3]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	70bb      	strb	r3, [r7, #2]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d1ba:	787c      	ldrb	r4, [r7, #1]
 800d1bc:	78ba      	ldrb	r2, [r7, #2]
 800d1be:	78f9      	ldrb	r1, [r7, #3]
 800d1c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d1c2:	9302      	str	r3, [sp, #8]
 800d1c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d1c8:	9301      	str	r3, [sp, #4]
 800d1ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	4623      	mov	r3, r4
 800d1d2:	f7f4 fd27 	bl	8001c24 <HAL_HCD_HC_Init>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d1da:	7bfb      	ldrb	r3, [r7, #15]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f000 f8bf 	bl	800d360 <USBH_Get_USB_Status>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd90      	pop	{r4, r7, pc}

0800d1f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d200:	2300      	movs	r3, #0
 800d202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d20a:	78fa      	ldrb	r2, [r7, #3]
 800d20c:	4611      	mov	r1, r2
 800d20e:	4618      	mov	r0, r3
 800d210:	f7f4 fdc0 	bl	8001d94 <HAL_HCD_HC_Halt>
 800d214:	4603      	mov	r3, r0
 800d216:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d218:	7bfb      	ldrb	r3, [r7, #15]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 f8a0 	bl	800d360 <USBH_Get_USB_Status>
 800d220:	4603      	mov	r3, r0
 800d222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d224:	7bbb      	ldrb	r3, [r7, #14]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3710      	adds	r7, #16
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d22e:	b590      	push	{r4, r7, lr}
 800d230:	b089      	sub	sp, #36	@ 0x24
 800d232:	af04      	add	r7, sp, #16
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	4608      	mov	r0, r1
 800d238:	4611      	mov	r1, r2
 800d23a:	461a      	mov	r2, r3
 800d23c:	4603      	mov	r3, r0
 800d23e:	70fb      	strb	r3, [r7, #3]
 800d240:	460b      	mov	r3, r1
 800d242:	70bb      	strb	r3, [r7, #2]
 800d244:	4613      	mov	r3, r2
 800d246:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d256:	787c      	ldrb	r4, [r7, #1]
 800d258:	78ba      	ldrb	r2, [r7, #2]
 800d25a:	78f9      	ldrb	r1, [r7, #3]
 800d25c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d260:	9303      	str	r3, [sp, #12]
 800d262:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d264:	9302      	str	r3, [sp, #8]
 800d266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d268:	9301      	str	r3, [sp, #4]
 800d26a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	4623      	mov	r3, r4
 800d272:	f7f4 fdb3 	bl	8001ddc <HAL_HCD_HC_SubmitRequest>
 800d276:	4603      	mov	r3, r0
 800d278:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f000 f86f 	bl	800d360 <USBH_Get_USB_Status>
 800d282:	4603      	mov	r3, r0
 800d284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d286:	7bbb      	ldrb	r3, [r7, #14]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3714      	adds	r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd90      	pop	{r4, r7, pc}

0800d290 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d2a2:	78fa      	ldrb	r2, [r7, #3]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7f5 f894 	bl	80023d4 <HAL_HCD_HC_GetURBState>
 800d2ac:	4603      	mov	r3, r0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b082      	sub	sp, #8
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	460b      	mov	r3, r1
 800d2c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d103      	bne.n	800d2d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d2cc:	78fb      	ldrb	r3, [r7, #3]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 f872 	bl	800d3b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d2d4:	20c8      	movs	r0, #200	@ 0xc8
 800d2d6:	f7f4 f981 	bl	80015dc <HAL_Delay>
  return USBH_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	70fb      	strb	r3, [r7, #3]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d2fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d2fc:	78fa      	ldrb	r2, [r7, #3]
 800d2fe:	68f9      	ldr	r1, [r7, #12]
 800d300:	4613      	mov	r3, r2
 800d302:	011b      	lsls	r3, r3, #4
 800d304:	1a9b      	subs	r3, r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	440b      	add	r3, r1
 800d30a:	3317      	adds	r3, #23
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00a      	beq.n	800d328 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d312:	78fa      	ldrb	r2, [r7, #3]
 800d314:	68f9      	ldr	r1, [r7, #12]
 800d316:	4613      	mov	r3, r2
 800d318:	011b      	lsls	r3, r3, #4
 800d31a:	1a9b      	subs	r3, r3, r2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	440b      	add	r3, r1
 800d320:	333c      	adds	r3, #60	@ 0x3c
 800d322:	78ba      	ldrb	r2, [r7, #2]
 800d324:	701a      	strb	r2, [r3, #0]
 800d326:	e009      	b.n	800d33c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d328:	78fa      	ldrb	r2, [r7, #3]
 800d32a:	68f9      	ldr	r1, [r7, #12]
 800d32c:	4613      	mov	r3, r2
 800d32e:	011b      	lsls	r3, r3, #4
 800d330:	1a9b      	subs	r3, r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	440b      	add	r3, r1
 800d336:	333d      	adds	r3, #61	@ 0x3d
 800d338:	78ba      	ldrb	r2, [r7, #2]
 800d33a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3714      	adds	r7, #20
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr

0800d34a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b082      	sub	sp, #8
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f7f4 f942 	bl	80015dc <HAL_Delay>
}
 800d358:	bf00      	nop
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d360:	b480      	push	{r7}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	4603      	mov	r3, r0
 800d368:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d36a:	2300      	movs	r3, #0
 800d36c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d36e:	79fb      	ldrb	r3, [r7, #7]
 800d370:	2b03      	cmp	r3, #3
 800d372:	d817      	bhi.n	800d3a4 <USBH_Get_USB_Status+0x44>
 800d374:	a201      	add	r2, pc, #4	@ (adr r2, 800d37c <USBH_Get_USB_Status+0x1c>)
 800d376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37a:	bf00      	nop
 800d37c:	0800d38d 	.word	0x0800d38d
 800d380:	0800d393 	.word	0x0800d393
 800d384:	0800d399 	.word	0x0800d399
 800d388:	0800d39f 	.word	0x0800d39f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	73fb      	strb	r3, [r7, #15]
    break;
 800d390:	e00b      	b.n	800d3aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d392:	2302      	movs	r3, #2
 800d394:	73fb      	strb	r3, [r7, #15]
    break;
 800d396:	e008      	b.n	800d3aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d398:	2301      	movs	r3, #1
 800d39a:	73fb      	strb	r3, [r7, #15]
    break;
 800d39c:	e005      	b.n	800d3aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d39e:	2302      	movs	r3, #2
 800d3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a2:	e002      	b.n	800d3aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d3a4:	2302      	movs	r3, #2
 800d3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a8:	bf00      	nop
  }
  return usb_status;
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3714      	adds	r7, #20
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	4603      	mov	r3, r0
 800d3c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d3c2:	79fb      	ldrb	r3, [r7, #7]
 800d3c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d3c6:	79fb      	ldrb	r3, [r7, #7]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d102      	bne.n	800d3d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	73fb      	strb	r3, [r7, #15]
 800d3d0:	e001      	b.n	800d3d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	2101      	movs	r1, #1
 800d3dc:	4803      	ldr	r0, [pc, #12]	@ (800d3ec <MX_DriverVbusFS+0x34>)
 800d3de:	f7f4 fb87 	bl	8001af0 <HAL_GPIO_WritePin>
}
 800d3e2:	bf00      	nop
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	40020800 	.word	0x40020800

0800d3f0 <malloc>:
 800d3f0:	4b02      	ldr	r3, [pc, #8]	@ (800d3fc <malloc+0xc>)
 800d3f2:	4601      	mov	r1, r0
 800d3f4:	6818      	ldr	r0, [r3, #0]
 800d3f6:	f000 b82d 	b.w	800d454 <_malloc_r>
 800d3fa:	bf00      	nop
 800d3fc:	20000030 	.word	0x20000030

0800d400 <free>:
 800d400:	4b02      	ldr	r3, [pc, #8]	@ (800d40c <free+0xc>)
 800d402:	4601      	mov	r1, r0
 800d404:	6818      	ldr	r0, [r3, #0]
 800d406:	f000 b959 	b.w	800d6bc <_free_r>
 800d40a:	bf00      	nop
 800d40c:	20000030 	.word	0x20000030

0800d410 <sbrk_aligned>:
 800d410:	b570      	push	{r4, r5, r6, lr}
 800d412:	4e0f      	ldr	r6, [pc, #60]	@ (800d450 <sbrk_aligned+0x40>)
 800d414:	460c      	mov	r4, r1
 800d416:	6831      	ldr	r1, [r6, #0]
 800d418:	4605      	mov	r5, r0
 800d41a:	b911      	cbnz	r1, 800d422 <sbrk_aligned+0x12>
 800d41c:	f000 f904 	bl	800d628 <_sbrk_r>
 800d420:	6030      	str	r0, [r6, #0]
 800d422:	4621      	mov	r1, r4
 800d424:	4628      	mov	r0, r5
 800d426:	f000 f8ff 	bl	800d628 <_sbrk_r>
 800d42a:	1c43      	adds	r3, r0, #1
 800d42c:	d103      	bne.n	800d436 <sbrk_aligned+0x26>
 800d42e:	f04f 34ff 	mov.w	r4, #4294967295
 800d432:	4620      	mov	r0, r4
 800d434:	bd70      	pop	{r4, r5, r6, pc}
 800d436:	1cc4      	adds	r4, r0, #3
 800d438:	f024 0403 	bic.w	r4, r4, #3
 800d43c:	42a0      	cmp	r0, r4
 800d43e:	d0f8      	beq.n	800d432 <sbrk_aligned+0x22>
 800d440:	1a21      	subs	r1, r4, r0
 800d442:	4628      	mov	r0, r5
 800d444:	f000 f8f0 	bl	800d628 <_sbrk_r>
 800d448:	3001      	adds	r0, #1
 800d44a:	d1f2      	bne.n	800d432 <sbrk_aligned+0x22>
 800d44c:	e7ef      	b.n	800d42e <sbrk_aligned+0x1e>
 800d44e:	bf00      	nop
 800d450:	200054a8 	.word	0x200054a8

0800d454 <_malloc_r>:
 800d454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d458:	1ccd      	adds	r5, r1, #3
 800d45a:	f025 0503 	bic.w	r5, r5, #3
 800d45e:	3508      	adds	r5, #8
 800d460:	2d0c      	cmp	r5, #12
 800d462:	bf38      	it	cc
 800d464:	250c      	movcc	r5, #12
 800d466:	2d00      	cmp	r5, #0
 800d468:	4606      	mov	r6, r0
 800d46a:	db01      	blt.n	800d470 <_malloc_r+0x1c>
 800d46c:	42a9      	cmp	r1, r5
 800d46e:	d904      	bls.n	800d47a <_malloc_r+0x26>
 800d470:	230c      	movs	r3, #12
 800d472:	6033      	str	r3, [r6, #0]
 800d474:	2000      	movs	r0, #0
 800d476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d47a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d550 <_malloc_r+0xfc>
 800d47e:	f000 f869 	bl	800d554 <__malloc_lock>
 800d482:	f8d8 3000 	ldr.w	r3, [r8]
 800d486:	461c      	mov	r4, r3
 800d488:	bb44      	cbnz	r4, 800d4dc <_malloc_r+0x88>
 800d48a:	4629      	mov	r1, r5
 800d48c:	4630      	mov	r0, r6
 800d48e:	f7ff ffbf 	bl	800d410 <sbrk_aligned>
 800d492:	1c43      	adds	r3, r0, #1
 800d494:	4604      	mov	r4, r0
 800d496:	d158      	bne.n	800d54a <_malloc_r+0xf6>
 800d498:	f8d8 4000 	ldr.w	r4, [r8]
 800d49c:	4627      	mov	r7, r4
 800d49e:	2f00      	cmp	r7, #0
 800d4a0:	d143      	bne.n	800d52a <_malloc_r+0xd6>
 800d4a2:	2c00      	cmp	r4, #0
 800d4a4:	d04b      	beq.n	800d53e <_malloc_r+0xea>
 800d4a6:	6823      	ldr	r3, [r4, #0]
 800d4a8:	4639      	mov	r1, r7
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	eb04 0903 	add.w	r9, r4, r3
 800d4b0:	f000 f8ba 	bl	800d628 <_sbrk_r>
 800d4b4:	4581      	cmp	r9, r0
 800d4b6:	d142      	bne.n	800d53e <_malloc_r+0xea>
 800d4b8:	6821      	ldr	r1, [r4, #0]
 800d4ba:	1a6d      	subs	r5, r5, r1
 800d4bc:	4629      	mov	r1, r5
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f7ff ffa6 	bl	800d410 <sbrk_aligned>
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	d03a      	beq.n	800d53e <_malloc_r+0xea>
 800d4c8:	6823      	ldr	r3, [r4, #0]
 800d4ca:	442b      	add	r3, r5
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	bb62      	cbnz	r2, 800d530 <_malloc_r+0xdc>
 800d4d6:	f8c8 7000 	str.w	r7, [r8]
 800d4da:	e00f      	b.n	800d4fc <_malloc_r+0xa8>
 800d4dc:	6822      	ldr	r2, [r4, #0]
 800d4de:	1b52      	subs	r2, r2, r5
 800d4e0:	d420      	bmi.n	800d524 <_malloc_r+0xd0>
 800d4e2:	2a0b      	cmp	r2, #11
 800d4e4:	d917      	bls.n	800d516 <_malloc_r+0xc2>
 800d4e6:	1961      	adds	r1, r4, r5
 800d4e8:	42a3      	cmp	r3, r4
 800d4ea:	6025      	str	r5, [r4, #0]
 800d4ec:	bf18      	it	ne
 800d4ee:	6059      	strne	r1, [r3, #4]
 800d4f0:	6863      	ldr	r3, [r4, #4]
 800d4f2:	bf08      	it	eq
 800d4f4:	f8c8 1000 	streq.w	r1, [r8]
 800d4f8:	5162      	str	r2, [r4, r5]
 800d4fa:	604b      	str	r3, [r1, #4]
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	f000 f82f 	bl	800d560 <__malloc_unlock>
 800d502:	f104 000b 	add.w	r0, r4, #11
 800d506:	1d23      	adds	r3, r4, #4
 800d508:	f020 0007 	bic.w	r0, r0, #7
 800d50c:	1ac2      	subs	r2, r0, r3
 800d50e:	bf1c      	itt	ne
 800d510:	1a1b      	subne	r3, r3, r0
 800d512:	50a3      	strne	r3, [r4, r2]
 800d514:	e7af      	b.n	800d476 <_malloc_r+0x22>
 800d516:	6862      	ldr	r2, [r4, #4]
 800d518:	42a3      	cmp	r3, r4
 800d51a:	bf0c      	ite	eq
 800d51c:	f8c8 2000 	streq.w	r2, [r8]
 800d520:	605a      	strne	r2, [r3, #4]
 800d522:	e7eb      	b.n	800d4fc <_malloc_r+0xa8>
 800d524:	4623      	mov	r3, r4
 800d526:	6864      	ldr	r4, [r4, #4]
 800d528:	e7ae      	b.n	800d488 <_malloc_r+0x34>
 800d52a:	463c      	mov	r4, r7
 800d52c:	687f      	ldr	r7, [r7, #4]
 800d52e:	e7b6      	b.n	800d49e <_malloc_r+0x4a>
 800d530:	461a      	mov	r2, r3
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	42a3      	cmp	r3, r4
 800d536:	d1fb      	bne.n	800d530 <_malloc_r+0xdc>
 800d538:	2300      	movs	r3, #0
 800d53a:	6053      	str	r3, [r2, #4]
 800d53c:	e7de      	b.n	800d4fc <_malloc_r+0xa8>
 800d53e:	230c      	movs	r3, #12
 800d540:	6033      	str	r3, [r6, #0]
 800d542:	4630      	mov	r0, r6
 800d544:	f000 f80c 	bl	800d560 <__malloc_unlock>
 800d548:	e794      	b.n	800d474 <_malloc_r+0x20>
 800d54a:	6005      	str	r5, [r0, #0]
 800d54c:	e7d6      	b.n	800d4fc <_malloc_r+0xa8>
 800d54e:	bf00      	nop
 800d550:	200054ac 	.word	0x200054ac

0800d554 <__malloc_lock>:
 800d554:	4801      	ldr	r0, [pc, #4]	@ (800d55c <__malloc_lock+0x8>)
 800d556:	f000 b8a1 	b.w	800d69c <__retarget_lock_acquire_recursive>
 800d55a:	bf00      	nop
 800d55c:	200055ec 	.word	0x200055ec

0800d560 <__malloc_unlock>:
 800d560:	4801      	ldr	r0, [pc, #4]	@ (800d568 <__malloc_unlock+0x8>)
 800d562:	f000 b89c 	b.w	800d69e <__retarget_lock_release_recursive>
 800d566:	bf00      	nop
 800d568:	200055ec 	.word	0x200055ec

0800d56c <memset>:
 800d56c:	4402      	add	r2, r0
 800d56e:	4603      	mov	r3, r0
 800d570:	4293      	cmp	r3, r2
 800d572:	d100      	bne.n	800d576 <memset+0xa>
 800d574:	4770      	bx	lr
 800d576:	f803 1b01 	strb.w	r1, [r3], #1
 800d57a:	e7f9      	b.n	800d570 <memset+0x4>

0800d57c <_reclaim_reent>:
 800d57c:	4b29      	ldr	r3, [pc, #164]	@ (800d624 <_reclaim_reent+0xa8>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4283      	cmp	r3, r0
 800d582:	b570      	push	{r4, r5, r6, lr}
 800d584:	4604      	mov	r4, r0
 800d586:	d04b      	beq.n	800d620 <_reclaim_reent+0xa4>
 800d588:	69c3      	ldr	r3, [r0, #28]
 800d58a:	b1ab      	cbz	r3, 800d5b8 <_reclaim_reent+0x3c>
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	b16b      	cbz	r3, 800d5ac <_reclaim_reent+0x30>
 800d590:	2500      	movs	r5, #0
 800d592:	69e3      	ldr	r3, [r4, #28]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	5959      	ldr	r1, [r3, r5]
 800d598:	2900      	cmp	r1, #0
 800d59a:	d13b      	bne.n	800d614 <_reclaim_reent+0x98>
 800d59c:	3504      	adds	r5, #4
 800d59e:	2d80      	cmp	r5, #128	@ 0x80
 800d5a0:	d1f7      	bne.n	800d592 <_reclaim_reent+0x16>
 800d5a2:	69e3      	ldr	r3, [r4, #28]
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	68d9      	ldr	r1, [r3, #12]
 800d5a8:	f000 f888 	bl	800d6bc <_free_r>
 800d5ac:	69e3      	ldr	r3, [r4, #28]
 800d5ae:	6819      	ldr	r1, [r3, #0]
 800d5b0:	b111      	cbz	r1, 800d5b8 <_reclaim_reent+0x3c>
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f000 f882 	bl	800d6bc <_free_r>
 800d5b8:	6961      	ldr	r1, [r4, #20]
 800d5ba:	b111      	cbz	r1, 800d5c2 <_reclaim_reent+0x46>
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f000 f87d 	bl	800d6bc <_free_r>
 800d5c2:	69e1      	ldr	r1, [r4, #28]
 800d5c4:	b111      	cbz	r1, 800d5cc <_reclaim_reent+0x50>
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f000 f878 	bl	800d6bc <_free_r>
 800d5cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d5ce:	b111      	cbz	r1, 800d5d6 <_reclaim_reent+0x5a>
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f000 f873 	bl	800d6bc <_free_r>
 800d5d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5d8:	b111      	cbz	r1, 800d5e0 <_reclaim_reent+0x64>
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f000 f86e 	bl	800d6bc <_free_r>
 800d5e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d5e2:	b111      	cbz	r1, 800d5ea <_reclaim_reent+0x6e>
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f000 f869 	bl	800d6bc <_free_r>
 800d5ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d5ec:	b111      	cbz	r1, 800d5f4 <_reclaim_reent+0x78>
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	f000 f864 	bl	800d6bc <_free_r>
 800d5f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d5f6:	b111      	cbz	r1, 800d5fe <_reclaim_reent+0x82>
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f000 f85f 	bl	800d6bc <_free_r>
 800d5fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d600:	b111      	cbz	r1, 800d608 <_reclaim_reent+0x8c>
 800d602:	4620      	mov	r0, r4
 800d604:	f000 f85a 	bl	800d6bc <_free_r>
 800d608:	6a23      	ldr	r3, [r4, #32]
 800d60a:	b14b      	cbz	r3, 800d620 <_reclaim_reent+0xa4>
 800d60c:	4620      	mov	r0, r4
 800d60e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d612:	4718      	bx	r3
 800d614:	680e      	ldr	r6, [r1, #0]
 800d616:	4620      	mov	r0, r4
 800d618:	f000 f850 	bl	800d6bc <_free_r>
 800d61c:	4631      	mov	r1, r6
 800d61e:	e7bb      	b.n	800d598 <_reclaim_reent+0x1c>
 800d620:	bd70      	pop	{r4, r5, r6, pc}
 800d622:	bf00      	nop
 800d624:	20000030 	.word	0x20000030

0800d628 <_sbrk_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4d06      	ldr	r5, [pc, #24]	@ (800d644 <_sbrk_r+0x1c>)
 800d62c:	2300      	movs	r3, #0
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	602b      	str	r3, [r5, #0]
 800d634:	f7f3 ff1e 	bl	8001474 <_sbrk>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	d102      	bne.n	800d642 <_sbrk_r+0x1a>
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	b103      	cbz	r3, 800d642 <_sbrk_r+0x1a>
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	bd38      	pop	{r3, r4, r5, pc}
 800d644:	200055e8 	.word	0x200055e8

0800d648 <__errno>:
 800d648:	4b01      	ldr	r3, [pc, #4]	@ (800d650 <__errno+0x8>)
 800d64a:	6818      	ldr	r0, [r3, #0]
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop
 800d650:	20000030 	.word	0x20000030

0800d654 <__libc_init_array>:
 800d654:	b570      	push	{r4, r5, r6, lr}
 800d656:	4d0d      	ldr	r5, [pc, #52]	@ (800d68c <__libc_init_array+0x38>)
 800d658:	4c0d      	ldr	r4, [pc, #52]	@ (800d690 <__libc_init_array+0x3c>)
 800d65a:	1b64      	subs	r4, r4, r5
 800d65c:	10a4      	asrs	r4, r4, #2
 800d65e:	2600      	movs	r6, #0
 800d660:	42a6      	cmp	r6, r4
 800d662:	d109      	bne.n	800d678 <__libc_init_array+0x24>
 800d664:	4d0b      	ldr	r5, [pc, #44]	@ (800d694 <__libc_init_array+0x40>)
 800d666:	4c0c      	ldr	r4, [pc, #48]	@ (800d698 <__libc_init_array+0x44>)
 800d668:	f000 f872 	bl	800d750 <_init>
 800d66c:	1b64      	subs	r4, r4, r5
 800d66e:	10a4      	asrs	r4, r4, #2
 800d670:	2600      	movs	r6, #0
 800d672:	42a6      	cmp	r6, r4
 800d674:	d105      	bne.n	800d682 <__libc_init_array+0x2e>
 800d676:	bd70      	pop	{r4, r5, r6, pc}
 800d678:	f855 3b04 	ldr.w	r3, [r5], #4
 800d67c:	4798      	blx	r3
 800d67e:	3601      	adds	r6, #1
 800d680:	e7ee      	b.n	800d660 <__libc_init_array+0xc>
 800d682:	f855 3b04 	ldr.w	r3, [r5], #4
 800d686:	4798      	blx	r3
 800d688:	3601      	adds	r6, #1
 800d68a:	e7f2      	b.n	800d672 <__libc_init_array+0x1e>
 800d68c:	0800d828 	.word	0x0800d828
 800d690:	0800d828 	.word	0x0800d828
 800d694:	0800d828 	.word	0x0800d828
 800d698:	0800d82c 	.word	0x0800d82c

0800d69c <__retarget_lock_acquire_recursive>:
 800d69c:	4770      	bx	lr

0800d69e <__retarget_lock_release_recursive>:
 800d69e:	4770      	bx	lr

0800d6a0 <memcpy>:
 800d6a0:	440a      	add	r2, r1
 800d6a2:	4291      	cmp	r1, r2
 800d6a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6a8:	d100      	bne.n	800d6ac <memcpy+0xc>
 800d6aa:	4770      	bx	lr
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6b6:	4291      	cmp	r1, r2
 800d6b8:	d1f9      	bne.n	800d6ae <memcpy+0xe>
 800d6ba:	bd10      	pop	{r4, pc}

0800d6bc <_free_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4605      	mov	r5, r0
 800d6c0:	2900      	cmp	r1, #0
 800d6c2:	d041      	beq.n	800d748 <_free_r+0x8c>
 800d6c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6c8:	1f0c      	subs	r4, r1, #4
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	bfb8      	it	lt
 800d6ce:	18e4      	addlt	r4, r4, r3
 800d6d0:	f7ff ff40 	bl	800d554 <__malloc_lock>
 800d6d4:	4a1d      	ldr	r2, [pc, #116]	@ (800d74c <_free_r+0x90>)
 800d6d6:	6813      	ldr	r3, [r2, #0]
 800d6d8:	b933      	cbnz	r3, 800d6e8 <_free_r+0x2c>
 800d6da:	6063      	str	r3, [r4, #4]
 800d6dc:	6014      	str	r4, [r2, #0]
 800d6de:	4628      	mov	r0, r5
 800d6e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6e4:	f7ff bf3c 	b.w	800d560 <__malloc_unlock>
 800d6e8:	42a3      	cmp	r3, r4
 800d6ea:	d908      	bls.n	800d6fe <_free_r+0x42>
 800d6ec:	6820      	ldr	r0, [r4, #0]
 800d6ee:	1821      	adds	r1, r4, r0
 800d6f0:	428b      	cmp	r3, r1
 800d6f2:	bf01      	itttt	eq
 800d6f4:	6819      	ldreq	r1, [r3, #0]
 800d6f6:	685b      	ldreq	r3, [r3, #4]
 800d6f8:	1809      	addeq	r1, r1, r0
 800d6fa:	6021      	streq	r1, [r4, #0]
 800d6fc:	e7ed      	b.n	800d6da <_free_r+0x1e>
 800d6fe:	461a      	mov	r2, r3
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	b10b      	cbz	r3, 800d708 <_free_r+0x4c>
 800d704:	42a3      	cmp	r3, r4
 800d706:	d9fa      	bls.n	800d6fe <_free_r+0x42>
 800d708:	6811      	ldr	r1, [r2, #0]
 800d70a:	1850      	adds	r0, r2, r1
 800d70c:	42a0      	cmp	r0, r4
 800d70e:	d10b      	bne.n	800d728 <_free_r+0x6c>
 800d710:	6820      	ldr	r0, [r4, #0]
 800d712:	4401      	add	r1, r0
 800d714:	1850      	adds	r0, r2, r1
 800d716:	4283      	cmp	r3, r0
 800d718:	6011      	str	r1, [r2, #0]
 800d71a:	d1e0      	bne.n	800d6de <_free_r+0x22>
 800d71c:	6818      	ldr	r0, [r3, #0]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	6053      	str	r3, [r2, #4]
 800d722:	4408      	add	r0, r1
 800d724:	6010      	str	r0, [r2, #0]
 800d726:	e7da      	b.n	800d6de <_free_r+0x22>
 800d728:	d902      	bls.n	800d730 <_free_r+0x74>
 800d72a:	230c      	movs	r3, #12
 800d72c:	602b      	str	r3, [r5, #0]
 800d72e:	e7d6      	b.n	800d6de <_free_r+0x22>
 800d730:	6820      	ldr	r0, [r4, #0]
 800d732:	1821      	adds	r1, r4, r0
 800d734:	428b      	cmp	r3, r1
 800d736:	bf04      	itt	eq
 800d738:	6819      	ldreq	r1, [r3, #0]
 800d73a:	685b      	ldreq	r3, [r3, #4]
 800d73c:	6063      	str	r3, [r4, #4]
 800d73e:	bf04      	itt	eq
 800d740:	1809      	addeq	r1, r1, r0
 800d742:	6021      	streq	r1, [r4, #0]
 800d744:	6054      	str	r4, [r2, #4]
 800d746:	e7ca      	b.n	800d6de <_free_r+0x22>
 800d748:	bd38      	pop	{r3, r4, r5, pc}
 800d74a:	bf00      	nop
 800d74c:	200054ac 	.word	0x200054ac

0800d750 <_init>:
 800d750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d752:	bf00      	nop
 800d754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d756:	bc08      	pop	{r3}
 800d758:	469e      	mov	lr, r3
 800d75a:	4770      	bx	lr

0800d75c <_fini>:
 800d75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75e:	bf00      	nop
 800d760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d762:	bc08      	pop	{r3}
 800d764:	469e      	mov	lr, r3
 800d766:	4770      	bx	lr
