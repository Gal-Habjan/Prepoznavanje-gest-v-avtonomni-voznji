
freeRTOS1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c638  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800c7d8  0800c7d8  0000d7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c87c  0800c87c  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c87c  0800c87c  0000d87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c884  0800c884  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c884  0800c884  0000d884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c888  0800c888  0000d888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800c88c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054e0  20000080  0800c90c  0000e080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005560  0800c90c  0000e560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025802  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005717  00000000  00000000  000338b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f00  00000000  00000000  00038fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017ef  00000000  00000000  0003aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e0f  00000000  00000000  0003c6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002742e  00000000  00000000  000434ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d4b  00000000  00000000  0006a8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c647  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086bc  00000000  00000000  0010c68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00114d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c7c0 	.word	0x0800c7c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800c7c0 	.word	0x0800c7c0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <LEDTask>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LEDTask(void *pvParameters) {  // green LED
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    int recievedCommand = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
    for (;;) {
        xQueueReceive(ledQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80004dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <LEDTask+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f107 010c 	add.w	r1, r7, #12
 80004e4:	2264      	movs	r2, #100	@ 0x64
 80004e6:	4618      	mov	r0, r3
 80004e8:	f009 fb0c 	bl	8009b04 <xQueueReceive>

        if (recievedCommand == 1) {
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d106      	bne.n	8000500 <LEDTask+0x30>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004f8:	4806      	ldr	r0, [pc, #24]	@ (8000514 <LEDTask+0x44>)
 80004fa:	f001 f8cf 	bl	800169c <HAL_GPIO_WritePin>
 80004fe:	e7ed      	b.n	80004dc <LEDTask+0xc>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000506:	4803      	ldr	r0, [pc, #12]	@ (8000514 <LEDTask+0x44>)
 8000508:	f001 f8c8 	bl	800169c <HAL_GPIO_WritePin>
        xQueueReceive(ledQueue, &recievedCommand, pdMS_TO_TICKS(100));
 800050c:	e7e6      	b.n	80004dc <LEDTask+0xc>
 800050e:	bf00      	nop
 8000510:	200001e8 	.word	0x200001e8
 8000514:	40020c00 	.word	0x40020c00

08000518 <DC_MotorTask>:
        }

    }
}

void DC_MotorTask(void *pvParameters) {  // red LED
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    int recievedCommand = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
    for (;;) {
        xQueueReceive(motorQueue, &recievedCommand, pdMS_TO_TICKS(100));
 8000524:	4b0d      	ldr	r3, [pc, #52]	@ (800055c <DC_MotorTask+0x44>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f107 010c 	add.w	r1, r7, #12
 800052c:	2264      	movs	r2, #100	@ 0x64
 800052e:	4618      	mov	r0, r3
 8000530:	f009 fae8 	bl	8009b04 <xQueueReceive>

        if (recievedCommand == 2 || recievedCommand == 3) {
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d002      	beq.n	8000540 <DC_MotorTask+0x28>
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2b03      	cmp	r3, #3
 800053e:	d106      	bne.n	800054e <DC_MotorTask+0x36>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000546:	4806      	ldr	r0, [pc, #24]	@ (8000560 <DC_MotorTask+0x48>)
 8000548:	f001 f8a8 	bl	800169c <HAL_GPIO_WritePin>
 800054c:	e005      	b.n	800055a <DC_MotorTask+0x42>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000554:	4802      	ldr	r0, [pc, #8]	@ (8000560 <DC_MotorTask+0x48>)
 8000556:	f001 f8a1 	bl	800169c <HAL_GPIO_WritePin>
        xQueueReceive(motorQueue, &recievedCommand, pdMS_TO_TICKS(100));
 800055a:	e7e3      	b.n	8000524 <DC_MotorTask+0xc>
 800055c:	200001ec 	.word	0x200001ec
 8000560:	40020c00 	.word	0x40020c00

08000564 <beeperTask>:
        }

    }
}

void beeperTask(void *pvParameters) {  // blue LED
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    int recievedCommand = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
    for (;;) {
        xQueueReceive(beeperQueue, &recievedCommand, pdMS_TO_TICKS(100));
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <beeperTask+0x40>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f107 010c 	add.w	r1, r7, #12
 8000578:	2264      	movs	r2, #100	@ 0x64
 800057a:	4618      	mov	r0, r3
 800057c:	f009 fac2 	bl	8009b04 <xQueueReceive>

        if (recievedCommand == 4) {
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2b04      	cmp	r3, #4
 8000584:	d106      	bne.n	8000594 <beeperTask+0x30>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800058c:	4806      	ldr	r0, [pc, #24]	@ (80005a8 <beeperTask+0x44>)
 800058e:	f001 f885 	bl	800169c <HAL_GPIO_WritePin>
 8000592:	e7ed      	b.n	8000570 <beeperTask+0xc>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800059a:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <beeperTask+0x44>)
 800059c:	f001 f87e 	bl	800169c <HAL_GPIO_WritePin>
        xQueueReceive(beeperQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80005a0:	e7e6      	b.n	8000570 <beeperTask+0xc>
 80005a2:	bf00      	nop
 80005a4:	200001f0 	.word	0x200001f0
 80005a8:	40020c00 	.word	0x40020c00

080005ac <USBTask>:
        }

    }
}

void USBTask(void *pvParameters) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    int command = -1;
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	60fb      	str	r3, [r7, #12]
    for (;;) {
        command++;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3301      	adds	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
        if (command > 4) {
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	dd01      	ble.n	80005ca <USBTask+0x1e>
            command = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
        }

        xQueueSend(ledQueue, &command, pdMS_TO_TICKS(100));
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <USBTask+0x64>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	f107 010c 	add.w	r1, r7, #12
 80005d2:	2300      	movs	r3, #0
 80005d4:	2264      	movs	r2, #100	@ 0x64
 80005d6:	f009 f8f5 	bl	80097c4 <xQueueGenericSend>
        xQueueSend(motorQueue, &command, pdMS_TO_TICKS(100));
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <USBTask+0x68>)
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	f107 010c 	add.w	r1, r7, #12
 80005e2:	2300      	movs	r3, #0
 80005e4:	2264      	movs	r2, #100	@ 0x64
 80005e6:	f009 f8ed 	bl	80097c4 <xQueueGenericSend>
        xQueueSend(beeperQueue, &command, pdMS_TO_TICKS(100));
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <USBTask+0x6c>)
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	f107 010c 	add.w	r1, r7, #12
 80005f2:	2300      	movs	r3, #0
 80005f4:	2264      	movs	r2, #100	@ 0x64
 80005f6:	f009 f8e5 	bl	80097c4 <xQueueGenericSend>

        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005fe:	4807      	ldr	r0, [pc, #28]	@ (800061c <USBTask+0x70>)
 8000600:	f001 f865 	bl	80016ce <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000604:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000608:	f009 ff0c 	bl	800a424 <vTaskDelay>
        command++;
 800060c:	e7d5      	b.n	80005ba <USBTask+0xe>
 800060e:	bf00      	nop
 8000610:	200001e8 	.word	0x200001e8
 8000614:	200001ec 	.word	0x200001ec
 8000618:	200001f0 	.word	0x200001f0
 800061c:	40020c00 	.word	0x40020c00

08000620 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
// Create a queue with 5 items, each of 1 byte (uint8_t) in size
	//usbQueue = xQueueCreate(5, sizeof(uint8_t));
	ledQueue = xQueueCreate(2, sizeof(int));
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	2002      	movs	r0, #2
 800062c:	f009 f86b 	bl	8009706 <xQueueGenericCreate>
 8000630:	4603      	mov	r3, r0
 8000632:	4a2c      	ldr	r2, [pc, #176]	@ (80006e4 <main+0xc4>)
 8000634:	6013      	str	r3, [r2, #0]
	motorQueue = xQueueCreate(2, sizeof(int));
 8000636:	2200      	movs	r2, #0
 8000638:	2104      	movs	r1, #4
 800063a:	2002      	movs	r0, #2
 800063c:	f009 f863 	bl	8009706 <xQueueGenericCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <main+0xc8>)
 8000644:	6013      	str	r3, [r2, #0]
	beeperQueue = xQueueCreate(2, sizeof(int));
 8000646:	2200      	movs	r2, #0
 8000648:	2104      	movs	r1, #4
 800064a:	2002      	movs	r0, #2
 800064c:	f009 f85b 	bl	8009706 <xQueueGenericCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a26      	ldr	r2, [pc, #152]	@ (80006ec <main+0xcc>)
 8000654:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000656:	f000 fd55 	bl	8001104 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800065a:	f000 f865 	bl	8000728 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800065e:	f000 f8cb 	bl	80007f8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000662:	f000 f9ab 	bl	80009bc <MX_GPIO_Init>
	MX_I2C1_Init();
 8000666:	f000 f8e7 	bl	8000838 <MX_I2C1_Init>
	MX_I2S2_Init();
 800066a:	f000 f913 	bl	8000894 <MX_I2S2_Init>
	MX_I2S3_Init();
 800066e:	f000 f93f 	bl	80008f0 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000672:	f000 f96d 	bl	8000950 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000676:	f008 fc4f 	bl	8008f18 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800067a:	4a1d      	ldr	r2, [pc, #116]	@ (80006f0 <main+0xd0>)
 800067c:	2100      	movs	r1, #0
 800067e:	481d      	ldr	r0, [pc, #116]	@ (80006f4 <main+0xd4>)
 8000680:	f008 fc94 	bl	8008fac <osThreadNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <main+0xd8>)
 8000688:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */

	/* add events, ... */
	xTaskCreate(LEDTask, "LED Task", 128, NULL, 2, &TaskHandle_LEDTask);
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <main+0xdc>)
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2302      	movs	r3, #2
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	2280      	movs	r2, #128	@ 0x80
 8000696:	491a      	ldr	r1, [pc, #104]	@ (8000700 <main+0xe0>)
 8000698:	481a      	ldr	r0, [pc, #104]	@ (8000704 <main+0xe4>)
 800069a:	f009 fd65 	bl	800a168 <xTaskCreate>
	xTaskCreate(USBTask, "USB Task", 128, NULL, 2, NULL);
 800069e:	2300      	movs	r3, #0
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2302      	movs	r3, #2
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	4917      	ldr	r1, [pc, #92]	@ (8000708 <main+0xe8>)
 80006ac:	4817      	ldr	r0, [pc, #92]	@ (800070c <main+0xec>)
 80006ae:	f009 fd5b 	bl	800a168 <xTaskCreate>
	xTaskCreate(beeperTask, "beeper Task", 128, NULL, 2,
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <main+0xf0>)
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	2302      	movs	r3, #2
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2300      	movs	r3, #0
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	4915      	ldr	r1, [pc, #84]	@ (8000714 <main+0xf4>)
 80006c0:	4815      	ldr	r0, [pc, #84]	@ (8000718 <main+0xf8>)
 80006c2:	f009 fd51 	bl	800a168 <xTaskCreate>
			&TaskHandle_beeperTask);
	xTaskCreate(DC_MotorTask, "DC Motor Task", 128, NULL, 2,
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <main+0xfc>)
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2302      	movs	r3, #2
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	2280      	movs	r2, #128	@ 0x80
 80006d2:	4913      	ldr	r1, [pc, #76]	@ (8000720 <main+0x100>)
 80006d4:	4813      	ldr	r0, [pc, #76]	@ (8000724 <main+0x104>)
 80006d6:	f009 fd47 	bl	800a168 <xTaskCreate>
			&TaskHandle_DC_MotorTask);
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80006da:	f008 fc41 	bl	8008f60 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 80006de:	bf00      	nop
 80006e0:	e7fd      	b.n	80006de <main+0xbe>
 80006e2:	bf00      	nop
 80006e4:	200001e8 	.word	0x200001e8
 80006e8:	200001ec 	.word	0x200001ec
 80006ec:	200001f0 	.word	0x200001f0
 80006f0:	0800c840 	.word	0x0800c840
 80006f4:	08000b71 	.word	0x08000b71
 80006f8:	200001d8 	.word	0x200001d8
 80006fc:	200001dc 	.word	0x200001dc
 8000700:	0800c7e4 	.word	0x0800c7e4
 8000704:	080004d1 	.word	0x080004d1
 8000708:	0800c7f0 	.word	0x0800c7f0
 800070c:	080005ad 	.word	0x080005ad
 8000710:	200001e4 	.word	0x200001e4
 8000714:	0800c7fc 	.word	0x0800c7fc
 8000718:	08000565 	.word	0x08000565
 800071c:	200001e0 	.word	0x200001e0
 8000720:	0800c808 	.word	0x0800c808
 8000724:	08000519 	.word	0x08000519

08000728 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	@ 0x50
 800072c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2230      	movs	r2, #48	@ 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f00b ff50 	bl	800c5dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemClock_Config+0xc8>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	4a26      	ldr	r2, [pc, #152]	@ (80007f0 <SystemClock_Config+0xc8>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	@ 0x40
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemClock_Config+0xc8>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <SystemClock_Config+0xcc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a20      	ldr	r2, [pc, #128]	@ (80007f4 <SystemClock_Config+0xcc>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <SystemClock_Config+0xcc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000796:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800079c:	23a8      	movs	r3, #168	@ 0xa8
 800079e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a4:	2307      	movs	r3, #7
 80007a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fec1 	bl	8004534 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x94>
		Error_Handler();
 80007b8:	f000 f9f6 	bl	8000ba8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2102      	movs	r1, #2
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 f923 	bl	8004a24 <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xc0>
		Error_Handler();
 80007e4:	f000 f9e0 	bl	8000ba8 <Error_Handler>
	}
}
 80007e8:	bf00      	nop
 80007ea:	3750      	adds	r7, #80	@ 0x50
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
 800080c:	615a      	str	r2, [r3, #20]

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800080e:	2301      	movs	r3, #1
 8000810:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000812:	23c8      	movs	r3, #200	@ 0xc8
 8000814:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000816:	2305      	movs	r3, #5
 8000818:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800081e:	463b      	mov	r3, r7
 8000820:	4618      	mov	r0, r3
 8000822:	f004 fb3d 	bl	8004ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <PeriphCommonClock_Config+0x38>
		Error_Handler();
 800082c:	f000 f9bc 	bl	8000ba8 <Error_Handler>
	}
}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	@ (800088c <MX_I2C1_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000844:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <MX_I2C1_Init+0x58>)
 8000846:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000856:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800085a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000876:	f003 f879 	bl	800396c <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000880:	f000 f992 	bl	8000ba8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000009c 	.word	0x2000009c
 800088c:	40005400 	.word	0x40005400
 8000890:	000186a0 	.word	0x000186a0

08000894 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_I2S2_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <MX_I2S2_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_I2S2_Init+0x50>)
 80008a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a4:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_I2S2_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <MX_I2S2_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_I2S2_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <MX_I2S2_Init+0x50>)
 80008ba:	4a0c      	ldr	r2, [pc, #48]	@ (80008ec <MX_I2S2_Init+0x58>)
 80008bc:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_I2S2_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <MX_I2S2_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_I2S2_Init+0x50>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_I2S2_Init+0x50>)
 80008d2:	f003 f98f 	bl	8003bf4 <HAL_I2S_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2S2_Init+0x4c>
		Error_Handler();
 80008dc:	f000 f964 	bl	8000ba8 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000f0 	.word	0x200000f0
 80008e8:	40003800 	.word	0x40003800
 80008ec:	00017700 	.word	0x00017700

080008f0 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_I2S3_Init+0x54>)
 80008f6:	4a14      	ldr	r2, [pc, #80]	@ (8000948 <MX_I2S3_Init+0x58>)
 80008f8:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_I2S3_Init+0x54>)
 80008fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000900:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_I2S3_Init+0x54>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_I2S3_Init+0x54>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <MX_I2S3_Init+0x54>)
 8000910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000914:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_I2S3_Init+0x54>)
 8000918:	4a0c      	ldr	r2, [pc, #48]	@ (800094c <MX_I2S3_Init+0x5c>)
 800091a:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_I2S3_Init+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_I2S3_Init+0x54>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_I2S3_Init+0x54>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_I2S3_Init+0x54>)
 8000930:	f003 f960 	bl	8003bf4 <HAL_I2S_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2S3_Init+0x4e>
		Error_Handler();
 800093a:	f000 f935 	bl	8000ba8 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000138 	.word	0x20000138
 8000948:	40003c00 	.word	0x40003c00
 800094c:	00017700 	.word	0x00017700

08000950 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000956:	4a18      	ldr	r2, [pc, #96]	@ (80009b8 <MX_SPI1_Init+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800095c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000960:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800097c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000980:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_SPI1_Init+0x64>)
 800099c:	220a      	movs	r2, #10
 800099e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_SPI1_Init+0x64>)
 80009a2:	f004 fbcf 	bl	8005144 <HAL_SPI_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_SPI1_Init+0x60>
		Error_Handler();
 80009ac:	f000 f8fc 	bl	8000ba8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000180 	.word	0x20000180
 80009b8:	40013000 	.word	0x40013000

080009bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	@ 0x30
 80009c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	4b61      	ldr	r3, [pc, #388]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a60      	ldr	r2, [pc, #384]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b5e      	ldr	r3, [pc, #376]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	4b5a      	ldr	r3, [pc, #360]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a59      	ldr	r2, [pc, #356]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b57      	ldr	r3, [pc, #348]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b53      	ldr	r3, [pc, #332]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a52      	ldr	r2, [pc, #328]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b50      	ldr	r3, [pc, #320]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a4b      	ldr	r2, [pc, #300]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b49      	ldr	r3, [pc, #292]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b45      	ldr	r3, [pc, #276]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a44      	ldr	r2, [pc, #272]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b42      	ldr	r3, [pc, #264]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b3e      	ldr	r3, [pc, #248]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a3d      	ldr	r2, [pc, #244]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b5c <MX_GPIO_Init+0x1a0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	4838      	ldr	r0, [pc, #224]	@ (8000b60 <MX_GPIO_Init+0x1a4>)
 8000a80:	f000 fe0c 	bl	800169c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000a84:	2201      	movs	r2, #1
 8000a86:	2101      	movs	r1, #1
 8000a88:	4836      	ldr	r0, [pc, #216]	@ (8000b64 <MX_GPIO_Init+0x1a8>)
 8000a8a:	f000 fe07 	bl	800169c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a94:	4834      	ldr	r0, [pc, #208]	@ (8000b68 <MX_GPIO_Init+0x1ac>)
 8000a96:	f000 fe01 	bl	800169c <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : DATA_Ready_Pin */
	GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	482c      	ldr	r0, [pc, #176]	@ (8000b60 <MX_GPIO_Init+0x1a4>)
 8000aae:	f000 fc71 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4825      	ldr	r0, [pc, #148]	@ (8000b60 <MX_GPIO_Init+0x1a4>)
 8000aca:	f000 fc63 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = INT1_Pin | INT2_Pin | MEMS_INT2_Pin;
 8000ace:	2332      	movs	r3, #50	@ 0x32
 8000ad0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ad2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ad6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481f      	ldr	r0, [pc, #124]	@ (8000b60 <MX_GPIO_Init+0x1a4>)
 8000ae4:	f000 fc56 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4819      	ldr	r0, [pc, #100]	@ (8000b64 <MX_GPIO_Init+0x1a8>)
 8000b00:	f000 fc48 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b08:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b0c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4814      	ldr	r0, [pc, #80]	@ (8000b6c <MX_GPIO_Init+0x1b0>)
 8000b1a:	f000 fc3b 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000b1e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <MX_GPIO_Init+0x1ac>)
 8000b38:	f000 fc2c 	bl	8001394 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <MX_GPIO_Init+0x1ac>)
 8000b50:	f000 fc20 	bl	8001394 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b54:	bf00      	nop
 8000b56:	3730      	adds	r7, #48	@ 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	40020000 	.word	0x40020000

08000b70 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8000b78:	f00b f96e 	bl	800be58 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f008 faa7 	bl	80090d0 <osDelay>
 8000b82:	e7fb      	b.n	8000b7c <StartDefaultTask+0xc>

08000b84 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b96:	f000 fad7 	bl	8001148 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40000800 	.word	0x40000800

08000ba8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <Error_Handler+0x8>

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_MspInit+0x54>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	4a11      	ldr	r2, [pc, #68]	@ (8000c08 <HAL_MspInit+0x54>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <HAL_MspInit+0x54>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <HAL_MspInit+0x54>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <HAL_MspInit+0x54>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HAL_MspInit+0x54>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	210f      	movs	r1, #15
 8000bf6:	f06f 0001 	mvn.w	r0, #1
 8000bfa:	f000 fba1 	bl	8001340 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	@ 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	@ (8000c90 <HAL_I2C_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12c      	bne.n	8000c88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a17      	ldr	r2, [pc, #92]	@ (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c4a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <HAL_I2C_MspInit+0x8c>)
 8000c68:	f000 fb94 	bl	8001394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	4a07      	ldr	r2, [pc, #28]	@ (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	@ 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	@ 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a59      	ldr	r2, [pc, #356]	@ (8000e20 <HAL_I2S_MspInit+0x184>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d15b      	bne.n	8000d76 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
 8000cc2:	4b58      	ldr	r3, [pc, #352]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a57      	ldr	r2, [pc, #348]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b55      	ldr	r3, [pc, #340]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd6:	623b      	str	r3, [r7, #32]
 8000cd8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	4b51      	ldr	r3, [pc, #324]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a50      	ldr	r2, [pc, #320]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b4e      	ldr	r3, [pc, #312]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a49      	ldr	r2, [pc, #292]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b47      	ldr	r3, [pc, #284]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d12:	2304      	movs	r3, #4
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d22:	2306      	movs	r3, #6
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	483e      	ldr	r0, [pc, #248]	@ (8000e28 <HAL_I2S_MspInit+0x18c>)
 8000d2e:	f000 fb31 	bl	8001394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d32:	2308      	movs	r3, #8
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d42:	2305      	movs	r3, #5
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4836      	ldr	r0, [pc, #216]	@ (8000e28 <HAL_I2S_MspInit+0x18c>)
 8000d4e:	f000 fb21 	bl	8001394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d52:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d64:	2305      	movs	r3, #5
 8000d66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	482f      	ldr	r0, [pc, #188]	@ (8000e2c <HAL_I2S_MspInit+0x190>)
 8000d70:	f000 fb10 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d74:	e04f      	b.n	8000e16 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e30 <HAL_I2S_MspInit+0x194>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d14a      	bne.n	8000e16 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	4a26      	ldr	r2, [pc, #152]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d90:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	4b20      	ldr	r3, [pc, #128]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	4a18      	ldr	r2, [pc, #96]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc8:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <HAL_I2S_MspInit+0x188>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de4:	2306      	movs	r3, #6
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4811      	ldr	r0, [pc, #68]	@ (8000e34 <HAL_I2S_MspInit+0x198>)
 8000df0:	f000 fad0 	bl	8001394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000df4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e06:	2306      	movs	r3, #6
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <HAL_I2S_MspInit+0x18c>)
 8000e12:	f000 fabf 	bl	8001394 <HAL_GPIO_Init>
}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	@ 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40003800 	.word	0x40003800
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40003c00 	.word	0x40003c00
 8000e34:	40020000 	.word	0x40020000

08000e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	@ (8000ebc <HAL_SPI_MspInit+0x84>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12b      	bne.n	8000eb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e92:	23e0      	movs	r3, #224	@ 0xe0
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <HAL_SPI_MspInit+0x8c>)
 8000eae:	f000 fa71 	bl	8001394 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	@ 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013000 	.word	0x40013000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	@ 0x38
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	4b33      	ldr	r3, [pc, #204]	@ (8000fac <HAL_InitTick+0xe4>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee0:	4a32      	ldr	r2, [pc, #200]	@ (8000fac <HAL_InitTick+0xe4>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee8:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <HAL_InitTick+0xe4>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef4:	f107 0210 	add.w	r2, r7, #16
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 ff9c 	bl	8004e3c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d103      	bne.n	8000f16 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f0e:	f003 ff81 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8000f12:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f14:	e004      	b.n	8000f20 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f16:	f003 ff7d 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f22:	4a23      	ldr	r2, [pc, #140]	@ (8000fb0 <HAL_InitTick+0xe8>)
 8000f24:	fba2 2303 	umull	r2, r3, r2, r3
 8000f28:	0c9b      	lsrs	r3, r3, #18
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <HAL_InitTick+0xec>)
 8000f30:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <HAL_InitTick+0xf0>)
 8000f32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <HAL_InitTick+0xec>)
 8000f36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f3a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <HAL_InitTick+0xec>)
 8000f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f40:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <HAL_InitTick+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <HAL_InitTick+0xec>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <HAL_InitTick+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f54:	4817      	ldr	r0, [pc, #92]	@ (8000fb4 <HAL_InitTick+0xec>)
 8000f56:	f004 f97e 	bl	8005256 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d11b      	bne.n	8000fa0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f68:	4812      	ldr	r0, [pc, #72]	@ (8000fb4 <HAL_InitTick+0xec>)
 8000f6a:	f004 f9cd 	bl	8005308 <HAL_TIM_Base_Start_IT>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d111      	bne.n	8000fa0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f7c:	201e      	movs	r0, #30
 8000f7e:	f000 f9fb 	bl	8001378 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d808      	bhi.n	8000f9a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	201e      	movs	r0, #30
 8000f8e:	f000 f9d7 	bl	8001340 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_InitTick+0xf4>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e002      	b.n	8000fa0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3738      	adds	r7, #56	@ 0x38
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	431bde83 	.word	0x431bde83
 8000fb4:	200001f4 	.word	0x200001f4
 8000fb8:	40000800 	.word	0x40000800
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <TIM4_IRQHandler+0x10>)
 8000ffe:	f004 f9e5 	bl	80053cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001f4 	.word	0x200001f4

0800100c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <OTG_FS_IRQHandler+0x10>)
 8001012:	f000 fe57 	bl	8001cc4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20005038 	.word	0x20005038

08001020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001028:	4a14      	ldr	r2, [pc, #80]	@ (800107c <_sbrk+0x5c>)
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <_sbrk+0x60>)
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001034:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <_sbrk+0x64>)
 800103e:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <_sbrk+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	429a      	cmp	r2, r3
 800104e:	d207      	bcs.n	8001060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001050:	f00b fb32 	bl	800c6b8 <__errno>
 8001054:	4603      	mov	r3, r0
 8001056:	220c      	movs	r2, #12
 8001058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	e009      	b.n	8001074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001066:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <_sbrk+0x64>)
 8001070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20020000 	.word	0x20020000
 8001080:	00000400 	.word	0x00000400
 8001084:	2000023c 	.word	0x2000023c
 8001088:	20005560 	.word	0x20005560

0800108c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b4:	f7ff ffea 	bl	800108c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	@ (80010f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	@ (80010fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f00b faf1 	bl	800c6c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e2:	f7ff fa9d 	bl	8000620 <main>
  bx  lr    
 80010e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010f4:	0800c88c 	.word	0x0800c88c
  ldr r2, =_sbss
 80010f8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010fc:	20005560 	.word	0x20005560

08001100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <HAL_Init+0x40>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_Init+0x40>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800111e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <HAL_Init+0x40>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f8fc 	bl	800132a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	200f      	movs	r0, #15
 8001134:	f7ff fec8 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fd3c 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008
 800116c:	20000240 	.word	0x20000240

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000240 	.word	0x20000240

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	@ (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	@ (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	@ (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	@ 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	@ 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff4c 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001352:	f7ff ff61 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001356:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68b9      	ldr	r1, [r7, #8]
 800135c:	6978      	ldr	r0, [r7, #20]
 800135e:	f7ff ffb1 	bl	80012c4 <NVIC_EncodePriority>
 8001362:	4602      	mov	r2, r0
 8001364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff80 	bl	8001270 <__NVIC_SetPriority>
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff54 	bl	8001234 <__NVIC_EnableIRQ>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	@ 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e159      	b.n	8001664 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8148 	bne.w	800165e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d005      	beq.n	80013e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d130      	bne.n	8001448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b03      	cmp	r3, #3
 8001452:	d017      	beq.n	8001484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d123      	bne.n	80014d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0203 	and.w	r2, r3, #3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a2 	beq.w	800165e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b57      	ldr	r3, [pc, #348]	@ (800167c <HAL_GPIO_Init+0x2e8>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	4a56      	ldr	r2, [pc, #344]	@ (800167c <HAL_GPIO_Init+0x2e8>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001528:	6453      	str	r3, [r2, #68]	@ 0x44
 800152a:	4b54      	ldr	r3, [pc, #336]	@ (800167c <HAL_GPIO_Init+0x2e8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001536:	4a52      	ldr	r2, [pc, #328]	@ (8001680 <HAL_GPIO_Init+0x2ec>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a49      	ldr	r2, [pc, #292]	@ (8001684 <HAL_GPIO_Init+0x2f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x202>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a48      	ldr	r2, [pc, #288]	@ (8001688 <HAL_GPIO_Init+0x2f4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x1fe>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a47      	ldr	r2, [pc, #284]	@ (800168c <HAL_GPIO_Init+0x2f8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x1fa>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a46      	ldr	r2, [pc, #280]	@ (8001690 <HAL_GPIO_Init+0x2fc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x1f6>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a45      	ldr	r2, [pc, #276]	@ (8001694 <HAL_GPIO_Init+0x300>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x1f2>
 8001582:	2304      	movs	r3, #4
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001586:	2307      	movs	r3, #7
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001596:	2300      	movs	r3, #0
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	@ (8001680 <HAL_GPIO_Init+0x2ec>)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <HAL_GPIO_Init+0x304>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a2f      	ldr	r2, [pc, #188]	@ (8001698 <HAL_GPIO_Init+0x304>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <HAL_GPIO_Init+0x304>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a24      	ldr	r2, [pc, #144]	@ (8001698 <HAL_GPIO_Init+0x304>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160a:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <HAL_GPIO_Init+0x304>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162e:	4a1a      	ldr	r2, [pc, #104]	@ (8001698 <HAL_GPIO_Init+0x304>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <HAL_GPIO_Init+0x304>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001658:	4a0f      	ldr	r2, [pc, #60]	@ (8001698 <HAL_GPIO_Init+0x304>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f67f aea2 	bls.w	80013b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e0:	887a      	ldrh	r2, [r7, #2]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	041a      	lsls	r2, r3, #16
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	400b      	ands	r3, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af02      	add	r7, sp, #8
 8001708:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e059      	b.n	80017c8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d106      	bne.n	8001734 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f00a fbe6 	bl	800bf00 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2203      	movs	r2, #3
 8001738:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001742:	d102      	bne.n	800174a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f004 f869 	bl	8005826 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7c1a      	ldrb	r2, [r3, #16]
 800175c:	f88d 2000 	strb.w	r2, [sp]
 8001760:	3304      	adds	r3, #4
 8001762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001764:	f003 ffea 	bl	800573c <USB_CoreInit>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2202      	movs	r2, #2
 8001772:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e026      	b.n	80017c8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	4618      	mov	r0, r3
 8001782:	f004 f861 	bl	8005848 <USB_SetCurrentMode>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e017      	b.n	80017c8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7c1a      	ldrb	r2, [r3, #16]
 80017a0:	f88d 2000 	strb.w	r2, [sp]
 80017a4:	3304      	adds	r3, #4
 80017a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a8:	f004 fa04 	bl	8005bb4 <USB_HostInit>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2202      	movs	r2, #2
 80017b6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e004      	b.n	80017c8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b08b      	sub	sp, #44	@ 0x2c
 80017d4:	af04      	add	r7, sp, #16
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	4608      	mov	r0, r1
 80017da:	4611      	mov	r1, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	4603      	mov	r3, r0
 80017e0:	70fb      	strb	r3, [r7, #3]
 80017e2:	460b      	mov	r3, r1
 80017e4:	70bb      	strb	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80017ea:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80017ec:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_HCD_HC_Init+0x2c>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e09d      	b.n	8001938 <HAL_HCD_HC_Init+0x168>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3319      	adds	r3, #25
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	3314      	adds	r3, #20
 8001828:	787a      	ldrb	r2, [r7, #1]
 800182a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3315      	adds	r3, #21
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	3326      	adds	r3, #38	@ 0x26
 8001850:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001854:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800185e:	b2d8      	uxtb	r0, r3
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3316      	adds	r3, #22
 800186e:	4602      	mov	r2, r0
 8001870:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	4619      	mov	r1, r3
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fbc8 	bl	800200c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800187c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001880:	2b00      	cmp	r3, #0
 8001882:	da0a      	bge.n	800189a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3317      	adds	r3, #23
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	e009      	b.n	80018ae <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3317      	adds	r3, #23
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f004 facc 	bl	8005e50 <USB_GetHostSpeed>
 80018b8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80018ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d10b      	bne.n	80018da <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80018c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_HCD_HC_Init+0x10a>
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d104      	bne.n	80018da <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2bbc      	cmp	r3, #188	@ 0xbc
 80018d4:	d901      	bls.n	80018da <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80018d6:	23bc      	movs	r3, #188	@ 0xbc
 80018d8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	3318      	adds	r3, #24
 80018ea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	b298      	uxth	r0, r3
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3328      	adds	r3, #40	@ 0x28
 8001904:	4602      	mov	r2, r0
 8001906:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	b29b      	uxth	r3, r3
 8001910:	787c      	ldrb	r4, [r7, #1]
 8001912:	78ba      	ldrb	r2, [r7, #2]
 8001914:	78f9      	ldrb	r1, [r7, #3]
 8001916:	9302      	str	r3, [sp, #8]
 8001918:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	4623      	mov	r3, r4
 8001926:	f004 fabb 	bl	8005ea0 <USB_HC_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}

08001940 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_HCD_HC_Halt+0x1e>
 800195a:	2302      	movs	r3, #2
 800195c:	e00f      	b.n	800197e <HAL_HCD_HC_Halt+0x3e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f004 fe01 	bl	8006576 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	461a      	mov	r2, r3
 8001996:	4603      	mov	r3, r0
 8001998:	70fb      	strb	r3, [r7, #3]
 800199a:	460b      	mov	r3, r1
 800199c:	70bb      	strb	r3, [r7, #2]
 800199e:	4613      	mov	r3, r2
 80019a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	3317      	adds	r3, #23
 80019b2:	78ba      	ldrb	r2, [r7, #2]
 80019b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3326      	adds	r3, #38	@ 0x26
 80019c6:	787a      	ldrb	r2, [r7, #1]
 80019c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019ca:	7c3b      	ldrb	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d114      	bne.n	80019fa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	332a      	adds	r3, #42	@ 0x2a
 80019e0:	2203      	movs	r2, #3
 80019e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	3319      	adds	r3, #25
 80019f4:	7f3a      	ldrb	r2, [r7, #28]
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e009      	b.n	8001a0e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	332a      	adds	r3, #42	@ 0x2a
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a0e:	787b      	ldrb	r3, [r7, #1]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	f200 8102 	bhi.w	8001c1a <HAL_HCD_HC_SubmitRequest+0x292>
 8001a16:	a201      	add	r2, pc, #4	@ (adr r2, 8001a1c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001c05 	.word	0x08001c05
 8001a24:	08001af1 	.word	0x08001af1
 8001a28:	08001b7b 	.word	0x08001b7b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001a2c:	7c3b      	ldrb	r3, [r7, #16]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	f040 80f5 	bne.w	8001c1e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001a34:	78bb      	ldrb	r3, [r7, #2]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d12d      	bne.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001a3a:	8b3b      	ldrh	r3, [r7, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	333d      	adds	r3, #61	@ 0x3d
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	333d      	adds	r3, #61	@ 0x3d
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10a      	bne.n	8001a80 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a6a:	78fa      	ldrb	r2, [r7, #3]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	332a      	adds	r3, #42	@ 0x2a
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a7e:	e0ce      	b.n	8001c1e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	332a      	adds	r3, #42	@ 0x2a
 8001a90:	2202      	movs	r2, #2
 8001a92:	701a      	strb	r2, [r3, #0]
      break;
 8001a94:	e0c3      	b.n	8001c1e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	331a      	adds	r3, #26
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f040 80b8 	bne.w	8001c1e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	333c      	adds	r3, #60	@ 0x3c
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10a      	bne.n	8001ada <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	332a      	adds	r3, #42	@ 0x2a
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
      break;
 8001ad8:	e0a1      	b.n	8001c1e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	332a      	adds	r3, #42	@ 0x2a
 8001aea:	2202      	movs	r2, #2
 8001aec:	701a      	strb	r2, [r3, #0]
      break;
 8001aee:	e096      	b.n	8001c1e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001af0:	78bb      	ldrb	r3, [r7, #2]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d120      	bne.n	8001b38 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001af6:	78fa      	ldrb	r2, [r7, #3]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	333d      	adds	r3, #61	@ 0x3d
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b0c:	78fa      	ldrb	r2, [r7, #3]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	332a      	adds	r3, #42	@ 0x2a
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b20:	e07e      	b.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	332a      	adds	r3, #42	@ 0x2a
 8001b32:	2202      	movs	r2, #2
 8001b34:	701a      	strb	r2, [r3, #0]
      break;
 8001b36:	e073      	b.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	333c      	adds	r3, #60	@ 0x3c
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	332a      	adds	r3, #42	@ 0x2a
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
      break;
 8001b62:	e05d      	b.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	332a      	adds	r3, #42	@ 0x2a
 8001b74:	2202      	movs	r2, #2
 8001b76:	701a      	strb	r2, [r3, #0]
      break;
 8001b78:	e052      	b.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b7a:	78bb      	ldrb	r3, [r7, #2]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d120      	bne.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	333d      	adds	r3, #61	@ 0x3d
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10a      	bne.n	8001bac <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	332a      	adds	r3, #42	@ 0x2a
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001baa:	e039      	b.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	332a      	adds	r3, #42	@ 0x2a
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	701a      	strb	r2, [r3, #0]
      break;
 8001bc0:	e02e      	b.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	333c      	adds	r3, #60	@ 0x3c
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10a      	bne.n	8001bee <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	332a      	adds	r3, #42	@ 0x2a
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
      break;
 8001bec:	e018      	b.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	1a9b      	subs	r3, r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	332a      	adds	r3, #42	@ 0x2a
 8001bfe:	2202      	movs	r2, #2
 8001c00:	701a      	strb	r2, [r3, #0]
      break;
 8001c02:	e00d      	b.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	332a      	adds	r3, #42	@ 0x2a
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
      break;
 8001c18:	e002      	b.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001c1a:	bf00      	nop
 8001c1c:	e000      	b.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001c1e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	332c      	adds	r3, #44	@ 0x2c
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	8b39      	ldrh	r1, [r7, #24]
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4403      	add	r3, r0
 8001c44:	3334      	adds	r3, #52	@ 0x34
 8001c46:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	334c      	adds	r3, #76	@ 0x4c
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	3338      	adds	r3, #56	@ 0x38
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3315      	adds	r3, #21
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	334d      	adds	r3, #77	@ 0x4d
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	3310      	adds	r3, #16
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	1d19      	adds	r1, r3, #4
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	799b      	ldrb	r3, [r3, #6]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f004 fa0a 	bl	80060cc <USB_HC_StartXfer>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop

08001cc4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 ff2a 	bl	8005b34 <USB_GetMode>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	f040 80fb 	bne.w	8001ede <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 feed 	bl	8005acc <USB_ReadInterrupts>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80f1 	beq.w	8001edc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fee4 	bl	8005acc <USB_ReadInterrupts>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d0e:	d104      	bne.n	8001d1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fed4 	bl	8005acc <USB_ReadInterrupts>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d2e:	d104      	bne.n	8001d3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fec4 	bl	8005acc <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001d4e:	d104      	bne.n	8001d5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 feb4 	bl	8005acc <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d103      	bne.n	8001d76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2202      	movs	r2, #2
 8001d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fea6 	bl	8005acc <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d8a:	d120      	bne.n	8001dce <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d113      	bne.n	8001dce <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001da6:	2110      	movs	r1, #16
 8001da8:	6938      	ldr	r0, [r7, #16]
 8001daa:	f003 fd99 	bl	80058e0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f003 fdc8 	bl	8005944 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7a5b      	ldrb	r3, [r3, #9]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d105      	bne.n	8001dc8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 ffa4 	bl	8005d10 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f00a f917 	bl	800bffc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fe7a 	bl	8005acc <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de2:	d102      	bne.n	8001dea <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f001 fd4d 	bl	8003884 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fe6c 	bl	8005acc <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d106      	bne.n	8001e0c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f00a f8e0 	bl	800bfc4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2208      	movs	r2, #8
 8001e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 fe5b 	bl	8005acc <USB_ReadInterrupts>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e20:	d139      	bne.n	8001e96 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 fb94 	bl	8006554 <USB_HC_ReadInterrupt>
 8001e2c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e025      	b.n	8001e80 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d018      	beq.n	8001e7a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e5e:	d106      	bne.n	8001e6e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f905 	bl	8002076 <HCD_HC_IN_IRQHandler>
 8001e6c:	e005      	b.n	8001e7a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	4619      	mov	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 ff67 	bl	8002d48 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	795b      	ldrb	r3, [r3, #5]
 8001e84:	461a      	mov	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d3d3      	bcc.n	8001e34 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fe16 	bl	8005acc <USB_ReadInterrupts>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d101      	bne.n	8001eae <HAL_HCD_IRQHandler+0x1ea>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_HCD_IRQHandler+0x1ec>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d014      	beq.n	8001ede <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0210 	bic.w	r2, r2, #16
 8001ec2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f001 fbfe 	bl	80036c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0210 	orr.w	r2, r2, #16
 8001ed8:	619a      	str	r2, [r3, #24]
 8001eda:	e000      	b.n	8001ede <HAL_HCD_IRQHandler+0x21a>
      return;
 8001edc:	bf00      	nop
    }
  }
}
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_HCD_Start+0x16>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e013      	b.n	8001f22 <HAL_HCD_Start+0x3e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2101      	movs	r1, #1
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 ff68 	bl	8005dde <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 fc76 	bl	8005804 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_HCD_Stop+0x16>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e00d      	b.n	8001f5c <HAL_HCD_Stop+0x32>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f004 fc32 	bl	80067b6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 ff0a 	bl	8005d8a <USB_ResetPort>
 8001f76:	4603      	mov	r3, r0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	334c      	adds	r3, #76	@ 0x4c
 8001f9c:	781b      	ldrb	r3, [r3, #0]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3338      	adds	r3, #56	@ 0x38
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 ff4c 	bl	8005e7e <USB_GetCurrentFrame>
 8001fe6:	4603      	mov	r3, r0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 ff27 	bl	8005e50 <USB_GetHostSpeed>
 8002002:	4603      	mov	r3, r0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	331a      	adds	r3, #26
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	331b      	adds	r3, #27
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	3325      	adds	r3, #37	@ 0x25
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	3324      	adds	r3, #36	@ 0x24
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f003 fd2c 	bl	8005af2 <USB_ReadChInterrupts>
 800209a:	4603      	mov	r3, r0
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d11a      	bne.n	80020da <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b0:	461a      	mov	r2, r3
 80020b2:	2304      	movs	r3, #4
 80020b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	334d      	adds	r3, #77	@ 0x4d
 80020c6:	2207      	movs	r2, #7
 80020c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fa4f 	bl	8006576 <USB_HC_Halt>
 80020d8:	e09e      	b.n	8002218 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fd05 	bl	8005af2 <USB_ReadChInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020f2:	d11b      	bne.n	800212c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002100:	461a      	mov	r2, r3
 8002102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002106:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	334d      	adds	r3, #77	@ 0x4d
 8002118:	2208      	movs	r2, #8
 800211a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f004 fa26 	bl	8006576 <USB_HC_Halt>
 800212a:	e075      	b.n	8002218 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f003 fcdc 	bl	8005af2 <USB_ReadChInterrupts>
 800213a:	4603      	mov	r3, r0
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b08      	cmp	r3, #8
 8002142:	d11a      	bne.n	800217a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002150:	461a      	mov	r2, r3
 8002152:	2308      	movs	r3, #8
 8002154:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	334d      	adds	r3, #77	@ 0x4d
 8002166:	2206      	movs	r2, #6
 8002168:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f9ff 	bl	8006576 <USB_HC_Halt>
 8002178:	e04e      	b.n	8002218 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fcb5 	bl	8005af2 <USB_ReadChInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002192:	d11b      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	334d      	adds	r3, #77	@ 0x4d
 80021b8:	2209      	movs	r2, #9
 80021ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 f9d6 	bl	8006576 <USB_HC_Halt>
 80021ca:	e025      	b.n	8002218 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fc8c 	bl	8005af2 <USB_ReadChInterrupts>
 80021da:	4603      	mov	r3, r0
 80021dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e0:	2b80      	cmp	r3, #128	@ 0x80
 80021e2:	d119      	bne.n	8002218 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f0:	461a      	mov	r2, r3
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	334d      	adds	r3, #77	@ 0x4d
 8002206:	2207      	movs	r2, #7
 8002208:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f004 f9af 	bl	8006576 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fc66 	bl	8005af2 <USB_ReadChInterrupts>
 8002226:	4603      	mov	r3, r0
 8002228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800222c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002230:	d112      	bne.n	8002258 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f004 f99b 	bl	8006576 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800224c:	461a      	mov	r2, r3
 800224e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002252:	6093      	str	r3, [r2, #8]
 8002254:	f000 bd75 	b.w	8002d42 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f003 fc46 	bl	8005af2 <USB_ReadChInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	f040 8128 	bne.w	80024c2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800227e:	461a      	mov	r2, r3
 8002280:	2320      	movs	r3, #32
 8002282:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	331b      	adds	r3, #27
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d119      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	331b      	adds	r3, #27
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	0151      	lsls	r1, r2, #5
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	440a      	add	r2, r1
 80022c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022cc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	799b      	ldrb	r3, [r3, #6]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d01b      	beq.n	800230e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	3330      	adds	r3, #48	@ 0x30
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	1ac9      	subs	r1, r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4403      	add	r3, r0
 800230a:	3338      	adds	r3, #56	@ 0x38
 800230c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	334d      	adds	r3, #77	@ 0x4d
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3344      	adds	r3, #68	@ 0x44
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002342:	461a      	mov	r2, r3
 8002344:	2301      	movs	r3, #1
 8002346:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	3326      	adds	r3, #38	@ 0x26
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3326      	adds	r3, #38	@ 0x26
 800236e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002370:	2b02      	cmp	r3, #2
 8002372:	d110      	bne.n	8002396 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f004 f8fa 	bl	8006576 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800238e:	461a      	mov	r2, r3
 8002390:	2310      	movs	r3, #16
 8002392:	6093      	str	r3, [r2, #8]
 8002394:	e03d      	b.n	8002412 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	3326      	adds	r3, #38	@ 0x26
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d00a      	beq.n	80023c2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	3326      	adds	r3, #38	@ 0x26
 80023bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d127      	bne.n	8002412 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	0151      	lsls	r1, r2, #5
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	440a      	add	r2, r1
 80023d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80023e0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	334c      	adds	r3, #76	@ 0x4c
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	334c      	adds	r3, #76	@ 0x4c
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	4619      	mov	r1, r3
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f009 fe03 	bl	800c018 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	799b      	ldrb	r3, [r3, #6]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d13b      	bne.n	8002492 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	3338      	adds	r3, #56	@ 0x38
 800242a:	6819      	ldr	r1, [r3, #0]
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4403      	add	r3, r0
 800243a:	3328      	adds	r3, #40	@ 0x28
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	440b      	add	r3, r1
 8002440:	1e59      	subs	r1, r3, #1
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4403      	add	r3, r0
 8002450:	3328      	adds	r3, #40	@ 0x28
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	fbb1 f3f3 	udiv	r3, r1, r3
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8470 	beq.w	8002d42 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	333c      	adds	r3, #60	@ 0x3c
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2d8      	uxtb	r0, r3
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	333c      	adds	r3, #60	@ 0x3c
 800248a:	4602      	mov	r2, r0
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	f000 bc58 	b.w	8002d42 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	333c      	adds	r3, #60	@ 0x3c
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	f083 0301 	eor.w	r3, r3, #1
 80024aa:	b2d8      	uxtb	r0, r3
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	333c      	adds	r3, #60	@ 0x3c
 80024ba:	4602      	mov	r2, r0
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	f000 bc40 	b.w	8002d42 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 fb11 	bl	8005af2 <USB_ReadChInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d131      	bne.n	800253e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e6:	461a      	mov	r2, r3
 80024e8:	2320      	movs	r3, #32
 80024ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	331a      	adds	r3, #26
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	f040 841f 	bne.w	8002d42 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	331b      	adds	r3, #27
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	334d      	adds	r3, #77	@ 0x4d
 8002528:	2203      	movs	r2, #3
 800252a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f004 f81e 	bl	8006576 <USB_HC_Halt>
 800253a:	f000 bc02 	b.w	8002d42 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fad3 	bl	8005af2 <USB_ReadChInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b02      	cmp	r3, #2
 8002554:	f040 8305 	bne.w	8002b62 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	2302      	movs	r3, #2
 8002568:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	334d      	adds	r3, #77	@ 0x4d
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d114      	bne.n	80025aa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	334d      	adds	r3, #77	@ 0x4d
 8002590:	2202      	movs	r2, #2
 8002592:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	334c      	adds	r3, #76	@ 0x4c
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e2cc      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	334d      	adds	r3, #77	@ 0x4d
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b06      	cmp	r3, #6
 80025be:	d114      	bne.n	80025ea <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	334d      	adds	r3, #77	@ 0x4d
 80025d0:	2202      	movs	r2, #2
 80025d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	334c      	adds	r3, #76	@ 0x4c
 80025e4:	2205      	movs	r2, #5
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e2ac      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	334d      	adds	r3, #77	@ 0x4d
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b07      	cmp	r3, #7
 80025fe:	d00b      	beq.n	8002618 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	334d      	adds	r3, #77	@ 0x4d
 8002610:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002612:	2b09      	cmp	r3, #9
 8002614:	f040 80a6 	bne.w	8002764 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	334d      	adds	r3, #77	@ 0x4d
 8002628:	2202      	movs	r2, #2
 800262a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3344      	adds	r3, #68	@ 0x44
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1c59      	adds	r1, r3, #1
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4403      	add	r3, r0
 800264c:	3344      	adds	r3, #68	@ 0x44
 800264e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3344      	adds	r3, #68	@ 0x44
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d943      	bls.n	80026ee <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	3344      	adds	r3, #68	@ 0x44
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	331a      	adds	r3, #26
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d123      	bne.n	80026d8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	331b      	adds	r3, #27
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	331c      	adds	r3, #28
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	0151      	lsls	r1, r2, #5
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	440a      	add	r2, r1
 80026ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	334c      	adds	r3, #76	@ 0x4c
 80026e8:	2204      	movs	r2, #4
 80026ea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026ec:	e229      	b.n	8002b42 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	334c      	adds	r3, #76	@ 0x4c
 80026fe:	2202      	movs	r2, #2
 8002700:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3326      	adds	r3, #38	@ 0x26
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	3326      	adds	r3, #38	@ 0x26
 8002728:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800272a:	2b02      	cmp	r3, #2
 800272c:	f040 8209 	bne.w	8002b42 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002746:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800274e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800275c:	461a      	mov	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002762:	e1ee      	b.n	8002b42 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	334d      	adds	r3, #77	@ 0x4d
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b05      	cmp	r3, #5
 8002778:	f040 80c8 	bne.w	800290c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	334d      	adds	r3, #77	@ 0x4d
 800278c:	2202      	movs	r2, #2
 800278e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	331b      	adds	r3, #27
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	f040 81ce 	bne.w	8002b44 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3326      	adds	r3, #38	@ 0x26
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d16b      	bne.n	8002896 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	3348      	adds	r3, #72	@ 0x48
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	1c59      	adds	r1, r3, #1
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4403      	add	r3, r0
 80027de:	3348      	adds	r3, #72	@ 0x48
 80027e0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3348      	adds	r3, #72	@ 0x48
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d943      	bls.n	8002880 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	3348      	adds	r3, #72	@ 0x48
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	331b      	adds	r3, #27
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3344      	adds	r3, #68	@ 0x44
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d809      	bhi.n	800284a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	331c      	adds	r3, #28
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	0151      	lsls	r1, r2, #5
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	440a      	add	r2, r1
 8002860:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002868:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	334c      	adds	r3, #76	@ 0x4c
 800287a:	2204      	movs	r2, #4
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e014      	b.n	80028aa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	334c      	adds	r3, #76	@ 0x4c
 8002890:	2202      	movs	r2, #2
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e009      	b.n	80028aa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	334c      	adds	r3, #76	@ 0x4c
 80028a6:	2202      	movs	r2, #2
 80028a8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	3326      	adds	r3, #38	@ 0x26
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3326      	adds	r3, #38	@ 0x26
 80028d0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	f040 8136 	bne.w	8002b44 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028ee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028f6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002904:	461a      	mov	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e11b      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	334d      	adds	r3, #77	@ 0x4d
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b03      	cmp	r3, #3
 8002920:	f040 8081 	bne.w	8002a26 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	334d      	adds	r3, #77	@ 0x4d
 8002934:	2202      	movs	r2, #2
 8002936:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	331b      	adds	r3, #27
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	f040 80fa 	bne.w	8002b44 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	334c      	adds	r3, #76	@ 0x4c
 8002960:	2202      	movs	r2, #2
 8002962:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	0151      	lsls	r1, r2, #5
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	440a      	add	r2, r1
 800297a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800297e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002982:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	0151      	lsls	r1, r2, #5
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	440a      	add	r2, r1
 800299a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800299e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	0151      	lsls	r1, r2, #5
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	440a      	add	r2, r1
 80029ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029be:	f023 0320 	bic.w	r3, r3, #32
 80029c2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3326      	adds	r3, #38	@ 0x26
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3326      	adds	r3, #38	@ 0x26
 80029ea:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	f040 80a9 	bne.w	8002b44 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a08:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a10:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	e08e      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	334d      	adds	r3, #77	@ 0x4d
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d143      	bne.n	8002ac4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	334d      	adds	r3, #77	@ 0x4d
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334c      	adds	r3, #76	@ 0x4c
 8002a60:	2202      	movs	r2, #2
 8002a62:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3326      	adds	r3, #38	@ 0x26
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3326      	adds	r3, #38	@ 0x26
 8002a8a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d159      	bne.n	8002b44 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002aa6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002aae:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002abc:	461a      	mov	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e03f      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	334d      	adds	r3, #77	@ 0x4d
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d126      	bne.n	8002b28 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	334d      	adds	r3, #77	@ 0x4d
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3344      	adds	r3, #68	@ 0x44
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	1c59      	adds	r1, r3, #1
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4403      	add	r3, r0
 8002b0e:	3344      	adds	r3, #68	@ 0x44
 8002b10:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	334c      	adds	r3, #76	@ 0x4c
 8002b22:	2204      	movs	r2, #4
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e00d      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	334d      	adds	r3, #77	@ 0x4d
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	f000 8100 	beq.w	8002d40 <HCD_HC_IN_IRQHandler+0xcca>
 8002b40:	e000      	b.n	8002b44 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b42:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	334c      	adds	r3, #76	@ 0x4c
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f009 fa5c 	bl	800c018 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b60:	e0ef      	b.n	8002d42 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f002 ffc1 	bl	8005af2 <USB_ReadChInterrupts>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b76:	2b40      	cmp	r3, #64	@ 0x40
 8002b78:	d12f      	bne.n	8002bda <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b86:	461a      	mov	r2, r3
 8002b88:	2340      	movs	r3, #64	@ 0x40
 8002b8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	334d      	adds	r3, #77	@ 0x4d
 8002b9c:	2205      	movs	r2, #5
 8002b9e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	331a      	adds	r3, #26
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3344      	adds	r3, #68	@ 0x44
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 fccf 	bl	8006576 <USB_HC_Halt>
 8002bd8:	e0b3      	b.n	8002d42 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 ff85 	bl	8005af2 <USB_ReadChInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	f040 80a7 	bne.w	8002d42 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3326      	adds	r3, #38	@ 0x26
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d11b      	bne.n	8002c42 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	3344      	adds	r3, #68	@ 0x44
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	334d      	adds	r3, #77	@ 0x4d
 8002c2e:	2204      	movs	r2, #4
 8002c30:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 fc9b 	bl	8006576 <USB_HC_Halt>
 8002c40:	e03f      	b.n	8002cc2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3326      	adds	r3, #38	@ 0x26
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3326      	adds	r3, #38	@ 0x26
 8002c68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d129      	bne.n	8002cc2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3344      	adds	r3, #68	@ 0x44
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	799b      	ldrb	r3, [r3, #6]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HCD_HC_IN_IRQHandler+0xc2a>
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	331b      	adds	r3, #27
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d110      	bne.n	8002cc2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	334d      	adds	r3, #77	@ 0x4d
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 fc5a 	bl	8006576 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	331b      	adds	r3, #27
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d129      	bne.n	8002d2c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	331b      	adds	r3, #27
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	0151      	lsls	r1, r2, #5
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	440a      	add	r2, r1
 8002d02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d0a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	0151      	lsls	r1, r2, #5
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	440a      	add	r2, r1
 8002d22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	6093      	str	r3, [r2, #8]
 8002d3e:	e000      	b.n	8002d42 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002d40:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fec3 	bl	8005af2 <USB_ReadChInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d11b      	bne.n	8002dae <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d82:	461a      	mov	r2, r3
 8002d84:	2304      	movs	r3, #4
 8002d86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	334d      	adds	r3, #77	@ 0x4d
 8002d98:	2207      	movs	r2, #7
 8002d9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fbe6 	bl	8006576 <USB_HC_Halt>
 8002daa:	f000 bc89 	b.w	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 fe9b 	bl	8005af2 <USB_ReadChInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	f040 8082 	bne.w	8002ecc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3319      	adds	r3, #25
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d124      	bne.n	8002e3a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3319      	adds	r3, #25
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	334c      	adds	r3, #76	@ 0x4c
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	334d      	adds	r3, #77	@ 0x4d
 8002e28:	2203      	movs	r2, #3
 8002e2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 fb9e 	bl	8006576 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	331a      	adds	r3, #26
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	f040 8437 	bne.w	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	331b      	adds	r3, #27
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 842b 	bne.w	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3326      	adds	r3, #38	@ 0x26
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d009      	beq.n	8002e94 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	331b      	adds	r3, #27
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	334d      	adds	r3, #77	@ 0x4d
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fb60 	bl	8006576 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3344      	adds	r3, #68	@ 0x44
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e3f9      	b.n	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 fe0c 	bl	8005af2 <USB_ReadChInterrupts>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee4:	d111      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ef8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fb37 	bl	8006576 <USB_HC_Halt>
 8002f08:	e3da      	b.n	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fded 	bl	8005af2 <USB_ReadChInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d168      	bne.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3344      	adds	r3, #68	@ 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 fdd7 	bl	8005af2 <USB_ReadChInterrupts>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4a:	2b40      	cmp	r3, #64	@ 0x40
 8002f4c:	d112      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3319      	adds	r3, #25
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2340      	movs	r3, #64	@ 0x40
 8002f72:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	331b      	adds	r3, #27
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d019      	beq.n	8002fbe <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	331b      	adds	r3, #27
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	0151      	lsls	r1, r2, #5
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	440a      	add	r2, r1
 8002fb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2301      	movs	r3, #1
 8002fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	334d      	adds	r3, #77	@ 0x4d
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f003 fac2 	bl	8006576 <USB_HC_Halt>
 8002ff2:	e365      	b.n	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f002 fd78 	bl	8005af2 <USB_ReadChInterrupts>
 8003002:	4603      	mov	r3, r0
 8003004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003008:	2b40      	cmp	r3, #64	@ 0x40
 800300a:	d139      	bne.n	8003080 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	334d      	adds	r3, #77	@ 0x4d
 800301c:	2205      	movs	r2, #5
 800301e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	331a      	adds	r3, #26
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3319      	adds	r3, #25
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3344      	adds	r3, #68	@ 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f003 fa85 	bl	8006576 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003078:	461a      	mov	r2, r3
 800307a:	2340      	movs	r3, #64	@ 0x40
 800307c:	6093      	str	r3, [r2, #8]
 800307e:	e31f      	b.n	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f002 fd32 	bl	8005af2 <USB_ReadChInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b08      	cmp	r3, #8
 8003096:	d11a      	bne.n	80030ce <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	2308      	movs	r3, #8
 80030a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334d      	adds	r3, #77	@ 0x4d
 80030ba:	2206      	movs	r2, #6
 80030bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f003 fa55 	bl	8006576 <USB_HC_Halt>
 80030cc:	e2f8      	b.n	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 fd0b 	bl	8005af2 <USB_ReadChInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d144      	bne.n	8003170 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	3344      	adds	r3, #68	@ 0x44
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	334d      	adds	r3, #77	@ 0x4d
 800310a:	2204      	movs	r2, #4
 800310c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3319      	adds	r3, #25
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d114      	bne.n	800314e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3318      	adds	r3, #24
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	3319      	adds	r3, #25
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f003 fa0d 	bl	8006576 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003168:	461a      	mov	r2, r3
 800316a:	2310      	movs	r3, #16
 800316c:	6093      	str	r3, [r2, #8]
 800316e:	e2a7      	b.n	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f002 fcba 	bl	8005af2 <USB_ReadChInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003184:	2b80      	cmp	r3, #128	@ 0x80
 8003186:	f040 8083 	bne.w	8003290 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	799b      	ldrb	r3, [r3, #6]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d111      	bne.n	80031b6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	334d      	adds	r3, #77	@ 0x4d
 80031a2:	2207      	movs	r2, #7
 80031a4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 f9e1 	bl	8006576 <USB_HC_Halt>
 80031b4:	e062      	b.n	800327c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3344      	adds	r3, #68	@ 0x44
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	1c59      	adds	r1, r3, #1
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4403      	add	r3, r0
 80031d6:	3344      	adds	r3, #68	@ 0x44
 80031d8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	3344      	adds	r3, #68	@ 0x44
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d922      	bls.n	8003236 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	3344      	adds	r3, #68	@ 0x44
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	334c      	adds	r3, #76	@ 0x4c
 8003214:	2204      	movs	r2, #4
 8003216:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334c      	adds	r3, #76	@ 0x4c
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f008 fef2 	bl	800c018 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003234:	e022      	b.n	800327c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	334c      	adds	r3, #76	@ 0x4c
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003260:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003268:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003276:	461a      	mov	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	6093      	str	r3, [r2, #8]
 800328e:	e217      	b.n	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f002 fc2a 	bl	8005af2 <USB_ReadChInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a8:	d11b      	bne.n	80032e2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	334d      	adds	r3, #77	@ 0x4d
 80032ba:	2209      	movs	r2, #9
 80032bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 f955 	bl	8006576 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d8:	461a      	mov	r2, r3
 80032da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032de:	6093      	str	r3, [r2, #8]
 80032e0:	e1ee      	b.n	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 fc01 	bl	8005af2 <USB_ReadChInterrupts>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	f040 81df 	bne.w	80036ba <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	2302      	movs	r3, #2
 800330c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	@ 0x4d
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	f040 8093 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334d      	adds	r3, #77	@ 0x4d
 8003336:	2202      	movs	r2, #2
 8003338:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334c      	adds	r3, #76	@ 0x4c
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3326      	adds	r3, #38	@ 0x26
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d00b      	beq.n	800337c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	3326      	adds	r3, #38	@ 0x26
 8003374:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003376:	2b03      	cmp	r3, #3
 8003378:	f040 8190 	bne.w	800369c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	799b      	ldrb	r3, [r3, #6]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d115      	bne.n	80033b0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	333d      	adds	r3, #61	@ 0x3d
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	f083 0301 	eor.w	r3, r3, #1
 800339c:	b2d8      	uxtb	r0, r3
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	333d      	adds	r3, #61	@ 0x3d
 80033ac:	4602      	mov	r2, r0
 80033ae:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	799b      	ldrb	r3, [r3, #6]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	f040 8171 	bne.w	800369c <HCD_HC_OUT_IRQHandler+0x954>
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	3334      	adds	r3, #52	@ 0x34
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8165 	beq.w	800369c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3334      	adds	r3, #52	@ 0x34
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4403      	add	r3, r0
 80033f2:	3328      	adds	r3, #40	@ 0x28
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	440b      	add	r3, r1
 80033f8:	1e59      	subs	r1, r3, #1
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4403      	add	r3, r0
 8003408:	3328      	adds	r3, #40	@ 0x28
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003410:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 813f 	beq.w	800369c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	333d      	adds	r3, #61	@ 0x3d
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	f083 0301 	eor.w	r3, r3, #1
 8003436:	b2d8      	uxtb	r0, r3
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	333d      	adds	r3, #61	@ 0x3d
 8003446:	4602      	mov	r2, r0
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e127      	b.n	800369c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334d      	adds	r3, #77	@ 0x4d
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b03      	cmp	r3, #3
 8003460:	d120      	bne.n	80034a4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	334d      	adds	r3, #77	@ 0x4d
 8003472:	2202      	movs	r2, #2
 8003474:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	331b      	adds	r3, #27
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	f040 8107 	bne.w	800369c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	334c      	adds	r3, #76	@ 0x4c
 800349e:	2202      	movs	r2, #2
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e0fb      	b.n	800369c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334d      	adds	r3, #77	@ 0x4d
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d13a      	bne.n	8003530 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	334d      	adds	r3, #77	@ 0x4d
 80034ca:	2202      	movs	r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	334c      	adds	r3, #76	@ 0x4c
 80034de:	2202      	movs	r2, #2
 80034e0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	331b      	adds	r3, #27
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	f040 80d1 	bne.w	800369c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	331b      	adds	r3, #27
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	0151      	lsls	r1, r2, #5
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	440a      	add	r2, r1
 8003524:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352c:	6053      	str	r3, [r2, #4]
 800352e:	e0b5      	b.n	800369c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	334d      	adds	r3, #77	@ 0x4d
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b05      	cmp	r3, #5
 8003544:	d114      	bne.n	8003570 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	334d      	adds	r3, #77	@ 0x4d
 8003556:	2202      	movs	r2, #2
 8003558:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	334c      	adds	r3, #76	@ 0x4c
 800356a:	2202      	movs	r2, #2
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e095      	b.n	800369c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334d      	adds	r3, #77	@ 0x4d
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b06      	cmp	r3, #6
 8003584:	d114      	bne.n	80035b0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	334d      	adds	r3, #77	@ 0x4d
 8003596:	2202      	movs	r2, #2
 8003598:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	334c      	adds	r3, #76	@ 0x4c
 80035aa:	2205      	movs	r2, #5
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e075      	b.n	800369c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	334d      	adds	r3, #77	@ 0x4d
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b07      	cmp	r3, #7
 80035c4:	d00a      	beq.n	80035dc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	334d      	adds	r3, #77	@ 0x4d
 80035d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035d8:	2b09      	cmp	r3, #9
 80035da:	d170      	bne.n	80036be <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	334d      	adds	r3, #77	@ 0x4d
 80035ec:	2202      	movs	r2, #2
 80035ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3344      	adds	r3, #68	@ 0x44
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1c59      	adds	r1, r3, #1
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4403      	add	r3, r0
 8003610:	3344      	adds	r3, #68	@ 0x44
 8003612:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3344      	adds	r3, #68	@ 0x44
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d914      	bls.n	8003654 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3344      	adds	r3, #68	@ 0x44
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	334c      	adds	r3, #76	@ 0x4c
 800364e:	2204      	movs	r2, #4
 8003650:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003652:	e022      	b.n	800369a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	334c      	adds	r3, #76	@ 0x4c
 8003664:	2202      	movs	r2, #2
 8003666:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800367e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003686:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003694:	461a      	mov	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800369a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	334c      	adds	r3, #76	@ 0x4c
 80036ac:	781a      	ldrb	r2, [r3, #0]
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f008 fcb0 	bl	800c018 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036b8:	e002      	b.n	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80036be:	bf00      	nop
  }
}
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b08a      	sub	sp, #40	@ 0x28
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	0c5b      	lsrs	r3, r3, #17
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d004      	beq.n	800370c <HCD_RXQLVL_IRQHandler+0x46>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b05      	cmp	r3, #5
 8003706:	f000 80b6 	beq.w	8003876 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800370a:	e0b7      	b.n	800387c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80b3 	beq.w	800387a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	332c      	adds	r3, #44	@ 0x2c
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80a7 	beq.w	800387a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3338      	adds	r3, #56	@ 0x38
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	18d1      	adds	r1, r2, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4613      	mov	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4403      	add	r3, r0
 8003750:	3334      	adds	r3, #52	@ 0x34
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4299      	cmp	r1, r3
 8003756:	f200 8083 	bhi.w	8003860 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	332c      	adds	r3, #44	@ 0x2c
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	b292      	uxth	r2, r2
 8003774:	4619      	mov	r1, r3
 8003776:	f002 f951 	bl	8005a1c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	332c      	adds	r3, #44	@ 0x2c
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	18d1      	adds	r1, r2, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4403      	add	r3, r0
 800379e:	332c      	adds	r3, #44	@ 0x2c
 80037a0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3338      	adds	r3, #56	@ 0x38
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	18d1      	adds	r1, r2, r3
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4403      	add	r3, r0
 80037c6:	3338      	adds	r3, #56	@ 0x38
 80037c8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	0cdb      	lsrs	r3, r3, #19
 80037da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037de:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3328      	adds	r3, #40	@ 0x28
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d13f      	bne.n	800387a <HCD_RXQLVL_IRQHandler+0x1b4>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d03c      	beq.n	800387a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003816:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800381e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382c:	461a      	mov	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	333c      	adds	r3, #60	@ 0x3c
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	f083 0301 	eor.w	r3, r3, #1
 8003848:	b2d8      	uxtb	r0, r3
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	333c      	adds	r3, #60	@ 0x3c
 800385a:	4602      	mov	r2, r0
 800385c:	701a      	strb	r2, [r3, #0]
      break;
 800385e:	e00c      	b.n	800387a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	334c      	adds	r3, #76	@ 0x4c
 8003870:	2204      	movs	r2, #4
 8003872:	701a      	strb	r2, [r3, #0]
      break;
 8003874:	e001      	b.n	800387a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800387a:	bf00      	nop
  }
}
 800387c:	bf00      	nop
 800387e:	3728      	adds	r7, #40	@ 0x28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80038b0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d10b      	bne.n	80038d4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d102      	bne.n	80038cc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f008 fb8a 	bl	800bfe0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f043 0302 	orr.w	r3, r3, #2
 80038d2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d132      	bne.n	8003944 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f043 0308 	orr.w	r3, r3, #8
 80038e4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d126      	bne.n	800393e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	7a5b      	ldrb	r3, [r3, #9]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d113      	bne.n	8003920 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80038fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003902:	d106      	bne.n	8003912 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2102      	movs	r1, #2
 800390a:	4618      	mov	r0, r3
 800390c:	f002 fa00 	bl	8005d10 <USB_InitFSLSPClkSel>
 8003910:	e011      	b.n	8003936 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2101      	movs	r1, #1
 8003918:	4618      	mov	r0, r3
 800391a:	f002 f9f9 	bl	8005d10 <USB_InitFSLSPClkSel>
 800391e:	e00a      	b.n	8003936 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	79db      	ldrb	r3, [r3, #7]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800392e:	461a      	mov	r2, r3
 8003930:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003934:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f008 fb80 	bl	800c03c <HAL_HCD_PortEnabled_Callback>
 800393c:	e002      	b.n	8003944 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f008 fb8a 	bl	800c058 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b20      	cmp	r3, #32
 800394c:	d103      	bne.n	8003956 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f043 0320 	orr.w	r3, r3, #32
 8003954:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6013      	str	r3, [r2, #0]
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e12b      	b.n	8003bd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd f93a 	bl	8000c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	@ 0x24
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039d0:	f001 fa20 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 80039d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a81      	ldr	r2, [pc, #516]	@ (8003be0 <HAL_I2C_Init+0x274>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d807      	bhi.n	80039f0 <HAL_I2C_Init+0x84>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a80      	ldr	r2, [pc, #512]	@ (8003be4 <HAL_I2C_Init+0x278>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	bf94      	ite	ls
 80039e8:	2301      	movls	r3, #1
 80039ea:	2300      	movhi	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e006      	b.n	80039fe <HAL_I2C_Init+0x92>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a7d      	ldr	r2, [pc, #500]	@ (8003be8 <HAL_I2C_Init+0x27c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	bf94      	ite	ls
 80039f8:	2301      	movls	r3, #1
 80039fa:	2300      	movhi	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0e7      	b.n	8003bd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a78      	ldr	r2, [pc, #480]	@ (8003bec <HAL_I2C_Init+0x280>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	0c9b      	lsrs	r3, r3, #18
 8003a10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a6a      	ldr	r2, [pc, #424]	@ (8003be0 <HAL_I2C_Init+0x274>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d802      	bhi.n	8003a40 <HAL_I2C_Init+0xd4>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	e009      	b.n	8003a54 <HAL_I2C_Init+0xe8>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	4a69      	ldr	r2, [pc, #420]	@ (8003bf0 <HAL_I2C_Init+0x284>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	3301      	adds	r3, #1
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	495c      	ldr	r1, [pc, #368]	@ (8003be0 <HAL_I2C_Init+0x274>)
 8003a70:	428b      	cmp	r3, r1
 8003a72:	d819      	bhi.n	8003aa8 <HAL_I2C_Init+0x13c>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e59      	subs	r1, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a82:	1c59      	adds	r1, r3, #1
 8003a84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a88:	400b      	ands	r3, r1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_I2C_Init+0x138>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1e59      	subs	r1, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa2:	e051      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	e04f      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d111      	bne.n	8003ad4 <HAL_I2C_Init+0x168>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1e58      	subs	r0, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	440b      	add	r3, r1
 8003abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e012      	b.n	8003afa <HAL_I2C_Init+0x18e>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1e58      	subs	r0, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	0099      	lsls	r1, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Init+0x196>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e022      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10e      	bne.n	8003b28 <HAL_I2C_Init+0x1bc>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1e58      	subs	r0, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	440b      	add	r3, r1
 8003b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b26:	e00f      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e58      	subs	r0, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	0099      	lsls	r1, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	6809      	ldr	r1, [r1, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6911      	ldr	r1, [r2, #16]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68d2      	ldr	r2, [r2, #12]
 8003b82:	4311      	orrs	r1, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	000186a0 	.word	0x000186a0
 8003be4:	001e847f 	.word	0x001e847f
 8003be8:	003d08ff 	.word	0x003d08ff
 8003bec:	431bde83 	.word	0x431bde83
 8003bf0:	10624dd3 	.word	0x10624dd3

08003bf4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e128      	b.n	8003e58 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a90      	ldr	r2, [pc, #576]	@ (8003e60 <HAL_I2S_Init+0x26c>)
 8003c1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7fd f83b 	bl	8000c9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c3c:	f023 030f 	bic.w	r3, r3, #15
 8003c40:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2202      	movs	r2, #2
 8003c48:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d060      	beq.n	8003d14 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c5a:	2310      	movs	r3, #16
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e001      	b.n	8003c64 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c60:	2320      	movs	r3, #32
 8003c62:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d802      	bhi.n	8003c72 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c72:	2001      	movs	r0, #1
 8003c74:	f001 fa04 	bl	8005080 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c78:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c82:	d125      	bne.n	8003cd0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d010      	beq.n	8003cae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	3305      	adds	r3, #5
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	e01f      	b.n	8003cee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	3305      	adds	r3, #5
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	e00e      	b.n	8003cee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	3305      	adds	r3, #5
 8003cec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4a5c      	ldr	r2, [pc, #368]	@ (8003e64 <HAL_I2S_Init+0x270>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	08db      	lsrs	r3, r3, #3
 8003cf8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	e003      	b.n	8003d1c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d14:	2302      	movs	r3, #2
 8003d16:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d902      	bls.n	8003d28 <HAL_I2S_Init+0x134>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2bff      	cmp	r3, #255	@ 0xff
 8003d26:	d907      	bls.n	8003d38 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2c:	f043 0210 	orr.w	r2, r3, #16
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e08f      	b.n	8003e58 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	ea42 0103 	orr.w	r1, r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d56:	f023 030f 	bic.w	r3, r3, #15
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6851      	ldr	r1, [r2, #4]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6892      	ldr	r2, [r2, #8]
 8003d62:	4311      	orrs	r1, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68d2      	ldr	r2, [r2, #12]
 8003d68:	4311      	orrs	r1, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6992      	ldr	r2, [r2, #24]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d7a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d161      	bne.n	8003e48 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a38      	ldr	r2, [pc, #224]	@ (8003e68 <HAL_I2S_Init+0x274>)
 8003d88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a37      	ldr	r2, [pc, #220]	@ (8003e6c <HAL_I2S_Init+0x278>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_I2S_Init+0x1a4>
 8003d94:	4b36      	ldr	r3, [pc, #216]	@ (8003e70 <HAL_I2S_Init+0x27c>)
 8003d96:	e001      	b.n	8003d9c <HAL_I2S_Init+0x1a8>
 8003d98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	4932      	ldr	r1, [pc, #200]	@ (8003e6c <HAL_I2S_Init+0x278>)
 8003da4:	428a      	cmp	r2, r1
 8003da6:	d101      	bne.n	8003dac <HAL_I2S_Init+0x1b8>
 8003da8:	4a31      	ldr	r2, [pc, #196]	@ (8003e70 <HAL_I2S_Init+0x27c>)
 8003daa:	e001      	b.n	8003db0 <HAL_I2S_Init+0x1bc>
 8003dac:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003db0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003db4:	f023 030f 	bic.w	r3, r3, #15
 8003db8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8003e6c <HAL_I2S_Init+0x278>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_I2S_Init+0x1d4>
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e70 <HAL_I2S_Init+0x27c>)
 8003dc6:	e001      	b.n	8003dcc <HAL_I2S_Init+0x1d8>
 8003dc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dcc:	2202      	movs	r2, #2
 8003dce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a25      	ldr	r2, [pc, #148]	@ (8003e6c <HAL_I2S_Init+0x278>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_I2S_Init+0x1ea>
 8003dda:	4b25      	ldr	r3, [pc, #148]	@ (8003e70 <HAL_I2S_Init+0x27c>)
 8003ddc:	e001      	b.n	8003de2 <HAL_I2S_Init+0x1ee>
 8003dde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dee:	d003      	beq.n	8003df8 <HAL_I2S_Init+0x204>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d103      	bne.n	8003e00 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	e001      	b.n	8003e04 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	897b      	ldrh	r3, [r7, #10]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e30:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a0d      	ldr	r2, [pc, #52]	@ (8003e6c <HAL_I2S_Init+0x278>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d101      	bne.n	8003e40 <HAL_I2S_Init+0x24c>
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <HAL_I2S_Init+0x27c>)
 8003e3e:	e001      	b.n	8003e44 <HAL_I2S_Init+0x250>
 8003e40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e44:	897a      	ldrh	r2, [r7, #10]
 8003e46:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	08003f6b 	.word	0x08003f6b
 8003e64:	cccccccd 	.word	0xcccccccd
 8003e68:	08004081 	.word	0x08004081
 8003e6c:	40003800 	.word	0x40003800
 8003e70:	40003400 	.word	0x40003400

08003e74 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	881a      	ldrh	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	1c9a      	adds	r2, r3, #2
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10e      	bne.n	8003f04 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ef4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff ffb8 	bl	8003e74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	b292      	uxth	r2, r2
 8003f20:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	1c9a      	adds	r2, r3, #2
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10e      	bne.n	8003f62 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f52:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff93 	bl	8003e88 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d13a      	bne.n	8003ffc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d109      	bne.n	8003fa4 <I2S_IRQHandler+0x3a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9a:	2b40      	cmp	r3, #64	@ 0x40
 8003f9c:	d102      	bne.n	8003fa4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ffb4 	bl	8003f0c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b40      	cmp	r3, #64	@ 0x40
 8003fac:	d126      	bne.n	8003ffc <I2S_IRQHandler+0x92>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d11f      	bne.n	8003ffc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	f043 0202 	orr.w	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ff50 	bl	8003e9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b03      	cmp	r3, #3
 8004006:	d136      	bne.n	8004076 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b02      	cmp	r3, #2
 8004010:	d109      	bne.n	8004026 <I2S_IRQHandler+0xbc>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401c:	2b80      	cmp	r3, #128	@ 0x80
 800401e:	d102      	bne.n	8004026 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff45 	bl	8003eb0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b08      	cmp	r3, #8
 800402e:	d122      	bne.n	8004076 <I2S_IRQHandler+0x10c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b20      	cmp	r3, #32
 800403c:	d11b      	bne.n	8004076 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800404c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff13 	bl	8003e9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a92      	ldr	r2, [pc, #584]	@ (80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800409a:	4b92      	ldr	r3, [pc, #584]	@ (80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800409c:	e001      	b.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800409e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a8b      	ldr	r2, [pc, #556]	@ (80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d101      	bne.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80040b8:	4b8a      	ldr	r3, [pc, #552]	@ (80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ba:	e001      	b.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80040bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040cc:	d004      	beq.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f040 8099 	bne.w	800420a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d107      	bne.n	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f925 	bl	800433c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d107      	bne.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f9c8 	bl	800449c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004112:	2b40      	cmp	r3, #64	@ 0x40
 8004114:	d13a      	bne.n	800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d035      	beq.n	800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6e      	ldr	r2, [pc, #440]	@ (80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800412a:	4b6e      	ldr	r3, [pc, #440]	@ (80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800412c:	e001      	b.n	8004132 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800412e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4969      	ldr	r1, [pc, #420]	@ (80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800413a:	428b      	cmp	r3, r1
 800413c:	d101      	bne.n	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800413e:	4b69      	ldr	r3, [pc, #420]	@ (80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004140:	e001      	b.n	8004146 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004142:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004146:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800414a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800415a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417e:	f043 0202 	orr.w	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fe88 	bl	8003e9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b08      	cmp	r3, #8
 8004194:	f040 80c3 	bne.w	800431e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80bd 	beq.w	800431e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a49      	ldr	r2, [pc, #292]	@ (80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80041be:	4b49      	ldr	r3, [pc, #292]	@ (80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041c0:	e001      	b.n	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80041c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4944      	ldr	r1, [pc, #272]	@ (80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ce:	428b      	cmp	r3, r1
 80041d0:	d101      	bne.n	80041d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80041d2:	4b44      	ldr	r3, [pc, #272]	@ (80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041d4:	e001      	b.n	80041da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80041d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	f043 0204 	orr.w	r2, r3, #4
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fe4a 	bl	8003e9c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004208:	e089      	b.n	800431e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b02      	cmp	r3, #2
 8004212:	d107      	bne.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f8be 	bl	80043a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b01      	cmp	r3, #1
 800422c:	d107      	bne.n	800423e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8fd 	bl	8004438 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d12f      	bne.n	80042a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d02a      	beq.n	80042a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004260:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800426c:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800426e:	e001      	b.n	8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004270:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4919      	ldr	r1, [pc, #100]	@ (80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800427c:	428b      	cmp	r3, r1
 800427e:	d101      	bne.n	8004284 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004280:	4b18      	ldr	r3, [pc, #96]	@ (80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004282:	e001      	b.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004284:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004288:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800428c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	f043 0202 	orr.w	r2, r3, #2
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fdfa 	bl	8003e9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d136      	bne.n	8004320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d031      	beq.n	8004320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a07      	ldr	r2, [pc, #28]	@ (80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80042c6:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042c8:	e001      	b.n	80042ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80042ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4902      	ldr	r1, [pc, #8]	@ (80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042d6:	428b      	cmp	r3, r1
 80042d8:	d106      	bne.n	80042e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80042da:	4b02      	ldr	r3, [pc, #8]	@ (80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042dc:	e006      	b.n	80042ec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80042de:	bf00      	nop
 80042e0:	40003800 	.word	0x40003800
 80042e4:	40003400 	.word	0x40003400
 80042e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042f0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004300:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	f043 0204 	orr.w	r2, r3, #4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fdc0 	bl	8003e9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800431c:	e000      	b.n	8004320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800431e:	bf00      	nop
}
 8004320:	bf00      	nop
 8004322:	3720      	adds	r7, #32
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	1c99      	adds	r1, r3, #2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6251      	str	r1, [r2, #36]	@ 0x24
 800434e:	881a      	ldrh	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d113      	bne.n	8004396 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800437c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ffc9 	bl	8004328 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	1c99      	adds	r1, r3, #2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6251      	str	r1, [r2, #36]	@ 0x24
 80043b2:	8819      	ldrh	r1, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004430 <I2SEx_TxISR_I2SExt+0x90>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d101      	bne.n	80043c2 <I2SEx_TxISR_I2SExt+0x22>
 80043be:	4b1d      	ldr	r3, [pc, #116]	@ (8004434 <I2SEx_TxISR_I2SExt+0x94>)
 80043c0:	e001      	b.n	80043c6 <I2SEx_TxISR_I2SExt+0x26>
 80043c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043c6:	460a      	mov	r2, r1
 80043c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d121      	bne.n	8004426 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a12      	ldr	r2, [pc, #72]	@ (8004430 <I2SEx_TxISR_I2SExt+0x90>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d101      	bne.n	80043f0 <I2SEx_TxISR_I2SExt+0x50>
 80043ec:	4b11      	ldr	r3, [pc, #68]	@ (8004434 <I2SEx_TxISR_I2SExt+0x94>)
 80043ee:	e001      	b.n	80043f4 <I2SEx_TxISR_I2SExt+0x54>
 80043f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	490d      	ldr	r1, [pc, #52]	@ (8004430 <I2SEx_TxISR_I2SExt+0x90>)
 80043fc:	428b      	cmp	r3, r1
 80043fe:	d101      	bne.n	8004404 <I2SEx_TxISR_I2SExt+0x64>
 8004400:	4b0c      	ldr	r3, [pc, #48]	@ (8004434 <I2SEx_TxISR_I2SExt+0x94>)
 8004402:	e001      	b.n	8004408 <I2SEx_TxISR_I2SExt+0x68>
 8004404:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004408:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800440c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ff81 	bl	8004328 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40003800 	.word	0x40003800
 8004434:	40003400 	.word	0x40003400

08004438 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68d8      	ldr	r0, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444a:	1c99      	adds	r1, r3, #2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004450:	b282      	uxth	r2, r0
 8004452:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d113      	bne.n	8004494 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800447a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ff4a 	bl	8004328 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004494:	bf00      	nop
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a20      	ldr	r2, [pc, #128]	@ (800452c <I2SEx_RxISR_I2SExt+0x90>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <I2SEx_RxISR_I2SExt+0x16>
 80044ae:	4b20      	ldr	r3, [pc, #128]	@ (8004530 <I2SEx_RxISR_I2SExt+0x94>)
 80044b0:	e001      	b.n	80044b6 <I2SEx_RxISR_I2SExt+0x1a>
 80044b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044b6:	68d8      	ldr	r0, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	1c99      	adds	r1, r3, #2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80044c2:	b282      	uxth	r2, r0
 80044c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d121      	bne.n	8004522 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a12      	ldr	r2, [pc, #72]	@ (800452c <I2SEx_RxISR_I2SExt+0x90>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d101      	bne.n	80044ec <I2SEx_RxISR_I2SExt+0x50>
 80044e8:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <I2SEx_RxISR_I2SExt+0x94>)
 80044ea:	e001      	b.n	80044f0 <I2SEx_RxISR_I2SExt+0x54>
 80044ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	490d      	ldr	r1, [pc, #52]	@ (800452c <I2SEx_RxISR_I2SExt+0x90>)
 80044f8:	428b      	cmp	r3, r1
 80044fa:	d101      	bne.n	8004500 <I2SEx_RxISR_I2SExt+0x64>
 80044fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <I2SEx_RxISR_I2SExt+0x94>)
 80044fe:	e001      	b.n	8004504 <I2SEx_RxISR_I2SExt+0x68>
 8004500:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004504:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004508:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff03 	bl	8004328 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40003800 	.word	0x40003800
 8004530:	40003400 	.word	0x40003400

08004534 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e267      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d075      	beq.n	800463e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004552:	4b88      	ldr	r3, [pc, #544]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b04      	cmp	r3, #4
 800455c:	d00c      	beq.n	8004578 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800455e:	4b85      	ldr	r3, [pc, #532]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004566:	2b08      	cmp	r3, #8
 8004568:	d112      	bne.n	8004590 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456a:	4b82      	ldr	r3, [pc, #520]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004576:	d10b      	bne.n	8004590 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004578:	4b7e      	ldr	r3, [pc, #504]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d05b      	beq.n	800463c <HAL_RCC_OscConfig+0x108>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d157      	bne.n	800463c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e242      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004598:	d106      	bne.n	80045a8 <HAL_RCC_OscConfig+0x74>
 800459a:	4b76      	ldr	r3, [pc, #472]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a75      	ldr	r2, [pc, #468]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e01d      	b.n	80045e4 <HAL_RCC_OscConfig+0xb0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x98>
 80045b2:	4b70      	ldr	r3, [pc, #448]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6f      	ldr	r2, [pc, #444]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80045b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	4b6d      	ldr	r3, [pc, #436]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a6c      	ldr	r2, [pc, #432]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0xb0>
 80045cc:	4b69      	ldr	r3, [pc, #420]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a68      	ldr	r2, [pc, #416]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80045d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	4b66      	ldr	r3, [pc, #408]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a65      	ldr	r2, [pc, #404]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80045de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fc fdc0 	bl	8001170 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fc fdbc 	bl	8001170 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	@ 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e207      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	4b5b      	ldr	r3, [pc, #364]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0xc0>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fc fdac 	bl	8001170 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fc fda8 	bl	8001170 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	@ 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e1f3      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462e:	4b51      	ldr	r3, [pc, #324]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0xe8>
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d063      	beq.n	8004712 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800464a:	4b4a      	ldr	r3, [pc, #296]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004656:	4b47      	ldr	r3, [pc, #284]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800465e:	2b08      	cmp	r3, #8
 8004660:	d11c      	bne.n	800469c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004662:	4b44      	ldr	r3, [pc, #272]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d116      	bne.n	800469c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466e:	4b41      	ldr	r3, [pc, #260]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <HAL_RCC_OscConfig+0x152>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d001      	beq.n	8004686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e1c7      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004686:	4b3b      	ldr	r3, [pc, #236]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4937      	ldr	r1, [pc, #220]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469a:	e03a      	b.n	8004712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d020      	beq.n	80046e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a4:	4b34      	ldr	r3, [pc, #208]	@ (8004778 <HAL_RCC_OscConfig+0x244>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fc fd61 	bl	8001170 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b2:	f7fc fd5d 	bl	8001170 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e1a8      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0f0      	beq.n	80046b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d0:	4b28      	ldr	r3, [pc, #160]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4925      	ldr	r1, [pc, #148]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]
 80046e4:	e015      	b.n	8004712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e6:	4b24      	ldr	r3, [pc, #144]	@ (8004778 <HAL_RCC_OscConfig+0x244>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fc fd40 	bl	8001170 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f4:	f7fc fd3c 	bl	8001170 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e187      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004706:	4b1b      	ldr	r3, [pc, #108]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d036      	beq.n	800478c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d016      	beq.n	8004754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004726:	4b15      	ldr	r3, [pc, #84]	@ (800477c <HAL_RCC_OscConfig+0x248>)
 8004728:	2201      	movs	r2, #1
 800472a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472c:	f7fc fd20 	bl	8001170 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004734:	f7fc fd1c 	bl	8001170 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e167      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004746:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <HAL_RCC_OscConfig+0x240>)
 8004748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x200>
 8004752:	e01b      	b.n	800478c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004754:	4b09      	ldr	r3, [pc, #36]	@ (800477c <HAL_RCC_OscConfig+0x248>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475a:	f7fc fd09 	bl	8001170 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	e00e      	b.n	8004780 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004762:	f7fc fd05 	bl	8001170 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d907      	bls.n	8004780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e150      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
 8004774:	40023800 	.word	0x40023800
 8004778:	42470000 	.word	0x42470000
 800477c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004780:	4b88      	ldr	r3, [pc, #544]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ea      	bne.n	8004762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8097 	beq.w	80048c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479e:	4b81      	ldr	r3, [pc, #516]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10f      	bne.n	80047ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	4b7d      	ldr	r3, [pc, #500]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	4a7c      	ldr	r2, [pc, #496]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 80047b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047ba:	4b7a      	ldr	r3, [pc, #488]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c6:	2301      	movs	r3, #1
 80047c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ca:	4b77      	ldr	r3, [pc, #476]	@ (80049a8 <HAL_RCC_OscConfig+0x474>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d118      	bne.n	8004808 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d6:	4b74      	ldr	r3, [pc, #464]	@ (80049a8 <HAL_RCC_OscConfig+0x474>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a73      	ldr	r2, [pc, #460]	@ (80049a8 <HAL_RCC_OscConfig+0x474>)
 80047dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e2:	f7fc fcc5 	bl	8001170 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ea:	f7fc fcc1 	bl	8001170 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e10c      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fc:	4b6a      	ldr	r3, [pc, #424]	@ (80049a8 <HAL_RCC_OscConfig+0x474>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d106      	bne.n	800481e <HAL_RCC_OscConfig+0x2ea>
 8004810:	4b64      	ldr	r3, [pc, #400]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004814:	4a63      	ldr	r2, [pc, #396]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	6713      	str	r3, [r2, #112]	@ 0x70
 800481c:	e01c      	b.n	8004858 <HAL_RCC_OscConfig+0x324>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b05      	cmp	r3, #5
 8004824:	d10c      	bne.n	8004840 <HAL_RCC_OscConfig+0x30c>
 8004826:	4b5f      	ldr	r3, [pc, #380]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482a:	4a5e      	ldr	r2, [pc, #376]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 800482c:	f043 0304 	orr.w	r3, r3, #4
 8004830:	6713      	str	r3, [r2, #112]	@ 0x70
 8004832:	4b5c      	ldr	r3, [pc, #368]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004836:	4a5b      	ldr	r2, [pc, #364]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6713      	str	r3, [r2, #112]	@ 0x70
 800483e:	e00b      	b.n	8004858 <HAL_RCC_OscConfig+0x324>
 8004840:	4b58      	ldr	r3, [pc, #352]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004844:	4a57      	ldr	r2, [pc, #348]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	@ 0x70
 800484c:	4b55      	ldr	r3, [pc, #340]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004850:	4a54      	ldr	r2, [pc, #336]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004852:	f023 0304 	bic.w	r3, r3, #4
 8004856:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d015      	beq.n	800488c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004860:	f7fc fc86 	bl	8001170 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004866:	e00a      	b.n	800487e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004868:	f7fc fc82 	bl	8001170 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e0cb      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487e:	4b49      	ldr	r3, [pc, #292]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0ee      	beq.n	8004868 <HAL_RCC_OscConfig+0x334>
 800488a:	e014      	b.n	80048b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488c:	f7fc fc70 	bl	8001170 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004892:	e00a      	b.n	80048aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004894:	f7fc fc6c 	bl	8001170 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0b5      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048aa:	4b3e      	ldr	r3, [pc, #248]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ee      	bne.n	8004894 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d105      	bne.n	80048c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048bc:	4b39      	ldr	r3, [pc, #228]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	4a38      	ldr	r2, [pc, #224]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 80048c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80a1 	beq.w	8004a14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048d2:	4b34      	ldr	r3, [pc, #208]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d05c      	beq.n	8004998 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d141      	bne.n	800496a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e6:	4b31      	ldr	r3, [pc, #196]	@ (80049ac <HAL_RCC_OscConfig+0x478>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fc fc40 	bl	8001170 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f4:	f7fc fc3c 	bl	8001170 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e087      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004906:	4b27      	ldr	r3, [pc, #156]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69da      	ldr	r2, [r3, #28]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	019b      	lsls	r3, r3, #6
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	085b      	lsrs	r3, r3, #1
 800492a:	3b01      	subs	r3, #1
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	491b      	ldr	r1, [pc, #108]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800493c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ac <HAL_RCC_OscConfig+0x478>)
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004942:	f7fc fc15 	bl	8001170 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494a:	f7fc fc11 	bl	8001170 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e05c      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495c:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x416>
 8004968:	e054      	b.n	8004a14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496a:	4b10      	ldr	r3, [pc, #64]	@ (80049ac <HAL_RCC_OscConfig+0x478>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004970:	f7fc fbfe 	bl	8001170 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004978:	f7fc fbfa 	bl	8001170 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e045      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498a:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <HAL_RCC_OscConfig+0x470>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x444>
 8004996:	e03d      	b.n	8004a14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e038      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40007000 	.word	0x40007000
 80049ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <HAL_RCC_OscConfig+0x4ec>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d028      	beq.n	8004a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d121      	bne.n	8004a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d11a      	bne.n	8004a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049e0:	4013      	ands	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d111      	bne.n	8004a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	3b01      	subs	r3, #1
 80049fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d107      	bne.n	8004a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800

08004a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0cc      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a38:	4b68      	ldr	r3, [pc, #416]	@ (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d90c      	bls.n	8004a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a46:	4b65      	ldr	r3, [pc, #404]	@ (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4e:	4b63      	ldr	r3, [pc, #396]	@ (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e0b8      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d020      	beq.n	8004aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a78:	4b59      	ldr	r3, [pc, #356]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4a58      	ldr	r2, [pc, #352]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a90:	4b53      	ldr	r3, [pc, #332]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a52      	ldr	r2, [pc, #328]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a9c:	4b50      	ldr	r3, [pc, #320]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	494d      	ldr	r1, [pc, #308]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d044      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac2:	4b47      	ldr	r3, [pc, #284]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d119      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e07f      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e06f      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af2:	4b3b      	ldr	r3, [pc, #236]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e067      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b02:	4b37      	ldr	r3, [pc, #220]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f023 0203 	bic.w	r2, r3, #3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4934      	ldr	r1, [pc, #208]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b14:	f7fc fb2c 	bl	8001170 <HAL_GetTick>
 8004b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1c:	f7fc fb28 	bl	8001170 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e04f      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b32:	4b2b      	ldr	r3, [pc, #172]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 020c 	and.w	r2, r3, #12
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d1eb      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b44:	4b25      	ldr	r3, [pc, #148]	@ (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d20c      	bcs.n	8004b6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b22      	ldr	r3, [pc, #136]	@ (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b20      	ldr	r3, [pc, #128]	@ (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e032      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b78:	4b19      	ldr	r3, [pc, #100]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4916      	ldr	r1, [pc, #88]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b96:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	490e      	ldr	r1, [pc, #56]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004baa:	f000 f821 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	490a      	ldr	r1, [pc, #40]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c0>)
 8004bbc:	5ccb      	ldrb	r3, [r1, r3]
 8004bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc2:	4a09      	ldr	r2, [pc, #36]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004bc6:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <HAL_RCC_ClockConfig+0x1c8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc f97c 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40023c00 	.word	0x40023c00
 8004be0:	40023800 	.word	0x40023800
 8004be4:	0800c864 	.word	0x0800c864
 8004be8:	20000000 	.word	0x20000000
 8004bec:	20000004 	.word	0x20000004

08004bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf4:	b094      	sub	sp, #80	@ 0x50
 8004bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c08:	4b79      	ldr	r3, [pc, #484]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 030c 	and.w	r3, r3, #12
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d00d      	beq.n	8004c30 <HAL_RCC_GetSysClockFreq+0x40>
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	f200 80e1 	bhi.w	8004ddc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x34>
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d003      	beq.n	8004c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c22:	e0db      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c24:	4b73      	ldr	r3, [pc, #460]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c28:	e0db      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c2a:	4b73      	ldr	r3, [pc, #460]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c2e:	e0d8      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c30:	4b6f      	ldr	r3, [pc, #444]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c38:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d063      	beq.n	8004d0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c46:	4b6a      	ldr	r3, [pc, #424]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	099b      	lsrs	r3, r3, #6
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c62:	4622      	mov	r2, r4
 8004c64:	462b      	mov	r3, r5
 8004c66:	f04f 0000 	mov.w	r0, #0
 8004c6a:	f04f 0100 	mov.w	r1, #0
 8004c6e:	0159      	lsls	r1, r3, #5
 8004c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c74:	0150      	lsls	r0, r2, #5
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	1a51      	subs	r1, r2, r1
 8004c7e:	6139      	str	r1, [r7, #16]
 8004c80:	4629      	mov	r1, r5
 8004c82:	eb63 0301 	sbc.w	r3, r3, r1
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c94:	4659      	mov	r1, fp
 8004c96:	018b      	lsls	r3, r1, #6
 8004c98:	4651      	mov	r1, sl
 8004c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c9e:	4651      	mov	r1, sl
 8004ca0:	018a      	lsls	r2, r1, #6
 8004ca2:	4651      	mov	r1, sl
 8004ca4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ca8:	4659      	mov	r1, fp
 8004caa:	eb63 0901 	sbc.w	r9, r3, r1
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cc2:	4690      	mov	r8, r2
 8004cc4:	4699      	mov	r9, r3
 8004cc6:	4623      	mov	r3, r4
 8004cc8:	eb18 0303 	adds.w	r3, r8, r3
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	462b      	mov	r3, r5
 8004cd0:	eb49 0303 	adc.w	r3, r9, r3
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	024b      	lsls	r3, r1, #9
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cec:	4621      	mov	r1, r4
 8004cee:	024a      	lsls	r2, r1, #9
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d00:	f7fb fa6e 	bl	80001e0 <__aeabi_uldivmod>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4613      	mov	r3, r2
 8004d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d0c:	e058      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0e:	4b38      	ldr	r3, [pc, #224]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	099b      	lsrs	r3, r3, #6
 8004d14:	2200      	movs	r2, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	4611      	mov	r1, r2
 8004d1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d1e:	623b      	str	r3, [r7, #32]
 8004d20:	2300      	movs	r3, #0
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d28:	4642      	mov	r2, r8
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	f04f 0000 	mov.w	r0, #0
 8004d30:	f04f 0100 	mov.w	r1, #0
 8004d34:	0159      	lsls	r1, r3, #5
 8004d36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d3a:	0150      	lsls	r0, r2, #5
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4641      	mov	r1, r8
 8004d42:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d46:	4649      	mov	r1, r9
 8004d48:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d60:	ebb2 040a 	subs.w	r4, r2, sl
 8004d64:	eb63 050b 	sbc.w	r5, r3, fp
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	00eb      	lsls	r3, r5, #3
 8004d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d76:	00e2      	lsls	r2, r4, #3
 8004d78:	4614      	mov	r4, r2
 8004d7a:	461d      	mov	r5, r3
 8004d7c:	4643      	mov	r3, r8
 8004d7e:	18e3      	adds	r3, r4, r3
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	464b      	mov	r3, r9
 8004d84:	eb45 0303 	adc.w	r3, r5, r3
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d96:	4629      	mov	r1, r5
 8004d98:	028b      	lsls	r3, r1, #10
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004da0:	4621      	mov	r1, r4
 8004da2:	028a      	lsls	r2, r1, #10
 8004da4:	4610      	mov	r0, r2
 8004da6:	4619      	mov	r1, r3
 8004da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004daa:	2200      	movs	r2, #0
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	61fa      	str	r2, [r7, #28]
 8004db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db4:	f7fb fa14 	bl	80001e0 <__aeabi_uldivmod>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	0c1b      	lsrs	r3, r3, #16
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	3301      	adds	r3, #1
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004dd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dda:	e002      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3750      	adds	r7, #80	@ 0x50
 8004de8:	46bd      	mov	sp, r7
 8004dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dee:	bf00      	nop
 8004df0:	40023800 	.word	0x40023800
 8004df4:	00f42400 	.word	0x00f42400
 8004df8:	007a1200 	.word	0x007a1200

08004dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e00:	4b03      	ldr	r3, [pc, #12]	@ (8004e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000000 	.word	0x20000000

08004e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e18:	f7ff fff0 	bl	8004dfc <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	0a9b      	lsrs	r3, r3, #10
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4903      	ldr	r1, [pc, #12]	@ (8004e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40023800 	.word	0x40023800
 8004e38:	0800c874 	.word	0x0800c874

08004e3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	220f      	movs	r2, #15
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e4c:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0203 	and.w	r2, r3, #3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e58:	4b0f      	ldr	r3, [pc, #60]	@ (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e64:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e70:	4b09      	ldr	r3, [pc, #36]	@ (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	08db      	lsrs	r3, r3, #3
 8004e76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e7e:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <HAL_RCC_GetClockConfig+0x60>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0207 	and.w	r2, r3, #7
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40023c00 	.word	0x40023c00

08004ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d038      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ec8:	4b68      	ldr	r3, [pc, #416]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ece:	f7fc f94f 	bl	8001170 <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ed6:	f7fc f94b 	bl	8001170 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e0bd      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee8:	4b61      	ldr	r3, [pc, #388]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f0      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	019b      	lsls	r3, r3, #6
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	071b      	lsls	r3, r3, #28
 8004f06:	495a      	ldr	r1, [pc, #360]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f0e:	4b57      	ldr	r3, [pc, #348]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f14:	f7fc f92c 	bl	8001170 <HAL_GetTick>
 8004f18:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f1c:	f7fc f928 	bl	8001170 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e09a      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f2e:	4b50      	ldr	r3, [pc, #320]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 8083 	beq.w	800504e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	4b48      	ldr	r3, [pc, #288]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	4a47      	ldr	r2, [pc, #284]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f58:	4b45      	ldr	r3, [pc, #276]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f64:	4b43      	ldr	r3, [pc, #268]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a42      	ldr	r2, [pc, #264]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f6e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f70:	f7fc f8fe 	bl	8001170 <HAL_GetTick>
 8004f74:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f78:	f7fc f8fa 	bl	8001170 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e06c      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f0      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f96:	4b36      	ldr	r3, [pc, #216]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f9e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d02f      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d028      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fbc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fca:	4a29      	ldr	r2, [pc, #164]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fd0:	4b27      	ldr	r3, [pc, #156]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d114      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fc f8c8 	bl	8001170 <HAL_GetTick>
 8004fe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe2:	e00a      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe4:	f7fc f8c4 	bl	8001170 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e034      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0ee      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005012:	d10d      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005014:	4b16      	ldr	r3, [pc, #88]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005028:	4911      	ldr	r1, [pc, #68]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
 800502e:	e005      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005030:	4b0f      	ldr	r3, [pc, #60]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4a0e      	ldr	r2, [pc, #56]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005036:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800503a:	6093      	str	r3, [r2, #8]
 800503c:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005048:	4909      	ldr	r1, [pc, #36]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504a:	4313      	orrs	r3, r2
 800504c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7d1a      	ldrb	r2, [r3, #20]
 800505e:	4b07      	ldr	r3, [pc, #28]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005060:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	42470068 	.word	0x42470068
 8005070:	40023800 	.word	0x40023800
 8005074:	40007000 	.word	0x40007000
 8005078:	42470e40 	.word	0x42470e40
 800507c:	424711e0 	.word	0x424711e0

08005080 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d141      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800509e:	4b25      	ldr	r3, [pc, #148]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d006      	beq.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050b4:	d131      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050b6:	4b20      	ldr	r3, [pc, #128]	@ (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80050b8:	617b      	str	r3, [r7, #20]
          break;
 80050ba:	e031      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050c8:	d109      	bne.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80050ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050d4:	4a19      	ldr	r2, [pc, #100]	@ (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80050d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	e008      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80050de:	4b15      	ldr	r3, [pc, #84]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050e8:	4a15      	ldr	r2, [pc, #84]	@ (8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050f0:	4b10      	ldr	r3, [pc, #64]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050f6:	099b      	lsrs	r3, r3, #6
 80050f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005104:	4b0b      	ldr	r3, [pc, #44]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800510a:	0f1b      	lsrs	r3, r3, #28
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	617b      	str	r3, [r7, #20]
          break;
 8005118:	e002      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
          break;
 800511e:	bf00      	nop
        }
      }
      break;
 8005120:	e000      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8005122:	bf00      	nop
    }
  }
  return frequency;
 8005124:	697b      	ldr	r3, [r7, #20]
}
 8005126:	4618      	mov	r0, r3
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40023800 	.word	0x40023800
 8005138:	00bb8000 	.word	0x00bb8000
 800513c:	007a1200 	.word	0x007a1200
 8005140:	00f42400 	.word	0x00f42400

08005144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e07b      	b.n	800524e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d108      	bne.n	8005170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005166:	d009      	beq.n	800517c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	61da      	str	r2, [r3, #28]
 800516e:	e005      	b.n	800517c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fb fe4e 	bl	8000e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005200:	ea42 0103 	orr.w	r1, r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005208:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	0c1b      	lsrs	r3, r3, #16
 800521a:	f003 0104 	and.w	r1, r3, #4
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005222:	f003 0210 	and.w	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800523c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e041      	b.n	80052ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d106      	bne.n	8005282 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f839 	bl	80052f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3304      	adds	r3, #4
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f000 f9b1 	bl	80055fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d001      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e044      	b.n	80053aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1e      	ldr	r2, [pc, #120]	@ (80053b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d018      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x6c>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800534a:	d013      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x6c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1a      	ldr	r2, [pc, #104]	@ (80053bc <HAL_TIM_Base_Start_IT+0xb4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00e      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x6c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a19      	ldr	r2, [pc, #100]	@ (80053c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d009      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x6c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a17      	ldr	r2, [pc, #92]	@ (80053c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x6c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a16      	ldr	r2, [pc, #88]	@ (80053c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d111      	bne.n	8005398 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b06      	cmp	r3, #6
 8005384:	d010      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0201 	orr.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005396:	e007      	b.n	80053a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800
 80053c4:	40000c00 	.word	0x40000c00
 80053c8:	40014000 	.word	0x40014000

080053cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d020      	beq.n	8005430 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01b      	beq.n	8005430 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0202 	mvn.w	r2, #2
 8005400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8d2 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8c4 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f8d5 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	d020      	beq.n	800547c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01b      	beq.n	800547c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0204 	mvn.w	r2, #4
 800544c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f8ac 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 8005468:	e005      	b.n	8005476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f89e 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8af 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d020      	beq.n	80054c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01b      	beq.n	80054c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0208 	mvn.w	r2, #8
 8005498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2204      	movs	r2, #4
 800549e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f886 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f878 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f889 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d020      	beq.n	8005514 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0210 	mvn.w	r2, #16
 80054e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2208      	movs	r2, #8
 80054ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f860 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f852 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f863 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0201 	mvn.w	r2, #1
 8005530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fb fb26 	bl	8000b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00c      	beq.n	800555c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8e6 	bl	8005728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00c      	beq.n	8005580 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f834 	bl	80055e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0220 	mvn.w	r2, #32
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f8b8 	bl	8005714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a3a      	ldr	r2, [pc, #232]	@ (80056f8 <TIM_Base_SetConfig+0xfc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00f      	beq.n	8005634 <TIM_Base_SetConfig+0x38>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561a:	d00b      	beq.n	8005634 <TIM_Base_SetConfig+0x38>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a37      	ldr	r2, [pc, #220]	@ (80056fc <TIM_Base_SetConfig+0x100>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d007      	beq.n	8005634 <TIM_Base_SetConfig+0x38>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a36      	ldr	r2, [pc, #216]	@ (8005700 <TIM_Base_SetConfig+0x104>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_Base_SetConfig+0x38>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a35      	ldr	r2, [pc, #212]	@ (8005704 <TIM_Base_SetConfig+0x108>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d108      	bne.n	8005646 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2b      	ldr	r2, [pc, #172]	@ (80056f8 <TIM_Base_SetConfig+0xfc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01b      	beq.n	8005686 <TIM_Base_SetConfig+0x8a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005654:	d017      	beq.n	8005686 <TIM_Base_SetConfig+0x8a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a28      	ldr	r2, [pc, #160]	@ (80056fc <TIM_Base_SetConfig+0x100>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <TIM_Base_SetConfig+0x8a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a27      	ldr	r2, [pc, #156]	@ (8005700 <TIM_Base_SetConfig+0x104>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00f      	beq.n	8005686 <TIM_Base_SetConfig+0x8a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a26      	ldr	r2, [pc, #152]	@ (8005704 <TIM_Base_SetConfig+0x108>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00b      	beq.n	8005686 <TIM_Base_SetConfig+0x8a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a25      	ldr	r2, [pc, #148]	@ (8005708 <TIM_Base_SetConfig+0x10c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d007      	beq.n	8005686 <TIM_Base_SetConfig+0x8a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a24      	ldr	r2, [pc, #144]	@ (800570c <TIM_Base_SetConfig+0x110>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d003      	beq.n	8005686 <TIM_Base_SetConfig+0x8a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a23      	ldr	r2, [pc, #140]	@ (8005710 <TIM_Base_SetConfig+0x114>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d108      	bne.n	8005698 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800568c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a0e      	ldr	r2, [pc, #56]	@ (80056f8 <TIM_Base_SetConfig+0xfc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d103      	bne.n	80056cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d105      	bne.n	80056ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f023 0201 	bic.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	611a      	str	r2, [r3, #16]
  }
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40014000 	.word	0x40014000
 800570c:	40014400 	.word	0x40014400
 8005710:	40014800 	.word	0x40014800

08005714 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800573c:	b084      	sub	sp, #16
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	f107 001c 	add.w	r0, r7, #28
 800574a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800574e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005752:	2b01      	cmp	r3, #1
 8005754:	d123      	bne.n	800579e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800576a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800577e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005782:	2b01      	cmp	r3, #1
 8005784:	d105      	bne.n	8005792 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9dc 	bl	8005b50 <USB_CoreReset>
 8005798:	4603      	mov	r3, r0
 800579a:	73fb      	strb	r3, [r7, #15]
 800579c:	e01b      	b.n	80057d6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f9d0 	bl	8005b50 <USB_CoreReset>
 80057b0:	4603      	mov	r3, r0
 80057b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80057c8:	e005      	b.n	80057d6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057d6:	7fbb      	ldrb	r3, [r7, #30]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d10b      	bne.n	80057f4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f043 0206 	orr.w	r2, r3, #6
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005800:	b004      	add	sp, #16
 8005802:	4770      	bx	lr

08005804 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f043 0201 	orr.w	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d115      	bne.n	8005896 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005876:	200a      	movs	r0, #10
 8005878:	f7fb fc86 	bl	8001188 <HAL_Delay>
      ms += 10U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	330a      	adds	r3, #10
 8005880:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f956 	bl	8005b34 <USB_GetMode>
 8005888:	4603      	mov	r3, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	d01e      	beq.n	80058cc <USB_SetCurrentMode+0x84>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2bc7      	cmp	r3, #199	@ 0xc7
 8005892:	d9f0      	bls.n	8005876 <USB_SetCurrentMode+0x2e>
 8005894:	e01a      	b.n	80058cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d115      	bne.n	80058c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058a8:	200a      	movs	r0, #10
 80058aa:	f7fb fc6d 	bl	8001188 <HAL_Delay>
      ms += 10U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	330a      	adds	r3, #10
 80058b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f93d 	bl	8005b34 <USB_GetMode>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <USB_SetCurrentMode+0x84>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80058c4:	d9f0      	bls.n	80058a8 <USB_SetCurrentMode+0x60>
 80058c6:	e001      	b.n	80058cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e005      	b.n	80058d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80058d0:	d101      	bne.n	80058d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058fa:	d901      	bls.n	8005900 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e01b      	b.n	8005938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	daf2      	bge.n	80058ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	019b      	lsls	r3, r3, #6
 8005910:	f043 0220 	orr.w	r2, r3, #32
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005924:	d901      	bls.n	800592a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e006      	b.n	8005938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b20      	cmp	r3, #32
 8005934:	d0f0      	beq.n	8005918 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800595c:	d901      	bls.n	8005962 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e018      	b.n	8005994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	daf2      	bge.n	8005950 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2210      	movs	r2, #16
 8005972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3301      	adds	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005980:	d901      	bls.n	8005986 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e006      	b.n	8005994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b10      	cmp	r3, #16
 8005990:	d0f0      	beq.n	8005974 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b089      	sub	sp, #36	@ 0x24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4611      	mov	r1, r2
 80059ac:	461a      	mov	r2, r3
 80059ae:	460b      	mov	r3, r1
 80059b0:	71fb      	strb	r3, [r7, #7]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d123      	bne.n	8005a0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059c6:	88bb      	ldrh	r3, [r7, #4]
 80059c8:	3303      	adds	r3, #3
 80059ca:	089b      	lsrs	r3, r3, #2
 80059cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059ce:	2300      	movs	r3, #0
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	e018      	b.n	8005a06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	031a      	lsls	r2, r3, #12
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059e0:	461a      	mov	r2, r3
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3301      	adds	r3, #1
 80059ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	3301      	adds	r3, #1
 80059f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	3301      	adds	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	3301      	adds	r3, #1
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d3e2      	bcc.n	80059d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3724      	adds	r7, #36	@ 0x24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b08b      	sub	sp, #44	@ 0x2c
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	089b      	lsrs	r3, r3, #2
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a42:	2300      	movs	r3, #0
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	e014      	b.n	8005a72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	3301      	adds	r3, #1
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	3301      	adds	r3, #1
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	3301      	adds	r3, #1
 8005a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	623b      	str	r3, [r7, #32]
 8005a72:	6a3a      	ldr	r2, [r7, #32]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d3e6      	bcc.n	8005a48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a7a:	8bfb      	ldrh	r3, [r7, #30]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01e      	beq.n	8005abe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f107 0310 	add.w	r3, r7, #16
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	701a      	strb	r2, [r3, #0]
      i++;
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	3301      	adds	r3, #1
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005ab2:	8bfb      	ldrh	r3, [r7, #30]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ab8:	8bfb      	ldrh	r3, [r7, #30]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1ea      	bne.n	8005a94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	372c      	adds	r7, #44	@ 0x2c
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	4013      	ands	r3, r2
 8005b24:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b26:	68bb      	ldr	r3, [r7, #8]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	f003 0301 	and.w	r3, r3, #1
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b68:	d901      	bls.n	8005b6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e01b      	b.n	8005ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	daf2      	bge.n	8005b5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f043 0201 	orr.w	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b92:	d901      	bls.n	8005b98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e006      	b.n	8005ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d0f0      	beq.n	8005b86 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
	...

08005bb4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b086      	sub	sp, #24
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bde:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d119      	bne.n	8005c3e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d10a      	bne.n	8005c28 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c20:	f043 0304 	orr.w	r3, r3, #4
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	e014      	b.n	8005c52 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c36:	f023 0304 	bic.w	r3, r3, #4
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	e009      	b.n	8005c52 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c4c:	f023 0304 	bic.w	r3, r3, #4
 8005c50:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c52:	2110      	movs	r1, #16
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff fe43 	bl	80058e0 <USB_FlushTxFifo>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fe6d 	bl	8005944 <USB_FlushRxFifo>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	e015      	b.n	8005ca6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c86:	461a      	mov	r2, r3
 8005c88:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005caa:	461a      	mov	r2, r3
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d3e3      	bcc.n	8005c7a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbe:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2280      	movs	r2, #128	@ 0x80
 8005cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8005d04 <USB_HostInit+0x150>)
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a0e      	ldr	r2, [pc, #56]	@ (8005d08 <USB_HostInit+0x154>)
 8005cd0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d105      	bne.n	8005ce8 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f043 0210 	orr.w	r2, r3, #16
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	4b07      	ldr	r3, [pc, #28]	@ (8005d0c <USB_HostInit+0x158>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d00:	b004      	add	sp, #16
 8005d02:	4770      	bx	lr
 8005d04:	00600080 	.word	0x00600080
 8005d08:	004000e0 	.word	0x004000e0
 8005d0c:	a3200008 	.word	0xa3200008

08005d10 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	68f9      	ldr	r1, [r7, #12]
 8005d44:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d107      	bne.n	8005d62 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005d5e:	6053      	str	r3, [r2, #4]
 8005d60:	e00c      	b.n	8005d7c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d107      	bne.n	8005d78 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005d74:	6053      	str	r3, [r2, #4]
 8005d76:	e001      	b.n	8005d7c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005daa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005db8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005dba:	2064      	movs	r0, #100	@ 0x64
 8005dbc:	f7fb f9e4 	bl	8001188 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dcc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005dce:	200a      	movs	r0, #10
 8005dd0:	f7fb f9da 	bl	8001188 <HAL_Delay>

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005e02:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <USB_DriveVbus+0x44>
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d106      	bne.n	8005e22 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e20:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2c:	d109      	bne.n	8005e42 <USB_DriveVbus+0x64>
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e40:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	0c5b      	lsrs	r3, r3, #17
 8005e6e:	f003 0303 	and.w	r3, r3, #3
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	b29b      	uxth	r3, r3
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	461a      	mov	r2, r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	70fb      	strb	r3, [r7, #3]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	70bb      	strb	r3, [r7, #2]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ed6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d867      	bhi.n	8005fae <USB_HC_Init+0x10e>
 8005ede:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee4 <USB_HC_Init+0x44>)
 8005ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee4:	08005ef5 	.word	0x08005ef5
 8005ee8:	08005f71 	.word	0x08005f71
 8005eec:	08005ef5 	.word	0x08005ef5
 8005ef0:	08005f33 	.word	0x08005f33
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f00:	461a      	mov	r2, r3
 8005f02:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005f06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	da51      	bge.n	8005fb4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	78fa      	ldrb	r2, [r7, #3]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f2e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005f30:	e040      	b.n	8005fb4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005f44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	da34      	bge.n	8005fb8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f4e:	78fb      	ldrb	r3, [r7, #3]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	78fa      	ldrb	r2, [r7, #3]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f6c:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f6e:	e023      	b.n	8005fb8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f240 2325 	movw	r3, #549	@ 0x225
 8005f82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da17      	bge.n	8005fbc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	78fa      	ldrb	r2, [r7, #3]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fa6:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005faa:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005fac:	e006      	b.n	8005fbc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	77fb      	strb	r3, [r7, #31]
      break;
 8005fb2:	e004      	b.n	8005fbe <USB_HC_Init+0x11e>
      break;
 8005fb4:	bf00      	nop
 8005fb6:	e002      	b.n	8005fbe <USB_HC_Init+0x11e>
      break;
 8005fb8:	bf00      	nop
 8005fba:	e000      	b.n	8005fbe <USB_HC_Init+0x11e>
      break;
 8005fbc:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005fbe:	78fb      	ldrb	r3, [r7, #3]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fea:	f043 0302 	orr.w	r3, r3, #2
 8005fee:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	2101      	movs	r1, #1
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	6939      	ldr	r1, [r7, #16]
 8006006:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800600a:	4313      	orrs	r3, r2
 800600c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800601a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800601e:	2b00      	cmp	r3, #0
 8006020:	da03      	bge.n	800602a <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	e001      	b.n	800602e <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff ff0e 	bl	8005e50 <USB_GetHostSpeed>
 8006034:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006036:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800603a:	2b02      	cmp	r3, #2
 800603c:	d106      	bne.n	800604c <USB_HC_Init+0x1ac>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d003      	beq.n	800604c <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006044:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	e001      	b.n	8006050 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006050:	787b      	ldrb	r3, [r7, #1]
 8006052:	059b      	lsls	r3, r3, #22
 8006054:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006058:	78bb      	ldrb	r3, [r7, #2]
 800605a:	02db      	lsls	r3, r3, #11
 800605c:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006060:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006062:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006066:	049b      	lsls	r3, r3, #18
 8006068:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800606c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800606e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006070:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006074:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	431a      	orrs	r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800607e:	78fa      	ldrb	r2, [r7, #3]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	440a      	add	r2, r1
 8006086:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800608a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800608e:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006090:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006094:	2b03      	cmp	r3, #3
 8006096:	d003      	beq.n	80060a0 <USB_HC_Init+0x200>
 8006098:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d10f      	bne.n	80060c0 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	78fa      	ldrb	r2, [r7, #3]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060be:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80060c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop

080060cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08c      	sub	sp, #48	@ 0x30
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80060e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060e8:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	799b      	ldrb	r3, [r3, #6]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d158      	bne.n	80061a4 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80060f2:	2301      	movs	r3, #1
 80060f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	78db      	ldrb	r3, [r3, #3]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	8a92      	ldrh	r2, [r2, #20]
 8006104:	fb03 f202 	mul.w	r2, r3, r2
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	61da      	str	r2, [r3, #28]
 800610c:	e079      	b.n	8006202 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	7c9b      	ldrb	r3, [r3, #18]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d130      	bne.n	8006178 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	2bbc      	cmp	r3, #188	@ 0xbc
 800611c:	d918      	bls.n	8006150 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	8a9b      	ldrh	r3, [r3, #20]
 8006122:	461a      	mov	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d003      	beq.n	8006140 <USB_HC_StartXfer+0x74>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d103      	bne.n	8006148 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2202      	movs	r2, #2
 8006144:	60da      	str	r2, [r3, #12]
 8006146:	e05c      	b.n	8006202 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2201      	movs	r2, #1
 800614c:	60da      	str	r2, [r3, #12]
 800614e:	e058      	b.n	8006202 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d007      	beq.n	8006170 <USB_HC_StartXfer+0xa4>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d003      	beq.n	8006170 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2204      	movs	r2, #4
 800616c:	60da      	str	r2, [r3, #12]
 800616e:	e048      	b.n	8006202 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2203      	movs	r2, #3
 8006174:	60da      	str	r2, [r3, #12]
 8006176:	e044      	b.n	8006202 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d10d      	bne.n	800619a <USB_HC_StartXfer+0xce>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	8a92      	ldrh	r2, [r2, #20]
 8006186:	4293      	cmp	r3, r2
 8006188:	d907      	bls.n	800619a <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800618a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	8a92      	ldrh	r2, [r2, #20]
 8006190:	fb03 f202 	mul.w	r2, r3, r2
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	61da      	str	r2, [r3, #28]
 8006198:	e033      	b.n	8006202 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6a1a      	ldr	r2, [r3, #32]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	61da      	str	r2, [r3, #28]
 80061a2:	e02e      	b.n	8006202 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d018      	beq.n	80061de <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	8a92      	ldrh	r2, [r2, #20]
 80061b4:	4413      	add	r3, r2
 80061b6:	3b01      	subs	r3, #1
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	8a92      	ldrh	r2, [r2, #20]
 80061bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80061c2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80061c4:	8b7b      	ldrh	r3, [r7, #26]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d90b      	bls.n	80061e2 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 80061ca:	8b7b      	ldrh	r3, [r7, #26]
 80061cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	8a92      	ldrh	r2, [r2, #20]
 80061d4:	fb03 f202 	mul.w	r2, r3, r2
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	61da      	str	r2, [r3, #28]
 80061dc:	e001      	b.n	80061e2 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 80061de:	2301      	movs	r3, #1
 80061e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	8a92      	ldrh	r2, [r2, #20]
 80061f0:	fb03 f202 	mul.w	r2, r3, r2
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	61da      	str	r2, [r3, #28]
 80061f8:	e003      	b.n	8006202 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800620a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800620c:	04d9      	lsls	r1, r3, #19
 800620e:	4ba4      	ldr	r3, [pc, #656]	@ (80064a0 <USB_HC_StartXfer+0x3d4>)
 8006210:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006212:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	7d9b      	ldrb	r3, [r3, #22]
 8006218:	075b      	lsls	r3, r3, #29
 800621a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800621e:	69f9      	ldr	r1, [r7, #28]
 8006220:	0148      	lsls	r0, r1, #5
 8006222:	6a39      	ldr	r1, [r7, #32]
 8006224:	4401      	add	r1, r0
 8006226:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800622a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800622c:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d009      	beq.n	8006248 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6999      	ldr	r1, [r3, #24]
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	4413      	add	r3, r2
 8006240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006244:	460a      	mov	r2, r1
 8006246:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	bf0c      	ite	eq
 8006258:	2301      	moveq	r3, #1
 800625a:	2300      	movne	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	4413      	add	r3, r2
 8006268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	440a      	add	r2, r1
 8006276:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800627a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800627e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	7e7b      	ldrb	r3, [r7, #25]
 8006290:	075b      	lsls	r3, r3, #29
 8006292:	69f9      	ldr	r1, [r7, #28]
 8006294:	0148      	lsls	r0, r1, #5
 8006296:	6a39      	ldr	r1, [r7, #32]
 8006298:	4401      	add	r1, r0
 800629a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800629e:	4313      	orrs	r3, r2
 80062a0:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	799b      	ldrb	r3, [r3, #6]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	f040 80c4 	bne.w	8006434 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	7c5b      	ldrb	r3, [r3, #17]
 80062b0:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062b6:	4313      	orrs	r3, r2
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	6a3a      	ldr	r2, [r7, #32]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80062c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062c8:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	6a3a      	ldr	r2, [r7, #32]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062e4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80062e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	79db      	ldrb	r3, [r3, #7]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d123      	bne.n	800633a <USB_HC_StartXfer+0x26e>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	78db      	ldrb	r3, [r3, #3]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d11f      	bne.n	800633a <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	6a3a      	ldr	r2, [r7, #32]
 800630e:	440a      	add	r2, r1
 8006310:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006318:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	4413      	add	r3, r2
 8006322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	6a3a      	ldr	r2, [r7, #32]
 800632e:	440a      	add	r2, r1
 8006330:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006338:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	7c9b      	ldrb	r3, [r3, #18]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d003      	beq.n	800634a <USB_HC_StartXfer+0x27e>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	7c9b      	ldrb	r3, [r3, #18]
 8006346:	2b03      	cmp	r3, #3
 8006348:	d117      	bne.n	800637a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800634e:	2b01      	cmp	r3, #1
 8006350:	d113      	bne.n	800637a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	78db      	ldrb	r3, [r3, #3]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d10f      	bne.n	800637a <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	4413      	add	r3, r2
 8006362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	6a3a      	ldr	r2, [r7, #32]
 800636e:	440a      	add	r2, r1
 8006370:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006378:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	7c9b      	ldrb	r3, [r3, #18]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d163      	bne.n	800644a <USB_HC_StartXfer+0x37e>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	78db      	ldrb	r3, [r3, #3]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d15f      	bne.n	800644a <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	3b01      	subs	r3, #1
 8006390:	2b03      	cmp	r3, #3
 8006392:	d859      	bhi.n	8006448 <USB_HC_StartXfer+0x37c>
 8006394:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <USB_HC_StartXfer+0x2d0>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063cf 	.word	0x080063cf
 80063a4:	080063f1 	.word	0x080063f1
 80063a8:	08006413 	.word	0x08006413
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	6a3a      	ldr	r2, [r7, #32]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ca:	6053      	str	r3, [r2, #4]
          break;
 80063cc:	e03d      	b.n	800644a <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	6a3a      	ldr	r2, [r7, #32]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063e8:	f043 030e 	orr.w	r3, r3, #14
 80063ec:	6053      	str	r3, [r2, #4]
          break;
 80063ee:	e02c      	b.n	800644a <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	440a      	add	r2, r1
 8006406:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800640a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800640e:	6053      	str	r3, [r2, #4]
          break;
 8006410:	e01b      	b.n	800644a <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	6a3a      	ldr	r2, [r7, #32]
 8006426:	440a      	add	r2, r1
 8006428:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800642c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006430:	6053      	str	r3, [r2, #4]
          break;
 8006432:	e00a      	b.n	800644a <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	4413      	add	r3, r2
 800643c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006440:	461a      	mov	r2, r3
 8006442:	2300      	movs	r3, #0
 8006444:	6053      	str	r3, [r2, #4]
 8006446:	e000      	b.n	800644a <USB_HC_StartXfer+0x37e>
          break;
 8006448:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	4413      	add	r3, r2
 8006452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006460:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	78db      	ldrb	r3, [r3, #3]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	e003      	b.n	800647c <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800647a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006482:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	4413      	add	r3, r2
 800648c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006490:	461a      	mov	r2, r3
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e055      	b.n	800654c <USB_HC_StartXfer+0x480>
 80064a0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	78db      	ldrb	r3, [r3, #3]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d14e      	bne.n	800654a <USB_HC_StartXfer+0x47e>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d04a      	beq.n	800654a <USB_HC_StartXfer+0x47e>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	79db      	ldrb	r3, [r3, #7]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d146      	bne.n	800654a <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	7c9b      	ldrb	r3, [r3, #18]
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d831      	bhi.n	8006528 <USB_HC_StartXfer+0x45c>
 80064c4:	a201      	add	r2, pc, #4	@ (adr r2, 80064cc <USB_HC_StartXfer+0x400>)
 80064c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	08006501 	.word	0x08006501
 80064d4:	080064dd 	.word	0x080064dd
 80064d8:	08006501 	.word	0x08006501
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	3303      	adds	r3, #3
 80064e2:	089b      	lsrs	r3, r3, #2
 80064e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80064e6:	8afa      	ldrh	r2, [r7, #22]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d91c      	bls.n	800652c <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80064fe:	e015      	b.n	800652c <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	3303      	adds	r3, #3
 8006506:	089b      	lsrs	r3, r3, #2
 8006508:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800650a:	8afa      	ldrh	r2, [r7, #22]
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	b29b      	uxth	r3, r3
 8006516:	429a      	cmp	r2, r3
 8006518:	d90a      	bls.n	8006530 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	619a      	str	r2, [r3, #24]
        }
        break;
 8006526:	e003      	b.n	8006530 <USB_HC_StartXfer+0x464>

      default:
        break;
 8006528:	bf00      	nop
 800652a:	e002      	b.n	8006532 <USB_HC_StartXfer+0x466>
        break;
 800652c:	bf00      	nop
 800652e:	e000      	b.n	8006532 <USB_HC_StartXfer+0x466>
        break;
 8006530:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6999      	ldr	r1, [r3, #24]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	785a      	ldrb	r2, [r3, #1]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	b29b      	uxth	r3, r3
 8006540:	2000      	movs	r0, #0
 8006542:	9000      	str	r0, [sp, #0]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7ff fa2b 	bl	80059a0 <USB_WritePacket>
  }

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3728      	adds	r7, #40	@ 0x28
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	b29b      	uxth	r3, r3
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006576:	b480      	push	{r7}
 8006578:	b089      	sub	sp, #36	@ 0x24
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	460b      	mov	r3, r1
 8006580:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	0c9b      	lsrs	r3, r3, #18
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	0fdb      	lsrs	r3, r3, #31
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	0fdb      	lsrs	r3, r3, #31
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d10d      	bne.n	80065f8 <USB_HC_Halt+0x82>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <USB_HC_Halt+0x82>
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d005      	beq.n	80065f4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d002      	beq.n	80065f4 <USB_HC_Halt+0x7e>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d101      	bne.n	80065f8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e0d8      	b.n	80067aa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <USB_HC_Halt+0x8e>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d173      	bne.n	80066ec <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	440a      	add	r2, r1
 800661a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800661e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006622:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d14a      	bne.n	80066c6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d133      	bne.n	80066a4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	440a      	add	r2, r1
 8006652:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006656:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800665a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	4413      	add	r3, r2
 8006664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	440a      	add	r2, r1
 8006672:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006676:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800667a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	3301      	adds	r3, #1
 8006680:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006688:	d82e      	bhi.n	80066e8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800669c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066a0:	d0ec      	beq.n	800667c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066a2:	e081      	b.n	80067a8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066c2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066c4:	e070      	b.n	80067a8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066e6:	e05f      	b.n	80067a8 <USB_HC_Halt+0x232>
            break;
 80066e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066ea:	e05d      	b.n	80067a8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	440a      	add	r2, r1
 8006702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006706:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800670a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d133      	bne.n	8006784 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	4413      	add	r3, r2
 8006724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	0151      	lsls	r1, r2, #5
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	440a      	add	r2, r1
 8006732:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006736:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800673a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	4413      	add	r3, r2
 8006744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	0151      	lsls	r1, r2, #5
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	440a      	add	r2, r1
 8006752:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006756:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800675a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	3301      	adds	r3, #1
 8006760:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006768:	d81d      	bhi.n	80067a6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800677c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006780:	d0ec      	beq.n	800675c <USB_HC_Halt+0x1e6>
 8006782:	e011      	b.n	80067a8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	0151      	lsls	r1, r2, #5
 8006796:	69fa      	ldr	r2, [r7, #28]
 8006798:	440a      	add	r2, r1
 800679a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800679e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	e000      	b.n	80067a8 <USB_HC_Halt+0x232>
          break;
 80067a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3724      	adds	r7, #36	@ 0x24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b088      	sub	sp, #32
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff f82b 	bl	8005826 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067d0:	2110      	movs	r1, #16
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff f884 	bl	80058e0 <USB_FlushTxFifo>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff f8ae 	bl	8005944 <USB_FlushRxFifo>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80067f2:	2300      	movs	r3, #0
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	e01f      	b.n	8006838 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800680e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006816:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800681e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	4413      	add	r3, r2
 8006828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800682c:	461a      	mov	r2, r3
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	3301      	adds	r3, #1
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b0f      	cmp	r3, #15
 800683c:	d9dc      	bls.n	80067f8 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	e034      	b.n	80068ae <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	4413      	add	r3, r2
 800684c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800685a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006862:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800686a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	4413      	add	r3, r2
 8006874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006878:	461a      	mov	r2, r3
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3301      	adds	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800688a:	d80c      	bhi.n	80068a6 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800689e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068a2:	d0ec      	beq.n	800687e <USB_StopHost+0xc8>
 80068a4:	e000      	b.n	80068a8 <USB_StopHost+0xf2>
        break;
 80068a6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	3301      	adds	r3, #1
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b0f      	cmp	r3, #15
 80068b2:	d9c7      	bls.n	8006844 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068ba:	461a      	mov	r2, r3
 80068bc:	f04f 33ff 	mov.w	r3, #4294967295
 80068c0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f04f 32ff 	mov.w	r2, #4294967295
 80068c8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fe ff9a 	bl	8005804 <USB_EnableGlobalInt>

  return ret;
 80068d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3720      	adds	r7, #32
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80068da:	b590      	push	{r4, r7, lr}
 80068dc:	b089      	sub	sp, #36	@ 0x24
 80068de:	af04      	add	r7, sp, #16
 80068e0:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80068e2:	2301      	movs	r3, #1
 80068e4:	2202      	movs	r2, #2
 80068e6:	2102      	movs	r1, #2
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fcd2 	bl	8007292 <USBH_FindInterface>
 80068ee:	4603      	mov	r3, r0
 80068f0:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	2bff      	cmp	r3, #255	@ 0xff
 80068f6:	d002      	beq.n	80068fe <USBH_CDC_InterfaceInit+0x24>
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d901      	bls.n	8006902 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068fe:	2302      	movs	r3, #2
 8006900:	e13d      	b.n	8006b7e <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fca7 	bl	800725a <USBH_SelectInterface>
 800690c:	4603      	mov	r3, r0
 800690e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006916:	2302      	movs	r3, #2
 8006918:	e131      	b.n	8006b7e <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006920:	2050      	movs	r0, #80	@ 0x50
 8006922:	f005 fd9d 	bl	800c460 <malloc>
 8006926:	4603      	mov	r3, r0
 8006928:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800693a:	2302      	movs	r3, #2
 800693c:	e11f      	b.n	8006b7e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800693e:	2250      	movs	r2, #80	@ 0x50
 8006940:	2100      	movs	r1, #0
 8006942:	68b8      	ldr	r0, [r7, #8]
 8006944:	f005 fe4a 	bl	800c5dc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	211a      	movs	r1, #26
 800694e:	fb01 f303 	mul.w	r3, r1, r3
 8006952:	4413      	add	r3, r2
 8006954:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	b25b      	sxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	da15      	bge.n	800698c <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	211a      	movs	r1, #26
 8006966:	fb01 f303 	mul.w	r3, r1, r3
 800696a:	4413      	add	r3, r2
 800696c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006970:	781a      	ldrb	r2, [r3, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	211a      	movs	r1, #26
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	4413      	add	r3, r2
 8006982:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006986:	881a      	ldrh	r2, [r3, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f002 fa19 	bl	8008dca <USBH_AllocPipe>
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	7819      	ldrb	r1, [r3, #0]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	7858      	ldrb	r0, [r3, #1]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	8952      	ldrh	r2, [r2, #10]
 80069b8:	9202      	str	r2, [sp, #8]
 80069ba:	2203      	movs	r2, #3
 80069bc:	9201      	str	r2, [sp, #4]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	4623      	mov	r3, r4
 80069c2:	4602      	mov	r2, r0
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f002 f9d1 	bl	8008d6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f005 fcbe 	bl	800c354 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80069d8:	2300      	movs	r3, #0
 80069da:	2200      	movs	r2, #0
 80069dc:	210a      	movs	r1, #10
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fc57 	bl	8007292 <USBH_FindInterface>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	2bff      	cmp	r3, #255	@ 0xff
 80069ec:	d002      	beq.n	80069f4 <USBH_CDC_InterfaceInit+0x11a>
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d901      	bls.n	80069f8 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069f4:	2302      	movs	r3, #2
 80069f6:	e0c2      	b.n	8006b7e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	211a      	movs	r1, #26
 80069fe:	fb01 f303 	mul.w	r3, r1, r3
 8006a02:	4413      	add	r3, r2
 8006a04:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	b25b      	sxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	da16      	bge.n	8006a3e <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	211a      	movs	r1, #26
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	211a      	movs	r1, #26
 8006a2c:	fb01 f303 	mul.w	r3, r1, r3
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a36:	881a      	ldrh	r2, [r3, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	835a      	strh	r2, [r3, #26]
 8006a3c:	e015      	b.n	8006a6a <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	211a      	movs	r1, #26
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a4e:	781a      	ldrb	r2, [r3, #0]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	211a      	movs	r1, #26
 8006a5a:	fb01 f303 	mul.w	r3, r1, r3
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a64:	881a      	ldrh	r2, [r3, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	211a      	movs	r1, #26
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	4413      	add	r3, r2
 8006a76:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b25b      	sxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	da16      	bge.n	8006ab0 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	211a      	movs	r1, #26
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a92:	781a      	ldrb	r2, [r3, #0]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	211a      	movs	r1, #26
 8006a9e:	fb01 f303 	mul.w	r3, r1, r3
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	835a      	strh	r2, [r3, #26]
 8006aae:	e015      	b.n	8006adc <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	211a      	movs	r1, #26
 8006ab6:	fb01 f303 	mul.w	r3, r1, r3
 8006aba:	4413      	add	r3, r2
 8006abc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	211a      	movs	r1, #26
 8006acc:	fb01 f303 	mul.w	r3, r1, r3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006ad6:	881a      	ldrh	r2, [r3, #0]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	7b9b      	ldrb	r3, [r3, #14]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f002 f971 	bl	8008dca <USBH_AllocPipe>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	461a      	mov	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	7bdb      	ldrb	r3, [r3, #15]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f002 f967 	bl	8008dca <USBH_AllocPipe>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	7b59      	ldrb	r1, [r3, #13]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	7b98      	ldrb	r0, [r3, #14]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	8b12      	ldrh	r2, [r2, #24]
 8006b1c:	9202      	str	r2, [sp, #8]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	9201      	str	r2, [sp, #4]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	4623      	mov	r3, r4
 8006b26:	4602      	mov	r2, r0
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f002 f91f 	bl	8008d6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	7b19      	ldrb	r1, [r3, #12]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	7bd8      	ldrb	r0, [r3, #15]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	8b52      	ldrh	r2, [r2, #26]
 8006b46:	9202      	str	r2, [sp, #8]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	9201      	str	r2, [sp, #4]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	4623      	mov	r3, r4
 8006b50:	4602      	mov	r2, r0
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f002 f90a 	bl	8008d6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	7b5b      	ldrb	r3, [r3, #13]
 8006b64:	2200      	movs	r2, #0
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f005 fbf3 	bl	800c354 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	7b1b      	ldrb	r3, [r3, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f005 fbec 	bl	800c354 <USBH_LL_SetToggle>

  return USBH_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd90      	pop	{r4, r7, pc}

08006b86 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00e      	beq.n	8006bbe <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f002 f8ff 	bl	8008daa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f002 f92a 	bl	8008e0c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	7b1b      	ldrb	r3, [r3, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00e      	beq.n	8006be4 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	7b1b      	ldrb	r3, [r3, #12]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f002 f8ec 	bl	8008daa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	7b1b      	ldrb	r3, [r3, #12]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f002 f917 	bl	8008e0c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	7b5b      	ldrb	r3, [r3, #13]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00e      	beq.n	8006c0a <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	7b5b      	ldrb	r3, [r3, #13]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f002 f8d9 	bl	8008daa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	7b5b      	ldrb	r3, [r3, #13]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 f904 	bl	8008e0c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00b      	beq.n	8006c2e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f005 fc26 	bl	800c470 <free>
    phost->pActiveClass->pData = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3340      	adds	r3, #64	@ 0x40
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f8b2 	bl	8006dba <GetLineCoding>
 8006c56:	4603      	mov	r3, r0
 8006c58:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006c5a:	7afb      	ldrb	r3, [r7, #11]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d105      	bne.n	8006c6c <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c66:	2102      	movs	r1, #2
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006c6c:	7afb      	ldrb	r3, [r7, #11]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c80:	2301      	movs	r3, #1
 8006c82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d877      	bhi.n	8006d8c <USBH_CDC_Process+0x114>
 8006c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca4 <USBH_CDC_Process+0x2c>)
 8006c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca2:	bf00      	nop
 8006ca4:	08006cb9 	.word	0x08006cb9
 8006ca8:	08006cbf 	.word	0x08006cbf
 8006cac:	08006cef 	.word	0x08006cef
 8006cb0:	08006d63 	.word	0x08006d63
 8006cb4:	08006d71 	.word	0x08006d71
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	73fb      	strb	r3, [r7, #15]
      break;
 8006cbc:	e06d      	b.n	8006d9a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f897 	bl	8006df8 <SetLineCoding>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cdc:	e058      	b.n	8006d90 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d055      	beq.n	8006d90 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006cec:	e050      	b.n	8006d90 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	3340      	adds	r3, #64	@ 0x40
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f860 	bl	8006dba <GetLineCoding>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cfe:	7bbb      	ldrb	r3, [r7, #14]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d126      	bne.n	8006d52 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d16:	791b      	ldrb	r3, [r3, #4]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d13b      	bne.n	8006d94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d26:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d133      	bne.n	8006d94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d36:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d12b      	bne.n	8006d94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d44:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d124      	bne.n	8006d94 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f982 	bl	8007054 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d50:	e020      	b.n	8006d94 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d01d      	beq.n	8006d94 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006d60:	e018      	b.n	8006d94 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f867 	bl	8006e36 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f8f6 	bl	8006f5a <CDC_ProcessReception>
      break;
 8006d6e:	e014      	b.n	8006d9a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006d70:	2100      	movs	r1, #0
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f984 	bl	8008080 <USBH_ClrFeature>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006d8a:	e005      	b.n	8006d98 <USBH_CDC_Process+0x120>

    default:
      break;
 8006d8c:	bf00      	nop
 8006d8e:	e004      	b.n	8006d9a <USBH_CDC_Process+0x122>
      break;
 8006d90:	bf00      	nop
 8006d92:	e002      	b.n	8006d9a <USBH_CDC_Process+0x122>
      break;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <USBH_CDC_Process+0x122>
      break;
 8006d98:	bf00      	nop

  }

  return status;
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	22a1      	movs	r2, #161	@ 0xa1
 8006dc8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2221      	movs	r2, #33	@ 0x21
 8006dce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2207      	movs	r2, #7
 8006de0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2207      	movs	r2, #7
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fc7e 	bl	80086ea <USBH_CtlReq>
 8006dee:	4603      	mov	r3, r0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2221      	movs	r2, #33	@ 0x21
 8006e06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2207      	movs	r2, #7
 8006e1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2207      	movs	r2, #7
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 fc5f 	bl	80086ea <USBH_CtlReq>
 8006e2c:	4603      	mov	r3, r0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af02      	add	r7, sp, #8
 8006e3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d002      	beq.n	8006e5c <CDC_ProcessTransmission+0x26>
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d023      	beq.n	8006ea2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006e5a:	e07a      	b.n	8006f52 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	8b12      	ldrh	r2, [r2, #24]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d90b      	bls.n	8006e80 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	69d9      	ldr	r1, [r3, #28]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8b1a      	ldrh	r2, [r3, #24]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	7b5b      	ldrb	r3, [r3, #13]
 8006e74:	2001      	movs	r0, #1
 8006e76:	9000      	str	r0, [sp, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 ff34 	bl	8008ce6 <USBH_BulkSendData>
 8006e7e:	e00b      	b.n	8006e98 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	7b5b      	ldrb	r3, [r3, #13]
 8006e8e:	2001      	movs	r0, #1
 8006e90:	9000      	str	r0, [sp, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 ff27 	bl	8008ce6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006ea0:	e057      	b.n	8006f52 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	7b5b      	ldrb	r3, [r3, #13]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f005 fa29 	bl	800c300 <USBH_LL_GetURBState>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006eb2:	7afb      	ldrb	r3, [r7, #11]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d136      	bne.n	8006f26 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	8b12      	ldrh	r2, [r2, #24]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d90e      	bls.n	8006ee2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	8b12      	ldrh	r2, [r2, #24]
 8006ecc:	1a9a      	subs	r2, r3, r2
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	8b12      	ldrh	r2, [r2, #24]
 8006eda:	441a      	add	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	61da      	str	r2, [r3, #28]
 8006ee0:	e002      	b.n	8006ee8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006ef8:	e006      	b.n	8006f08 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f892 	bl	800702c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f002 f964 	bl	80091ec <osMessageQueuePut>
      break;
 8006f24:	e014      	b.n	8006f50 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d111      	bne.n	8006f50 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2204      	movs	r2, #4
 8006f38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f002 f94e 	bl	80091ec <osMessageQueuePut>
      break;
 8006f50:	bf00      	nop
  }
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b086      	sub	sp, #24
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d002      	beq.n	8006f80 <CDC_ProcessReception+0x26>
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d00e      	beq.n	8006f9c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006f7e:	e051      	b.n	8007024 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	6a19      	ldr	r1, [r3, #32]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	8b5a      	ldrh	r2, [r3, #26]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	7b1b      	ldrb	r3, [r3, #12]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 fecf 	bl	8008d30 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2204      	movs	r2, #4
 8006f96:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006f9a:	e043      	b.n	8007024 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	7b1b      	ldrb	r3, [r3, #12]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f005 f9ac 	bl	800c300 <USBH_LL_GetURBState>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006fac:	7cfb      	ldrb	r3, [r7, #19]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d137      	bne.n	8007022 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	7b1b      	ldrb	r3, [r3, #12]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f005 f90f 	bl	800c1dc <USBH_LL_GetLastXferSize>
 8006fbe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d016      	beq.n	8006ff8 <CDC_ProcessReception+0x9e>
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	8b5b      	ldrh	r3, [r3, #26]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d110      	bne.n	8006ff8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	1ad2      	subs	r2, r2, r3
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	6a1a      	ldr	r2, [r3, #32]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	441a      	add	r2, r3
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8006ff6:	e006      	b.n	8007006 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f81d 	bl	8007040 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2204      	movs	r2, #4
 800700a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800701a:	2300      	movs	r3, #0
 800701c:	2200      	movs	r2, #0
 800701e:	f002 f8e5 	bl	80091ec <osMessageQueuePut>
      break;
 8007022:	bf00      	nop
  }
}
 8007024:	bf00      	nop
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800707c:	2302      	movs	r3, #2
 800707e:	e044      	b.n	800710a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	79fa      	ldrb	r2, [r7, #7]
 8007084:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f841 	bl	8007120 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80070cc:	2200      	movs	r2, #0
 80070ce:	2104      	movs	r1, #4
 80070d0:	2010      	movs	r0, #16
 80070d2:	f002 f818 	bl	8009106 <osMessageQueueNew>
 80070d6:	4602      	mov	r2, r0
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80070de:	4b0d      	ldr	r3, [pc, #52]	@ (8007114 <USBH_Init+0xac>)
 80070e0:	4a0d      	ldr	r2, [pc, #52]	@ (8007118 <USBH_Init+0xb0>)
 80070e2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80070e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007114 <USBH_Init+0xac>)
 80070e6:	2280      	movs	r2, #128	@ 0x80
 80070e8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80070ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007114 <USBH_Init+0xac>)
 80070ec:	2218      	movs	r2, #24
 80070ee:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80070f0:	4a08      	ldr	r2, [pc, #32]	@ (8007114 <USBH_Init+0xac>)
 80070f2:	68f9      	ldr	r1, [r7, #12]
 80070f4:	4809      	ldr	r0, [pc, #36]	@ (800711c <USBH_Init+0xb4>)
 80070f6:	f001 ff59 	bl	8008fac <osThreadNew>
 80070fa:	4602      	mov	r2, r0
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f004 ffb6 	bl	800c074 <USBH_LL_Init>

  return USBH_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000244 	.word	0x20000244
 8007118:	0800c81c 	.word	0x0800c81c
 800711c:	08007dd1 	.word	0x08007dd1

08007120 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	e009      	b.n	8007146 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	33e0      	adds	r3, #224	@ 0xe0
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	2200      	movs	r2, #0
 800713e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3301      	adds	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b0f      	cmp	r3, #15
 800714a:	d9f2      	bls.n	8007132 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e009      	b.n	8007166 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800716c:	d3f1      	bcc.n	8007152 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2240      	movs	r2, #64	@ 0x40
 8007192:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	331c      	adds	r3, #28
 80071be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f005 fa09 	bl	800c5dc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80071d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071d4:	2100      	movs	r1, #0
 80071d6:	4618      	mov	r0, r3
 80071d8:	f005 fa00 	bl	800c5dc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80071e2:	2212      	movs	r2, #18
 80071e4:	2100      	movs	r1, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f005 f9f8 	bl	800c5dc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80071f2:	223e      	movs	r2, #62	@ 0x3e
 80071f4:	2100      	movs	r1, #0
 80071f6:	4618      	mov	r0, r3
 80071f8:	f005 f9f0 	bl	800c5dc <memset>

  return USBH_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007206:	b480      	push	{r7}
 8007208:	b085      	sub	sp, #20
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d016      	beq.n	8007248 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10e      	bne.n	8007242 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800722a:	1c59      	adds	r1, r3, #1
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	33de      	adds	r3, #222	@ 0xde
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	73fb      	strb	r3, [r7, #15]
 8007240:	e004      	b.n	800724c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007242:	2302      	movs	r3, #2
 8007244:	73fb      	strb	r3, [r7, #15]
 8007246:	e001      	b.n	800724c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007248:	2302      	movs	r3, #2
 800724a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800725a:	b480      	push	{r7}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007270:	78fa      	ldrb	r2, [r7, #3]
 8007272:	429a      	cmp	r2, r3
 8007274:	d204      	bcs.n	8007280 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	78fa      	ldrb	r2, [r7, #3]
 800727a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800727e:	e001      	b.n	8007284 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007280:	2302      	movs	r3, #2
 8007282:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007292:	b480      	push	{r7}
 8007294:	b087      	sub	sp, #28
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	4608      	mov	r0, r1
 800729c:	4611      	mov	r1, r2
 800729e:	461a      	mov	r2, r3
 80072a0:	4603      	mov	r3, r0
 80072a2:	70fb      	strb	r3, [r7, #3]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70bb      	strb	r3, [r7, #2]
 80072a8:	4613      	mov	r3, r2
 80072aa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80072ba:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072bc:	e025      	b.n	800730a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	221a      	movs	r2, #26
 80072c2:	fb02 f303 	mul.w	r3, r2, r3
 80072c6:	3308      	adds	r3, #8
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	3302      	adds	r3, #2
 80072ce:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	795b      	ldrb	r3, [r3, #5]
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d002      	beq.n	80072e0 <USBH_FindInterface+0x4e>
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	2bff      	cmp	r3, #255	@ 0xff
 80072de:	d111      	bne.n	8007304 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072e4:	78ba      	ldrb	r2, [r7, #2]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d002      	beq.n	80072f0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072ea:	78bb      	ldrb	r3, [r7, #2]
 80072ec:	2bff      	cmp	r3, #255	@ 0xff
 80072ee:	d109      	bne.n	8007304 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072f4:	787a      	ldrb	r2, [r7, #1]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d002      	beq.n	8007300 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072fa:	787b      	ldrb	r3, [r7, #1]
 80072fc:	2bff      	cmp	r3, #255	@ 0xff
 80072fe:	d101      	bne.n	8007304 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	e006      	b.n	8007312 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	3301      	adds	r3, #1
 8007308:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d9d6      	bls.n	80072be <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007310:	23ff      	movs	r3, #255	@ 0xff
}
 8007312:	4618      	mov	r0, r3
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f004 fee0 	bl	800c0ec <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800732c:	2101      	movs	r1, #1
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f004 fff9 	bl	800c326 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af04      	add	r7, sp, #16
 8007346:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007348:	2302      	movs	r3, #2
 800734a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b01      	cmp	r3, #1
 800735a:	d102      	bne.n	8007362 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2203      	movs	r2, #3
 8007360:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b0b      	cmp	r3, #11
 800736a:	f200 8244 	bhi.w	80077f6 <USBH_Process+0x4b6>
 800736e:	a201      	add	r2, pc, #4	@ (adr r2, 8007374 <USBH_Process+0x34>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	080073a5 	.word	0x080073a5
 8007378:	080073f3 	.word	0x080073f3
 800737c:	08007477 	.word	0x08007477
 8007380:	08007775 	.word	0x08007775
 8007384:	080077f7 	.word	0x080077f7
 8007388:	08007533 	.word	0x08007533
 800738c:	080076ff 	.word	0x080076ff
 8007390:	08007585 	.word	0x08007585
 8007394:	080075c1 	.word	0x080075c1
 8007398:	080075f9 	.word	0x080075f9
 800739c:	08007657 	.word	0x08007657
 80073a0:	0800775d 	.word	0x0800775d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8224 	beq.w	80077fa <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80073b8:	20c8      	movs	r0, #200	@ 0xc8
 80073ba:	f004 fffe 	bl	800c3ba <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f004 fef1 	bl	800c1a6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80073e8:	2300      	movs	r3, #0
 80073ea:	2200      	movs	r2, #0
 80073ec:	f001 fefe 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      }
      break;
 80073f0:	e203      	b.n	80077fa <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d107      	bne.n	800740c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	e025      	b.n	8007458 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007412:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007416:	d914      	bls.n	8007442 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800741e:	3301      	adds	r3, #1
 8007420:	b2da      	uxtb	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800742e:	2b03      	cmp	r3, #3
 8007430:	d903      	bls.n	800743a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	220d      	movs	r2, #13
 8007436:	701a      	strb	r2, [r3, #0]
 8007438:	e00e      	b.n	8007458 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	e00a      	b.n	8007458 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007448:	f103 020a 	add.w	r2, r3, #10
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007452:	200a      	movs	r0, #10
 8007454:	f004 ffb1 	bl	800c3ba <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800746c:	2300      	movs	r3, #0
 800746e:	2200      	movs	r2, #0
 8007470:	f001 febc 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      break;
 8007474:	e1c8      	b.n	8007808 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007486:	2104      	movs	r1, #4
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800748c:	2064      	movs	r0, #100	@ 0x64
 800748e:	f004 ff94 	bl	800c3ba <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f004 fe60 	bl	800c158 <USBH_LL_GetSpeed>
 8007498:	4603      	mov	r3, r0
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2205      	movs	r2, #5
 80074a6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80074a8:	2100      	movs	r1, #0
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 fc8d 	bl	8008dca <USBH_AllocPipe>
 80074b0:	4603      	mov	r3, r0
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80074b8:	2180      	movs	r1, #128	@ 0x80
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 fc85 	bl	8008dca <USBH_AllocPipe>
 80074c0:	4603      	mov	r3, r0
 80074c2:	461a      	mov	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	7919      	ldrb	r1, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80074dc:	9202      	str	r2, [sp, #8]
 80074de:	2200      	movs	r2, #0
 80074e0:	9201      	str	r2, [sp, #4]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	4603      	mov	r3, r0
 80074e6:	2280      	movs	r2, #128	@ 0x80
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 fc3f 	bl	8008d6c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	7959      	ldrb	r1, [r3, #5]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007502:	9202      	str	r2, [sp, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	9201      	str	r2, [sp, #4]
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	4603      	mov	r3, r0
 800750c:	2200      	movs	r2, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fc2c 	bl	8008d6c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007528:	2300      	movs	r3, #0
 800752a:	2200      	movs	r2, #0
 800752c:	f001 fe5e 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      break;
 8007530:	e16a      	b.n	8007808 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f96e 	bl	8007814 <USBH_HandleEnum>
 8007538:	4603      	mov	r3, r0
 800753a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 815c 	bne.w	80077fe <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007554:	2b01      	cmp	r3, #1
 8007556:	d103      	bne.n	8007560 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2208      	movs	r2, #8
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	e002      	b.n	8007566 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2207      	movs	r2, #7
 8007564:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2205      	movs	r2, #5
 800756a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800757a:	2300      	movs	r3, #0
 800757c:	2200      	movs	r2, #0
 800757e:	f001 fe35 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007582:	e13c      	b.n	80077fe <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 8139 	beq.w	8007802 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007596:	2101      	movs	r1, #1
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2208      	movs	r2, #8
 80075a0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2205      	movs	r2, #5
 80075a6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80075b6:	2300      	movs	r3, #0
 80075b8:	2200      	movs	r2, #0
 80075ba:	f001 fe17 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80075be:	e120      	b.n	8007802 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fd12 	bl	8007ff2 <USBH_SetCfg>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2209      	movs	r2, #9
 80075d8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80075ee:	2300      	movs	r3, #0
 80075f0:	2200      	movs	r2, #0
 80075f2:	f001 fdfb 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      break;
 80075f6:	e107      	b.n	8007808 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	d015      	beq.n	8007632 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007606:	2101      	movs	r1, #1
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fd15 	bl	8008038 <USBH_SetFeature>
 800760e:	4603      	mov	r3, r0
 8007610:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d103      	bne.n	8007622 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	220a      	movs	r2, #10
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	e00a      	b.n	8007638 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b03      	cmp	r3, #3
 8007628:	d106      	bne.n	8007638 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	220a      	movs	r2, #10
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	e002      	b.n	8007638 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	220a      	movs	r2, #10
 8007636:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800764c:	2300      	movs	r3, #0
 800764e:	2200      	movs	r2, #0
 8007650:	f001 fdcc 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      break;
 8007654:	e0d8      	b.n	8007808 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800765c:	2b00      	cmp	r3, #0
 800765e:	d03f      	beq.n	80076e0 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
 800766c:	e016      	b.n	800769c <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800766e:	7bfa      	ldrb	r2, [r7, #15]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	32de      	adds	r2, #222	@ 0xde
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	791a      	ldrb	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007680:	429a      	cmp	r2, r3
 8007682:	d108      	bne.n	8007696 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007684:	7bfa      	ldrb	r2, [r7, #15]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	32de      	adds	r2, #222	@ 0xde
 800768a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007694:	e005      	b.n	80076a2 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	3301      	adds	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0e5      	beq.n	800766e <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d016      	beq.n	80076da <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2206      	movs	r2, #6
 80076c2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076ca:	2103      	movs	r1, #3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	4798      	blx	r3
 80076d0:	e006      	b.n	80076e0 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	220d      	movs	r2, #13
 80076d6:	701a      	strb	r2, [r3, #0]
 80076d8:	e002      	b.n	80076e0 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	220d      	movs	r2, #13
 80076de:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2205      	movs	r2, #5
 80076e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80076f4:	2300      	movs	r3, #0
 80076f6:	2200      	movs	r2, #0
 80076f8:	f001 fd78 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      break;
 80076fc:	e084      	b.n	8007808 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d017      	beq.n	8007738 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
 8007714:	4603      	mov	r3, r0
 8007716:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	220b      	movs	r2, #11
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	e00a      	b.n	800773e <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d106      	bne.n	800773e <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	220d      	movs	r2, #13
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	e002      	b.n	800773e <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	220d      	movs	r2, #13
 800773c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2205      	movs	r2, #5
 8007742:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007752:	2300      	movs	r3, #0
 8007754:	2200      	movs	r2, #0
 8007756:	f001 fd49 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      break;
 800775a:	e055      	b.n	8007808 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d04f      	beq.n	8007806 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
      }
      break;
 8007772:	e048      	b.n	8007806 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff fccf 	bl	8007120 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d009      	beq.n	80077a0 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80077b0:	2105      	movs	r1, #5
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d107      	bne.n	80077d2 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff fda7 	bl	800731e <USBH_Start>
 80077d0:	e002      	b.n	80077d8 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f004 fc8a 	bl	800c0ec <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077ec:	2300      	movs	r3, #0
 80077ee:	2200      	movs	r2, #0
 80077f0:	f001 fcfc 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      break;
 80077f4:	e008      	b.n	8007808 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80077f6:	bf00      	nop
 80077f8:	e006      	b.n	8007808 <USBH_Process+0x4c8>
      break;
 80077fa:	bf00      	nop
 80077fc:	e004      	b.n	8007808 <USBH_Process+0x4c8>
      break;
 80077fe:	bf00      	nop
 8007800:	e002      	b.n	8007808 <USBH_Process+0x4c8>
    break;
 8007802:	bf00      	nop
 8007804:	e000      	b.n	8007808 <USBH_Process+0x4c8>
      break;
 8007806:	bf00      	nop
  }
  return USBH_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop

08007814 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af04      	add	r7, sp, #16
 800781a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007820:	2301      	movs	r3, #1
 8007822:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b07      	cmp	r3, #7
 800782a:	f200 8204 	bhi.w	8007c36 <USBH_HandleEnum+0x422>
 800782e:	a201      	add	r2, pc, #4	@ (adr r2, 8007834 <USBH_HandleEnum+0x20>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007855 	.word	0x08007855
 8007838:	0800790f 	.word	0x0800790f
 800783c:	08007979 	.word	0x08007979
 8007840:	08007a03 	.word	0x08007a03
 8007844:	08007a6d 	.word	0x08007a6d
 8007848:	08007add 	.word	0x08007add
 800784c:	08007b79 	.word	0x08007b79
 8007850:	08007bf7 	.word	0x08007bf7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007854:	2108      	movs	r1, #8
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fae8 	bl	8007e2c <USBH_Get_DevDesc>
 800785c:	4603      	mov	r3, r0
 800785e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d12e      	bne.n	80078c4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7919      	ldrb	r1, [r3, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800788a:	9202      	str	r2, [sp, #8]
 800788c:	2200      	movs	r2, #0
 800788e:	9201      	str	r2, [sp, #4]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	4603      	mov	r3, r0
 8007894:	2280      	movs	r2, #128	@ 0x80
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 fa68 	bl	8008d6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7959      	ldrb	r1, [r3, #5]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078b0:	9202      	str	r2, [sp, #8]
 80078b2:	2200      	movs	r2, #0
 80078b4:	9201      	str	r2, [sp, #4]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4603      	mov	r3, r0
 80078ba:	2200      	movs	r2, #0
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fa55 	bl	8008d6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078c2:	e1ba      	b.n	8007c3a <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	f040 81b7 	bne.w	8007c3a <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078d2:	3301      	adds	r3, #1
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d903      	bls.n	80078ee <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	220d      	movs	r2, #13
 80078ea:	701a      	strb	r2, [r3, #0]
      break;
 80078ec:	e1a5      	b.n	8007c3a <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	795b      	ldrb	r3, [r3, #5]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 fa89 	bl	8008e0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	791b      	ldrb	r3, [r3, #4]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fa83 	bl	8008e0c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
      break;
 800790c:	e195      	b.n	8007c3a <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800790e:	2112      	movs	r1, #18
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fa8b 	bl	8007e2c <USBH_Get_DevDesc>
 8007916:	4603      	mov	r3, r0
 8007918:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d103      	bne.n	8007928 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007926:	e18a      	b.n	8007c3e <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b03      	cmp	r3, #3
 800792c:	f040 8187 	bne.w	8007c3e <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007936:	3301      	adds	r3, #1
 8007938:	b2da      	uxtb	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007946:	2b03      	cmp	r3, #3
 8007948:	d903      	bls.n	8007952 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	220d      	movs	r2, #13
 800794e:	701a      	strb	r2, [r3, #0]
      break;
 8007950:	e175      	b.n	8007c3e <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	795b      	ldrb	r3, [r3, #5]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f001 fa57 	bl	8008e0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	791b      	ldrb	r3, [r3, #4]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 fa51 	bl	8008e0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
      break;
 8007976:	e162      	b.n	8007c3e <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007978:	2101      	movs	r1, #1
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fb15 	bl	8007faa <USBH_SetAddress>
 8007980:	4603      	mov	r3, r0
 8007982:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d130      	bne.n	80079ec <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800798a:	2002      	movs	r0, #2
 800798c:	f004 fd15 	bl	800c3ba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2203      	movs	r2, #3
 800799c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7919      	ldrb	r1, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80079b2:	9202      	str	r2, [sp, #8]
 80079b4:	2200      	movs	r2, #0
 80079b6:	9201      	str	r2, [sp, #4]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	4603      	mov	r3, r0
 80079bc:	2280      	movs	r2, #128	@ 0x80
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 f9d4 	bl	8008d6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7959      	ldrb	r1, [r3, #5]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079d8:	9202      	str	r2, [sp, #8]
 80079da:	2200      	movs	r2, #0
 80079dc:	9201      	str	r2, [sp, #4]
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	4603      	mov	r3, r0
 80079e2:	2200      	movs	r2, #0
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f9c1 	bl	8008d6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079ea:	e12a      	b.n	8007c42 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	f040 8127 	bne.w	8007c42 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	220d      	movs	r2, #13
 80079f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	705a      	strb	r2, [r3, #1]
      break;
 8007a00:	e11f      	b.n	8007c42 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a02:	2109      	movs	r1, #9
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fa3d 	bl	8007e84 <USBH_Get_CfgDesc>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2204      	movs	r2, #4
 8007a18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a1a:	e114      	b.n	8007c46 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	f040 8111 	bne.w	8007c46 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d903      	bls.n	8007a46 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	220d      	movs	r2, #13
 8007a42:	701a      	strb	r2, [r3, #0]
      break;
 8007a44:	e0ff      	b.n	8007c46 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	795b      	ldrb	r3, [r3, #5]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 f9dd 	bl	8008e0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	791b      	ldrb	r3, [r3, #4]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f9d7 	bl	8008e0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
      break;
 8007a6a:	e0ec      	b.n	8007c46 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fa05 	bl	8007e84 <USBH_Get_CfgDesc>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d103      	bne.n	8007a8c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2205      	movs	r2, #5
 8007a88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a8a:	e0de      	b.n	8007c4a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	f040 80db 	bne.w	8007c4a <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d903      	bls.n	8007ab6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	220d      	movs	r2, #13
 8007ab2:	701a      	strb	r2, [r3, #0]
      break;
 8007ab4:	e0c9      	b.n	8007c4a <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	795b      	ldrb	r3, [r3, #5]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f9a5 	bl	8008e0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	791b      	ldrb	r3, [r3, #4]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 f99f 	bl	8008e0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]
      break;
 8007ada:	e0b6      	b.n	8007c4a <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d036      	beq.n	8007b54 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007af2:	23ff      	movs	r3, #255	@ 0xff
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f9ef 	bl	8007ed8 <USBH_Get_StringDesc>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d111      	bne.n	8007b28 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2206      	movs	r2, #6
 8007b08:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2205      	movs	r2, #5
 8007b0e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2200      	movs	r2, #0
 8007b22:	f001 fb63 	bl	80091ec <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b26:	e092      	b.n	8007c4e <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	f040 808f 	bne.w	8007c4e <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2206      	movs	r2, #6
 8007b34:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2205      	movs	r2, #5
 8007b3a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f001 fb4d 	bl	80091ec <osMessageQueuePut>
      break;
 8007b52:	e07c      	b.n	8007c4e <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2206      	movs	r2, #6
 8007b58:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2205      	movs	r2, #5
 8007b5e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2200      	movs	r2, #0
 8007b72:	f001 fb3b 	bl	80091ec <osMessageQueuePut>
      break;
 8007b76:	e06a      	b.n	8007c4e <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d027      	beq.n	8007bd2 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b8e:	23ff      	movs	r3, #255	@ 0xff
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f9a1 	bl	8007ed8 <USBH_Get_StringDesc>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d103      	bne.n	8007ba8 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2207      	movs	r2, #7
 8007ba4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ba6:	e054      	b.n	8007c52 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d151      	bne.n	8007c52 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2207      	movs	r2, #7
 8007bb2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2205      	movs	r2, #5
 8007bb8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f001 fb0e 	bl	80091ec <osMessageQueuePut>
      break;
 8007bd0:	e03f      	b.n	8007c52 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2207      	movs	r2, #7
 8007bd6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2205      	movs	r2, #5
 8007bdc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007bec:	2300      	movs	r3, #0
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f001 fafc 	bl	80091ec <osMessageQueuePut>
      break;
 8007bf4:	e02d      	b.n	8007c52 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d017      	beq.n	8007c30 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c0c:	23ff      	movs	r3, #255	@ 0xff
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f962 	bl	8007ed8 <USBH_Get_StringDesc>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d102      	bne.n	8007c24 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007c22:	e018      	b.n	8007c56 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d115      	bne.n	8007c56 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c2e:	e012      	b.n	8007c56 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]
      break;
 8007c34:	e00f      	b.n	8007c56 <USBH_HandleEnum+0x442>

    default:
      break;
 8007c36:	bf00      	nop
 8007c38:	e00e      	b.n	8007c58 <USBH_HandleEnum+0x444>
      break;
 8007c3a:	bf00      	nop
 8007c3c:	e00c      	b.n	8007c58 <USBH_HandleEnum+0x444>
      break;
 8007c3e:	bf00      	nop
 8007c40:	e00a      	b.n	8007c58 <USBH_HandleEnum+0x444>
      break;
 8007c42:	bf00      	nop
 8007c44:	e008      	b.n	8007c58 <USBH_HandleEnum+0x444>
      break;
 8007c46:	bf00      	nop
 8007c48:	e006      	b.n	8007c58 <USBH_HandleEnum+0x444>
      break;
 8007c4a:	bf00      	nop
 8007c4c:	e004      	b.n	8007c58 <USBH_HandleEnum+0x444>
      break;
 8007c4e:	bf00      	nop
 8007c50:	e002      	b.n	8007c58 <USBH_HandleEnum+0x444>
      break;
 8007c52:	bf00      	nop
 8007c54:	e000      	b.n	8007c58 <USBH_HandleEnum+0x444>
      break;
 8007c56:	bf00      	nop
  }
  return Status;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop

08007c64 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f804 	bl	8007ca6 <USBH_HandleSof>
}
 8007c9e:	bf00      	nop
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b0b      	cmp	r3, #11
 8007cb6:	d10a      	bne.n	8007cce <USBH_HandleSof+0x28>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	4798      	blx	r3
  }
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f001 fa75 	bl	80091ec <osMessageQueuePut>
#endif
#endif

  return;
 8007d02:	bf00      	nop
}
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007d1a:	bf00      	nop
}
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f001 fa45 	bl	80091ec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f004 f9c8 	bl	800c122 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	791b      	ldrb	r3, [r3, #4]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 f837 	bl	8008e0c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	795b      	ldrb	r3, [r3, #5]
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 f831 	bl	8008e0c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f001 fa13 	bl	80091ec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007de4:	f04f 33ff 	mov.w	r3, #4294967295
 8007de8:	2200      	movs	r2, #0
 8007dea:	f001 fa5f 	bl	80092ac <osMessageQueueGet>
 8007dee:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7ff faa2 	bl	8007340 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007dfc:	e7ec      	b.n	8007dd8 <USBH_Process_OS+0x8>

08007dfe <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f001 f9e5 	bl	80091ec <osMessageQueuePut>
#endif

  return USBH_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007e38:	887b      	ldrh	r3, [r7, #2]
 8007e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e3e:	d901      	bls.n	8007e44 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e01b      	b.n	8007e7c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e4a:	887b      	ldrh	r3, [r7, #2]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e54:	2100      	movs	r1, #0
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f872 	bl	8007f40 <USBH_GetDescriptor>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d109      	bne.n	8007e7a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007e6c:	887a      	ldrh	r2, [r7, #2]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f929 	bl	80080c8 <USBH_ParseDevDesc>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	331c      	adds	r3, #28
 8007e94:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007e96:	887b      	ldrh	r3, [r7, #2]
 8007e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e9c:	d901      	bls.n	8007ea2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e016      	b.n	8007ed0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ea2:	887b      	ldrh	r3, [r7, #2]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007eac:	2100      	movs	r1, #0
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f846 	bl	8007f40 <USBH_GetDescriptor>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d107      	bne.n	8007ece <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007ebe:	887b      	ldrh	r3, [r7, #2]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9af 	bl	8008228 <USBH_ParseCfgDesc>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	72fb      	strb	r3, [r7, #11]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007eec:	893b      	ldrh	r3, [r7, #8]
 8007eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ef2:	d802      	bhi.n	8007efa <USBH_Get_StringDesc+0x22>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e01c      	b.n	8007f38 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007efe:	7afb      	ldrb	r3, [r7, #11]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007f06:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f0e:	893b      	ldrh	r3, [r7, #8]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	460b      	mov	r3, r1
 8007f14:	2100      	movs	r1, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 f812 	bl	8007f40 <USBH_GetDescriptor>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f2c:	893a      	ldrh	r2, [r7, #8]
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fb8d 	bl	8008650 <USBH_ParseStringDesc>
  }

  return status;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	72fb      	strb	r3, [r7, #11]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	789b      	ldrb	r3, [r3, #2]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d11c      	bne.n	8007f94 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2206      	movs	r2, #6
 8007f6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	893a      	ldrh	r2, [r7, #8]
 8007f70:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f72:	893b      	ldrh	r3, [r7, #8]
 8007f74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007f78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f7c:	d104      	bne.n	8007f88 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f240 4209 	movw	r2, #1033	@ 0x409
 8007f84:	829a      	strh	r2, [r3, #20]
 8007f86:	e002      	b.n	8007f8e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8b3a      	ldrh	r2, [r7, #24]
 8007f92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007f94:	8b3b      	ldrh	r3, [r7, #24]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 fba5 	bl	80086ea <USBH_CtlReq>
 8007fa0:	4603      	mov	r3, r0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	789b      	ldrb	r3, [r3, #2]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d10f      	bne.n	8007fde <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2205      	movs	r2, #5
 8007fc8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fb81 	bl	80086ea <USBH_CtlReq>
 8007fe8:	4603      	mov	r3, r0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	789b      	ldrb	r3, [r3, #2]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d10e      	bne.n	8008024 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2209      	movs	r2, #9
 8008010:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	887a      	ldrh	r2, [r7, #2]
 8008016:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fb5e 	bl	80086ea <USBH_CtlReq>
 800802e:	4603      	mov	r3, r0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	789b      	ldrb	r3, [r3, #2]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d10f      	bne.n	800806c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2203      	movs	r2, #3
 8008056:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	b29a      	uxth	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800806c:	2200      	movs	r2, #0
 800806e:	2100      	movs	r1, #0
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fb3a 	bl	80086ea <USBH_CtlReq>
 8008076:	4603      	mov	r3, r0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	789b      	ldrb	r3, [r3, #2]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d10f      	bne.n	80080b4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080b4:	2200      	movs	r2, #0
 80080b6:	2100      	movs	r1, #0
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fb16 	bl	80086ea <USBH_CtlReq>
 80080be:	4603      	mov	r3, r0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4613      	mov	r3, r2
 80080d4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80080dc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80080e8:	2302      	movs	r3, #2
 80080ea:	e094      	b.n	8008216 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	781a      	ldrb	r2, [r3, #0]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	785a      	ldrb	r2, [r3, #1]
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	3302      	adds	r3, #2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	3303      	adds	r3, #3
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	021b      	lsls	r3, r3, #8
 800810c:	b29b      	uxth	r3, r3
 800810e:	4313      	orrs	r3, r2
 8008110:	b29a      	uxth	r2, r3
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	791a      	ldrb	r2, [r3, #4]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	795a      	ldrb	r2, [r3, #5]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	799a      	ldrb	r2, [r3, #6]
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	79da      	ldrb	r2, [r3, #7]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800813c:	2b00      	cmp	r3, #0
 800813e:	d004      	beq.n	800814a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008146:	2b01      	cmp	r3, #1
 8008148:	d11b      	bne.n	8008182 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	79db      	ldrb	r3, [r3, #7]
 800814e:	2b20      	cmp	r3, #32
 8008150:	dc0f      	bgt.n	8008172 <USBH_ParseDevDesc+0xaa>
 8008152:	2b08      	cmp	r3, #8
 8008154:	db0f      	blt.n	8008176 <USBH_ParseDevDesc+0xae>
 8008156:	3b08      	subs	r3, #8
 8008158:	4a32      	ldr	r2, [pc, #200]	@ (8008224 <USBH_ParseDevDesc+0x15c>)
 800815a:	fa22 f303 	lsr.w	r3, r2, r3
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	bf14      	ite	ne
 8008166:	2301      	movne	r3, #1
 8008168:	2300      	moveq	r3, #0
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d106      	bne.n	800817e <USBH_ParseDevDesc+0xb6>
 8008170:	e001      	b.n	8008176 <USBH_ParseDevDesc+0xae>
 8008172:	2b40      	cmp	r3, #64	@ 0x40
 8008174:	d003      	beq.n	800817e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2208      	movs	r2, #8
 800817a:	71da      	strb	r2, [r3, #7]
        break;
 800817c:	e000      	b.n	8008180 <USBH_ParseDevDesc+0xb8>
        break;
 800817e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008180:	e00e      	b.n	80081a0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008188:	2b02      	cmp	r3, #2
 800818a:	d107      	bne.n	800819c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	79db      	ldrb	r3, [r3, #7]
 8008190:	2b08      	cmp	r3, #8
 8008192:	d005      	beq.n	80081a0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2208      	movs	r2, #8
 8008198:	71da      	strb	r2, [r3, #7]
 800819a:	e001      	b.n	80081a0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800819c:	2303      	movs	r3, #3
 800819e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80081a0:	88fb      	ldrh	r3, [r7, #6]
 80081a2:	2b08      	cmp	r3, #8
 80081a4:	d936      	bls.n	8008214 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	3308      	adds	r3, #8
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	3309      	adds	r3, #9
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	4313      	orrs	r3, r2
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	330a      	adds	r3, #10
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	330b      	adds	r3, #11
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	4313      	orrs	r3, r2
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	330c      	adds	r3, #12
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	330d      	adds	r3, #13
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	4313      	orrs	r3, r2
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	7b9a      	ldrb	r2, [r3, #14]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	7bda      	ldrb	r2, [r3, #15]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	7c1a      	ldrb	r2, [r3, #16]
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	7c5a      	ldrb	r2, [r3, #17]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
}
 8008216:	4618      	mov	r0, r3
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	01000101 	.word	0x01000101

08008228 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08c      	sub	sp, #48	@ 0x30
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800823c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008256:	2302      	movs	r3, #2
 8008258:	e0da      	b.n	8008410 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800825e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b09      	cmp	r3, #9
 8008264:	d002      	beq.n	800826c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008268:	2209      	movs	r2, #9
 800826a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	781a      	ldrb	r2, [r3, #0]
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	785a      	ldrb	r2, [r3, #1]
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	3302      	adds	r3, #2
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	3303      	adds	r3, #3
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	021b      	lsls	r3, r3, #8
 800828c:	b29b      	uxth	r3, r3
 800828e:	4313      	orrs	r3, r2
 8008290:	b29b      	uxth	r3, r3
 8008292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008296:	bf28      	it	cs
 8008298:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800829c:	b29a      	uxth	r2, r3
 800829e:	6a3b      	ldr	r3, [r7, #32]
 80082a0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	791a      	ldrb	r2, [r3, #4]
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	795a      	ldrb	r2, [r3, #5]
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	799a      	ldrb	r2, [r3, #6]
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	79da      	ldrb	r2, [r3, #7]
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	7a1a      	ldrb	r2, [r3, #8]
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	2b09      	cmp	r3, #9
 80082ce:	f240 809d 	bls.w	800840c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80082d2:	2309      	movs	r3, #9
 80082d4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082da:	e081      	b.n	80083e0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082dc:	f107 0316 	add.w	r3, r7, #22
 80082e0:	4619      	mov	r1, r3
 80082e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082e4:	f000 f9e7 	bl	80086b6 <USBH_GetNextDesc>
 80082e8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80082ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ec:	785b      	ldrb	r3, [r3, #1]
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d176      	bne.n	80083e0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80082f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2b09      	cmp	r3, #9
 80082f8:	d002      	beq.n	8008300 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80082fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fc:	2209      	movs	r2, #9
 80082fe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008304:	221a      	movs	r2, #26
 8008306:	fb02 f303 	mul.w	r3, r2, r3
 800830a:	3308      	adds	r3, #8
 800830c:	6a3a      	ldr	r2, [r7, #32]
 800830e:	4413      	add	r3, r2
 8008310:	3302      	adds	r3, #2
 8008312:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008314:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008316:	69f8      	ldr	r0, [r7, #28]
 8008318:	f000 f87e 	bl	8008418 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008326:	e043      	b.n	80083b0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008328:	f107 0316 	add.w	r3, r7, #22
 800832c:	4619      	mov	r1, r3
 800832e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008330:	f000 f9c1 	bl	80086b6 <USBH_GetNextDesc>
 8008334:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008338:	785b      	ldrb	r3, [r3, #1]
 800833a:	2b05      	cmp	r3, #5
 800833c:	d138      	bne.n	80083b0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	795b      	ldrb	r3, [r3, #5]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d113      	bne.n	800836e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800834a:	2b02      	cmp	r3, #2
 800834c:	d003      	beq.n	8008356 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	799b      	ldrb	r3, [r3, #6]
 8008352:	2b03      	cmp	r3, #3
 8008354:	d10b      	bne.n	800836e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	79db      	ldrb	r3, [r3, #7]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10b      	bne.n	8008376 <USBH_ParseCfgDesc+0x14e>
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b09      	cmp	r3, #9
 8008364:	d007      	beq.n	8008376 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008368:	2209      	movs	r2, #9
 800836a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800836c:	e003      	b.n	8008376 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800836e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008370:	2207      	movs	r2, #7
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	e000      	b.n	8008378 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008376:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800837c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008380:	3201      	adds	r2, #1
 8008382:	00d2      	lsls	r2, r2, #3
 8008384:	211a      	movs	r1, #26
 8008386:	fb01 f303 	mul.w	r3, r1, r3
 800838a:	4413      	add	r3, r2
 800838c:	3308      	adds	r3, #8
 800838e:	6a3a      	ldr	r2, [r7, #32]
 8008390:	4413      	add	r3, r2
 8008392:	3304      	adds	r3, #4
 8008394:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008398:	69b9      	ldr	r1, [r7, #24]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 f870 	bl	8008480 <USBH_ParseEPDesc>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80083a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083aa:	3301      	adds	r3, #1
 80083ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	791b      	ldrb	r3, [r3, #4]
 80083b4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d204      	bcs.n	80083c6 <USBH_ParseCfgDesc+0x19e>
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	885a      	ldrh	r2, [r3, #2]
 80083c0:	8afb      	ldrh	r3, [r7, #22]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d8b0      	bhi.n	8008328 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	791b      	ldrb	r3, [r3, #4]
 80083ca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d201      	bcs.n	80083d6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e01c      	b.n	8008410 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80083d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083da:	3301      	adds	r3, #1
 80083dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d805      	bhi.n	80083f4 <USBH_ParseCfgDesc+0x1cc>
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	885a      	ldrh	r2, [r3, #2]
 80083ec:	8afb      	ldrh	r3, [r7, #22]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	f63f af74 	bhi.w	80082dc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	791b      	ldrb	r3, [r3, #4]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	bf28      	it	cs
 80083fc:	2302      	movcs	r3, #2
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008404:	429a      	cmp	r2, r3
 8008406:	d201      	bcs.n	800840c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008408:	2303      	movs	r3, #3
 800840a:	e001      	b.n	8008410 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800840c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008410:	4618      	mov	r0, r3
 8008412:	3730      	adds	r7, #48	@ 0x30
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781a      	ldrb	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	785a      	ldrb	r2, [r3, #1]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	789a      	ldrb	r2, [r3, #2]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	78da      	ldrb	r2, [r3, #3]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	3304      	adds	r3, #4
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b02      	cmp	r3, #2
 800844a:	bf28      	it	cs
 800844c:	2302      	movcs	r3, #2
 800844e:	b2da      	uxtb	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	795a      	ldrb	r2, [r3, #5]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	799a      	ldrb	r2, [r3, #6]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	79da      	ldrb	r2, [r3, #7]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	7a1a      	ldrb	r2, [r3, #8]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	721a      	strb	r2, [r3, #8]
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	781a      	ldrb	r2, [r3, #0]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	785a      	ldrb	r2, [r3, #1]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	789a      	ldrb	r2, [r3, #2]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	78da      	ldrb	r2, [r3, #3]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3304      	adds	r3, #4
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3305      	adds	r3, #5
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	4313      	orrs	r3, r2
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	799a      	ldrb	r2, [r3, #6]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	889b      	ldrh	r3, [r3, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80084de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e2:	d804      	bhi.n	80084ee <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80084e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ec:	d901      	bls.n	80084f2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80084ee:	2303      	movs	r3, #3
 80084f0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d136      	bne.n	800856a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	78db      	ldrb	r3, [r3, #3]
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	2b02      	cmp	r3, #2
 8008506:	d108      	bne.n	800851a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	889b      	ldrh	r3, [r3, #4]
 800850c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008510:	f240 8097 	bls.w	8008642 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008514:	2303      	movs	r3, #3
 8008516:	75fb      	strb	r3, [r7, #23]
 8008518:	e093      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	78db      	ldrb	r3, [r3, #3]
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d107      	bne.n	8008536 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	889b      	ldrh	r3, [r3, #4]
 800852a:	2b40      	cmp	r3, #64	@ 0x40
 800852c:	f240 8089 	bls.w	8008642 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008530:	2303      	movs	r3, #3
 8008532:	75fb      	strb	r3, [r7, #23]
 8008534:	e085      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	78db      	ldrb	r3, [r3, #3]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b01      	cmp	r3, #1
 8008540:	d005      	beq.n	800854e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	78db      	ldrb	r3, [r3, #3]
 8008546:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800854a:	2b03      	cmp	r3, #3
 800854c:	d10a      	bne.n	8008564 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	799b      	ldrb	r3, [r3, #6]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <USBH_ParseEPDesc+0xde>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	799b      	ldrb	r3, [r3, #6]
 800855a:	2b10      	cmp	r3, #16
 800855c:	d970      	bls.n	8008640 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800855e:	2303      	movs	r3, #3
 8008560:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008562:	e06d      	b.n	8008640 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008564:	2303      	movs	r3, #3
 8008566:	75fb      	strb	r3, [r7, #23]
 8008568:	e06b      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008570:	2b01      	cmp	r3, #1
 8008572:	d13c      	bne.n	80085ee <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	78db      	ldrb	r3, [r3, #3]
 8008578:	f003 0303 	and.w	r3, r3, #3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d005      	beq.n	800858c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	78db      	ldrb	r3, [r3, #3]
 8008584:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008588:	2b00      	cmp	r3, #0
 800858a:	d106      	bne.n	800859a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	889b      	ldrh	r3, [r3, #4]
 8008590:	2b40      	cmp	r3, #64	@ 0x40
 8008592:	d956      	bls.n	8008642 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008594:	2303      	movs	r3, #3
 8008596:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008598:	e053      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	78db      	ldrb	r3, [r3, #3]
 800859e:	f003 0303 	and.w	r3, r3, #3
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d10e      	bne.n	80085c4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	799b      	ldrb	r3, [r3, #6]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80085b2:	2b10      	cmp	r3, #16
 80085b4:	d803      	bhi.n	80085be <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80085ba:	2b40      	cmp	r3, #64	@ 0x40
 80085bc:	d941      	bls.n	8008642 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085be:	2303      	movs	r3, #3
 80085c0:	75fb      	strb	r3, [r7, #23]
 80085c2:	e03e      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	78db      	ldrb	r3, [r3, #3]
 80085c8:	f003 0303 	and.w	r3, r3, #3
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d10b      	bne.n	80085e8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	799b      	ldrb	r3, [r3, #6]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d004      	beq.n	80085e2 <USBH_ParseEPDesc+0x162>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	889b      	ldrh	r3, [r3, #4]
 80085dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085e0:	d32f      	bcc.n	8008642 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085e2:	2303      	movs	r3, #3
 80085e4:	75fb      	strb	r3, [r7, #23]
 80085e6:	e02c      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80085e8:	2303      	movs	r3, #3
 80085ea:	75fb      	strb	r3, [r7, #23]
 80085ec:	e029      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d120      	bne.n	800863a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	78db      	ldrb	r3, [r3, #3]
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	2b00      	cmp	r3, #0
 8008602:	d106      	bne.n	8008612 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	889b      	ldrh	r3, [r3, #4]
 8008608:	2b08      	cmp	r3, #8
 800860a:	d01a      	beq.n	8008642 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800860c:	2303      	movs	r3, #3
 800860e:	75fb      	strb	r3, [r7, #23]
 8008610:	e017      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	78db      	ldrb	r3, [r3, #3]
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	2b03      	cmp	r3, #3
 800861c:	d10a      	bne.n	8008634 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	799b      	ldrb	r3, [r3, #6]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <USBH_ParseEPDesc+0x1ae>
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	889b      	ldrh	r3, [r3, #4]
 800862a:	2b08      	cmp	r3, #8
 800862c:	d909      	bls.n	8008642 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800862e:	2303      	movs	r3, #3
 8008630:	75fb      	strb	r3, [r7, #23]
 8008632:	e006      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008634:	2303      	movs	r3, #3
 8008636:	75fb      	strb	r3, [r7, #23]
 8008638:	e003      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800863a:	2303      	movs	r3, #3
 800863c:	75fb      	strb	r3, [r7, #23]
 800863e:	e000      	b.n	8008642 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008640:	bf00      	nop
  }

  return status;
 8008642:	7dfb      	ldrb	r3, [r7, #23]
}
 8008644:	4618      	mov	r0, r3
 8008646:	371c      	adds	r7, #28
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	4613      	mov	r3, r2
 800865c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3301      	adds	r3, #1
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b03      	cmp	r3, #3
 8008666:	d120      	bne.n	80086aa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	1e9a      	subs	r2, r3, #2
 800866e:	88fb      	ldrh	r3, [r7, #6]
 8008670:	4293      	cmp	r3, r2
 8008672:	bf28      	it	cs
 8008674:	4613      	movcs	r3, r2
 8008676:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	3302      	adds	r3, #2
 800867c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800867e:	2300      	movs	r3, #0
 8008680:	82fb      	strh	r3, [r7, #22]
 8008682:	e00b      	b.n	800869c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008684:	8afb      	ldrh	r3, [r7, #22]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4413      	add	r3, r2
 800868a:	781a      	ldrb	r2, [r3, #0]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	3301      	adds	r3, #1
 8008694:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008696:	8afb      	ldrh	r3, [r7, #22]
 8008698:	3302      	adds	r3, #2
 800869a:	82fb      	strh	r3, [r7, #22]
 800869c:	8afa      	ldrh	r2, [r7, #22]
 800869e:	8abb      	ldrh	r3, [r7, #20]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d3ef      	bcc.n	8008684 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2200      	movs	r2, #0
 80086a8:	701a      	strb	r2, [r3, #0]
  }
}
 80086aa:	bf00      	nop
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	7812      	ldrb	r2, [r2, #0]
 80086c8:	4413      	add	r3, r2
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4413      	add	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086dc:	68fb      	ldr	r3, [r7, #12]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b086      	sub	sp, #24
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	4613      	mov	r3, r2
 80086f6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80086f8:	2301      	movs	r3, #1
 80086fa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	789b      	ldrb	r3, [r3, #2]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d002      	beq.n	800870a <USBH_CtlReq+0x20>
 8008704:	2b02      	cmp	r3, #2
 8008706:	d01d      	beq.n	8008744 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008708:	e043      	b.n	8008792 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	88fa      	ldrh	r2, [r7, #6]
 8008714:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2202      	movs	r2, #2
 8008720:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008722:	2301      	movs	r3, #1
 8008724:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2203      	movs	r2, #3
 800872a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800873a:	2300      	movs	r3, #0
 800873c:	2200      	movs	r2, #0
 800873e:	f000 fd55 	bl	80091ec <osMessageQueuePut>
      break;
 8008742:	e026      	b.n	8008792 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 f829 	bl	800879c <USBH_HandleControl>
 800874a:	4603      	mov	r3, r0
 800874c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <USBH_CtlReq+0x70>
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	2b03      	cmp	r3, #3
 8008758:	d106      	bne.n	8008768 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2201      	movs	r2, #1
 800875e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	761a      	strb	r2, [r3, #24]
 8008766:	e005      	b.n	8008774 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d102      	bne.n	8008774 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2203      	movs	r2, #3
 8008778:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008788:	2300      	movs	r3, #0
 800878a:	2200      	movs	r2, #0
 800878c:	f000 fd2e 	bl	80091ec <osMessageQueuePut>
      break;
 8008790:	bf00      	nop
  }
  return status;
 8008792:	7dfb      	ldrb	r3, [r7, #23]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af02      	add	r7, sp, #8
 80087a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80087a4:	2301      	movs	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	7e1b      	ldrb	r3, [r3, #24]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	2b0a      	cmp	r3, #10
 80087b4:	f200 8229 	bhi.w	8008c0a <USBH_HandleControl+0x46e>
 80087b8:	a201      	add	r2, pc, #4	@ (adr r2, 80087c0 <USBH_HandleControl+0x24>)
 80087ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087be:	bf00      	nop
 80087c0:	080087ed 	.word	0x080087ed
 80087c4:	08008807 	.word	0x08008807
 80087c8:	080088a9 	.word	0x080088a9
 80087cc:	080088cf 	.word	0x080088cf
 80087d0:	0800895b 	.word	0x0800895b
 80087d4:	08008985 	.word	0x08008985
 80087d8:	08008a47 	.word	0x08008a47
 80087dc:	08008a69 	.word	0x08008a69
 80087e0:	08008afb 	.word	0x08008afb
 80087e4:	08008b21 	.word	0x08008b21
 80087e8:	08008bb3 	.word	0x08008bb3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f103 0110 	add.w	r1, r3, #16
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	795b      	ldrb	r3, [r3, #5]
 80087f6:	461a      	mov	r2, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fa17 	bl	8008c2c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2202      	movs	r2, #2
 8008802:	761a      	strb	r2, [r3, #24]
      break;
 8008804:	e20c      	b.n	8008c20 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	795b      	ldrb	r3, [r3, #5]
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f003 fd77 	bl	800c300 <USBH_LL_GetURBState>
 8008812:	4603      	mov	r3, r0
 8008814:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d12c      	bne.n	8008876 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	7c1b      	ldrb	r3, [r3, #16]
 8008820:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008824:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	8adb      	ldrh	r3, [r3, #22]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800882e:	7b7b      	ldrb	r3, [r7, #13]
 8008830:	2b80      	cmp	r3, #128	@ 0x80
 8008832:	d103      	bne.n	800883c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2203      	movs	r2, #3
 8008838:	761a      	strb	r2, [r3, #24]
 800883a:	e00d      	b.n	8008858 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2205      	movs	r2, #5
 8008840:	761a      	strb	r2, [r3, #24]
 8008842:	e009      	b.n	8008858 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008844:	7b7b      	ldrb	r3, [r7, #13]
 8008846:	2b80      	cmp	r3, #128	@ 0x80
 8008848:	d103      	bne.n	8008852 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2209      	movs	r2, #9
 800884e:	761a      	strb	r2, [r3, #24]
 8008850:	e002      	b.n	8008858 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2207      	movs	r2, #7
 8008856:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2203      	movs	r2, #3
 800885c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800886c:	2300      	movs	r3, #0
 800886e:	2200      	movs	r2, #0
 8008870:	f000 fcbc 	bl	80091ec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008874:	e1cb      	b.n	8008c0e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b04      	cmp	r3, #4
 800887a:	d003      	beq.n	8008884 <USBH_HandleControl+0xe8>
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	2b02      	cmp	r3, #2
 8008880:	f040 81c5 	bne.w	8008c0e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	220b      	movs	r2, #11
 8008888:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2203      	movs	r2, #3
 800888e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800889e:	2300      	movs	r3, #0
 80088a0:	2200      	movs	r2, #0
 80088a2:	f000 fca3 	bl	80091ec <osMessageQueuePut>
      break;
 80088a6:	e1b2      	b.n	8008c0e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6899      	ldr	r1, [r3, #8]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	899a      	ldrh	r2, [r3, #12]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	791b      	ldrb	r3, [r3, #4]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f9f2 	bl	8008caa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2204      	movs	r2, #4
 80088ca:	761a      	strb	r2, [r3, #24]
      break;
 80088cc:	e1a8      	b.n	8008c20 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	791b      	ldrb	r3, [r3, #4]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f003 fd13 	bl	800c300 <USBH_LL_GetURBState>
 80088da:	4603      	mov	r3, r0
 80088dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d110      	bne.n	8008906 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2209      	movs	r2, #9
 80088e8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2203      	movs	r2, #3
 80088ee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80088fe:	2300      	movs	r3, #0
 8008900:	2200      	movs	r2, #0
 8008902:	f000 fc73 	bl	80091ec <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008906:	7bbb      	ldrb	r3, [r7, #14]
 8008908:	2b05      	cmp	r3, #5
 800890a:	d110      	bne.n	800892e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800890c:	2303      	movs	r3, #3
 800890e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2203      	movs	r2, #3
 8008914:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008924:	2300      	movs	r3, #0
 8008926:	2200      	movs	r2, #0
 8008928:	f000 fc60 	bl	80091ec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800892c:	e171      	b.n	8008c12 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800892e:	7bbb      	ldrb	r3, [r7, #14]
 8008930:	2b04      	cmp	r3, #4
 8008932:	f040 816e 	bne.w	8008c12 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	220b      	movs	r2, #11
 800893a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2203      	movs	r2, #3
 8008940:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008950:	2300      	movs	r3, #0
 8008952:	2200      	movs	r2, #0
 8008954:	f000 fc4a 	bl	80091ec <osMessageQueuePut>
      break;
 8008958:	e15b      	b.n	8008c12 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6899      	ldr	r1, [r3, #8]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	899a      	ldrh	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	795b      	ldrb	r3, [r3, #5]
 8008966:	2001      	movs	r0, #1
 8008968:	9000      	str	r0, [sp, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f978 	bl	8008c60 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008976:	b29a      	uxth	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2206      	movs	r2, #6
 8008980:	761a      	strb	r2, [r3, #24]
      break;
 8008982:	e14d      	b.n	8008c20 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	795b      	ldrb	r3, [r3, #5]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f003 fcb8 	bl	800c300 <USBH_LL_GetURBState>
 8008990:	4603      	mov	r3, r0
 8008992:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d111      	bne.n	80089be <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2207      	movs	r2, #7
 800899e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2203      	movs	r2, #3
 80089a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089b4:	2300      	movs	r3, #0
 80089b6:	2200      	movs	r2, #0
 80089b8:	f000 fc18 	bl	80091ec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089bc:	e12b      	b.n	8008c16 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b05      	cmp	r3, #5
 80089c2:	d113      	bne.n	80089ec <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	220c      	movs	r2, #12
 80089c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80089ca:	2303      	movs	r3, #3
 80089cc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2203      	movs	r2, #3
 80089d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089e2:	2300      	movs	r3, #0
 80089e4:	2200      	movs	r2, #0
 80089e6:	f000 fc01 	bl	80091ec <osMessageQueuePut>
      break;
 80089ea:	e114      	b.n	8008c16 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d111      	bne.n	8008a16 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2205      	movs	r2, #5
 80089f6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2203      	movs	r2, #3
 80089fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f000 fbec 	bl	80091ec <osMessageQueuePut>
      break;
 8008a14:	e0ff      	b.n	8008c16 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	f040 80fc 	bne.w	8008c16 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	220b      	movs	r2, #11
 8008a22:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a24:	2302      	movs	r3, #2
 8008a26:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2203      	movs	r2, #3
 8008a2c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f000 fbd4 	bl	80091ec <osMessageQueuePut>
      break;
 8008a44:	e0e7      	b.n	8008c16 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	791b      	ldrb	r3, [r3, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f92b 	bl	8008caa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2208      	movs	r2, #8
 8008a64:	761a      	strb	r2, [r3, #24]

      break;
 8008a66:	e0db      	b.n	8008c20 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	791b      	ldrb	r3, [r3, #4]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f003 fc46 	bl	800c300 <USBH_LL_GetURBState>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d113      	bne.n	8008aa6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	220d      	movs	r2, #13
 8008a82:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2203      	movs	r2, #3
 8008a8c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f000 fba4 	bl	80091ec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008aa4:	e0b9      	b.n	8008c1a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d111      	bne.n	8008ad0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	220b      	movs	r2, #11
 8008ab0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2203      	movs	r2, #3
 8008ab6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f000 fb8f 	bl	80091ec <osMessageQueuePut>
      break;
 8008ace:	e0a4      	b.n	8008c1a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	f040 80a1 	bne.w	8008c1a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2203      	movs	r2, #3
 8008ae0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008af0:	2300      	movs	r3, #0
 8008af2:	2200      	movs	r2, #0
 8008af4:	f000 fb7a 	bl	80091ec <osMessageQueuePut>
      break;
 8008af8:	e08f      	b.n	8008c1a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	795b      	ldrb	r3, [r3, #5]
 8008afe:	2201      	movs	r2, #1
 8008b00:	9200      	str	r2, [sp, #0]
 8008b02:	2200      	movs	r2, #0
 8008b04:	2100      	movs	r1, #0
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f8aa 	bl	8008c60 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	220a      	movs	r2, #10
 8008b1c:	761a      	strb	r2, [r3, #24]
      break;
 8008b1e:	e07f      	b.n	8008c20 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	795b      	ldrb	r3, [r3, #5]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f003 fbea 	bl	800c300 <USBH_LL_GetURBState>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d113      	bne.n	8008b5e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	220d      	movs	r2, #13
 8008b3e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2203      	movs	r2, #3
 8008b44:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b54:	2300      	movs	r3, #0
 8008b56:	2200      	movs	r2, #0
 8008b58:	f000 fb48 	bl	80091ec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b5c:	e05f      	b.n	8008c1e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d111      	bne.n	8008b88 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2209      	movs	r2, #9
 8008b68:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2200      	movs	r2, #0
 8008b82:	f000 fb33 	bl	80091ec <osMessageQueuePut>
      break;
 8008b86:	e04a      	b.n	8008c1e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d147      	bne.n	8008c1e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	220b      	movs	r2, #11
 8008b92:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2203      	movs	r2, #3
 8008b98:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	2200      	movs	r2, #0
 8008bac:	f000 fb1e 	bl	80091ec <osMessageQueuePut>
      break;
 8008bb0:	e035      	b.n	8008c1e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7e5b      	ldrb	r3, [r3, #25]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	765a      	strb	r2, [r3, #25]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	7e5b      	ldrb	r3, [r3, #25]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d806      	bhi.n	8008bd4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008bd2:	e025      	b.n	8008c20 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bda:	2106      	movs	r1, #6
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	795b      	ldrb	r3, [r3, #5]
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f90d 	bl	8008e0c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	791b      	ldrb	r3, [r3, #4]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f907 	bl	8008e0c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008c04:	2302      	movs	r3, #2
 8008c06:	73fb      	strb	r3, [r7, #15]
      break;
 8008c08:	e00a      	b.n	8008c20 <USBH_HandleControl+0x484>

    default:
      break;
 8008c0a:	bf00      	nop
 8008c0c:	e008      	b.n	8008c20 <USBH_HandleControl+0x484>
      break;
 8008c0e:	bf00      	nop
 8008c10:	e006      	b.n	8008c20 <USBH_HandleControl+0x484>
      break;
 8008c12:	bf00      	nop
 8008c14:	e004      	b.n	8008c20 <USBH_HandleControl+0x484>
      break;
 8008c16:	bf00      	nop
 8008c18:	e002      	b.n	8008c20 <USBH_HandleControl+0x484>
      break;
 8008c1a:	bf00      	nop
 8008c1c:	e000      	b.n	8008c20 <USBH_HandleControl+0x484>
      break;
 8008c1e:	bf00      	nop
  }

  return status;
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop

08008c2c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af04      	add	r7, sp, #16
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	4613      	mov	r3, r2
 8008c38:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c3a:	79f9      	ldrb	r1, [r7, #7]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9303      	str	r3, [sp, #12]
 8008c40:	2308      	movs	r3, #8
 8008c42:	9302      	str	r3, [sp, #8]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	2200      	movs	r2, #0
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f003 fb24 	bl	800c29e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af04      	add	r7, sp, #16
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	460b      	mov	r3, r1
 8008c70:	80fb      	strh	r3, [r7, #6]
 8008c72:	4613      	mov	r3, r2
 8008c74:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d001      	beq.n	8008c84 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c84:	7979      	ldrb	r1, [r7, #5]
 8008c86:	7e3b      	ldrb	r3, [r7, #24]
 8008c88:	9303      	str	r3, [sp, #12]
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	9302      	str	r3, [sp, #8]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	2301      	movs	r3, #1
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	2300      	movs	r3, #0
 8008c98:	2200      	movs	r2, #0
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f003 faff 	bl	800c29e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b088      	sub	sp, #32
 8008cae:	af04      	add	r7, sp, #16
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	460b      	mov	r3, r1
 8008cba:	80fb      	strh	r3, [r7, #6]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cc0:	7979      	ldrb	r1, [r7, #5]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9303      	str	r3, [sp, #12]
 8008cc6:	88fb      	ldrh	r3, [r7, #6]
 8008cc8:	9302      	str	r3, [sp, #8]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	2301      	movs	r3, #1
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f003 fae1 	bl	800c29e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008cdc:	2300      	movs	r3, #0

}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b088      	sub	sp, #32
 8008cea:	af04      	add	r7, sp, #16
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	80fb      	strh	r3, [r7, #6]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d0a:	7979      	ldrb	r1, [r7, #5]
 8008d0c:	7e3b      	ldrb	r3, [r7, #24]
 8008d0e:	9303      	str	r3, [sp, #12]
 8008d10:	88fb      	ldrh	r3, [r7, #6]
 8008d12:	9302      	str	r3, [sp, #8]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	9301      	str	r3, [sp, #4]
 8008d18:	2301      	movs	r3, #1
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	2200      	movs	r2, #0
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f003 fabc 	bl	800c29e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af04      	add	r7, sp, #16
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	460b      	mov	r3, r1
 8008d40:	80fb      	strh	r3, [r7, #6]
 8008d42:	4613      	mov	r3, r2
 8008d44:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d46:	7979      	ldrb	r1, [r7, #5]
 8008d48:	2300      	movs	r3, #0
 8008d4a:	9303      	str	r3, [sp, #12]
 8008d4c:	88fb      	ldrh	r3, [r7, #6]
 8008d4e:	9302      	str	r3, [sp, #8]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	2301      	movs	r3, #1
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	2302      	movs	r3, #2
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f003 fa9e 	bl	800c29e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af04      	add	r7, sp, #16
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	4608      	mov	r0, r1
 8008d76:	4611      	mov	r1, r2
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	70fb      	strb	r3, [r7, #3]
 8008d7e:	460b      	mov	r3, r1
 8008d80:	70bb      	strb	r3, [r7, #2]
 8008d82:	4613      	mov	r3, r2
 8008d84:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d86:	7878      	ldrb	r0, [r7, #1]
 8008d88:	78ba      	ldrb	r2, [r7, #2]
 8008d8a:	78f9      	ldrb	r1, [r7, #3]
 8008d8c:	8b3b      	ldrh	r3, [r7, #24]
 8008d8e:	9302      	str	r3, [sp, #8]
 8008d90:	7d3b      	ldrb	r3, [r7, #20]
 8008d92:	9301      	str	r3, [sp, #4]
 8008d94:	7c3b      	ldrb	r3, [r7, #16]
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	4603      	mov	r3, r0
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f003 fa31 	bl	800c202 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f003 fa50 	bl	800c260 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f836 	bl	8008e48 <USBH_GetFreePipe>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008de0:	89fb      	ldrh	r3, [r7, #14]
 8008de2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d00a      	beq.n	8008e00 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008dea:	78fa      	ldrb	r2, [r7, #3]
 8008dec:	89fb      	ldrh	r3, [r7, #14]
 8008dee:	f003 030f 	and.w	r3, r3, #15
 8008df2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	33e0      	adds	r3, #224	@ 0xe0
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	440b      	add	r3, r1
 8008dfe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008e00:	89fb      	ldrh	r3, [r7, #14]
 8008e02:	b2db      	uxtb	r3, r3
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	2b0f      	cmp	r3, #15
 8008e1c:	d80d      	bhi.n	8008e3a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008e1e:	78fb      	ldrb	r3, [r7, #3]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	33e0      	adds	r3, #224	@ 0xe0
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	78fb      	ldrb	r3, [r7, #3]
 8008e2c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e30:	6879      	ldr	r1, [r7, #4]
 8008e32:	33e0      	adds	r3, #224	@ 0xe0
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	440b      	add	r3, r1
 8008e38:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
 8008e58:	e00f      	b.n	8008e7a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	33e0      	adds	r3, #224	@ 0xe0
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	e007      	b.n	8008e84 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	3301      	adds	r3, #1
 8008e78:	73fb      	strb	r3, [r7, #15]
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	2b0f      	cmp	r3, #15
 8008e7e:	d9ec      	bls.n	8008e5a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <__NVIC_SetPriority>:
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	6039      	str	r1, [r7, #0]
 8008e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	db0a      	blt.n	8008eba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	490c      	ldr	r1, [pc, #48]	@ (8008edc <__NVIC_SetPriority+0x4c>)
 8008eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eae:	0112      	lsls	r2, r2, #4
 8008eb0:	b2d2      	uxtb	r2, r2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008eb8:	e00a      	b.n	8008ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	4908      	ldr	r1, [pc, #32]	@ (8008ee0 <__NVIC_SetPriority+0x50>)
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	3b04      	subs	r3, #4
 8008ec8:	0112      	lsls	r2, r2, #4
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	440b      	add	r3, r1
 8008ece:	761a      	strb	r2, [r3, #24]
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	e000e100 	.word	0xe000e100
 8008ee0:	e000ed00 	.word	0xe000ed00

08008ee4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ee8:	4b05      	ldr	r3, [pc, #20]	@ (8008f00 <SysTick_Handler+0x1c>)
 8008eea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008eec:	f001 ff34 	bl	800ad58 <xTaskGetSchedulerState>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d001      	beq.n	8008efa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008ef6:	f002 fd2f 	bl	800b958 <xPortSysTickHandler>
  }
}
 8008efa:	bf00      	nop
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	e000e010 	.word	0xe000e010

08008f04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f08:	2100      	movs	r1, #0
 8008f0a:	f06f 0004 	mvn.w	r0, #4
 8008f0e:	f7ff ffbf 	bl	8008e90 <__NVIC_SetPriority>
#endif
}
 8008f12:	bf00      	nop
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f1e:	f3ef 8305 	mrs	r3, IPSR
 8008f22:	603b      	str	r3, [r7, #0]
  return(result);
 8008f24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f2a:	f06f 0305 	mvn.w	r3, #5
 8008f2e:	607b      	str	r3, [r7, #4]
 8008f30:	e00c      	b.n	8008f4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f32:	4b0a      	ldr	r3, [pc, #40]	@ (8008f5c <osKernelInitialize+0x44>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d105      	bne.n	8008f46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f3a:	4b08      	ldr	r3, [pc, #32]	@ (8008f5c <osKernelInitialize+0x44>)
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	607b      	str	r3, [r7, #4]
 8008f44:	e002      	b.n	8008f4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f46:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f4c:	687b      	ldr	r3, [r7, #4]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20000268 	.word	0x20000268

08008f60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f66:	f3ef 8305 	mrs	r3, IPSR
 8008f6a:	603b      	str	r3, [r7, #0]
  return(result);
 8008f6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f72:	f06f 0305 	mvn.w	r3, #5
 8008f76:	607b      	str	r3, [r7, #4]
 8008f78:	e010      	b.n	8008f9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa8 <osKernelStart+0x48>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d109      	bne.n	8008f96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f82:	f7ff ffbf 	bl	8008f04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f86:	4b08      	ldr	r3, [pc, #32]	@ (8008fa8 <osKernelStart+0x48>)
 8008f88:	2202      	movs	r2, #2
 8008f8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f8c:	f001 fa80 	bl	800a490 <vTaskStartScheduler>
      stat = osOK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	607b      	str	r3, [r7, #4]
 8008f94:	e002      	b.n	8008f9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f96:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f9c:	687b      	ldr	r3, [r7, #4]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000268 	.word	0x20000268

08008fac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08e      	sub	sp, #56	@ 0x38
 8008fb0:	af04      	add	r7, sp, #16
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fbc:	f3ef 8305 	mrs	r3, IPSR
 8008fc0:	617b      	str	r3, [r7, #20]
  return(result);
 8008fc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d17e      	bne.n	80090c6 <osThreadNew+0x11a>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d07b      	beq.n	80090c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fce:	2380      	movs	r3, #128	@ 0x80
 8008fd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008fd2:	2318      	movs	r3, #24
 8008fd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008fda:	f04f 33ff 	mov.w	r3, #4294967295
 8008fde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d045      	beq.n	8009072 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <osThreadNew+0x48>
        name = attr->name;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d008      	beq.n	800901a <osThreadNew+0x6e>
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	2b38      	cmp	r3, #56	@ 0x38
 800900c:	d805      	bhi.n	800901a <osThreadNew+0x6e>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <osThreadNew+0x72>
        return (NULL);
 800901a:	2300      	movs	r3, #0
 800901c:	e054      	b.n	80090c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	089b      	lsrs	r3, r3, #2
 800902c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00e      	beq.n	8009054 <osThreadNew+0xa8>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	2ba7      	cmp	r3, #167	@ 0xa7
 800903c:	d90a      	bls.n	8009054 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009042:	2b00      	cmp	r3, #0
 8009044:	d006      	beq.n	8009054 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <osThreadNew+0xa8>
        mem = 1;
 800904e:	2301      	movs	r3, #1
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	e010      	b.n	8009076 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10c      	bne.n	8009076 <osThreadNew+0xca>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d108      	bne.n	8009076 <osThreadNew+0xca>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <osThreadNew+0xca>
          mem = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	61bb      	str	r3, [r7, #24]
 8009070:	e001      	b.n	8009076 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d110      	bne.n	800909e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009084:	9202      	str	r2, [sp, #8]
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	6a3a      	ldr	r2, [r7, #32]
 8009090:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f001 f808 	bl	800a0a8 <xTaskCreateStatic>
 8009098:	4603      	mov	r3, r0
 800909a:	613b      	str	r3, [r7, #16]
 800909c:	e013      	b.n	80090c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d110      	bne.n	80090c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	f107 0310 	add.w	r3, r7, #16
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f001 f856 	bl	800a168 <xTaskCreate>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d001      	beq.n	80090c6 <osThreadNew+0x11a>
            hTask = NULL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090c6:	693b      	ldr	r3, [r7, #16]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3728      	adds	r7, #40	@ 0x28
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090d8:	f3ef 8305 	mrs	r3, IPSR
 80090dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80090de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <osDelay+0x1c>
    stat = osErrorISR;
 80090e4:	f06f 0305 	mvn.w	r3, #5
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	e007      	b.n	80090fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f001 f994 	bl	800a424 <vTaskDelay>
    }
  }

  return (stat);
 80090fc:	68fb      	ldr	r3, [r7, #12]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009106:	b580      	push	{r7, lr}
 8009108:	b08a      	sub	sp, #40	@ 0x28
 800910a:	af02      	add	r7, sp, #8
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009116:	f3ef 8305 	mrs	r3, IPSR
 800911a:	613b      	str	r3, [r7, #16]
  return(result);
 800911c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800911e:	2b00      	cmp	r3, #0
 8009120:	d15f      	bne.n	80091e2 <osMessageQueueNew+0xdc>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d05c      	beq.n	80091e2 <osMessageQueueNew+0xdc>
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d059      	beq.n	80091e2 <osMessageQueueNew+0xdc>
    mem = -1;
 800912e:	f04f 33ff 	mov.w	r3, #4294967295
 8009132:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d029      	beq.n	800918e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d012      	beq.n	8009168 <osMessageQueueNew+0x62>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	2b4f      	cmp	r3, #79	@ 0x4f
 8009148:	d90e      	bls.n	8009168 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00a      	beq.n	8009168 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	695a      	ldr	r2, [r3, #20]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	fb01 f303 	mul.w	r3, r1, r3
 800915e:	429a      	cmp	r2, r3
 8009160:	d302      	bcc.n	8009168 <osMessageQueueNew+0x62>
        mem = 1;
 8009162:	2301      	movs	r3, #1
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	e014      	b.n	8009192 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d110      	bne.n	8009192 <osMessageQueueNew+0x8c>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10c      	bne.n	8009192 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800917c:	2b00      	cmp	r3, #0
 800917e:	d108      	bne.n	8009192 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d104      	bne.n	8009192 <osMessageQueueNew+0x8c>
          mem = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	61bb      	str	r3, [r7, #24]
 800918c:	e001      	b.n	8009192 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d10b      	bne.n	80091b0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	691a      	ldr	r2, [r3, #16]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	2100      	movs	r1, #0
 80091a2:	9100      	str	r1, [sp, #0]
 80091a4:	68b9      	ldr	r1, [r7, #8]
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 fa30 	bl	800960c <xQueueGenericCreateStatic>
 80091ac:	61f8      	str	r0, [r7, #28]
 80091ae:	e008      	b.n	80091c2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d105      	bne.n	80091c2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80091b6:	2200      	movs	r2, #0
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 faa3 	bl	8009706 <xQueueGenericCreate>
 80091c0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00c      	beq.n	80091e2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	e001      	b.n	80091da <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80091da:	6979      	ldr	r1, [r7, #20]
 80091dc:	69f8      	ldr	r0, [r7, #28]
 80091de:	f000 ff05 	bl	8009fec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80091e2:	69fb      	ldr	r3, [r7, #28]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3720      	adds	r7, #32
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009200:	2300      	movs	r3, #0
 8009202:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009204:	f3ef 8305 	mrs	r3, IPSR
 8009208:	617b      	str	r3, [r7, #20]
  return(result);
 800920a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800920c:	2b00      	cmp	r3, #0
 800920e:	d028      	beq.n	8009262 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d005      	beq.n	8009222 <osMessageQueuePut+0x36>
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <osMessageQueuePut+0x36>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009222:	f06f 0303 	mvn.w	r3, #3
 8009226:	61fb      	str	r3, [r7, #28]
 8009228:	e038      	b.n	800929c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800922a:	2300      	movs	r3, #0
 800922c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800922e:	f107 0210 	add.w	r2, r7, #16
 8009232:	2300      	movs	r3, #0
 8009234:	68b9      	ldr	r1, [r7, #8]
 8009236:	69b8      	ldr	r0, [r7, #24]
 8009238:	f000 fbc6 	bl	80099c8 <xQueueGenericSendFromISR>
 800923c:	4603      	mov	r3, r0
 800923e:	2b01      	cmp	r3, #1
 8009240:	d003      	beq.n	800924a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009242:	f06f 0302 	mvn.w	r3, #2
 8009246:	61fb      	str	r3, [r7, #28]
 8009248:	e028      	b.n	800929c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d025      	beq.n	800929c <osMessageQueuePut+0xb0>
 8009250:	4b15      	ldr	r3, [pc, #84]	@ (80092a8 <osMessageQueuePut+0xbc>)
 8009252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	e01c      	b.n	800929c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <osMessageQueuePut+0x82>
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d103      	bne.n	8009276 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800926e:	f06f 0303 	mvn.w	r3, #3
 8009272:	61fb      	str	r3, [r7, #28]
 8009274:	e012      	b.n	800929c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009276:	2300      	movs	r3, #0
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	68b9      	ldr	r1, [r7, #8]
 800927c:	69b8      	ldr	r0, [r7, #24]
 800927e:	f000 faa1 	bl	80097c4 <xQueueGenericSend>
 8009282:	4603      	mov	r3, r0
 8009284:	2b01      	cmp	r3, #1
 8009286:	d009      	beq.n	800929c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800928e:	f06f 0301 	mvn.w	r3, #1
 8009292:	61fb      	str	r3, [r7, #28]
 8009294:	e002      	b.n	800929c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009296:	f06f 0302 	mvn.w	r3, #2
 800929a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800929c:	69fb      	ldr	r3, [r7, #28]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3720      	adds	r7, #32
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	e000ed04 	.word	0xe000ed04

080092ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80092be:	2300      	movs	r3, #0
 80092c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c2:	f3ef 8305 	mrs	r3, IPSR
 80092c6:	617b      	str	r3, [r7, #20]
  return(result);
 80092c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d028      	beq.n	8009320 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d005      	beq.n	80092e0 <osMessageQueueGet+0x34>
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <osMessageQueueGet+0x34>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80092e0:	f06f 0303 	mvn.w	r3, #3
 80092e4:	61fb      	str	r3, [r7, #28]
 80092e6:	e037      	b.n	8009358 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80092e8:	2300      	movs	r3, #0
 80092ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80092ec:	f107 0310 	add.w	r3, r7, #16
 80092f0:	461a      	mov	r2, r3
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	69b8      	ldr	r0, [r7, #24]
 80092f6:	f000 fce7 	bl	8009cc8 <xQueueReceiveFromISR>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d003      	beq.n	8009308 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009300:	f06f 0302 	mvn.w	r3, #2
 8009304:	61fb      	str	r3, [r7, #28]
 8009306:	e027      	b.n	8009358 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d024      	beq.n	8009358 <osMessageQueueGet+0xac>
 800930e:	4b15      	ldr	r3, [pc, #84]	@ (8009364 <osMessageQueueGet+0xb8>)
 8009310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009314:	601a      	str	r2, [r3, #0]
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	e01b      	b.n	8009358 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <osMessageQueueGet+0x80>
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d103      	bne.n	8009334 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800932c:	f06f 0303 	mvn.w	r3, #3
 8009330:	61fb      	str	r3, [r7, #28]
 8009332:	e011      	b.n	8009358 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	69b8      	ldr	r0, [r7, #24]
 800933a:	f000 fbe3 	bl	8009b04 <xQueueReceive>
 800933e:	4603      	mov	r3, r0
 8009340:	2b01      	cmp	r3, #1
 8009342:	d009      	beq.n	8009358 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800934a:	f06f 0301 	mvn.w	r3, #1
 800934e:	61fb      	str	r3, [r7, #28]
 8009350:	e002      	b.n	8009358 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009352:	f06f 0302 	mvn.w	r3, #2
 8009356:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009358:	69fb      	ldr	r3, [r7, #28]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3720      	adds	r7, #32
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	e000ed04 	.word	0xe000ed04

08009368 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4a07      	ldr	r2, [pc, #28]	@ (8009394 <vApplicationGetIdleTaskMemory+0x2c>)
 8009378:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4a06      	ldr	r2, [pc, #24]	@ (8009398 <vApplicationGetIdleTaskMemory+0x30>)
 800937e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2280      	movs	r2, #128	@ 0x80
 8009384:	601a      	str	r2, [r3, #0]
}
 8009386:	bf00      	nop
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	2000026c 	.word	0x2000026c
 8009398:	20000314 	.word	0x20000314

0800939c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4a07      	ldr	r2, [pc, #28]	@ (80093c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80093ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	4a06      	ldr	r2, [pc, #24]	@ (80093cc <vApplicationGetTimerTaskMemory+0x30>)
 80093b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093ba:	601a      	str	r2, [r3, #0]
}
 80093bc:	bf00      	nop
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	20000514 	.word	0x20000514
 80093cc:	200005bc 	.word	0x200005bc

080093d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f103 0208 	add.w	r2, r3, #8
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f04f 32ff 	mov.w	r2, #4294967295
 80093e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f103 0208 	add.w	r2, r3, #8
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f103 0208 	add.w	r2, r3, #8
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800942a:	b480      	push	{r7}
 800942c:	b085      	sub	sp, #20
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	601a      	str	r2, [r3, #0]
}
 8009466:	bf00      	nop
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009472:	b480      	push	{r7}
 8009474:	b085      	sub	sp, #20
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d103      	bne.n	8009492 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	e00c      	b.n	80094ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3308      	adds	r3, #8
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	e002      	b.n	80094a0 <vListInsert+0x2e>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d2f6      	bcs.n	800949a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	601a      	str	r2, [r3, #0]
}
 80094d8:	bf00      	nop
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	6892      	ldr	r2, [r2, #8]
 80094fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	6852      	ldr	r2, [r2, #4]
 8009504:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	429a      	cmp	r2, r3
 800950e:	d103      	bne.n	8009518 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	1e5a      	subs	r2, r3, #1
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10b      	bne.n	8009564 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800955e:	bf00      	nop
 8009560:	bf00      	nop
 8009562:	e7fd      	b.n	8009560 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009564:	f002 f968 	bl	800b838 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009570:	68f9      	ldr	r1, [r7, #12]
 8009572:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009574:	fb01 f303 	mul.w	r3, r1, r3
 8009578:	441a      	add	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009594:	3b01      	subs	r3, #1
 8009596:	68f9      	ldr	r1, [r7, #12]
 8009598:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800959a:	fb01 f303 	mul.w	r3, r1, r3
 800959e:	441a      	add	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	22ff      	movs	r2, #255	@ 0xff
 80095a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	22ff      	movs	r2, #255	@ 0xff
 80095b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d114      	bne.n	80095e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d01a      	beq.n	80095f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3310      	adds	r3, #16
 80095c6:	4618      	mov	r0, r3
 80095c8:	f001 fa00 	bl	800a9cc <xTaskRemoveFromEventList>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d012      	beq.n	80095f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009608 <xQueueGenericReset+0xd0>)
 80095d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	e009      	b.n	80095f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	3310      	adds	r3, #16
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fef1 	bl	80093d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3324      	adds	r3, #36	@ 0x24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff feec 	bl	80093d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095f8:	f002 f950 	bl	800b89c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095fc:	2301      	movs	r3, #1
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	e000ed04 	.word	0xe000ed04

0800960c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08e      	sub	sp, #56	@ 0x38
 8009610:	af02      	add	r7, sp, #8
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	e7fd      	b.n	8009634 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10b      	bne.n	8009656 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	e7fd      	b.n	8009652 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <xQueueGenericCreateStatic+0x56>
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <xQueueGenericCreateStatic+0x5a>
 8009662:	2301      	movs	r3, #1
 8009664:	e000      	b.n	8009668 <xQueueGenericCreateStatic+0x5c>
 8009666:	2300      	movs	r3, #0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10b      	bne.n	8009684 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	623b      	str	r3, [r7, #32]
}
 800967e:	bf00      	nop
 8009680:	bf00      	nop
 8009682:	e7fd      	b.n	8009680 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <xQueueGenericCreateStatic+0x84>
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <xQueueGenericCreateStatic+0x88>
 8009690:	2301      	movs	r3, #1
 8009692:	e000      	b.n	8009696 <xQueueGenericCreateStatic+0x8a>
 8009694:	2300      	movs	r3, #0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10b      	bne.n	80096b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	61fb      	str	r3, [r7, #28]
}
 80096ac:	bf00      	nop
 80096ae:	bf00      	nop
 80096b0:	e7fd      	b.n	80096ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096b2:	2350      	movs	r3, #80	@ 0x50
 80096b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b50      	cmp	r3, #80	@ 0x50
 80096ba:	d00b      	beq.n	80096d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	61bb      	str	r3, [r7, #24]
}
 80096ce:	bf00      	nop
 80096d0:	bf00      	nop
 80096d2:	e7fd      	b.n	80096d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80096da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00d      	beq.n	80096fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80096ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	4613      	mov	r3, r2
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	68b9      	ldr	r1, [r7, #8]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 f840 	bl	800977c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80096fe:	4618      	mov	r0, r3
 8009700:	3730      	adds	r7, #48	@ 0x30
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009706:	b580      	push	{r7, lr}
 8009708:	b08a      	sub	sp, #40	@ 0x28
 800970a:	af02      	add	r7, sp, #8
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	4613      	mov	r3, r2
 8009712:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10b      	bne.n	8009732 <xQueueGenericCreate+0x2c>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	613b      	str	r3, [r7, #16]
}
 800972c:	bf00      	nop
 800972e:	bf00      	nop
 8009730:	e7fd      	b.n	800972e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	fb02 f303 	mul.w	r3, r2, r3
 800973a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	3350      	adds	r3, #80	@ 0x50
 8009740:	4618      	mov	r0, r3
 8009742:	f002 f99b 	bl	800ba7c <pvPortMalloc>
 8009746:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d011      	beq.n	8009772 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	3350      	adds	r3, #80	@ 0x50
 8009756:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009760:	79fa      	ldrb	r2, [r7, #7]
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	4613      	mov	r3, r2
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	68b9      	ldr	r1, [r7, #8]
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f000 f805 	bl	800977c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009772:	69bb      	ldr	r3, [r7, #24]
	}
 8009774:	4618      	mov	r0, r3
 8009776:	3720      	adds	r7, #32
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d103      	bne.n	8009798 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	e002      	b.n	800979e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097aa:	2101      	movs	r1, #1
 80097ac:	69b8      	ldr	r0, [r7, #24]
 80097ae:	f7ff fec3 	bl	8009538 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	78fa      	ldrb	r2, [r7, #3]
 80097b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097ba:	bf00      	nop
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08e      	sub	sp, #56	@ 0x38
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097d2:	2300      	movs	r3, #0
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10b      	bne.n	80097f8 <xQueueGenericSend+0x34>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097f2:	bf00      	nop
 80097f4:	bf00      	nop
 80097f6:	e7fd      	b.n	80097f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d103      	bne.n	8009806 <xQueueGenericSend+0x42>
 80097fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <xQueueGenericSend+0x46>
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <xQueueGenericSend+0x48>
 800980a:	2300      	movs	r3, #0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10b      	bne.n	8009828 <xQueueGenericSend+0x64>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	e7fd      	b.n	8009824 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d103      	bne.n	8009836 <xQueueGenericSend+0x72>
 800982e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <xQueueGenericSend+0x76>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <xQueueGenericSend+0x78>
 800983a:	2300      	movs	r3, #0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10b      	bne.n	8009858 <xQueueGenericSend+0x94>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	623b      	str	r3, [r7, #32]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009858:	f001 fa7e 	bl	800ad58 <xTaskGetSchedulerState>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d102      	bne.n	8009868 <xQueueGenericSend+0xa4>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <xQueueGenericSend+0xa8>
 8009868:	2301      	movs	r3, #1
 800986a:	e000      	b.n	800986e <xQueueGenericSend+0xaa>
 800986c:	2300      	movs	r3, #0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10b      	bne.n	800988a <xQueueGenericSend+0xc6>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	61fb      	str	r3, [r7, #28]
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop
 8009888:	e7fd      	b.n	8009886 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800988a:	f001 ffd5 	bl	800b838 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009896:	429a      	cmp	r2, r3
 8009898:	d302      	bcc.n	80098a0 <xQueueGenericSend+0xdc>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b02      	cmp	r3, #2
 800989e:	d129      	bne.n	80098f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	68b9      	ldr	r1, [r7, #8]
 80098a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098a6:	f000 fa91 	bl	8009dcc <prvCopyDataToQueue>
 80098aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d010      	beq.n	80098d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b6:	3324      	adds	r3, #36	@ 0x24
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 f887 	bl	800a9cc <xTaskRemoveFromEventList>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d013      	beq.n	80098ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098c4:	4b3f      	ldr	r3, [pc, #252]	@ (80099c4 <xQueueGenericSend+0x200>)
 80098c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	e00a      	b.n	80098ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d007      	beq.n	80098ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098dc:	4b39      	ldr	r3, [pc, #228]	@ (80099c4 <xQueueGenericSend+0x200>)
 80098de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098ec:	f001 ffd6 	bl	800b89c <vPortExitCritical>
				return pdPASS;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e063      	b.n	80099bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d103      	bne.n	8009902 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098fa:	f001 ffcf 	bl	800b89c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	e05c      	b.n	80099bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009908:	f107 0314 	add.w	r3, r7, #20
 800990c:	4618      	mov	r0, r3
 800990e:	f001 f8c1 	bl	800aa94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009912:	2301      	movs	r3, #1
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009916:	f001 ffc1 	bl	800b89c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800991a:	f000 fe29 	bl	800a570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800991e:	f001 ff8b 	bl	800b838 <vPortEnterCritical>
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009928:	b25b      	sxtb	r3, r3
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992e:	d103      	bne.n	8009938 <xQueueGenericSend+0x174>
 8009930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800993e:	b25b      	sxtb	r3, r3
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d103      	bne.n	800994e <xQueueGenericSend+0x18a>
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800994e:	f001 ffa5 	bl	800b89c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009952:	1d3a      	adds	r2, r7, #4
 8009954:	f107 0314 	add.w	r3, r7, #20
 8009958:	4611      	mov	r1, r2
 800995a:	4618      	mov	r0, r3
 800995c:	f001 f8b0 	bl	800aac0 <xTaskCheckForTimeOut>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d124      	bne.n	80099b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009966:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009968:	f000 fb28 	bl	8009fbc <prvIsQueueFull>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d018      	beq.n	80099a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	3310      	adds	r3, #16
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	4611      	mov	r1, r2
 800997a:	4618      	mov	r0, r3
 800997c:	f000 ffd4 	bl	800a928 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009982:	f000 fab3 	bl	8009eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009986:	f000 fe01 	bl	800a58c <xTaskResumeAll>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	f47f af7c 	bne.w	800988a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009992:	4b0c      	ldr	r3, [pc, #48]	@ (80099c4 <xQueueGenericSend+0x200>)
 8009994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	e772      	b.n	800988a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099a6:	f000 faa1 	bl	8009eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099aa:	f000 fdef 	bl	800a58c <xTaskResumeAll>
 80099ae:	e76c      	b.n	800988a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099b2:	f000 fa9b 	bl	8009eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099b6:	f000 fde9 	bl	800a58c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3738      	adds	r7, #56	@ 0x38
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	e000ed04 	.word	0xe000ed04

080099c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b090      	sub	sp, #64	@ 0x40
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80099da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10b      	bne.n	80099f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099f2:	bf00      	nop
 80099f4:	bf00      	nop
 80099f6:	e7fd      	b.n	80099f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d103      	bne.n	8009a06 <xQueueGenericSendFromISR+0x3e>
 80099fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <xQueueGenericSendFromISR+0x42>
 8009a06:	2301      	movs	r3, #1
 8009a08:	e000      	b.n	8009a0c <xQueueGenericSendFromISR+0x44>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10b      	bne.n	8009a28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d103      	bne.n	8009a36 <xQueueGenericSendFromISR+0x6e>
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d101      	bne.n	8009a3a <xQueueGenericSendFromISR+0x72>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e000      	b.n	8009a3c <xQueueGenericSendFromISR+0x74>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10b      	bne.n	8009a58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	623b      	str	r3, [r7, #32]
}
 8009a52:	bf00      	nop
 8009a54:	bf00      	nop
 8009a56:	e7fd      	b.n	8009a54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a58:	f001 ffce 	bl	800b9f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a5c:	f3ef 8211 	mrs	r2, BASEPRI
 8009a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	61fa      	str	r2, [r7, #28]
 8009a72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d302      	bcc.n	8009a8a <xQueueGenericSendFromISR+0xc2>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d12f      	bne.n	8009aea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009aa0:	f000 f994 	bl	8009dcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009aa4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aac:	d112      	bne.n	8009ad4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d016      	beq.n	8009ae4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab8:	3324      	adds	r3, #36	@ 0x24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 ff86 	bl	800a9cc <xTaskRemoveFromEventList>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00e      	beq.n	8009ae4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	e007      	b.n	8009ae4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009ad8:	3301      	adds	r3, #1
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	b25a      	sxtb	r2, r3
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009ae8:	e001      	b.n	8009aee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009af8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3740      	adds	r7, #64	@ 0x40
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08c      	sub	sp, #48	@ 0x30
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b10:	2300      	movs	r3, #0
 8009b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10b      	bne.n	8009b36 <xQueueReceive+0x32>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	623b      	str	r3, [r7, #32]
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	e7fd      	b.n	8009b32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d103      	bne.n	8009b44 <xQueueReceive+0x40>
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <xQueueReceive+0x44>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e000      	b.n	8009b4a <xQueueReceive+0x46>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <xQueueReceive+0x62>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	61fb      	str	r3, [r7, #28]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b66:	f001 f8f7 	bl	800ad58 <xTaskGetSchedulerState>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <xQueueReceive+0x72>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <xQueueReceive+0x76>
 8009b76:	2301      	movs	r3, #1
 8009b78:	e000      	b.n	8009b7c <xQueueReceive+0x78>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10b      	bne.n	8009b98 <xQueueReceive+0x94>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	61bb      	str	r3, [r7, #24]
}
 8009b92:	bf00      	nop
 8009b94:	bf00      	nop
 8009b96:	e7fd      	b.n	8009b94 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b98:	f001 fe4e 	bl	800b838 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01f      	beq.n	8009be8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ba8:	68b9      	ldr	r1, [r7, #8]
 8009baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bac:	f000 f978 	bl	8009ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	1e5a      	subs	r2, r3, #1
 8009bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00f      	beq.n	8009be0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc2:	3310      	adds	r3, #16
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 ff01 	bl	800a9cc <xTaskRemoveFromEventList>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8009cc4 <xQueueReceive+0x1c0>)
 8009bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009be0:	f001 fe5c 	bl	800b89c <vPortExitCritical>
				return pdPASS;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e069      	b.n	8009cbc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bee:	f001 fe55 	bl	800b89c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	e062      	b.n	8009cbc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d106      	bne.n	8009c0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bfc:	f107 0310 	add.w	r3, r7, #16
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 ff47 	bl	800aa94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c06:	2301      	movs	r3, #1
 8009c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c0a:	f001 fe47 	bl	800b89c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c0e:	f000 fcaf 	bl	800a570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c12:	f001 fe11 	bl	800b838 <vPortEnterCritical>
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c1c:	b25b      	sxtb	r3, r3
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c22:	d103      	bne.n	8009c2c <xQueueReceive+0x128>
 8009c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c32:	b25b      	sxtb	r3, r3
 8009c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c38:	d103      	bne.n	8009c42 <xQueueReceive+0x13e>
 8009c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c42:	f001 fe2b 	bl	800b89c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c46:	1d3a      	adds	r2, r7, #4
 8009c48:	f107 0310 	add.w	r3, r7, #16
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 ff36 	bl	800aac0 <xTaskCheckForTimeOut>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d123      	bne.n	8009ca2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c5c:	f000 f998 	bl	8009f90 <prvIsQueueEmpty>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d017      	beq.n	8009c96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c68:	3324      	adds	r3, #36	@ 0x24
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fe5a 	bl	800a928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c76:	f000 f939 	bl	8009eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c7a:	f000 fc87 	bl	800a58c <xTaskResumeAll>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d189      	bne.n	8009b98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009c84:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc4 <xQueueReceive+0x1c0>)
 8009c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	e780      	b.n	8009b98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c98:	f000 f928 	bl	8009eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c9c:	f000 fc76 	bl	800a58c <xTaskResumeAll>
 8009ca0:	e77a      	b.n	8009b98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ca4:	f000 f922 	bl	8009eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ca8:	f000 fc70 	bl	800a58c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cae:	f000 f96f 	bl	8009f90 <prvIsQueueEmpty>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f43f af6f 	beq.w	8009b98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3730      	adds	r7, #48	@ 0x30
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	e000ed04 	.word	0xe000ed04

08009cc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08e      	sub	sp, #56	@ 0x38
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10b      	bne.n	8009cf6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	623b      	str	r3, [r7, #32]
}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	e7fd      	b.n	8009cf2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d103      	bne.n	8009d04 <xQueueReceiveFromISR+0x3c>
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <xQueueReceiveFromISR+0x40>
 8009d04:	2301      	movs	r3, #1
 8009d06:	e000      	b.n	8009d0a <xQueueReceiveFromISR+0x42>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10b      	bne.n	8009d26 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61fb      	str	r3, [r7, #28]
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	e7fd      	b.n	8009d22 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d26:	f001 fe67 	bl	800b9f8 <vPortValidateInterruptPriority>
	__asm volatile
 8009d2a:	f3ef 8211 	mrs	r2, BASEPRI
 8009d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	61ba      	str	r2, [r7, #24]
 8009d40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009d42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d02f      	beq.n	8009db2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d5c:	68b9      	ldr	r1, [r7, #8]
 8009d5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d60:	f000 f89e 	bl	8009ea0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	1e5a      	subs	r2, r3, #1
 8009d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009d6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d74:	d112      	bne.n	8009d9c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d016      	beq.n	8009dac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d80:	3310      	adds	r3, #16
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 fe22 	bl	800a9cc <xTaskRemoveFromEventList>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00e      	beq.n	8009dac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00b      	beq.n	8009dac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	e007      	b.n	8009dac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009da0:	3301      	adds	r3, #1
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	b25a      	sxtb	r2, r3
 8009da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009dac:	2301      	movs	r3, #1
 8009dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db0:	e001      	b.n	8009db6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f383 8811 	msr	BASEPRI, r3
}
 8009dc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3738      	adds	r7, #56	@ 0x38
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10d      	bne.n	8009e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d14d      	bne.n	8009e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 ffcc 	bl	800ad94 <xTaskPriorityDisinherit>
 8009dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	609a      	str	r2, [r3, #8]
 8009e04:	e043      	b.n	8009e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d119      	bne.n	8009e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6858      	ldr	r0, [r3, #4]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e14:	461a      	mov	r2, r3
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	f002 fc7a 	bl	800c710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e24:	441a      	add	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d32b      	bcc.n	8009e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	605a      	str	r2, [r3, #4]
 8009e3e:	e026      	b.n	8009e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	68d8      	ldr	r0, [r3, #12]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e48:	461a      	mov	r2, r3
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	f002 fc60 	bl	800c710 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e58:	425b      	negs	r3, r3
 8009e5a:	441a      	add	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	68da      	ldr	r2, [r3, #12]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d207      	bcs.n	8009e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	689a      	ldr	r2, [r3, #8]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e74:	425b      	negs	r3, r3
 8009e76:	441a      	add	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d105      	bne.n	8009e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009e96:	697b      	ldr	r3, [r7, #20]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d018      	beq.n	8009ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eba:	441a      	add	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68da      	ldr	r2, [r3, #12]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d303      	bcc.n	8009ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68d9      	ldr	r1, [r3, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009edc:	461a      	mov	r2, r3
 8009ede:	6838      	ldr	r0, [r7, #0]
 8009ee0:	f002 fc16 	bl	800c710 <memcpy>
	}
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ef4:	f001 fca0 	bl	800b838 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f00:	e011      	b.n	8009f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d012      	beq.n	8009f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	3324      	adds	r3, #36	@ 0x24
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 fd5c 	bl	800a9cc <xTaskRemoveFromEventList>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f1a:	f000 fe35 	bl	800ab88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	3b01      	subs	r3, #1
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	dce9      	bgt.n	8009f02 <prvUnlockQueue+0x16>
 8009f2e:	e000      	b.n	8009f32 <prvUnlockQueue+0x46>
					break;
 8009f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	22ff      	movs	r2, #255	@ 0xff
 8009f36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009f3a:	f001 fcaf 	bl	800b89c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f3e:	f001 fc7b 	bl	800b838 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f4a:	e011      	b.n	8009f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d012      	beq.n	8009f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3310      	adds	r3, #16
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 fd37 	bl	800a9cc <xTaskRemoveFromEventList>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f64:	f000 fe10 	bl	800ab88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dce9      	bgt.n	8009f4c <prvUnlockQueue+0x60>
 8009f78:	e000      	b.n	8009f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	22ff      	movs	r2, #255	@ 0xff
 8009f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009f84:	f001 fc8a 	bl	800b89c <vPortExitCritical>
}
 8009f88:	bf00      	nop
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f98:	f001 fc4e 	bl	800b838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d102      	bne.n	8009faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	e001      	b.n	8009fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fae:	f001 fc75 	bl	800b89c <vPortExitCritical>

	return xReturn;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fc4:	f001 fc38 	bl	800b838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d102      	bne.n	8009fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	60fb      	str	r3, [r7, #12]
 8009fd8:	e001      	b.n	8009fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fde:	f001 fc5d 	bl	800b89c <vPortExitCritical>

	return xReturn;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	e014      	b.n	800a026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800a03c <vQueueAddToRegistry+0x50>)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10b      	bne.n	800a020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a008:	490c      	ldr	r1, [pc, #48]	@ (800a03c <vQueueAddToRegistry+0x50>)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a012:	4a0a      	ldr	r2, [pc, #40]	@ (800a03c <vQueueAddToRegistry+0x50>)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	00db      	lsls	r3, r3, #3
 800a018:	4413      	add	r3, r2
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a01e:	e006      	b.n	800a02e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3301      	adds	r3, #1
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b07      	cmp	r3, #7
 800a02a:	d9e7      	bls.n	8009ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a02c:	bf00      	nop
 800a02e:	bf00      	nop
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	200009bc 	.word	0x200009bc

0800a040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a050:	f001 fbf2 	bl	800b838 <vPortEnterCritical>
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a05a:	b25b      	sxtb	r3, r3
 800a05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a060:	d103      	bne.n	800a06a <vQueueWaitForMessageRestricted+0x2a>
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a070:	b25b      	sxtb	r3, r3
 800a072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a076:	d103      	bne.n	800a080 <vQueueWaitForMessageRestricted+0x40>
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a080:	f001 fc0c 	bl	800b89c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d106      	bne.n	800a09a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	3324      	adds	r3, #36	@ 0x24
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fc6d 	bl	800a974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a09a:	6978      	ldr	r0, [r7, #20]
 800a09c:	f7ff ff26 	bl	8009eec <prvUnlockQueue>
	}
 800a0a0:	bf00      	nop
 800a0a2:	3718      	adds	r7, #24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08e      	sub	sp, #56	@ 0x38
 800a0ac:	af04      	add	r7, sp, #16
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10b      	bne.n	800a0d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	623b      	str	r3, [r7, #32]
}
 800a0ce:	bf00      	nop
 800a0d0:	bf00      	nop
 800a0d2:	e7fd      	b.n	800a0d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10b      	bne.n	800a0f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	61fb      	str	r3, [r7, #28]
}
 800a0ec:	bf00      	nop
 800a0ee:	bf00      	nop
 800a0f0:	e7fd      	b.n	800a0ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a0f2:	23a8      	movs	r3, #168	@ 0xa8
 800a0f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	2ba8      	cmp	r3, #168	@ 0xa8
 800a0fa:	d00b      	beq.n	800a114 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	61bb      	str	r3, [r7, #24]
}
 800a10e:	bf00      	nop
 800a110:	bf00      	nop
 800a112:	e7fd      	b.n	800a110 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a114:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d01e      	beq.n	800a15a <xTaskCreateStatic+0xb2>
 800a11c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d01b      	beq.n	800a15a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a124:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a12a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a134:	2300      	movs	r3, #0
 800a136:	9303      	str	r3, [sp, #12]
 800a138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13a:	9302      	str	r3, [sp, #8]
 800a13c:	f107 0314 	add.w	r3, r7, #20
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 f851 	bl	800a1f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a154:	f000 f8f6 	bl	800a344 <prvAddNewTaskToReadyList>
 800a158:	e001      	b.n	800a15e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a15e:	697b      	ldr	r3, [r7, #20]
	}
 800a160:	4618      	mov	r0, r3
 800a162:	3728      	adds	r7, #40	@ 0x28
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08c      	sub	sp, #48	@ 0x30
 800a16c:	af04      	add	r7, sp, #16
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	4613      	mov	r3, r2
 800a176:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a178:	88fb      	ldrh	r3, [r7, #6]
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 fc7d 	bl	800ba7c <pvPortMalloc>
 800a182:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00e      	beq.n	800a1a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a18a:	20a8      	movs	r0, #168	@ 0xa8
 800a18c:	f001 fc76 	bl	800ba7c <pvPortMalloc>
 800a190:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d003      	beq.n	800a1a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a19e:	e005      	b.n	800a1ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a1a0:	6978      	ldr	r0, [r7, #20]
 800a1a2:	f001 fd39 	bl	800bc18 <vPortFree>
 800a1a6:	e001      	b.n	800a1ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d017      	beq.n	800a1e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a1ba:	88fa      	ldrh	r2, [r7, #6]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9303      	str	r3, [sp, #12]
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	9302      	str	r3, [sp, #8]
 800a1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	68b9      	ldr	r1, [r7, #8]
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 f80f 	bl	800a1f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1d6:	69f8      	ldr	r0, [r7, #28]
 800a1d8:	f000 f8b4 	bl	800a344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	61bb      	str	r3, [r7, #24]
 800a1e0:	e002      	b.n	800a1e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a1e8:	69bb      	ldr	r3, [r7, #24]
	}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b088      	sub	sp, #32
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	461a      	mov	r2, r3
 800a20c:	21a5      	movs	r1, #165	@ 0xa5
 800a20e:	f002 f9e5 	bl	800c5dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a214:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a21c:	3b01      	subs	r3, #1
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	f023 0307 	bic.w	r3, r3, #7
 800a22a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	f003 0307 	and.w	r3, r3, #7
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00b      	beq.n	800a24e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	617b      	str	r3, [r7, #20]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01f      	beq.n	800a294 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a254:	2300      	movs	r3, #0
 800a256:	61fb      	str	r3, [r7, #28]
 800a258:	e012      	b.n	800a280 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	4413      	add	r3, r2
 800a260:	7819      	ldrb	r1, [r3, #0]
 800a262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	4413      	add	r3, r2
 800a268:	3334      	adds	r3, #52	@ 0x34
 800a26a:	460a      	mov	r2, r1
 800a26c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	4413      	add	r3, r2
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d006      	beq.n	800a288 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	3301      	adds	r3, #1
 800a27e:	61fb      	str	r3, [r7, #28]
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	2b0f      	cmp	r3, #15
 800a284:	d9e9      	bls.n	800a25a <prvInitialiseNewTask+0x66>
 800a286:	e000      	b.n	800a28a <prvInitialiseNewTask+0x96>
			{
				break;
 800a288:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a292:	e003      	b.n	800a29c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a296:	2200      	movs	r2, #0
 800a298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29e:	2b37      	cmp	r3, #55	@ 0x37
 800a2a0:	d901      	bls.n	800a2a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2a2:	2337      	movs	r3, #55	@ 0x37
 800a2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7ff f8a7 	bl	8009410 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c4:	3318      	adds	r3, #24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7ff f8a2 	bl	8009410 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f4:	3354      	adds	r3, #84	@ 0x54
 800a2f6:	224c      	movs	r2, #76	@ 0x4c
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f002 f96e 	bl	800c5dc <memset>
 800a300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a302:	4a0d      	ldr	r2, [pc, #52]	@ (800a338 <prvInitialiseNewTask+0x144>)
 800a304:	659a      	str	r2, [r3, #88]	@ 0x58
 800a306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a308:	4a0c      	ldr	r2, [pc, #48]	@ (800a33c <prvInitialiseNewTask+0x148>)
 800a30a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30e:	4a0c      	ldr	r2, [pc, #48]	@ (800a340 <prvInitialiseNewTask+0x14c>)
 800a310:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	68f9      	ldr	r1, [r7, #12]
 800a316:	69b8      	ldr	r0, [r7, #24]
 800a318:	f001 f95a 	bl	800b5d0 <pxPortInitialiseStack>
 800a31c:	4602      	mov	r2, r0
 800a31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a320:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a32c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a32e:	bf00      	nop
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20005420 	.word	0x20005420
 800a33c:	20005488 	.word	0x20005488
 800a340:	200054f0 	.word	0x200054f0

0800a344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a34c:	f001 fa74 	bl	800b838 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a350:	4b2d      	ldr	r3, [pc, #180]	@ (800a408 <prvAddNewTaskToReadyList+0xc4>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3301      	adds	r3, #1
 800a356:	4a2c      	ldr	r2, [pc, #176]	@ (800a408 <prvAddNewTaskToReadyList+0xc4>)
 800a358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a35a:	4b2c      	ldr	r3, [pc, #176]	@ (800a40c <prvAddNewTaskToReadyList+0xc8>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d109      	bne.n	800a376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a362:	4a2a      	ldr	r2, [pc, #168]	@ (800a40c <prvAddNewTaskToReadyList+0xc8>)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a368:	4b27      	ldr	r3, [pc, #156]	@ (800a408 <prvAddNewTaskToReadyList+0xc4>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d110      	bne.n	800a392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a370:	f000 fc2e 	bl	800abd0 <prvInitialiseTaskLists>
 800a374:	e00d      	b.n	800a392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a376:	4b26      	ldr	r3, [pc, #152]	@ (800a410 <prvAddNewTaskToReadyList+0xcc>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d109      	bne.n	800a392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a37e:	4b23      	ldr	r3, [pc, #140]	@ (800a40c <prvAddNewTaskToReadyList+0xc8>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a388:	429a      	cmp	r2, r3
 800a38a:	d802      	bhi.n	800a392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a38c:	4a1f      	ldr	r2, [pc, #124]	@ (800a40c <prvAddNewTaskToReadyList+0xc8>)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a392:	4b20      	ldr	r3, [pc, #128]	@ (800a414 <prvAddNewTaskToReadyList+0xd0>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3301      	adds	r3, #1
 800a398:	4a1e      	ldr	r2, [pc, #120]	@ (800a414 <prvAddNewTaskToReadyList+0xd0>)
 800a39a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a39c:	4b1d      	ldr	r3, [pc, #116]	@ (800a414 <prvAddNewTaskToReadyList+0xd0>)
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a418 <prvAddNewTaskToReadyList+0xd4>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d903      	bls.n	800a3b8 <prvAddNewTaskToReadyList+0x74>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b4:	4a18      	ldr	r2, [pc, #96]	@ (800a418 <prvAddNewTaskToReadyList+0xd4>)
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3bc:	4613      	mov	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4a15      	ldr	r2, [pc, #84]	@ (800a41c <prvAddNewTaskToReadyList+0xd8>)
 800a3c6:	441a      	add	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	f7ff f82b 	bl	800942a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a3d4:	f001 fa62 	bl	800b89c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a3d8:	4b0d      	ldr	r3, [pc, #52]	@ (800a410 <prvAddNewTaskToReadyList+0xcc>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00e      	beq.n	800a3fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a40c <prvAddNewTaskToReadyList+0xc8>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d207      	bcs.n	800a3fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a420 <prvAddNewTaskToReadyList+0xdc>)
 800a3f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3f4:	601a      	str	r2, [r3, #0]
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3fe:	bf00      	nop
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20000ed0 	.word	0x20000ed0
 800a40c:	200009fc 	.word	0x200009fc
 800a410:	20000edc 	.word	0x20000edc
 800a414:	20000eec 	.word	0x20000eec
 800a418:	20000ed8 	.word	0x20000ed8
 800a41c:	20000a00 	.word	0x20000a00
 800a420:	e000ed04 	.word	0xe000ed04

0800a424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a42c:	2300      	movs	r3, #0
 800a42e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d018      	beq.n	800a468 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a436:	4b14      	ldr	r3, [pc, #80]	@ (800a488 <vTaskDelay+0x64>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00b      	beq.n	800a456 <vTaskDelay+0x32>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	60bb      	str	r3, [r7, #8]
}
 800a450:	bf00      	nop
 800a452:	bf00      	nop
 800a454:	e7fd      	b.n	800a452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a456:	f000 f88b 	bl	800a570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a45a:	2100      	movs	r1, #0
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fd09 	bl	800ae74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a462:	f000 f893 	bl	800a58c <xTaskResumeAll>
 800a466:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d107      	bne.n	800a47e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a46e:	4b07      	ldr	r3, [pc, #28]	@ (800a48c <vTaskDelay+0x68>)
 800a470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a47e:	bf00      	nop
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20000ef8 	.word	0x20000ef8
 800a48c:	e000ed04 	.word	0xe000ed04

0800a490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08a      	sub	sp, #40	@ 0x28
 800a494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a496:	2300      	movs	r3, #0
 800a498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a49e:	463a      	mov	r2, r7
 800a4a0:	1d39      	adds	r1, r7, #4
 800a4a2:	f107 0308 	add.w	r3, r7, #8
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe ff5e 	bl	8009368 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	9202      	str	r2, [sp, #8]
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	460a      	mov	r2, r1
 800a4be:	4924      	ldr	r1, [pc, #144]	@ (800a550 <vTaskStartScheduler+0xc0>)
 800a4c0:	4824      	ldr	r0, [pc, #144]	@ (800a554 <vTaskStartScheduler+0xc4>)
 800a4c2:	f7ff fdf1 	bl	800a0a8 <xTaskCreateStatic>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	4a23      	ldr	r2, [pc, #140]	@ (800a558 <vTaskStartScheduler+0xc8>)
 800a4ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a4cc:	4b22      	ldr	r3, [pc, #136]	@ (800a558 <vTaskStartScheduler+0xc8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	617b      	str	r3, [r7, #20]
 800a4d8:	e001      	b.n	800a4de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d102      	bne.n	800a4ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a4e4:	f000 fd1a 	bl	800af1c <xTimerCreateTimerTask>
 800a4e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d11b      	bne.n	800a528 <vTaskStartScheduler+0x98>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	613b      	str	r3, [r7, #16]
}
 800a502:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a504:	4b15      	ldr	r3, [pc, #84]	@ (800a55c <vTaskStartScheduler+0xcc>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3354      	adds	r3, #84	@ 0x54
 800a50a:	4a15      	ldr	r2, [pc, #84]	@ (800a560 <vTaskStartScheduler+0xd0>)
 800a50c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a50e:	4b15      	ldr	r3, [pc, #84]	@ (800a564 <vTaskStartScheduler+0xd4>)
 800a510:	f04f 32ff 	mov.w	r2, #4294967295
 800a514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a516:	4b14      	ldr	r3, [pc, #80]	@ (800a568 <vTaskStartScheduler+0xd8>)
 800a518:	2201      	movs	r2, #1
 800a51a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a51c:	4b13      	ldr	r3, [pc, #76]	@ (800a56c <vTaskStartScheduler+0xdc>)
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a522:	f001 f8e5 	bl	800b6f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a526:	e00f      	b.n	800a548 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52e:	d10b      	bne.n	800a548 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	60fb      	str	r3, [r7, #12]
}
 800a542:	bf00      	nop
 800a544:	bf00      	nop
 800a546:	e7fd      	b.n	800a544 <vTaskStartScheduler+0xb4>
}
 800a548:	bf00      	nop
 800a54a:	3718      	adds	r7, #24
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	0800c828 	.word	0x0800c828
 800a554:	0800aba1 	.word	0x0800aba1
 800a558:	20000ef4 	.word	0x20000ef4
 800a55c:	200009fc 	.word	0x200009fc
 800a560:	20000030 	.word	0x20000030
 800a564:	20000ef0 	.word	0x20000ef0
 800a568:	20000edc 	.word	0x20000edc
 800a56c:	20000ed4 	.word	0x20000ed4

0800a570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a570:	b480      	push	{r7}
 800a572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a574:	4b04      	ldr	r3, [pc, #16]	@ (800a588 <vTaskSuspendAll+0x18>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3301      	adds	r3, #1
 800a57a:	4a03      	ldr	r2, [pc, #12]	@ (800a588 <vTaskSuspendAll+0x18>)
 800a57c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a57e:	bf00      	nop
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	20000ef8 	.word	0x20000ef8

0800a58c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a596:	2300      	movs	r3, #0
 800a598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a59a:	4b42      	ldr	r3, [pc, #264]	@ (800a6a4 <xTaskResumeAll+0x118>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10b      	bne.n	800a5ba <xTaskResumeAll+0x2e>
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	603b      	str	r3, [r7, #0]
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop
 800a5b8:	e7fd      	b.n	800a5b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5ba:	f001 f93d 	bl	800b838 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5be:	4b39      	ldr	r3, [pc, #228]	@ (800a6a4 <xTaskResumeAll+0x118>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	4a37      	ldr	r2, [pc, #220]	@ (800a6a4 <xTaskResumeAll+0x118>)
 800a5c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5c8:	4b36      	ldr	r3, [pc, #216]	@ (800a6a4 <xTaskResumeAll+0x118>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d162      	bne.n	800a696 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a5d0:	4b35      	ldr	r3, [pc, #212]	@ (800a6a8 <xTaskResumeAll+0x11c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d05e      	beq.n	800a696 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5d8:	e02f      	b.n	800a63a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5da:	4b34      	ldr	r3, [pc, #208]	@ (800a6ac <xTaskResumeAll+0x120>)
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3318      	adds	r3, #24
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fe ff7c 	bl	80094e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe ff77 	bl	80094e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5fa:	4b2d      	ldr	r3, [pc, #180]	@ (800a6b0 <xTaskResumeAll+0x124>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d903      	bls.n	800a60a <xTaskResumeAll+0x7e>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a606:	4a2a      	ldr	r2, [pc, #168]	@ (800a6b0 <xTaskResumeAll+0x124>)
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a60e:	4613      	mov	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4a27      	ldr	r2, [pc, #156]	@ (800a6b4 <xTaskResumeAll+0x128>)
 800a618:	441a      	add	r2, r3
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	3304      	adds	r3, #4
 800a61e:	4619      	mov	r1, r3
 800a620:	4610      	mov	r0, r2
 800a622:	f7fe ff02 	bl	800942a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a62a:	4b23      	ldr	r3, [pc, #140]	@ (800a6b8 <xTaskResumeAll+0x12c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a630:	429a      	cmp	r2, r3
 800a632:	d302      	bcc.n	800a63a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a634:	4b21      	ldr	r3, [pc, #132]	@ (800a6bc <xTaskResumeAll+0x130>)
 800a636:	2201      	movs	r2, #1
 800a638:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a63a:	4b1c      	ldr	r3, [pc, #112]	@ (800a6ac <xTaskResumeAll+0x120>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1cb      	bne.n	800a5da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a648:	f000 fb66 	bl	800ad18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a64c:	4b1c      	ldr	r3, [pc, #112]	@ (800a6c0 <xTaskResumeAll+0x134>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d010      	beq.n	800a67a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a658:	f000 f846 	bl	800a6e8 <xTaskIncrementTick>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d002      	beq.n	800a668 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a662:	4b16      	ldr	r3, [pc, #88]	@ (800a6bc <xTaskResumeAll+0x130>)
 800a664:	2201      	movs	r2, #1
 800a666:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1f1      	bne.n	800a658 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a674:	4b12      	ldr	r3, [pc, #72]	@ (800a6c0 <xTaskResumeAll+0x134>)
 800a676:	2200      	movs	r2, #0
 800a678:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a67a:	4b10      	ldr	r3, [pc, #64]	@ (800a6bc <xTaskResumeAll+0x130>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d009      	beq.n	800a696 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a682:	2301      	movs	r3, #1
 800a684:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a686:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c4 <xTaskResumeAll+0x138>)
 800a688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a696:	f001 f901 	bl	800b89c <vPortExitCritical>

	return xAlreadyYielded;
 800a69a:	68bb      	ldr	r3, [r7, #8]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	20000ef8 	.word	0x20000ef8
 800a6a8:	20000ed0 	.word	0x20000ed0
 800a6ac:	20000e90 	.word	0x20000e90
 800a6b0:	20000ed8 	.word	0x20000ed8
 800a6b4:	20000a00 	.word	0x20000a00
 800a6b8:	200009fc 	.word	0x200009fc
 800a6bc:	20000ee4 	.word	0x20000ee4
 800a6c0:	20000ee0 	.word	0x20000ee0
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a6ce:	4b05      	ldr	r3, [pc, #20]	@ (800a6e4 <xTaskGetTickCount+0x1c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a6d4:	687b      	ldr	r3, [r7, #4]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	20000ed4 	.word	0x20000ed4

0800a6e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6f2:	4b4f      	ldr	r3, [pc, #316]	@ (800a830 <xTaskIncrementTick+0x148>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f040 8090 	bne.w	800a81c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6fc:	4b4d      	ldr	r3, [pc, #308]	@ (800a834 <xTaskIncrementTick+0x14c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3301      	adds	r3, #1
 800a702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a704:	4a4b      	ldr	r2, [pc, #300]	@ (800a834 <xTaskIncrementTick+0x14c>)
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d121      	bne.n	800a754 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a710:	4b49      	ldr	r3, [pc, #292]	@ (800a838 <xTaskIncrementTick+0x150>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00b      	beq.n	800a732 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	603b      	str	r3, [r7, #0]
}
 800a72c:	bf00      	nop
 800a72e:	bf00      	nop
 800a730:	e7fd      	b.n	800a72e <xTaskIncrementTick+0x46>
 800a732:	4b41      	ldr	r3, [pc, #260]	@ (800a838 <xTaskIncrementTick+0x150>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	4b40      	ldr	r3, [pc, #256]	@ (800a83c <xTaskIncrementTick+0x154>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a3e      	ldr	r2, [pc, #248]	@ (800a838 <xTaskIncrementTick+0x150>)
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	4a3e      	ldr	r2, [pc, #248]	@ (800a83c <xTaskIncrementTick+0x154>)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	4b3e      	ldr	r3, [pc, #248]	@ (800a840 <xTaskIncrementTick+0x158>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3301      	adds	r3, #1
 800a74c:	4a3c      	ldr	r2, [pc, #240]	@ (800a840 <xTaskIncrementTick+0x158>)
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	f000 fae2 	bl	800ad18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a754:	4b3b      	ldr	r3, [pc, #236]	@ (800a844 <xTaskIncrementTick+0x15c>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d349      	bcc.n	800a7f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a75e:	4b36      	ldr	r3, [pc, #216]	@ (800a838 <xTaskIncrementTick+0x150>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d104      	bne.n	800a772 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a768:	4b36      	ldr	r3, [pc, #216]	@ (800a844 <xTaskIncrementTick+0x15c>)
 800a76a:	f04f 32ff 	mov.w	r2, #4294967295
 800a76e:	601a      	str	r2, [r3, #0]
					break;
 800a770:	e03f      	b.n	800a7f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a772:	4b31      	ldr	r3, [pc, #196]	@ (800a838 <xTaskIncrementTick+0x150>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	429a      	cmp	r2, r3
 800a788:	d203      	bcs.n	800a792 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a78a:	4a2e      	ldr	r2, [pc, #184]	@ (800a844 <xTaskIncrementTick+0x15c>)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a790:	e02f      	b.n	800a7f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	3304      	adds	r3, #4
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fea4 	bl	80094e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d004      	beq.n	800a7ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	3318      	adds	r3, #24
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fe fe9b 	bl	80094e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7b2:	4b25      	ldr	r3, [pc, #148]	@ (800a848 <xTaskIncrementTick+0x160>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d903      	bls.n	800a7c2 <xTaskIncrementTick+0xda>
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7be:	4a22      	ldr	r2, [pc, #136]	@ (800a848 <xTaskIncrementTick+0x160>)
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a84c <xTaskIncrementTick+0x164>)
 800a7d0:	441a      	add	r2, r3
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4610      	mov	r0, r2
 800a7da:	f7fe fe26 	bl	800942a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a850 <xTaskIncrementTick+0x168>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d3b8      	bcc.n	800a75e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7f0:	e7b5      	b.n	800a75e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7f2:	4b17      	ldr	r3, [pc, #92]	@ (800a850 <xTaskIncrementTick+0x168>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7f8:	4914      	ldr	r1, [pc, #80]	@ (800a84c <xTaskIncrementTick+0x164>)
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	440b      	add	r3, r1
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d901      	bls.n	800a80e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a80a:	2301      	movs	r3, #1
 800a80c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a80e:	4b11      	ldr	r3, [pc, #68]	@ (800a854 <xTaskIncrementTick+0x16c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d007      	beq.n	800a826 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a816:	2301      	movs	r3, #1
 800a818:	617b      	str	r3, [r7, #20]
 800a81a:	e004      	b.n	800a826 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a81c:	4b0e      	ldr	r3, [pc, #56]	@ (800a858 <xTaskIncrementTick+0x170>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3301      	adds	r3, #1
 800a822:	4a0d      	ldr	r2, [pc, #52]	@ (800a858 <xTaskIncrementTick+0x170>)
 800a824:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a826:	697b      	ldr	r3, [r7, #20]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	20000ef8 	.word	0x20000ef8
 800a834:	20000ed4 	.word	0x20000ed4
 800a838:	20000e88 	.word	0x20000e88
 800a83c:	20000e8c 	.word	0x20000e8c
 800a840:	20000ee8 	.word	0x20000ee8
 800a844:	20000ef0 	.word	0x20000ef0
 800a848:	20000ed8 	.word	0x20000ed8
 800a84c:	20000a00 	.word	0x20000a00
 800a850:	200009fc 	.word	0x200009fc
 800a854:	20000ee4 	.word	0x20000ee4
 800a858:	20000ee0 	.word	0x20000ee0

0800a85c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a862:	4b2b      	ldr	r3, [pc, #172]	@ (800a910 <vTaskSwitchContext+0xb4>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a86a:	4b2a      	ldr	r3, [pc, #168]	@ (800a914 <vTaskSwitchContext+0xb8>)
 800a86c:	2201      	movs	r2, #1
 800a86e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a870:	e047      	b.n	800a902 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a872:	4b28      	ldr	r3, [pc, #160]	@ (800a914 <vTaskSwitchContext+0xb8>)
 800a874:	2200      	movs	r2, #0
 800a876:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a878:	4b27      	ldr	r3, [pc, #156]	@ (800a918 <vTaskSwitchContext+0xbc>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	60fb      	str	r3, [r7, #12]
 800a87e:	e011      	b.n	800a8a4 <vTaskSwitchContext+0x48>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10b      	bne.n	800a89e <vTaskSwitchContext+0x42>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	607b      	str	r3, [r7, #4]
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	e7fd      	b.n	800a89a <vTaskSwitchContext+0x3e>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	491d      	ldr	r1, [pc, #116]	@ (800a91c <vTaskSwitchContext+0xc0>)
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	440b      	add	r3, r1
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d0e3      	beq.n	800a880 <vTaskSwitchContext+0x24>
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4a16      	ldr	r2, [pc, #88]	@ (800a91c <vTaskSwitchContext+0xc0>)
 800a8c4:	4413      	add	r3, r2
 800a8c6:	60bb      	str	r3, [r7, #8]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	685a      	ldr	r2, [r3, #4]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	605a      	str	r2, [r3, #4]
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	3308      	adds	r3, #8
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d104      	bne.n	800a8e8 <vTaskSwitchContext+0x8c>
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	605a      	str	r2, [r3, #4]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a920 <vTaskSwitchContext+0xc4>)
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	4a09      	ldr	r2, [pc, #36]	@ (800a918 <vTaskSwitchContext+0xbc>)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8f8:	4b09      	ldr	r3, [pc, #36]	@ (800a920 <vTaskSwitchContext+0xc4>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3354      	adds	r3, #84	@ 0x54
 800a8fe:	4a09      	ldr	r2, [pc, #36]	@ (800a924 <vTaskSwitchContext+0xc8>)
 800a900:	6013      	str	r3, [r2, #0]
}
 800a902:	bf00      	nop
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	20000ef8 	.word	0x20000ef8
 800a914:	20000ee4 	.word	0x20000ee4
 800a918:	20000ed8 	.word	0x20000ed8
 800a91c:	20000a00 	.word	0x20000a00
 800a920:	200009fc 	.word	0x200009fc
 800a924:	20000030 	.word	0x20000030

0800a928 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10b      	bne.n	800a950 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	60fb      	str	r3, [r7, #12]
}
 800a94a:	bf00      	nop
 800a94c:	bf00      	nop
 800a94e:	e7fd      	b.n	800a94c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a950:	4b07      	ldr	r3, [pc, #28]	@ (800a970 <vTaskPlaceOnEventList+0x48>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3318      	adds	r3, #24
 800a956:	4619      	mov	r1, r3
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7fe fd8a 	bl	8009472 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a95e:	2101      	movs	r1, #1
 800a960:	6838      	ldr	r0, [r7, #0]
 800a962:	f000 fa87 	bl	800ae74 <prvAddCurrentTaskToDelayedList>
}
 800a966:	bf00      	nop
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	200009fc 	.word	0x200009fc

0800a974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10b      	bne.n	800a99e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	617b      	str	r3, [r7, #20]
}
 800a998:	bf00      	nop
 800a99a:	bf00      	nop
 800a99c:	e7fd      	b.n	800a99a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a99e:	4b0a      	ldr	r3, [pc, #40]	@ (800a9c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3318      	adds	r3, #24
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f7fe fd3f 	bl	800942a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d002      	beq.n	800a9b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	68b8      	ldr	r0, [r7, #8]
 800a9bc:	f000 fa5a 	bl	800ae74 <prvAddCurrentTaskToDelayedList>
	}
 800a9c0:	bf00      	nop
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	200009fc 	.word	0x200009fc

0800a9cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10b      	bne.n	800a9fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	60fb      	str	r3, [r7, #12]
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop
 800a9f8:	e7fd      	b.n	800a9f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	3318      	adds	r3, #24
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fd70 	bl	80094e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa04:	4b1d      	ldr	r3, [pc, #116]	@ (800aa7c <xTaskRemoveFromEventList+0xb0>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d11d      	bne.n	800aa48 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fe fd67 	bl	80094e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1a:	4b19      	ldr	r3, [pc, #100]	@ (800aa80 <xTaskRemoveFromEventList+0xb4>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d903      	bls.n	800aa2a <xTaskRemoveFromEventList+0x5e>
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa26:	4a16      	ldr	r2, [pc, #88]	@ (800aa80 <xTaskRemoveFromEventList+0xb4>)
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa2e:	4613      	mov	r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4a13      	ldr	r2, [pc, #76]	@ (800aa84 <xTaskRemoveFromEventList+0xb8>)
 800aa38:	441a      	add	r2, r3
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4610      	mov	r0, r2
 800aa42:	f7fe fcf2 	bl	800942a <vListInsertEnd>
 800aa46:	e005      	b.n	800aa54 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	3318      	adds	r3, #24
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	480e      	ldr	r0, [pc, #56]	@ (800aa88 <xTaskRemoveFromEventList+0xbc>)
 800aa50:	f7fe fceb 	bl	800942a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa58:	4b0c      	ldr	r3, [pc, #48]	@ (800aa8c <xTaskRemoveFromEventList+0xc0>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d905      	bls.n	800aa6e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa62:	2301      	movs	r3, #1
 800aa64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa66:	4b0a      	ldr	r3, [pc, #40]	@ (800aa90 <xTaskRemoveFromEventList+0xc4>)
 800aa68:	2201      	movs	r2, #1
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	e001      	b.n	800aa72 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa72:	697b      	ldr	r3, [r7, #20]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	20000ef8 	.word	0x20000ef8
 800aa80:	20000ed8 	.word	0x20000ed8
 800aa84:	20000a00 	.word	0x20000a00
 800aa88:	20000e90 	.word	0x20000e90
 800aa8c:	200009fc 	.word	0x200009fc
 800aa90:	20000ee4 	.word	0x20000ee4

0800aa94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa9c:	4b06      	ldr	r3, [pc, #24]	@ (800aab8 <vTaskInternalSetTimeOutState+0x24>)
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aaa4:	4b05      	ldr	r3, [pc, #20]	@ (800aabc <vTaskInternalSetTimeOutState+0x28>)
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	605a      	str	r2, [r3, #4]
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	20000ee8 	.word	0x20000ee8
 800aabc:	20000ed4 	.word	0x20000ed4

0800aac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10b      	bne.n	800aae8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	613b      	str	r3, [r7, #16]
}
 800aae2:	bf00      	nop
 800aae4:	bf00      	nop
 800aae6:	e7fd      	b.n	800aae4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10b      	bne.n	800ab06 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	60fb      	str	r3, [r7, #12]
}
 800ab00:	bf00      	nop
 800ab02:	bf00      	nop
 800ab04:	e7fd      	b.n	800ab02 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ab06:	f000 fe97 	bl	800b838 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ab80 <xTaskCheckForTimeOut+0xc0>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	69ba      	ldr	r2, [r7, #24]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab22:	d102      	bne.n	800ab2a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab24:	2300      	movs	r3, #0
 800ab26:	61fb      	str	r3, [r7, #28]
 800ab28:	e023      	b.n	800ab72 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	4b15      	ldr	r3, [pc, #84]	@ (800ab84 <xTaskCheckForTimeOut+0xc4>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d007      	beq.n	800ab46 <xTaskCheckForTimeOut+0x86>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d302      	bcc.n	800ab46 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab40:	2301      	movs	r3, #1
 800ab42:	61fb      	str	r3, [r7, #28]
 800ab44:	e015      	b.n	800ab72 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d20b      	bcs.n	800ab68 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	1ad2      	subs	r2, r2, r3
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7ff ff99 	bl	800aa94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	61fb      	str	r3, [r7, #28]
 800ab66:	e004      	b.n	800ab72 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab72:	f000 fe93 	bl	800b89c <vPortExitCritical>

	return xReturn;
 800ab76:	69fb      	ldr	r3, [r7, #28]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3720      	adds	r7, #32
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20000ed4 	.word	0x20000ed4
 800ab84:	20000ee8 	.word	0x20000ee8

0800ab88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab8c:	4b03      	ldr	r3, [pc, #12]	@ (800ab9c <vTaskMissedYield+0x14>)
 800ab8e:	2201      	movs	r2, #1
 800ab90:	601a      	str	r2, [r3, #0]
}
 800ab92:	bf00      	nop
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	20000ee4 	.word	0x20000ee4

0800aba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aba8:	f000 f852 	bl	800ac50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800abac:	4b06      	ldr	r3, [pc, #24]	@ (800abc8 <prvIdleTask+0x28>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d9f9      	bls.n	800aba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800abb4:	4b05      	ldr	r3, [pc, #20]	@ (800abcc <prvIdleTask+0x2c>)
 800abb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800abc4:	e7f0      	b.n	800aba8 <prvIdleTask+0x8>
 800abc6:	bf00      	nop
 800abc8:	20000a00 	.word	0x20000a00
 800abcc:	e000ed04 	.word	0xe000ed04

0800abd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abd6:	2300      	movs	r3, #0
 800abd8:	607b      	str	r3, [r7, #4]
 800abda:	e00c      	b.n	800abf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	4613      	mov	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	4a12      	ldr	r2, [pc, #72]	@ (800ac30 <prvInitialiseTaskLists+0x60>)
 800abe8:	4413      	add	r3, r2
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fbf0 	bl	80093d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	3301      	adds	r3, #1
 800abf4:	607b      	str	r3, [r7, #4]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b37      	cmp	r3, #55	@ 0x37
 800abfa:	d9ef      	bls.n	800abdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abfc:	480d      	ldr	r0, [pc, #52]	@ (800ac34 <prvInitialiseTaskLists+0x64>)
 800abfe:	f7fe fbe7 	bl	80093d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac02:	480d      	ldr	r0, [pc, #52]	@ (800ac38 <prvInitialiseTaskLists+0x68>)
 800ac04:	f7fe fbe4 	bl	80093d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac08:	480c      	ldr	r0, [pc, #48]	@ (800ac3c <prvInitialiseTaskLists+0x6c>)
 800ac0a:	f7fe fbe1 	bl	80093d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac0e:	480c      	ldr	r0, [pc, #48]	@ (800ac40 <prvInitialiseTaskLists+0x70>)
 800ac10:	f7fe fbde 	bl	80093d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac14:	480b      	ldr	r0, [pc, #44]	@ (800ac44 <prvInitialiseTaskLists+0x74>)
 800ac16:	f7fe fbdb 	bl	80093d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac48 <prvInitialiseTaskLists+0x78>)
 800ac1c:	4a05      	ldr	r2, [pc, #20]	@ (800ac34 <prvInitialiseTaskLists+0x64>)
 800ac1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac20:	4b0a      	ldr	r3, [pc, #40]	@ (800ac4c <prvInitialiseTaskLists+0x7c>)
 800ac22:	4a05      	ldr	r2, [pc, #20]	@ (800ac38 <prvInitialiseTaskLists+0x68>)
 800ac24:	601a      	str	r2, [r3, #0]
}
 800ac26:	bf00      	nop
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	20000a00 	.word	0x20000a00
 800ac34:	20000e60 	.word	0x20000e60
 800ac38:	20000e74 	.word	0x20000e74
 800ac3c:	20000e90 	.word	0x20000e90
 800ac40:	20000ea4 	.word	0x20000ea4
 800ac44:	20000ebc 	.word	0x20000ebc
 800ac48:	20000e88 	.word	0x20000e88
 800ac4c:	20000e8c 	.word	0x20000e8c

0800ac50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac56:	e019      	b.n	800ac8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac58:	f000 fdee 	bl	800b838 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac5c:	4b10      	ldr	r3, [pc, #64]	@ (800aca0 <prvCheckTasksWaitingTermination+0x50>)
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	3304      	adds	r3, #4
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fe fc3b 	bl	80094e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aca4 <prvCheckTasksWaitingTermination+0x54>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3b01      	subs	r3, #1
 800ac74:	4a0b      	ldr	r2, [pc, #44]	@ (800aca4 <prvCheckTasksWaitingTermination+0x54>)
 800ac76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac78:	4b0b      	ldr	r3, [pc, #44]	@ (800aca8 <prvCheckTasksWaitingTermination+0x58>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	4a0a      	ldr	r2, [pc, #40]	@ (800aca8 <prvCheckTasksWaitingTermination+0x58>)
 800ac80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac82:	f000 fe0b 	bl	800b89c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f810 	bl	800acac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac8c:	4b06      	ldr	r3, [pc, #24]	@ (800aca8 <prvCheckTasksWaitingTermination+0x58>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e1      	bne.n	800ac58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20000ea4 	.word	0x20000ea4
 800aca4:	20000ed0 	.word	0x20000ed0
 800aca8:	20000eb8 	.word	0x20000eb8

0800acac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3354      	adds	r3, #84	@ 0x54
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 fc97 	bl	800c5ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d108      	bne.n	800acda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800accc:	4618      	mov	r0, r3
 800acce:	f000 ffa3 	bl	800bc18 <vPortFree>
				vPortFree( pxTCB );
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 ffa0 	bl	800bc18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acd8:	e019      	b.n	800ad0e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d103      	bne.n	800acec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 ff97 	bl	800bc18 <vPortFree>
	}
 800acea:	e010      	b.n	800ad0e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d00b      	beq.n	800ad0e <prvDeleteTCB+0x62>
	__asm volatile
 800acf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	60fb      	str	r3, [r7, #12]
}
 800ad08:	bf00      	nop
 800ad0a:	bf00      	nop
 800ad0c:	e7fd      	b.n	800ad0a <prvDeleteTCB+0x5e>
	}
 800ad0e:	bf00      	nop
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
	...

0800ad18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ad50 <prvResetNextTaskUnblockTime+0x38>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d104      	bne.n	800ad32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad28:	4b0a      	ldr	r3, [pc, #40]	@ (800ad54 <prvResetNextTaskUnblockTime+0x3c>)
 800ad2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad30:	e008      	b.n	800ad44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad32:	4b07      	ldr	r3, [pc, #28]	@ (800ad50 <prvResetNextTaskUnblockTime+0x38>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	4a04      	ldr	r2, [pc, #16]	@ (800ad54 <prvResetNextTaskUnblockTime+0x3c>)
 800ad42:	6013      	str	r3, [r2, #0]
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	20000e88 	.word	0x20000e88
 800ad54:	20000ef0 	.word	0x20000ef0

0800ad58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad8c <xTaskGetSchedulerState+0x34>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d102      	bne.n	800ad6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad66:	2301      	movs	r3, #1
 800ad68:	607b      	str	r3, [r7, #4]
 800ad6a:	e008      	b.n	800ad7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad6c:	4b08      	ldr	r3, [pc, #32]	@ (800ad90 <xTaskGetSchedulerState+0x38>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad74:	2302      	movs	r3, #2
 800ad76:	607b      	str	r3, [r7, #4]
 800ad78:	e001      	b.n	800ad7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad7e:	687b      	ldr	r3, [r7, #4]
	}
 800ad80:	4618      	mov	r0, r3
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	20000edc 	.word	0x20000edc
 800ad90:	20000ef8 	.word	0x20000ef8

0800ad94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ada0:	2300      	movs	r3, #0
 800ada2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d058      	beq.n	800ae5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800adaa:	4b2f      	ldr	r3, [pc, #188]	@ (800ae68 <xTaskPriorityDisinherit+0xd4>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d00b      	beq.n	800adcc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800adb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	60fb      	str	r3, [r7, #12]
}
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
 800adca:	e7fd      	b.n	800adc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10b      	bne.n	800adec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800add4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	60bb      	str	r3, [r7, #8]
}
 800ade6:	bf00      	nop
 800ade8:	bf00      	nop
 800adea:	e7fd      	b.n	800ade8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adf0:	1e5a      	subs	r2, r3, #1
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d02c      	beq.n	800ae5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d128      	bne.n	800ae5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fb68 	bl	80094e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae6c <xTaskPriorityDisinherit+0xd8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d903      	bls.n	800ae3c <xTaskPriorityDisinherit+0xa8>
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae38:	4a0c      	ldr	r2, [pc, #48]	@ (800ae6c <xTaskPriorityDisinherit+0xd8>)
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae40:	4613      	mov	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4a09      	ldr	r2, [pc, #36]	@ (800ae70 <xTaskPriorityDisinherit+0xdc>)
 800ae4a:	441a      	add	r2, r3
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	3304      	adds	r3, #4
 800ae50:	4619      	mov	r1, r3
 800ae52:	4610      	mov	r0, r2
 800ae54:	f7fe fae9 	bl	800942a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae5c:	697b      	ldr	r3, [r7, #20]
	}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	200009fc 	.word	0x200009fc
 800ae6c:	20000ed8 	.word	0x20000ed8
 800ae70:	20000a00 	.word	0x20000a00

0800ae74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae7e:	4b21      	ldr	r3, [pc, #132]	@ (800af04 <prvAddCurrentTaskToDelayedList+0x90>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae84:	4b20      	ldr	r3, [pc, #128]	@ (800af08 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fe fb2a 	bl	80094e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae96:	d10a      	bne.n	800aeae <prvAddCurrentTaskToDelayedList+0x3a>
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d007      	beq.n	800aeae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae9e:	4b1a      	ldr	r3, [pc, #104]	@ (800af08 <prvAddCurrentTaskToDelayedList+0x94>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3304      	adds	r3, #4
 800aea4:	4619      	mov	r1, r3
 800aea6:	4819      	ldr	r0, [pc, #100]	@ (800af0c <prvAddCurrentTaskToDelayedList+0x98>)
 800aea8:	f7fe fabf 	bl	800942a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aeac:	e026      	b.n	800aefc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aeb6:	4b14      	ldr	r3, [pc, #80]	@ (800af08 <prvAddCurrentTaskToDelayedList+0x94>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d209      	bcs.n	800aeda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aec6:	4b12      	ldr	r3, [pc, #72]	@ (800af10 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	4b0f      	ldr	r3, [pc, #60]	@ (800af08 <prvAddCurrentTaskToDelayedList+0x94>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	3304      	adds	r3, #4
 800aed0:	4619      	mov	r1, r3
 800aed2:	4610      	mov	r0, r2
 800aed4:	f7fe facd 	bl	8009472 <vListInsert>
}
 800aed8:	e010      	b.n	800aefc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeda:	4b0e      	ldr	r3, [pc, #56]	@ (800af14 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	4b0a      	ldr	r3, [pc, #40]	@ (800af08 <prvAddCurrentTaskToDelayedList+0x94>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3304      	adds	r3, #4
 800aee4:	4619      	mov	r1, r3
 800aee6:	4610      	mov	r0, r2
 800aee8:	f7fe fac3 	bl	8009472 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aeec:	4b0a      	ldr	r3, [pc, #40]	@ (800af18 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d202      	bcs.n	800aefc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aef6:	4a08      	ldr	r2, [pc, #32]	@ (800af18 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	6013      	str	r3, [r2, #0]
}
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	20000ed4 	.word	0x20000ed4
 800af08:	200009fc 	.word	0x200009fc
 800af0c:	20000ebc 	.word	0x20000ebc
 800af10:	20000e8c 	.word	0x20000e8c
 800af14:	20000e88 	.word	0x20000e88
 800af18:	20000ef0 	.word	0x20000ef0

0800af1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08a      	sub	sp, #40	@ 0x28
 800af20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af22:	2300      	movs	r3, #0
 800af24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af26:	f000 fb13 	bl	800b550 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af2a:	4b1d      	ldr	r3, [pc, #116]	@ (800afa0 <xTimerCreateTimerTask+0x84>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d021      	beq.n	800af76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af32:	2300      	movs	r3, #0
 800af34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af36:	2300      	movs	r3, #0
 800af38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af3a:	1d3a      	adds	r2, r7, #4
 800af3c:	f107 0108 	add.w	r1, r7, #8
 800af40:	f107 030c 	add.w	r3, r7, #12
 800af44:	4618      	mov	r0, r3
 800af46:	f7fe fa29 	bl	800939c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	9202      	str	r2, [sp, #8]
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	2302      	movs	r3, #2
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	2300      	movs	r3, #0
 800af5a:	460a      	mov	r2, r1
 800af5c:	4911      	ldr	r1, [pc, #68]	@ (800afa4 <xTimerCreateTimerTask+0x88>)
 800af5e:	4812      	ldr	r0, [pc, #72]	@ (800afa8 <xTimerCreateTimerTask+0x8c>)
 800af60:	f7ff f8a2 	bl	800a0a8 <xTaskCreateStatic>
 800af64:	4603      	mov	r3, r0
 800af66:	4a11      	ldr	r2, [pc, #68]	@ (800afac <xTimerCreateTimerTask+0x90>)
 800af68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af6a:	4b10      	ldr	r3, [pc, #64]	@ (800afac <xTimerCreateTimerTask+0x90>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af72:	2301      	movs	r3, #1
 800af74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10b      	bne.n	800af94 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	613b      	str	r3, [r7, #16]
}
 800af8e:	bf00      	nop
 800af90:	bf00      	nop
 800af92:	e7fd      	b.n	800af90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af94:	697b      	ldr	r3, [r7, #20]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3718      	adds	r7, #24
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	20000f2c 	.word	0x20000f2c
 800afa4:	0800c830 	.word	0x0800c830
 800afa8:	0800b0e9 	.word	0x0800b0e9
 800afac:	20000f30 	.word	0x20000f30

0800afb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b08a      	sub	sp, #40	@ 0x28
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10b      	bne.n	800afe0 <xTimerGenericCommand+0x30>
	__asm volatile
 800afc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afcc:	f383 8811 	msr	BASEPRI, r3
 800afd0:	f3bf 8f6f 	isb	sy
 800afd4:	f3bf 8f4f 	dsb	sy
 800afd8:	623b      	str	r3, [r7, #32]
}
 800afda:	bf00      	nop
 800afdc:	bf00      	nop
 800afde:	e7fd      	b.n	800afdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afe0:	4b19      	ldr	r3, [pc, #100]	@ (800b048 <xTimerGenericCommand+0x98>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d02a      	beq.n	800b03e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2b05      	cmp	r3, #5
 800aff8:	dc18      	bgt.n	800b02c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800affa:	f7ff fead 	bl	800ad58 <xTaskGetSchedulerState>
 800affe:	4603      	mov	r3, r0
 800b000:	2b02      	cmp	r3, #2
 800b002:	d109      	bne.n	800b018 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b004:	4b10      	ldr	r3, [pc, #64]	@ (800b048 <xTimerGenericCommand+0x98>)
 800b006:	6818      	ldr	r0, [r3, #0]
 800b008:	f107 0110 	add.w	r1, r7, #16
 800b00c:	2300      	movs	r3, #0
 800b00e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b010:	f7fe fbd8 	bl	80097c4 <xQueueGenericSend>
 800b014:	6278      	str	r0, [r7, #36]	@ 0x24
 800b016:	e012      	b.n	800b03e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b018:	4b0b      	ldr	r3, [pc, #44]	@ (800b048 <xTimerGenericCommand+0x98>)
 800b01a:	6818      	ldr	r0, [r3, #0]
 800b01c:	f107 0110 	add.w	r1, r7, #16
 800b020:	2300      	movs	r3, #0
 800b022:	2200      	movs	r2, #0
 800b024:	f7fe fbce 	bl	80097c4 <xQueueGenericSend>
 800b028:	6278      	str	r0, [r7, #36]	@ 0x24
 800b02a:	e008      	b.n	800b03e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b02c:	4b06      	ldr	r3, [pc, #24]	@ (800b048 <xTimerGenericCommand+0x98>)
 800b02e:	6818      	ldr	r0, [r3, #0]
 800b030:	f107 0110 	add.w	r1, r7, #16
 800b034:	2300      	movs	r3, #0
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	f7fe fcc6 	bl	80099c8 <xQueueGenericSendFromISR>
 800b03c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b040:	4618      	mov	r0, r3
 800b042:	3728      	adds	r7, #40	@ 0x28
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20000f2c 	.word	0x20000f2c

0800b04c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b088      	sub	sp, #32
 800b050:	af02      	add	r7, sp, #8
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b056:	4b23      	ldr	r3, [pc, #140]	@ (800b0e4 <prvProcessExpiredTimer+0x98>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	3304      	adds	r3, #4
 800b064:	4618      	mov	r0, r3
 800b066:	f7fe fa3d 	bl	80094e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b070:	f003 0304 	and.w	r3, r3, #4
 800b074:	2b00      	cmp	r3, #0
 800b076:	d023      	beq.n	800b0c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	699a      	ldr	r2, [r3, #24]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	18d1      	adds	r1, r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	6978      	ldr	r0, [r7, #20]
 800b086:	f000 f8d5 	bl	800b234 <prvInsertTimerInActiveList>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d020      	beq.n	800b0d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b090:	2300      	movs	r3, #0
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	2300      	movs	r3, #0
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	2100      	movs	r1, #0
 800b09a:	6978      	ldr	r0, [r7, #20]
 800b09c:	f7ff ff88 	bl	800afb0 <xTimerGenericCommand>
 800b0a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d114      	bne.n	800b0d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	60fb      	str	r3, [r7, #12]
}
 800b0ba:	bf00      	nop
 800b0bc:	bf00      	nop
 800b0be:	e7fd      	b.n	800b0bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0c6:	f023 0301 	bic.w	r3, r3, #1
 800b0ca:	b2da      	uxtb	r2, r3
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	6978      	ldr	r0, [r7, #20]
 800b0d8:	4798      	blx	r3
}
 800b0da:	bf00      	nop
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000f24 	.word	0x20000f24

0800b0e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0f0:	f107 0308 	add.w	r3, r7, #8
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 f859 	bl	800b1ac <prvGetNextExpireTime>
 800b0fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	4619      	mov	r1, r3
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f000 f805 	bl	800b110 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b106:	f000 f8d7 	bl	800b2b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b10a:	bf00      	nop
 800b10c:	e7f0      	b.n	800b0f0 <prvTimerTask+0x8>
	...

0800b110 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b11a:	f7ff fa29 	bl	800a570 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b11e:	f107 0308 	add.w	r3, r7, #8
 800b122:	4618      	mov	r0, r3
 800b124:	f000 f866 	bl	800b1f4 <prvSampleTimeNow>
 800b128:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d130      	bne.n	800b192 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10a      	bne.n	800b14c <prvProcessTimerOrBlockTask+0x3c>
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d806      	bhi.n	800b14c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b13e:	f7ff fa25 	bl	800a58c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b142:	68f9      	ldr	r1, [r7, #12]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7ff ff81 	bl	800b04c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b14a:	e024      	b.n	800b196 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d008      	beq.n	800b164 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b152:	4b13      	ldr	r3, [pc, #76]	@ (800b1a0 <prvProcessTimerOrBlockTask+0x90>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <prvProcessTimerOrBlockTask+0x50>
 800b15c:	2301      	movs	r3, #1
 800b15e:	e000      	b.n	800b162 <prvProcessTimerOrBlockTask+0x52>
 800b160:	2300      	movs	r3, #0
 800b162:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b164:	4b0f      	ldr	r3, [pc, #60]	@ (800b1a4 <prvProcessTimerOrBlockTask+0x94>)
 800b166:	6818      	ldr	r0, [r3, #0]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	4619      	mov	r1, r3
 800b172:	f7fe ff65 	bl	800a040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b176:	f7ff fa09 	bl	800a58c <xTaskResumeAll>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10a      	bne.n	800b196 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b180:	4b09      	ldr	r3, [pc, #36]	@ (800b1a8 <prvProcessTimerOrBlockTask+0x98>)
 800b182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b186:	601a      	str	r2, [r3, #0]
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	f3bf 8f6f 	isb	sy
}
 800b190:	e001      	b.n	800b196 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b192:	f7ff f9fb 	bl	800a58c <xTaskResumeAll>
}
 800b196:	bf00      	nop
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20000f28 	.word	0x20000f28
 800b1a4:	20000f2c 	.word	0x20000f2c
 800b1a8:	e000ed04 	.word	0xe000ed04

0800b1ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b1b4:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f0 <prvGetNextExpireTime+0x44>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <prvGetNextExpireTime+0x16>
 800b1be:	2201      	movs	r2, #1
 800b1c0:	e000      	b.n	800b1c4 <prvGetNextExpireTime+0x18>
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d105      	bne.n	800b1dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1d0:	4b07      	ldr	r3, [pc, #28]	@ (800b1f0 <prvGetNextExpireTime+0x44>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]
 800b1da:	e001      	b.n	800b1e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	20000f24 	.word	0x20000f24

0800b1f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1fc:	f7ff fa64 	bl	800a6c8 <xTaskGetTickCount>
 800b200:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b202:	4b0b      	ldr	r3, [pc, #44]	@ (800b230 <prvSampleTimeNow+0x3c>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d205      	bcs.n	800b218 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b20c:	f000 f93a 	bl	800b484 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	e002      	b.n	800b21e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b21e:	4a04      	ldr	r2, [pc, #16]	@ (800b230 <prvSampleTimeNow+0x3c>)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b224:	68fb      	ldr	r3, [r7, #12]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	20000f34 	.word	0x20000f34

0800b234 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
 800b240:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	429a      	cmp	r2, r3
 800b258:	d812      	bhi.n	800b280 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	1ad2      	subs	r2, r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	429a      	cmp	r2, r3
 800b266:	d302      	bcc.n	800b26e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b268:	2301      	movs	r3, #1
 800b26a:	617b      	str	r3, [r7, #20]
 800b26c:	e01b      	b.n	800b2a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b26e:	4b10      	ldr	r3, [pc, #64]	@ (800b2b0 <prvInsertTimerInActiveList+0x7c>)
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	3304      	adds	r3, #4
 800b276:	4619      	mov	r1, r3
 800b278:	4610      	mov	r0, r2
 800b27a:	f7fe f8fa 	bl	8009472 <vListInsert>
 800b27e:	e012      	b.n	800b2a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	d206      	bcs.n	800b296 <prvInsertTimerInActiveList+0x62>
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d302      	bcc.n	800b296 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b290:	2301      	movs	r3, #1
 800b292:	617b      	str	r3, [r7, #20]
 800b294:	e007      	b.n	800b2a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b296:	4b07      	ldr	r3, [pc, #28]	@ (800b2b4 <prvInsertTimerInActiveList+0x80>)
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	3304      	adds	r3, #4
 800b29e:	4619      	mov	r1, r3
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	f7fe f8e6 	bl	8009472 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b2a6:	697b      	ldr	r3, [r7, #20]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3718      	adds	r7, #24
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	20000f28 	.word	0x20000f28
 800b2b4:	20000f24 	.word	0x20000f24

0800b2b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b08e      	sub	sp, #56	@ 0x38
 800b2bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2be:	e0ce      	b.n	800b45e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	da19      	bge.n	800b2fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b2c6:	1d3b      	adds	r3, r7, #4
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10b      	bne.n	800b2ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	61fb      	str	r3, [r7, #28]
}
 800b2e4:	bf00      	nop
 800b2e6:	bf00      	nop
 800b2e8:	e7fd      	b.n	800b2e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2f0:	6850      	ldr	r0, [r2, #4]
 800b2f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2f4:	6892      	ldr	r2, [r2, #8]
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f2c0 80ae 	blt.w	800b45e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d004      	beq.n	800b318 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b310:	3304      	adds	r3, #4
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe f8e6 	bl	80094e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b318:	463b      	mov	r3, r7
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7ff ff6a 	bl	800b1f4 <prvSampleTimeNow>
 800b320:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b09      	cmp	r3, #9
 800b326:	f200 8097 	bhi.w	800b458 <prvProcessReceivedCommands+0x1a0>
 800b32a:	a201      	add	r2, pc, #4	@ (adr r2, 800b330 <prvProcessReceivedCommands+0x78>)
 800b32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b330:	0800b359 	.word	0x0800b359
 800b334:	0800b359 	.word	0x0800b359
 800b338:	0800b359 	.word	0x0800b359
 800b33c:	0800b3cf 	.word	0x0800b3cf
 800b340:	0800b3e3 	.word	0x0800b3e3
 800b344:	0800b42f 	.word	0x0800b42f
 800b348:	0800b359 	.word	0x0800b359
 800b34c:	0800b359 	.word	0x0800b359
 800b350:	0800b3cf 	.word	0x0800b3cf
 800b354:	0800b3e3 	.word	0x0800b3e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b35e:	f043 0301 	orr.w	r3, r3, #1
 800b362:	b2da      	uxtb	r2, r3
 800b364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b366:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	18d1      	adds	r1, r2, r3
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b378:	f7ff ff5c 	bl	800b234 <prvInsertTimerInActiveList>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d06c      	beq.n	800b45c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b388:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b00      	cmp	r3, #0
 800b396:	d061      	beq.n	800b45c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	441a      	add	r2, r3
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3aa:	f7ff fe01 	bl	800afb0 <xTimerGenericCommand>
 800b3ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d152      	bne.n	800b45c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ba:	f383 8811 	msr	BASEPRI, r3
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	61bb      	str	r3, [r7, #24]
}
 800b3c8:	bf00      	nop
 800b3ca:	bf00      	nop
 800b3cc:	e7fd      	b.n	800b3ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3d4:	f023 0301 	bic.w	r3, r3, #1
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b3e0:	e03d      	b.n	800b45e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3e8:	f043 0301 	orr.w	r3, r3, #1
 800b3ec:	b2da      	uxtb	r2, r3
 800b3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10b      	bne.n	800b41a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	617b      	str	r3, [r7, #20]
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop
 800b418:	e7fd      	b.n	800b416 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41c:	699a      	ldr	r2, [r3, #24]
 800b41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b420:	18d1      	adds	r1, r2, r3
 800b422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b428:	f7ff ff04 	bl	800b234 <prvInsertTimerInActiveList>
					break;
 800b42c:	e017      	b.n	800b45e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b430:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b434:	f003 0302 	and.w	r3, r3, #2
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d103      	bne.n	800b444 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b43c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b43e:	f000 fbeb 	bl	800bc18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b442:	e00c      	b.n	800b45e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b446:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b44a:	f023 0301 	bic.w	r3, r3, #1
 800b44e:	b2da      	uxtb	r2, r3
 800b450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b452:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b456:	e002      	b.n	800b45e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b458:	bf00      	nop
 800b45a:	e000      	b.n	800b45e <prvProcessReceivedCommands+0x1a6>
					break;
 800b45c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b45e:	4b08      	ldr	r3, [pc, #32]	@ (800b480 <prvProcessReceivedCommands+0x1c8>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	1d39      	adds	r1, r7, #4
 800b464:	2200      	movs	r2, #0
 800b466:	4618      	mov	r0, r3
 800b468:	f7fe fb4c 	bl	8009b04 <xQueueReceive>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f47f af26 	bne.w	800b2c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop
 800b478:	3730      	adds	r7, #48	@ 0x30
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20000f2c 	.word	0x20000f2c

0800b484 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b48a:	e049      	b.n	800b520 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b48c:	4b2e      	ldr	r3, [pc, #184]	@ (800b548 <prvSwitchTimerLists+0xc4>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b496:	4b2c      	ldr	r3, [pc, #176]	@ (800b548 <prvSwitchTimerLists+0xc4>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fe f81d 	bl	80094e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4b8:	f003 0304 	and.w	r3, r3, #4
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d02f      	beq.n	800b520 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d90e      	bls.n	800b4f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4de:	4b1a      	ldr	r3, [pc, #104]	@ (800b548 <prvSwitchTimerLists+0xc4>)
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	f7fd ffc2 	bl	8009472 <vListInsert>
 800b4ee:	e017      	b.n	800b520 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f7ff fd58 	bl	800afb0 <xTimerGenericCommand>
 800b500:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10b      	bne.n	800b520 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	603b      	str	r3, [r7, #0]
}
 800b51a:	bf00      	nop
 800b51c:	bf00      	nop
 800b51e:	e7fd      	b.n	800b51c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b520:	4b09      	ldr	r3, [pc, #36]	@ (800b548 <prvSwitchTimerLists+0xc4>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1b0      	bne.n	800b48c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b52a:	4b07      	ldr	r3, [pc, #28]	@ (800b548 <prvSwitchTimerLists+0xc4>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b530:	4b06      	ldr	r3, [pc, #24]	@ (800b54c <prvSwitchTimerLists+0xc8>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a04      	ldr	r2, [pc, #16]	@ (800b548 <prvSwitchTimerLists+0xc4>)
 800b536:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b538:	4a04      	ldr	r2, [pc, #16]	@ (800b54c <prvSwitchTimerLists+0xc8>)
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	6013      	str	r3, [r2, #0]
}
 800b53e:	bf00      	nop
 800b540:	3718      	adds	r7, #24
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	20000f24 	.word	0x20000f24
 800b54c:	20000f28 	.word	0x20000f28

0800b550 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b556:	f000 f96f 	bl	800b838 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b55a:	4b15      	ldr	r3, [pc, #84]	@ (800b5b0 <prvCheckForValidListAndQueue+0x60>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d120      	bne.n	800b5a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b562:	4814      	ldr	r0, [pc, #80]	@ (800b5b4 <prvCheckForValidListAndQueue+0x64>)
 800b564:	f7fd ff34 	bl	80093d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b568:	4813      	ldr	r0, [pc, #76]	@ (800b5b8 <prvCheckForValidListAndQueue+0x68>)
 800b56a:	f7fd ff31 	bl	80093d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b56e:	4b13      	ldr	r3, [pc, #76]	@ (800b5bc <prvCheckForValidListAndQueue+0x6c>)
 800b570:	4a10      	ldr	r2, [pc, #64]	@ (800b5b4 <prvCheckForValidListAndQueue+0x64>)
 800b572:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b574:	4b12      	ldr	r3, [pc, #72]	@ (800b5c0 <prvCheckForValidListAndQueue+0x70>)
 800b576:	4a10      	ldr	r2, [pc, #64]	@ (800b5b8 <prvCheckForValidListAndQueue+0x68>)
 800b578:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b57a:	2300      	movs	r3, #0
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	4b11      	ldr	r3, [pc, #68]	@ (800b5c4 <prvCheckForValidListAndQueue+0x74>)
 800b580:	4a11      	ldr	r2, [pc, #68]	@ (800b5c8 <prvCheckForValidListAndQueue+0x78>)
 800b582:	2110      	movs	r1, #16
 800b584:	200a      	movs	r0, #10
 800b586:	f7fe f841 	bl	800960c <xQueueGenericCreateStatic>
 800b58a:	4603      	mov	r3, r0
 800b58c:	4a08      	ldr	r2, [pc, #32]	@ (800b5b0 <prvCheckForValidListAndQueue+0x60>)
 800b58e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b590:	4b07      	ldr	r3, [pc, #28]	@ (800b5b0 <prvCheckForValidListAndQueue+0x60>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d005      	beq.n	800b5a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b598:	4b05      	ldr	r3, [pc, #20]	@ (800b5b0 <prvCheckForValidListAndQueue+0x60>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	490b      	ldr	r1, [pc, #44]	@ (800b5cc <prvCheckForValidListAndQueue+0x7c>)
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fe fd24 	bl	8009fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5a4:	f000 f97a 	bl	800b89c <vPortExitCritical>
}
 800b5a8:	bf00      	nop
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20000f2c 	.word	0x20000f2c
 800b5b4:	20000efc 	.word	0x20000efc
 800b5b8:	20000f10 	.word	0x20000f10
 800b5bc:	20000f24 	.word	0x20000f24
 800b5c0:	20000f28 	.word	0x20000f28
 800b5c4:	20000fd8 	.word	0x20000fd8
 800b5c8:	20000f38 	.word	0x20000f38
 800b5cc:	0800c838 	.word	0x0800c838

0800b5d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	3b04      	subs	r3, #4
 800b5e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b5e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3b04      	subs	r3, #4
 800b5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f023 0201 	bic.w	r2, r3, #1
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3b04      	subs	r3, #4
 800b5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b600:	4a0c      	ldr	r2, [pc, #48]	@ (800b634 <pxPortInitialiseStack+0x64>)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3b14      	subs	r3, #20
 800b60a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	3b04      	subs	r3, #4
 800b616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f06f 0202 	mvn.w	r2, #2
 800b61e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3b20      	subs	r3, #32
 800b624:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b626:	68fb      	ldr	r3, [r7, #12]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	0800b639 	.word	0x0800b639

0800b638 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b642:	4b13      	ldr	r3, [pc, #76]	@ (800b690 <prvTaskExitError+0x58>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b64a:	d00b      	beq.n	800b664 <prvTaskExitError+0x2c>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	60fb      	str	r3, [r7, #12]
}
 800b65e:	bf00      	nop
 800b660:	bf00      	nop
 800b662:	e7fd      	b.n	800b660 <prvTaskExitError+0x28>
	__asm volatile
 800b664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b668:	f383 8811 	msr	BASEPRI, r3
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f3bf 8f4f 	dsb	sy
 800b674:	60bb      	str	r3, [r7, #8]
}
 800b676:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b678:	bf00      	nop
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0fc      	beq.n	800b67a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b680:	bf00      	nop
 800b682:	bf00      	nop
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	2000002c 	.word	0x2000002c
	...

0800b6a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6a0:	4b07      	ldr	r3, [pc, #28]	@ (800b6c0 <pxCurrentTCBConst2>)
 800b6a2:	6819      	ldr	r1, [r3, #0]
 800b6a4:	6808      	ldr	r0, [r1, #0]
 800b6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6aa:	f380 8809 	msr	PSP, r0
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f04f 0000 	mov.w	r0, #0
 800b6b6:	f380 8811 	msr	BASEPRI, r0
 800b6ba:	4770      	bx	lr
 800b6bc:	f3af 8000 	nop.w

0800b6c0 <pxCurrentTCBConst2>:
 800b6c0:	200009fc 	.word	0x200009fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6c4:	bf00      	nop
 800b6c6:	bf00      	nop

0800b6c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6c8:	4808      	ldr	r0, [pc, #32]	@ (800b6ec <prvPortStartFirstTask+0x24>)
 800b6ca:	6800      	ldr	r0, [r0, #0]
 800b6cc:	6800      	ldr	r0, [r0, #0]
 800b6ce:	f380 8808 	msr	MSP, r0
 800b6d2:	f04f 0000 	mov.w	r0, #0
 800b6d6:	f380 8814 	msr	CONTROL, r0
 800b6da:	b662      	cpsie	i
 800b6dc:	b661      	cpsie	f
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	df00      	svc	0
 800b6e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6ea:	bf00      	nop
 800b6ec:	e000ed08 	.word	0xe000ed08

0800b6f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b6f6:	4b47      	ldr	r3, [pc, #284]	@ (800b814 <xPortStartScheduler+0x124>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a47      	ldr	r2, [pc, #284]	@ (800b818 <xPortStartScheduler+0x128>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d10b      	bne.n	800b718 <xPortStartScheduler+0x28>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	613b      	str	r3, [r7, #16]
}
 800b712:	bf00      	nop
 800b714:	bf00      	nop
 800b716:	e7fd      	b.n	800b714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b718:	4b3e      	ldr	r3, [pc, #248]	@ (800b814 <xPortStartScheduler+0x124>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a3f      	ldr	r2, [pc, #252]	@ (800b81c <xPortStartScheduler+0x12c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d10b      	bne.n	800b73a <xPortStartScheduler+0x4a>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	60fb      	str	r3, [r7, #12]
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop
 800b738:	e7fd      	b.n	800b736 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b73a:	4b39      	ldr	r3, [pc, #228]	@ (800b820 <xPortStartScheduler+0x130>)
 800b73c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	b2db      	uxtb	r3, r3
 800b744:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	22ff      	movs	r2, #255	@ 0xff
 800b74a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	b2db      	uxtb	r3, r3
 800b752:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b754:	78fb      	ldrb	r3, [r7, #3]
 800b756:	b2db      	uxtb	r3, r3
 800b758:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b75c:	b2da      	uxtb	r2, r3
 800b75e:	4b31      	ldr	r3, [pc, #196]	@ (800b824 <xPortStartScheduler+0x134>)
 800b760:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b762:	4b31      	ldr	r3, [pc, #196]	@ (800b828 <xPortStartScheduler+0x138>)
 800b764:	2207      	movs	r2, #7
 800b766:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b768:	e009      	b.n	800b77e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b76a:	4b2f      	ldr	r3, [pc, #188]	@ (800b828 <xPortStartScheduler+0x138>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3b01      	subs	r3, #1
 800b770:	4a2d      	ldr	r2, [pc, #180]	@ (800b828 <xPortStartScheduler+0x138>)
 800b772:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b774:	78fb      	ldrb	r3, [r7, #3]
 800b776:	b2db      	uxtb	r3, r3
 800b778:	005b      	lsls	r3, r3, #1
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b77e:	78fb      	ldrb	r3, [r7, #3]
 800b780:	b2db      	uxtb	r3, r3
 800b782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b786:	2b80      	cmp	r3, #128	@ 0x80
 800b788:	d0ef      	beq.n	800b76a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b78a:	4b27      	ldr	r3, [pc, #156]	@ (800b828 <xPortStartScheduler+0x138>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f1c3 0307 	rsb	r3, r3, #7
 800b792:	2b04      	cmp	r3, #4
 800b794:	d00b      	beq.n	800b7ae <xPortStartScheduler+0xbe>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	60bb      	str	r3, [r7, #8]
}
 800b7a8:	bf00      	nop
 800b7aa:	bf00      	nop
 800b7ac:	e7fd      	b.n	800b7aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7ae:	4b1e      	ldr	r3, [pc, #120]	@ (800b828 <xPortStartScheduler+0x138>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	021b      	lsls	r3, r3, #8
 800b7b4:	4a1c      	ldr	r2, [pc, #112]	@ (800b828 <xPortStartScheduler+0x138>)
 800b7b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7b8:	4b1b      	ldr	r3, [pc, #108]	@ (800b828 <xPortStartScheduler+0x138>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b7c0:	4a19      	ldr	r2, [pc, #100]	@ (800b828 <xPortStartScheduler+0x138>)
 800b7c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7cc:	4b17      	ldr	r3, [pc, #92]	@ (800b82c <xPortStartScheduler+0x13c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a16      	ldr	r2, [pc, #88]	@ (800b82c <xPortStartScheduler+0x13c>)
 800b7d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b7d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7d8:	4b14      	ldr	r3, [pc, #80]	@ (800b82c <xPortStartScheduler+0x13c>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a13      	ldr	r2, [pc, #76]	@ (800b82c <xPortStartScheduler+0x13c>)
 800b7de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b7e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7e4:	f000 f8da 	bl	800b99c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7e8:	4b11      	ldr	r3, [pc, #68]	@ (800b830 <xPortStartScheduler+0x140>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7ee:	f000 f8f9 	bl	800b9e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7f2:	4b10      	ldr	r3, [pc, #64]	@ (800b834 <xPortStartScheduler+0x144>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a0f      	ldr	r2, [pc, #60]	@ (800b834 <xPortStartScheduler+0x144>)
 800b7f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b7fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7fe:	f7ff ff63 	bl	800b6c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b802:	f7ff f82b 	bl	800a85c <vTaskSwitchContext>
	prvTaskExitError();
 800b806:	f7ff ff17 	bl	800b638 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	e000ed00 	.word	0xe000ed00
 800b818:	410fc271 	.word	0x410fc271
 800b81c:	410fc270 	.word	0x410fc270
 800b820:	e000e400 	.word	0xe000e400
 800b824:	20001028 	.word	0x20001028
 800b828:	2000102c 	.word	0x2000102c
 800b82c:	e000ed20 	.word	0xe000ed20
 800b830:	2000002c 	.word	0x2000002c
 800b834:	e000ef34 	.word	0xe000ef34

0800b838 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	607b      	str	r3, [r7, #4]
}
 800b850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b852:	4b10      	ldr	r3, [pc, #64]	@ (800b894 <vPortEnterCritical+0x5c>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3301      	adds	r3, #1
 800b858:	4a0e      	ldr	r2, [pc, #56]	@ (800b894 <vPortEnterCritical+0x5c>)
 800b85a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b85c:	4b0d      	ldr	r3, [pc, #52]	@ (800b894 <vPortEnterCritical+0x5c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d110      	bne.n	800b886 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b864:	4b0c      	ldr	r3, [pc, #48]	@ (800b898 <vPortEnterCritical+0x60>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00b      	beq.n	800b886 <vPortEnterCritical+0x4e>
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	603b      	str	r3, [r7, #0]
}
 800b880:	bf00      	nop
 800b882:	bf00      	nop
 800b884:	e7fd      	b.n	800b882 <vPortEnterCritical+0x4a>
	}
}
 800b886:	bf00      	nop
 800b888:	370c      	adds	r7, #12
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	2000002c 	.word	0x2000002c
 800b898:	e000ed04 	.word	0xe000ed04

0800b89c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8a2:	4b12      	ldr	r3, [pc, #72]	@ (800b8ec <vPortExitCritical+0x50>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10b      	bne.n	800b8c2 <vPortExitCritical+0x26>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	607b      	str	r3, [r7, #4]
}
 800b8bc:	bf00      	nop
 800b8be:	bf00      	nop
 800b8c0:	e7fd      	b.n	800b8be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b8c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8ec <vPortExitCritical+0x50>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	4a08      	ldr	r2, [pc, #32]	@ (800b8ec <vPortExitCritical+0x50>)
 800b8ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8cc:	4b07      	ldr	r3, [pc, #28]	@ (800b8ec <vPortExitCritical+0x50>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d105      	bne.n	800b8e0 <vPortExitCritical+0x44>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	f383 8811 	msr	BASEPRI, r3
}
 800b8de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	2000002c 	.word	0x2000002c

0800b8f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8f0:	f3ef 8009 	mrs	r0, PSP
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	4b15      	ldr	r3, [pc, #84]	@ (800b950 <pxCurrentTCBConst>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	f01e 0f10 	tst.w	lr, #16
 800b900:	bf08      	it	eq
 800b902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90a:	6010      	str	r0, [r2, #0]
 800b90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b910:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b914:	f380 8811 	msr	BASEPRI, r0
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f7fe ff9c 	bl	800a85c <vTaskSwitchContext>
 800b924:	f04f 0000 	mov.w	r0, #0
 800b928:	f380 8811 	msr	BASEPRI, r0
 800b92c:	bc09      	pop	{r0, r3}
 800b92e:	6819      	ldr	r1, [r3, #0]
 800b930:	6808      	ldr	r0, [r1, #0]
 800b932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b936:	f01e 0f10 	tst.w	lr, #16
 800b93a:	bf08      	it	eq
 800b93c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b940:	f380 8809 	msr	PSP, r0
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	f3af 8000 	nop.w

0800b950 <pxCurrentTCBConst>:
 800b950:	200009fc 	.word	0x200009fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b954:	bf00      	nop
 800b956:	bf00      	nop

0800b958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	607b      	str	r3, [r7, #4]
}
 800b970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b972:	f7fe feb9 	bl	800a6e8 <xTaskIncrementTick>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b97c:	4b06      	ldr	r3, [pc, #24]	@ (800b998 <xPortSysTickHandler+0x40>)
 800b97e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	2300      	movs	r3, #0
 800b986:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	f383 8811 	msr	BASEPRI, r3
}
 800b98e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b990:	bf00      	nop
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	e000ed04 	.word	0xe000ed04

0800b99c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d0 <vPortSetupTimerInterrupt+0x34>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d4 <vPortSetupTimerInterrupt+0x38>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d8 <vPortSetupTimerInterrupt+0x3c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a0a      	ldr	r2, [pc, #40]	@ (800b9dc <vPortSetupTimerInterrupt+0x40>)
 800b9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9b6:	099b      	lsrs	r3, r3, #6
 800b9b8:	4a09      	ldr	r2, [pc, #36]	@ (800b9e0 <vPortSetupTimerInterrupt+0x44>)
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9be:	4b04      	ldr	r3, [pc, #16]	@ (800b9d0 <vPortSetupTimerInterrupt+0x34>)
 800b9c0:	2207      	movs	r2, #7
 800b9c2:	601a      	str	r2, [r3, #0]
}
 800b9c4:	bf00      	nop
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	e000e010 	.word	0xe000e010
 800b9d4:	e000e018 	.word	0xe000e018
 800b9d8:	20000000 	.word	0x20000000
 800b9dc:	10624dd3 	.word	0x10624dd3
 800b9e0:	e000e014 	.word	0xe000e014

0800b9e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b9f4 <vPortEnableVFP+0x10>
 800b9e8:	6801      	ldr	r1, [r0, #0]
 800b9ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b9ee:	6001      	str	r1, [r0, #0]
 800b9f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9f2:	bf00      	nop
 800b9f4:	e000ed88 	.word	0xe000ed88

0800b9f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9fe:	f3ef 8305 	mrs	r3, IPSR
 800ba02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b0f      	cmp	r3, #15
 800ba08:	d915      	bls.n	800ba36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba0a:	4a18      	ldr	r2, [pc, #96]	@ (800ba6c <vPortValidateInterruptPriority+0x74>)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	4413      	add	r3, r2
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba14:	4b16      	ldr	r3, [pc, #88]	@ (800ba70 <vPortValidateInterruptPriority+0x78>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	7afa      	ldrb	r2, [r7, #11]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d20b      	bcs.n	800ba36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	607b      	str	r3, [r7, #4]
}
 800ba30:	bf00      	nop
 800ba32:	bf00      	nop
 800ba34:	e7fd      	b.n	800ba32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba36:	4b0f      	ldr	r3, [pc, #60]	@ (800ba74 <vPortValidateInterruptPriority+0x7c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ba3e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba78 <vPortValidateInterruptPriority+0x80>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d90b      	bls.n	800ba5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	603b      	str	r3, [r7, #0]
}
 800ba58:	bf00      	nop
 800ba5a:	bf00      	nop
 800ba5c:	e7fd      	b.n	800ba5a <vPortValidateInterruptPriority+0x62>
	}
 800ba5e:	bf00      	nop
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	e000e3f0 	.word	0xe000e3f0
 800ba70:	20001028 	.word	0x20001028
 800ba74:	e000ed0c 	.word	0xe000ed0c
 800ba78:	2000102c 	.word	0x2000102c

0800ba7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08a      	sub	sp, #40	@ 0x28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba84:	2300      	movs	r3, #0
 800ba86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba88:	f7fe fd72 	bl	800a570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba8c:	4b5c      	ldr	r3, [pc, #368]	@ (800bc00 <pvPortMalloc+0x184>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d101      	bne.n	800ba98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba94:	f000 f924 	bl	800bce0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba98:	4b5a      	ldr	r3, [pc, #360]	@ (800bc04 <pvPortMalloc+0x188>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4013      	ands	r3, r2
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f040 8095 	bne.w	800bbd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d01e      	beq.n	800baea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800baac:	2208      	movs	r2, #8
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4413      	add	r3, r2
 800bab2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f003 0307 	and.w	r3, r3, #7
 800baba:	2b00      	cmp	r3, #0
 800babc:	d015      	beq.n	800baea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f023 0307 	bic.w	r3, r3, #7
 800bac4:	3308      	adds	r3, #8
 800bac6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f003 0307 	and.w	r3, r3, #7
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00b      	beq.n	800baea <pvPortMalloc+0x6e>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	617b      	str	r3, [r7, #20]
}
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop
 800bae8:	e7fd      	b.n	800bae6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d06f      	beq.n	800bbd0 <pvPortMalloc+0x154>
 800baf0:	4b45      	ldr	r3, [pc, #276]	@ (800bc08 <pvPortMalloc+0x18c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d86a      	bhi.n	800bbd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bafa:	4b44      	ldr	r3, [pc, #272]	@ (800bc0c <pvPortMalloc+0x190>)
 800bafc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bafe:	4b43      	ldr	r3, [pc, #268]	@ (800bc0c <pvPortMalloc+0x190>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb04:	e004      	b.n	800bb10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d903      	bls.n	800bb22 <pvPortMalloc+0xa6>
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1f1      	bne.n	800bb06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb22:	4b37      	ldr	r3, [pc, #220]	@ (800bc00 <pvPortMalloc+0x184>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d051      	beq.n	800bbd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2208      	movs	r2, #8
 800bb32:	4413      	add	r3, r2
 800bb34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb40:	685a      	ldr	r2, [r3, #4]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	1ad2      	subs	r2, r2, r3
 800bb46:	2308      	movs	r3, #8
 800bb48:	005b      	lsls	r3, r3, #1
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d920      	bls.n	800bb90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4413      	add	r3, r2
 800bb54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	f003 0307 	and.w	r3, r3, #7
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00b      	beq.n	800bb78 <pvPortMalloc+0xfc>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	613b      	str	r3, [r7, #16]
}
 800bb72:	bf00      	nop
 800bb74:	bf00      	nop
 800bb76:	e7fd      	b.n	800bb74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	1ad2      	subs	r2, r2, r3
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb8a:	69b8      	ldr	r0, [r7, #24]
 800bb8c:	f000 f90a 	bl	800bda4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb90:	4b1d      	ldr	r3, [pc, #116]	@ (800bc08 <pvPortMalloc+0x18c>)
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	4a1b      	ldr	r2, [pc, #108]	@ (800bc08 <pvPortMalloc+0x18c>)
 800bb9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb9e:	4b1a      	ldr	r3, [pc, #104]	@ (800bc08 <pvPortMalloc+0x18c>)
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc10 <pvPortMalloc+0x194>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d203      	bcs.n	800bbb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbaa:	4b17      	ldr	r3, [pc, #92]	@ (800bc08 <pvPortMalloc+0x18c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a18      	ldr	r2, [pc, #96]	@ (800bc10 <pvPortMalloc+0x194>)
 800bbb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb4:	685a      	ldr	r2, [r3, #4]
 800bbb6:	4b13      	ldr	r3, [pc, #76]	@ (800bc04 <pvPortMalloc+0x188>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bbc6:	4b13      	ldr	r3, [pc, #76]	@ (800bc14 <pvPortMalloc+0x198>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	4a11      	ldr	r2, [pc, #68]	@ (800bc14 <pvPortMalloc+0x198>)
 800bbce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bbd0:	f7fe fcdc 	bl	800a58c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	f003 0307 	and.w	r3, r3, #7
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00b      	beq.n	800bbf6 <pvPortMalloc+0x17a>
	__asm volatile
 800bbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe2:	f383 8811 	msr	BASEPRI, r3
 800bbe6:	f3bf 8f6f 	isb	sy
 800bbea:	f3bf 8f4f 	dsb	sy
 800bbee:	60fb      	str	r3, [r7, #12]
}
 800bbf0:	bf00      	nop
 800bbf2:	bf00      	nop
 800bbf4:	e7fd      	b.n	800bbf2 <pvPortMalloc+0x176>
	return pvReturn;
 800bbf6:	69fb      	ldr	r3, [r7, #28]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3728      	adds	r7, #40	@ 0x28
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20004c38 	.word	0x20004c38
 800bc04:	20004c4c 	.word	0x20004c4c
 800bc08:	20004c3c 	.word	0x20004c3c
 800bc0c:	20004c30 	.word	0x20004c30
 800bc10:	20004c40 	.word	0x20004c40
 800bc14:	20004c44 	.word	0x20004c44

0800bc18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d04f      	beq.n	800bcca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc2a:	2308      	movs	r3, #8
 800bc2c:	425b      	negs	r3, r3
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	4413      	add	r3, r2
 800bc32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	4b25      	ldr	r3, [pc, #148]	@ (800bcd4 <vPortFree+0xbc>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4013      	ands	r3, r2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10b      	bne.n	800bc5e <vPortFree+0x46>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	60fb      	str	r3, [r7, #12]
}
 800bc58:	bf00      	nop
 800bc5a:	bf00      	nop
 800bc5c:	e7fd      	b.n	800bc5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00b      	beq.n	800bc7e <vPortFree+0x66>
	__asm volatile
 800bc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc6a:	f383 8811 	msr	BASEPRI, r3
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	60bb      	str	r3, [r7, #8]
}
 800bc78:	bf00      	nop
 800bc7a:	bf00      	nop
 800bc7c:	e7fd      	b.n	800bc7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	4b14      	ldr	r3, [pc, #80]	@ (800bcd4 <vPortFree+0xbc>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4013      	ands	r3, r2
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d01e      	beq.n	800bcca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d11a      	bne.n	800bcca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd4 <vPortFree+0xbc>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	43db      	mvns	r3, r3
 800bc9e:	401a      	ands	r2, r3
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bca4:	f7fe fc64 	bl	800a570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	685a      	ldr	r2, [r3, #4]
 800bcac:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd8 <vPortFree+0xc0>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	4a09      	ldr	r2, [pc, #36]	@ (800bcd8 <vPortFree+0xc0>)
 800bcb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bcb6:	6938      	ldr	r0, [r7, #16]
 800bcb8:	f000 f874 	bl	800bda4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bcbc:	4b07      	ldr	r3, [pc, #28]	@ (800bcdc <vPortFree+0xc4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	4a06      	ldr	r2, [pc, #24]	@ (800bcdc <vPortFree+0xc4>)
 800bcc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bcc6:	f7fe fc61 	bl	800a58c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bcca:	bf00      	nop
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20004c4c 	.word	0x20004c4c
 800bcd8:	20004c3c 	.word	0x20004c3c
 800bcdc:	20004c48 	.word	0x20004c48

0800bce0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bce6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bcea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcec:	4b27      	ldr	r3, [pc, #156]	@ (800bd8c <prvHeapInit+0xac>)
 800bcee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f003 0307 	and.w	r3, r3, #7
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00c      	beq.n	800bd14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3307      	adds	r3, #7
 800bcfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f023 0307 	bic.w	r3, r3, #7
 800bd06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	4a1f      	ldr	r2, [pc, #124]	@ (800bd8c <prvHeapInit+0xac>)
 800bd10:	4413      	add	r3, r2
 800bd12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd18:	4a1d      	ldr	r2, [pc, #116]	@ (800bd90 <prvHeapInit+0xb0>)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd1e:	4b1c      	ldr	r3, [pc, #112]	@ (800bd90 <prvHeapInit+0xb0>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	4413      	add	r3, r2
 800bd2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd2c:	2208      	movs	r2, #8
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	1a9b      	subs	r3, r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f023 0307 	bic.w	r3, r3, #7
 800bd3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4a15      	ldr	r2, [pc, #84]	@ (800bd94 <prvHeapInit+0xb4>)
 800bd40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd42:	4b14      	ldr	r3, [pc, #80]	@ (800bd94 <prvHeapInit+0xb4>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2200      	movs	r2, #0
 800bd48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd4a:	4b12      	ldr	r3, [pc, #72]	@ (800bd94 <prvHeapInit+0xb4>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	1ad2      	subs	r2, r2, r3
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd60:	4b0c      	ldr	r3, [pc, #48]	@ (800bd94 <prvHeapInit+0xb4>)
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	4a0a      	ldr	r2, [pc, #40]	@ (800bd98 <prvHeapInit+0xb8>)
 800bd6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	4a09      	ldr	r2, [pc, #36]	@ (800bd9c <prvHeapInit+0xbc>)
 800bd76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd78:	4b09      	ldr	r3, [pc, #36]	@ (800bda0 <prvHeapInit+0xc0>)
 800bd7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd7e:	601a      	str	r2, [r3, #0]
}
 800bd80:	bf00      	nop
 800bd82:	3714      	adds	r7, #20
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr
 800bd8c:	20001030 	.word	0x20001030
 800bd90:	20004c30 	.word	0x20004c30
 800bd94:	20004c38 	.word	0x20004c38
 800bd98:	20004c40 	.word	0x20004c40
 800bd9c:	20004c3c 	.word	0x20004c3c
 800bda0:	20004c4c 	.word	0x20004c4c

0800bda4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bdac:	4b28      	ldr	r3, [pc, #160]	@ (800be50 <prvInsertBlockIntoFreeList+0xac>)
 800bdae:	60fb      	str	r3, [r7, #12]
 800bdb0:	e002      	b.n	800bdb8 <prvInsertBlockIntoFreeList+0x14>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	60fb      	str	r3, [r7, #12]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d8f7      	bhi.n	800bdb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	4413      	add	r3, r2
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d108      	bne.n	800bde6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	441a      	add	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	441a      	add	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d118      	bne.n	800be2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	4b15      	ldr	r3, [pc, #84]	@ (800be54 <prvInsertBlockIntoFreeList+0xb0>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	429a      	cmp	r2, r3
 800be04:	d00d      	beq.n	800be22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	441a      	add	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	601a      	str	r2, [r3, #0]
 800be20:	e008      	b.n	800be34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be22:	4b0c      	ldr	r3, [pc, #48]	@ (800be54 <prvInsertBlockIntoFreeList+0xb0>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	601a      	str	r2, [r3, #0]
 800be2a:	e003      	b.n	800be34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d002      	beq.n	800be42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be42:	bf00      	nop
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	20004c30 	.word	0x20004c30
 800be54:	20004c38 	.word	0x20004c38

0800be58 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800be5c:	2201      	movs	r2, #1
 800be5e:	490e      	ldr	r1, [pc, #56]	@ (800be98 <MX_USB_HOST_Init+0x40>)
 800be60:	480e      	ldr	r0, [pc, #56]	@ (800be9c <MX_USB_HOST_Init+0x44>)
 800be62:	f7fb f901 	bl	8007068 <USBH_Init>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800be6c:	f7f4 fe9c 	bl	8000ba8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800be70:	490b      	ldr	r1, [pc, #44]	@ (800bea0 <MX_USB_HOST_Init+0x48>)
 800be72:	480a      	ldr	r0, [pc, #40]	@ (800be9c <MX_USB_HOST_Init+0x44>)
 800be74:	f7fb f9c7 	bl	8007206 <USBH_RegisterClass>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800be7e:	f7f4 fe93 	bl	8000ba8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800be82:	4806      	ldr	r0, [pc, #24]	@ (800be9c <MX_USB_HOST_Init+0x44>)
 800be84:	f7fb fa4b 	bl	800731e <USBH_Start>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800be8e:	f7f4 fe8b 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800be92:	bf00      	nop
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	0800bea5 	.word	0x0800bea5
 800be9c:	20004c50 	.word	0x20004c50
 800bea0:	2000000c 	.word	0x2000000c

0800bea4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800beb0:	78fb      	ldrb	r3, [r7, #3]
 800beb2:	3b01      	subs	r3, #1
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	d819      	bhi.n	800beec <USBH_UserProcess+0x48>
 800beb8:	a201      	add	r2, pc, #4	@ (adr r2, 800bec0 <USBH_UserProcess+0x1c>)
 800beba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebe:	bf00      	nop
 800bec0:	0800beed 	.word	0x0800beed
 800bec4:	0800bedd 	.word	0x0800bedd
 800bec8:	0800beed 	.word	0x0800beed
 800becc:	0800bee5 	.word	0x0800bee5
 800bed0:	0800bed5 	.word	0x0800bed5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bed4:	4b09      	ldr	r3, [pc, #36]	@ (800befc <USBH_UserProcess+0x58>)
 800bed6:	2203      	movs	r2, #3
 800bed8:	701a      	strb	r2, [r3, #0]
  break;
 800beda:	e008      	b.n	800beee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bedc:	4b07      	ldr	r3, [pc, #28]	@ (800befc <USBH_UserProcess+0x58>)
 800bede:	2202      	movs	r2, #2
 800bee0:	701a      	strb	r2, [r3, #0]
  break;
 800bee2:	e004      	b.n	800beee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bee4:	4b05      	ldr	r3, [pc, #20]	@ (800befc <USBH_UserProcess+0x58>)
 800bee6:	2201      	movs	r2, #1
 800bee8:	701a      	strb	r2, [r3, #0]
  break;
 800beea:	e000      	b.n	800beee <USBH_UserProcess+0x4a>

  default:
  break;
 800beec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800beee:	bf00      	nop
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	20005034 	.word	0x20005034

0800bf00 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08a      	sub	sp, #40	@ 0x28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf08:	f107 0314 	add.w	r3, r7, #20
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	605a      	str	r2, [r3, #4]
 800bf12:	609a      	str	r2, [r3, #8]
 800bf14:	60da      	str	r2, [r3, #12]
 800bf16:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf20:	d147      	bne.n	800bfb2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf22:	2300      	movs	r3, #0
 800bf24:	613b      	str	r3, [r7, #16]
 800bf26:	4b25      	ldr	r3, [pc, #148]	@ (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf2a:	4a24      	ldr	r2, [pc, #144]	@ (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf2c:	f043 0301 	orr.w	r3, r3, #1
 800bf30:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf32:	4b22      	ldr	r3, [pc, #136]	@ (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bf3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf44:	2300      	movs	r3, #0
 800bf46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bf4c:	f107 0314 	add.w	r3, r7, #20
 800bf50:	4619      	mov	r1, r3
 800bf52:	481b      	ldr	r0, [pc, #108]	@ (800bfc0 <HAL_HCD_MspInit+0xc0>)
 800bf54:	f7f5 fa1e 	bl	8001394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bf58:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bf5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf5e:	2302      	movs	r3, #2
 800bf60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf66:	2303      	movs	r3, #3
 800bf68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf6a:	230a      	movs	r3, #10
 800bf6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf6e:	f107 0314 	add.w	r3, r7, #20
 800bf72:	4619      	mov	r1, r3
 800bf74:	4812      	ldr	r0, [pc, #72]	@ (800bfc0 <HAL_HCD_MspInit+0xc0>)
 800bf76:	f7f5 fa0d 	bl	8001394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf7a:	4b10      	ldr	r3, [pc, #64]	@ (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf7e:	4a0f      	ldr	r2, [pc, #60]	@ (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf84:	6353      	str	r3, [r2, #52]	@ 0x34
 800bf86:	2300      	movs	r3, #0
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	4b0c      	ldr	r3, [pc, #48]	@ (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf8e:	4a0b      	ldr	r2, [pc, #44]	@ (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bf94:	6453      	str	r3, [r2, #68]	@ 0x44
 800bf96:	4b09      	ldr	r3, [pc, #36]	@ (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2105      	movs	r1, #5
 800bfa6:	2043      	movs	r0, #67	@ 0x43
 800bfa8:	f7f5 f9ca 	bl	8001340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bfac:	2043      	movs	r0, #67	@ 0x43
 800bfae:	f7f5 f9e3 	bl	8001378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfb2:	bf00      	nop
 800bfb4:	3728      	adds	r7, #40	@ 0x28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	40023800 	.word	0x40023800
 800bfc0:	40020000 	.word	0x40020000

0800bfc4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fb fe55 	bl	8007c82 <USBH_LL_IncTimer>
}
 800bfd8:	bf00      	nop
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fb fe99 	bl	8007d26 <USBH_LL_Connect>
}
 800bff4:	bf00      	nop
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fb feae 	bl	8007d6c <USBH_LL_Disconnect>
}
 800c010:	bf00      	nop
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	70fb      	strb	r3, [r7, #3]
 800c024:	4613      	mov	r3, r2
 800c026:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fb fee5 	bl	8007dfe <USBH_LL_NotifyURBChange>
#endif
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fb fe43 	bl	8007cd6 <USBH_LL_PortEnabled>
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c066:	4618      	mov	r0, r3
 800c068:	f7fb fe4f 	bl	8007d0a <USBH_LL_PortDisabled>
}
 800c06c:	bf00      	nop
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c082:	2b01      	cmp	r3, #1
 800c084:	d12a      	bne.n	800c0dc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c086:	4a18      	ldr	r2, [pc, #96]	@ (800c0e8 <USBH_LL_Init+0x74>)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a15      	ldr	r2, [pc, #84]	@ (800c0e8 <USBH_LL_Init+0x74>)
 800c092:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c096:	4b14      	ldr	r3, [pc, #80]	@ (800c0e8 <USBH_LL_Init+0x74>)
 800c098:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c09c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c09e:	4b12      	ldr	r3, [pc, #72]	@ (800c0e8 <USBH_LL_Init+0x74>)
 800c0a0:	2208      	movs	r2, #8
 800c0a2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c0a4:	4b10      	ldr	r3, [pc, #64]	@ (800c0e8 <USBH_LL_Init+0x74>)
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c0aa:	4b0f      	ldr	r3, [pc, #60]	@ (800c0e8 <USBH_LL_Init+0x74>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c0b0:	4b0d      	ldr	r3, [pc, #52]	@ (800c0e8 <USBH_LL_Init+0x74>)
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c0e8 <USBH_LL_Init+0x74>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c0bc:	480a      	ldr	r0, [pc, #40]	@ (800c0e8 <USBH_LL_Init+0x74>)
 800c0be:	f7f5 fb20 	bl	8001702 <HAL_HCD_Init>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c0c8:	f7f4 fd6e 	bl	8000ba8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c0cc:	4806      	ldr	r0, [pc, #24]	@ (800c0e8 <USBH_LL_Init+0x74>)
 800c0ce:	f7f5 ff81 	bl	8001fd4 <HAL_HCD_GetCurrentFrame>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7fb fdc4 	bl	8007c64 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20005038 	.word	0x20005038

0800c0ec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c102:	4618      	mov	r0, r3
 800c104:	f7f5 feee 	bl	8001ee4 <HAL_HCD_Start>
 800c108:	4603      	mov	r3, r0
 800c10a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 f95e 	bl	800c3d0 <USBH_Get_USB_Status>
 800c114:	4603      	mov	r3, r0
 800c116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c118:	7bbb      	ldrb	r3, [r7, #14]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b084      	sub	sp, #16
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c12a:	2300      	movs	r3, #0
 800c12c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c12e:	2300      	movs	r3, #0
 800c130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c138:	4618      	mov	r0, r3
 800c13a:	f7f5 fef6 	bl	8001f2a <HAL_HCD_Stop>
 800c13e:	4603      	mov	r3, r0
 800c140:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c142:	7bfb      	ldrb	r3, [r7, #15]
 800c144:	4618      	mov	r0, r3
 800c146:	f000 f943 	bl	800c3d0 <USBH_Get_USB_Status>
 800c14a:	4603      	mov	r3, r0
 800c14c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c160:	2301      	movs	r3, #1
 800c162:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7f5 ff40 	bl	8001ff0 <HAL_HCD_GetCurrentSpeed>
 800c170:	4603      	mov	r3, r0
 800c172:	2b02      	cmp	r3, #2
 800c174:	d00c      	beq.n	800c190 <USBH_LL_GetSpeed+0x38>
 800c176:	2b02      	cmp	r3, #2
 800c178:	d80d      	bhi.n	800c196 <USBH_LL_GetSpeed+0x3e>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d002      	beq.n	800c184 <USBH_LL_GetSpeed+0x2c>
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d003      	beq.n	800c18a <USBH_LL_GetSpeed+0x32>
 800c182:	e008      	b.n	800c196 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c184:	2300      	movs	r3, #0
 800c186:	73fb      	strb	r3, [r7, #15]
    break;
 800c188:	e008      	b.n	800c19c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c18a:	2301      	movs	r3, #1
 800c18c:	73fb      	strb	r3, [r7, #15]
    break;
 800c18e:	e005      	b.n	800c19c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c190:	2302      	movs	r3, #2
 800c192:	73fb      	strb	r3, [r7, #15]
    break;
 800c194:	e002      	b.n	800c19c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c196:	2301      	movs	r3, #1
 800c198:	73fb      	strb	r3, [r7, #15]
    break;
 800c19a:	bf00      	nop
  }
  return  speed;
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b084      	sub	sp, #16
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7f5 fed1 	bl	8001f64 <HAL_HCD_ResetPort>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f000 f901 	bl	800c3d0 <USBH_Get_USB_Status>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c1ee:	78fa      	ldrb	r2, [r7, #3]
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7f5 fed9 	bl	8001faa <HAL_HCD_HC_GetXferCount>
 800c1f8:	4603      	mov	r3, r0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c202:	b590      	push	{r4, r7, lr}
 800c204:	b089      	sub	sp, #36	@ 0x24
 800c206:	af04      	add	r7, sp, #16
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	4608      	mov	r0, r1
 800c20c:	4611      	mov	r1, r2
 800c20e:	461a      	mov	r2, r3
 800c210:	4603      	mov	r3, r0
 800c212:	70fb      	strb	r3, [r7, #3]
 800c214:	460b      	mov	r3, r1
 800c216:	70bb      	strb	r3, [r7, #2]
 800c218:	4613      	mov	r3, r2
 800c21a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c22a:	787c      	ldrb	r4, [r7, #1]
 800c22c:	78ba      	ldrb	r2, [r7, #2]
 800c22e:	78f9      	ldrb	r1, [r7, #3]
 800c230:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c232:	9302      	str	r3, [sp, #8]
 800c234:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c238:	9301      	str	r3, [sp, #4]
 800c23a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	4623      	mov	r3, r4
 800c242:	f7f5 fac5 	bl	80017d0 <HAL_HCD_HC_Init>
 800c246:	4603      	mov	r3, r0
 800c248:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f000 f8bf 	bl	800c3d0 <USBH_Get_USB_Status>
 800c252:	4603      	mov	r3, r0
 800c254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c256:	7bbb      	ldrb	r3, [r7, #14]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd90      	pop	{r4, r7, pc}

0800c260 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	460b      	mov	r3, r1
 800c26a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c270:	2300      	movs	r3, #0
 800c272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c27a:	78fa      	ldrb	r2, [r7, #3]
 800c27c:	4611      	mov	r1, r2
 800c27e:	4618      	mov	r0, r3
 800c280:	f7f5 fb5e 	bl	8001940 <HAL_HCD_HC_Halt>
 800c284:	4603      	mov	r3, r0
 800c286:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c288:	7bfb      	ldrb	r3, [r7, #15]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f000 f8a0 	bl	800c3d0 <USBH_Get_USB_Status>
 800c290:	4603      	mov	r3, r0
 800c292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c294:	7bbb      	ldrb	r3, [r7, #14]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c29e:	b590      	push	{r4, r7, lr}
 800c2a0:	b089      	sub	sp, #36	@ 0x24
 800c2a2:	af04      	add	r7, sp, #16
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	4608      	mov	r0, r1
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	70fb      	strb	r3, [r7, #3]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	70bb      	strb	r3, [r7, #2]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c2c6:	787c      	ldrb	r4, [r7, #1]
 800c2c8:	78ba      	ldrb	r2, [r7, #2]
 800c2ca:	78f9      	ldrb	r1, [r7, #3]
 800c2cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c2d0:	9303      	str	r3, [sp, #12]
 800c2d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c2d4:	9302      	str	r3, [sp, #8]
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	4623      	mov	r3, r4
 800c2e2:	f7f5 fb51 	bl	8001988 <HAL_HCD_HC_SubmitRequest>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c2ea:	7bfb      	ldrb	r3, [r7, #15]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 f86f 	bl	800c3d0 <USBH_Get_USB_Status>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3714      	adds	r7, #20
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd90      	pop	{r4, r7, pc}

0800c300 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c312:	78fa      	ldrb	r2, [r7, #3]
 800c314:	4611      	mov	r1, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f7f5 fe32 	bl	8001f80 <HAL_HCD_HC_GetURBState>
 800c31c:	4603      	mov	r3, r0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b082      	sub	sp, #8
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	460b      	mov	r3, r1
 800c330:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d103      	bne.n	800c344 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c33c:	78fb      	ldrb	r3, [r7, #3]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 f872 	bl	800c428 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c344:	20c8      	movs	r0, #200	@ 0xc8
 800c346:	f7f4 ff1f 	bl	8001188 <HAL_Delay>
  return USBH_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	460b      	mov	r3, r1
 800c35e:	70fb      	strb	r3, [r7, #3]
 800c360:	4613      	mov	r3, r2
 800c362:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c36a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c36c:	78fa      	ldrb	r2, [r7, #3]
 800c36e:	68f9      	ldr	r1, [r7, #12]
 800c370:	4613      	mov	r3, r2
 800c372:	011b      	lsls	r3, r3, #4
 800c374:	1a9b      	subs	r3, r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	440b      	add	r3, r1
 800c37a:	3317      	adds	r3, #23
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00a      	beq.n	800c398 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c382:	78fa      	ldrb	r2, [r7, #3]
 800c384:	68f9      	ldr	r1, [r7, #12]
 800c386:	4613      	mov	r3, r2
 800c388:	011b      	lsls	r3, r3, #4
 800c38a:	1a9b      	subs	r3, r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	440b      	add	r3, r1
 800c390:	333c      	adds	r3, #60	@ 0x3c
 800c392:	78ba      	ldrb	r2, [r7, #2]
 800c394:	701a      	strb	r2, [r3, #0]
 800c396:	e009      	b.n	800c3ac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c398:	78fa      	ldrb	r2, [r7, #3]
 800c39a:	68f9      	ldr	r1, [r7, #12]
 800c39c:	4613      	mov	r3, r2
 800c39e:	011b      	lsls	r3, r3, #4
 800c3a0:	1a9b      	subs	r3, r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	440b      	add	r3, r1
 800c3a6:	333d      	adds	r3, #61	@ 0x3d
 800c3a8:	78ba      	ldrb	r2, [r7, #2]
 800c3aa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7f4 fee0 	bl	8001188 <HAL_Delay>
}
 800c3c8:	bf00      	nop
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3de:	79fb      	ldrb	r3, [r7, #7]
 800c3e0:	2b03      	cmp	r3, #3
 800c3e2:	d817      	bhi.n	800c414 <USBH_Get_USB_Status+0x44>
 800c3e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c3ec <USBH_Get_USB_Status+0x1c>)
 800c3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ea:	bf00      	nop
 800c3ec:	0800c3fd 	.word	0x0800c3fd
 800c3f0:	0800c403 	.word	0x0800c403
 800c3f4:	0800c409 	.word	0x0800c409
 800c3f8:	0800c40f 	.word	0x0800c40f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c400:	e00b      	b.n	800c41a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c402:	2302      	movs	r3, #2
 800c404:	73fb      	strb	r3, [r7, #15]
    break;
 800c406:	e008      	b.n	800c41a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c408:	2301      	movs	r3, #1
 800c40a:	73fb      	strb	r3, [r7, #15]
    break;
 800c40c:	e005      	b.n	800c41a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c40e:	2302      	movs	r3, #2
 800c410:	73fb      	strb	r3, [r7, #15]
    break;
 800c412:	e002      	b.n	800c41a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c414:	2302      	movs	r3, #2
 800c416:	73fb      	strb	r3, [r7, #15]
    break;
 800c418:	bf00      	nop
  }
  return usb_status;
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	4603      	mov	r3, r0
 800c430:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c432:	79fb      	ldrb	r3, [r7, #7]
 800c434:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c436:	79fb      	ldrb	r3, [r7, #7]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d102      	bne.n	800c442 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c43c:	2300      	movs	r3, #0
 800c43e:	73fb      	strb	r3, [r7, #15]
 800c440:	e001      	b.n	800c446 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c442:	2301      	movs	r3, #1
 800c444:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	461a      	mov	r2, r3
 800c44a:	2101      	movs	r1, #1
 800c44c:	4803      	ldr	r0, [pc, #12]	@ (800c45c <MX_DriverVbusFS+0x34>)
 800c44e:	f7f5 f925 	bl	800169c <HAL_GPIO_WritePin>
}
 800c452:	bf00      	nop
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	40020800 	.word	0x40020800

0800c460 <malloc>:
 800c460:	4b02      	ldr	r3, [pc, #8]	@ (800c46c <malloc+0xc>)
 800c462:	4601      	mov	r1, r0
 800c464:	6818      	ldr	r0, [r3, #0]
 800c466:	f000 b82d 	b.w	800c4c4 <_malloc_r>
 800c46a:	bf00      	nop
 800c46c:	20000030 	.word	0x20000030

0800c470 <free>:
 800c470:	4b02      	ldr	r3, [pc, #8]	@ (800c47c <free+0xc>)
 800c472:	4601      	mov	r1, r0
 800c474:	6818      	ldr	r0, [r3, #0]
 800c476:	f000 b959 	b.w	800c72c <_free_r>
 800c47a:	bf00      	nop
 800c47c:	20000030 	.word	0x20000030

0800c480 <sbrk_aligned>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	4e0f      	ldr	r6, [pc, #60]	@ (800c4c0 <sbrk_aligned+0x40>)
 800c484:	460c      	mov	r4, r1
 800c486:	6831      	ldr	r1, [r6, #0]
 800c488:	4605      	mov	r5, r0
 800c48a:	b911      	cbnz	r1, 800c492 <sbrk_aligned+0x12>
 800c48c:	f000 f904 	bl	800c698 <_sbrk_r>
 800c490:	6030      	str	r0, [r6, #0]
 800c492:	4621      	mov	r1, r4
 800c494:	4628      	mov	r0, r5
 800c496:	f000 f8ff 	bl	800c698 <_sbrk_r>
 800c49a:	1c43      	adds	r3, r0, #1
 800c49c:	d103      	bne.n	800c4a6 <sbrk_aligned+0x26>
 800c49e:	f04f 34ff 	mov.w	r4, #4294967295
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	bd70      	pop	{r4, r5, r6, pc}
 800c4a6:	1cc4      	adds	r4, r0, #3
 800c4a8:	f024 0403 	bic.w	r4, r4, #3
 800c4ac:	42a0      	cmp	r0, r4
 800c4ae:	d0f8      	beq.n	800c4a2 <sbrk_aligned+0x22>
 800c4b0:	1a21      	subs	r1, r4, r0
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f000 f8f0 	bl	800c698 <_sbrk_r>
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d1f2      	bne.n	800c4a2 <sbrk_aligned+0x22>
 800c4bc:	e7ef      	b.n	800c49e <sbrk_aligned+0x1e>
 800c4be:	bf00      	nop
 800c4c0:	20005418 	.word	0x20005418

0800c4c4 <_malloc_r>:
 800c4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4c8:	1ccd      	adds	r5, r1, #3
 800c4ca:	f025 0503 	bic.w	r5, r5, #3
 800c4ce:	3508      	adds	r5, #8
 800c4d0:	2d0c      	cmp	r5, #12
 800c4d2:	bf38      	it	cc
 800c4d4:	250c      	movcc	r5, #12
 800c4d6:	2d00      	cmp	r5, #0
 800c4d8:	4606      	mov	r6, r0
 800c4da:	db01      	blt.n	800c4e0 <_malloc_r+0x1c>
 800c4dc:	42a9      	cmp	r1, r5
 800c4de:	d904      	bls.n	800c4ea <_malloc_r+0x26>
 800c4e0:	230c      	movs	r3, #12
 800c4e2:	6033      	str	r3, [r6, #0]
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5c0 <_malloc_r+0xfc>
 800c4ee:	f000 f869 	bl	800c5c4 <__malloc_lock>
 800c4f2:	f8d8 3000 	ldr.w	r3, [r8]
 800c4f6:	461c      	mov	r4, r3
 800c4f8:	bb44      	cbnz	r4, 800c54c <_malloc_r+0x88>
 800c4fa:	4629      	mov	r1, r5
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	f7ff ffbf 	bl	800c480 <sbrk_aligned>
 800c502:	1c43      	adds	r3, r0, #1
 800c504:	4604      	mov	r4, r0
 800c506:	d158      	bne.n	800c5ba <_malloc_r+0xf6>
 800c508:	f8d8 4000 	ldr.w	r4, [r8]
 800c50c:	4627      	mov	r7, r4
 800c50e:	2f00      	cmp	r7, #0
 800c510:	d143      	bne.n	800c59a <_malloc_r+0xd6>
 800c512:	2c00      	cmp	r4, #0
 800c514:	d04b      	beq.n	800c5ae <_malloc_r+0xea>
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	4639      	mov	r1, r7
 800c51a:	4630      	mov	r0, r6
 800c51c:	eb04 0903 	add.w	r9, r4, r3
 800c520:	f000 f8ba 	bl	800c698 <_sbrk_r>
 800c524:	4581      	cmp	r9, r0
 800c526:	d142      	bne.n	800c5ae <_malloc_r+0xea>
 800c528:	6821      	ldr	r1, [r4, #0]
 800c52a:	1a6d      	subs	r5, r5, r1
 800c52c:	4629      	mov	r1, r5
 800c52e:	4630      	mov	r0, r6
 800c530:	f7ff ffa6 	bl	800c480 <sbrk_aligned>
 800c534:	3001      	adds	r0, #1
 800c536:	d03a      	beq.n	800c5ae <_malloc_r+0xea>
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	442b      	add	r3, r5
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	f8d8 3000 	ldr.w	r3, [r8]
 800c542:	685a      	ldr	r2, [r3, #4]
 800c544:	bb62      	cbnz	r2, 800c5a0 <_malloc_r+0xdc>
 800c546:	f8c8 7000 	str.w	r7, [r8]
 800c54a:	e00f      	b.n	800c56c <_malloc_r+0xa8>
 800c54c:	6822      	ldr	r2, [r4, #0]
 800c54e:	1b52      	subs	r2, r2, r5
 800c550:	d420      	bmi.n	800c594 <_malloc_r+0xd0>
 800c552:	2a0b      	cmp	r2, #11
 800c554:	d917      	bls.n	800c586 <_malloc_r+0xc2>
 800c556:	1961      	adds	r1, r4, r5
 800c558:	42a3      	cmp	r3, r4
 800c55a:	6025      	str	r5, [r4, #0]
 800c55c:	bf18      	it	ne
 800c55e:	6059      	strne	r1, [r3, #4]
 800c560:	6863      	ldr	r3, [r4, #4]
 800c562:	bf08      	it	eq
 800c564:	f8c8 1000 	streq.w	r1, [r8]
 800c568:	5162      	str	r2, [r4, r5]
 800c56a:	604b      	str	r3, [r1, #4]
 800c56c:	4630      	mov	r0, r6
 800c56e:	f000 f82f 	bl	800c5d0 <__malloc_unlock>
 800c572:	f104 000b 	add.w	r0, r4, #11
 800c576:	1d23      	adds	r3, r4, #4
 800c578:	f020 0007 	bic.w	r0, r0, #7
 800c57c:	1ac2      	subs	r2, r0, r3
 800c57e:	bf1c      	itt	ne
 800c580:	1a1b      	subne	r3, r3, r0
 800c582:	50a3      	strne	r3, [r4, r2]
 800c584:	e7af      	b.n	800c4e6 <_malloc_r+0x22>
 800c586:	6862      	ldr	r2, [r4, #4]
 800c588:	42a3      	cmp	r3, r4
 800c58a:	bf0c      	ite	eq
 800c58c:	f8c8 2000 	streq.w	r2, [r8]
 800c590:	605a      	strne	r2, [r3, #4]
 800c592:	e7eb      	b.n	800c56c <_malloc_r+0xa8>
 800c594:	4623      	mov	r3, r4
 800c596:	6864      	ldr	r4, [r4, #4]
 800c598:	e7ae      	b.n	800c4f8 <_malloc_r+0x34>
 800c59a:	463c      	mov	r4, r7
 800c59c:	687f      	ldr	r7, [r7, #4]
 800c59e:	e7b6      	b.n	800c50e <_malloc_r+0x4a>
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	d1fb      	bne.n	800c5a0 <_malloc_r+0xdc>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	6053      	str	r3, [r2, #4]
 800c5ac:	e7de      	b.n	800c56c <_malloc_r+0xa8>
 800c5ae:	230c      	movs	r3, #12
 800c5b0:	6033      	str	r3, [r6, #0]
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f000 f80c 	bl	800c5d0 <__malloc_unlock>
 800c5b8:	e794      	b.n	800c4e4 <_malloc_r+0x20>
 800c5ba:	6005      	str	r5, [r0, #0]
 800c5bc:	e7d6      	b.n	800c56c <_malloc_r+0xa8>
 800c5be:	bf00      	nop
 800c5c0:	2000541c 	.word	0x2000541c

0800c5c4 <__malloc_lock>:
 800c5c4:	4801      	ldr	r0, [pc, #4]	@ (800c5cc <__malloc_lock+0x8>)
 800c5c6:	f000 b8a1 	b.w	800c70c <__retarget_lock_acquire_recursive>
 800c5ca:	bf00      	nop
 800c5cc:	2000555c 	.word	0x2000555c

0800c5d0 <__malloc_unlock>:
 800c5d0:	4801      	ldr	r0, [pc, #4]	@ (800c5d8 <__malloc_unlock+0x8>)
 800c5d2:	f000 b89c 	b.w	800c70e <__retarget_lock_release_recursive>
 800c5d6:	bf00      	nop
 800c5d8:	2000555c 	.word	0x2000555c

0800c5dc <memset>:
 800c5dc:	4402      	add	r2, r0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d100      	bne.n	800c5e6 <memset+0xa>
 800c5e4:	4770      	bx	lr
 800c5e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ea:	e7f9      	b.n	800c5e0 <memset+0x4>

0800c5ec <_reclaim_reent>:
 800c5ec:	4b29      	ldr	r3, [pc, #164]	@ (800c694 <_reclaim_reent+0xa8>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4283      	cmp	r3, r0
 800c5f2:	b570      	push	{r4, r5, r6, lr}
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	d04b      	beq.n	800c690 <_reclaim_reent+0xa4>
 800c5f8:	69c3      	ldr	r3, [r0, #28]
 800c5fa:	b1ab      	cbz	r3, 800c628 <_reclaim_reent+0x3c>
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	b16b      	cbz	r3, 800c61c <_reclaim_reent+0x30>
 800c600:	2500      	movs	r5, #0
 800c602:	69e3      	ldr	r3, [r4, #28]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	5959      	ldr	r1, [r3, r5]
 800c608:	2900      	cmp	r1, #0
 800c60a:	d13b      	bne.n	800c684 <_reclaim_reent+0x98>
 800c60c:	3504      	adds	r5, #4
 800c60e:	2d80      	cmp	r5, #128	@ 0x80
 800c610:	d1f7      	bne.n	800c602 <_reclaim_reent+0x16>
 800c612:	69e3      	ldr	r3, [r4, #28]
 800c614:	4620      	mov	r0, r4
 800c616:	68d9      	ldr	r1, [r3, #12]
 800c618:	f000 f888 	bl	800c72c <_free_r>
 800c61c:	69e3      	ldr	r3, [r4, #28]
 800c61e:	6819      	ldr	r1, [r3, #0]
 800c620:	b111      	cbz	r1, 800c628 <_reclaim_reent+0x3c>
 800c622:	4620      	mov	r0, r4
 800c624:	f000 f882 	bl	800c72c <_free_r>
 800c628:	6961      	ldr	r1, [r4, #20]
 800c62a:	b111      	cbz	r1, 800c632 <_reclaim_reent+0x46>
 800c62c:	4620      	mov	r0, r4
 800c62e:	f000 f87d 	bl	800c72c <_free_r>
 800c632:	69e1      	ldr	r1, [r4, #28]
 800c634:	b111      	cbz	r1, 800c63c <_reclaim_reent+0x50>
 800c636:	4620      	mov	r0, r4
 800c638:	f000 f878 	bl	800c72c <_free_r>
 800c63c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c63e:	b111      	cbz	r1, 800c646 <_reclaim_reent+0x5a>
 800c640:	4620      	mov	r0, r4
 800c642:	f000 f873 	bl	800c72c <_free_r>
 800c646:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c648:	b111      	cbz	r1, 800c650 <_reclaim_reent+0x64>
 800c64a:	4620      	mov	r0, r4
 800c64c:	f000 f86e 	bl	800c72c <_free_r>
 800c650:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c652:	b111      	cbz	r1, 800c65a <_reclaim_reent+0x6e>
 800c654:	4620      	mov	r0, r4
 800c656:	f000 f869 	bl	800c72c <_free_r>
 800c65a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c65c:	b111      	cbz	r1, 800c664 <_reclaim_reent+0x78>
 800c65e:	4620      	mov	r0, r4
 800c660:	f000 f864 	bl	800c72c <_free_r>
 800c664:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c666:	b111      	cbz	r1, 800c66e <_reclaim_reent+0x82>
 800c668:	4620      	mov	r0, r4
 800c66a:	f000 f85f 	bl	800c72c <_free_r>
 800c66e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c670:	b111      	cbz	r1, 800c678 <_reclaim_reent+0x8c>
 800c672:	4620      	mov	r0, r4
 800c674:	f000 f85a 	bl	800c72c <_free_r>
 800c678:	6a23      	ldr	r3, [r4, #32]
 800c67a:	b14b      	cbz	r3, 800c690 <_reclaim_reent+0xa4>
 800c67c:	4620      	mov	r0, r4
 800c67e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c682:	4718      	bx	r3
 800c684:	680e      	ldr	r6, [r1, #0]
 800c686:	4620      	mov	r0, r4
 800c688:	f000 f850 	bl	800c72c <_free_r>
 800c68c:	4631      	mov	r1, r6
 800c68e:	e7bb      	b.n	800c608 <_reclaim_reent+0x1c>
 800c690:	bd70      	pop	{r4, r5, r6, pc}
 800c692:	bf00      	nop
 800c694:	20000030 	.word	0x20000030

0800c698 <_sbrk_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4d06      	ldr	r5, [pc, #24]	@ (800c6b4 <_sbrk_r+0x1c>)
 800c69c:	2300      	movs	r3, #0
 800c69e:	4604      	mov	r4, r0
 800c6a0:	4608      	mov	r0, r1
 800c6a2:	602b      	str	r3, [r5, #0]
 800c6a4:	f7f4 fcbc 	bl	8001020 <_sbrk>
 800c6a8:	1c43      	adds	r3, r0, #1
 800c6aa:	d102      	bne.n	800c6b2 <_sbrk_r+0x1a>
 800c6ac:	682b      	ldr	r3, [r5, #0]
 800c6ae:	b103      	cbz	r3, 800c6b2 <_sbrk_r+0x1a>
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	bd38      	pop	{r3, r4, r5, pc}
 800c6b4:	20005558 	.word	0x20005558

0800c6b8 <__errno>:
 800c6b8:	4b01      	ldr	r3, [pc, #4]	@ (800c6c0 <__errno+0x8>)
 800c6ba:	6818      	ldr	r0, [r3, #0]
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	20000030 	.word	0x20000030

0800c6c4 <__libc_init_array>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	4d0d      	ldr	r5, [pc, #52]	@ (800c6fc <__libc_init_array+0x38>)
 800c6c8:	4c0d      	ldr	r4, [pc, #52]	@ (800c700 <__libc_init_array+0x3c>)
 800c6ca:	1b64      	subs	r4, r4, r5
 800c6cc:	10a4      	asrs	r4, r4, #2
 800c6ce:	2600      	movs	r6, #0
 800c6d0:	42a6      	cmp	r6, r4
 800c6d2:	d109      	bne.n	800c6e8 <__libc_init_array+0x24>
 800c6d4:	4d0b      	ldr	r5, [pc, #44]	@ (800c704 <__libc_init_array+0x40>)
 800c6d6:	4c0c      	ldr	r4, [pc, #48]	@ (800c708 <__libc_init_array+0x44>)
 800c6d8:	f000 f872 	bl	800c7c0 <_init>
 800c6dc:	1b64      	subs	r4, r4, r5
 800c6de:	10a4      	asrs	r4, r4, #2
 800c6e0:	2600      	movs	r6, #0
 800c6e2:	42a6      	cmp	r6, r4
 800c6e4:	d105      	bne.n	800c6f2 <__libc_init_array+0x2e>
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ec:	4798      	blx	r3
 800c6ee:	3601      	adds	r6, #1
 800c6f0:	e7ee      	b.n	800c6d0 <__libc_init_array+0xc>
 800c6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6f6:	4798      	blx	r3
 800c6f8:	3601      	adds	r6, #1
 800c6fa:	e7f2      	b.n	800c6e2 <__libc_init_array+0x1e>
 800c6fc:	0800c884 	.word	0x0800c884
 800c700:	0800c884 	.word	0x0800c884
 800c704:	0800c884 	.word	0x0800c884
 800c708:	0800c888 	.word	0x0800c888

0800c70c <__retarget_lock_acquire_recursive>:
 800c70c:	4770      	bx	lr

0800c70e <__retarget_lock_release_recursive>:
 800c70e:	4770      	bx	lr

0800c710 <memcpy>:
 800c710:	440a      	add	r2, r1
 800c712:	4291      	cmp	r1, r2
 800c714:	f100 33ff 	add.w	r3, r0, #4294967295
 800c718:	d100      	bne.n	800c71c <memcpy+0xc>
 800c71a:	4770      	bx	lr
 800c71c:	b510      	push	{r4, lr}
 800c71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c722:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c726:	4291      	cmp	r1, r2
 800c728:	d1f9      	bne.n	800c71e <memcpy+0xe>
 800c72a:	bd10      	pop	{r4, pc}

0800c72c <_free_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4605      	mov	r5, r0
 800c730:	2900      	cmp	r1, #0
 800c732:	d041      	beq.n	800c7b8 <_free_r+0x8c>
 800c734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c738:	1f0c      	subs	r4, r1, #4
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	bfb8      	it	lt
 800c73e:	18e4      	addlt	r4, r4, r3
 800c740:	f7ff ff40 	bl	800c5c4 <__malloc_lock>
 800c744:	4a1d      	ldr	r2, [pc, #116]	@ (800c7bc <_free_r+0x90>)
 800c746:	6813      	ldr	r3, [r2, #0]
 800c748:	b933      	cbnz	r3, 800c758 <_free_r+0x2c>
 800c74a:	6063      	str	r3, [r4, #4]
 800c74c:	6014      	str	r4, [r2, #0]
 800c74e:	4628      	mov	r0, r5
 800c750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c754:	f7ff bf3c 	b.w	800c5d0 <__malloc_unlock>
 800c758:	42a3      	cmp	r3, r4
 800c75a:	d908      	bls.n	800c76e <_free_r+0x42>
 800c75c:	6820      	ldr	r0, [r4, #0]
 800c75e:	1821      	adds	r1, r4, r0
 800c760:	428b      	cmp	r3, r1
 800c762:	bf01      	itttt	eq
 800c764:	6819      	ldreq	r1, [r3, #0]
 800c766:	685b      	ldreq	r3, [r3, #4]
 800c768:	1809      	addeq	r1, r1, r0
 800c76a:	6021      	streq	r1, [r4, #0]
 800c76c:	e7ed      	b.n	800c74a <_free_r+0x1e>
 800c76e:	461a      	mov	r2, r3
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	b10b      	cbz	r3, 800c778 <_free_r+0x4c>
 800c774:	42a3      	cmp	r3, r4
 800c776:	d9fa      	bls.n	800c76e <_free_r+0x42>
 800c778:	6811      	ldr	r1, [r2, #0]
 800c77a:	1850      	adds	r0, r2, r1
 800c77c:	42a0      	cmp	r0, r4
 800c77e:	d10b      	bne.n	800c798 <_free_r+0x6c>
 800c780:	6820      	ldr	r0, [r4, #0]
 800c782:	4401      	add	r1, r0
 800c784:	1850      	adds	r0, r2, r1
 800c786:	4283      	cmp	r3, r0
 800c788:	6011      	str	r1, [r2, #0]
 800c78a:	d1e0      	bne.n	800c74e <_free_r+0x22>
 800c78c:	6818      	ldr	r0, [r3, #0]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	6053      	str	r3, [r2, #4]
 800c792:	4408      	add	r0, r1
 800c794:	6010      	str	r0, [r2, #0]
 800c796:	e7da      	b.n	800c74e <_free_r+0x22>
 800c798:	d902      	bls.n	800c7a0 <_free_r+0x74>
 800c79a:	230c      	movs	r3, #12
 800c79c:	602b      	str	r3, [r5, #0]
 800c79e:	e7d6      	b.n	800c74e <_free_r+0x22>
 800c7a0:	6820      	ldr	r0, [r4, #0]
 800c7a2:	1821      	adds	r1, r4, r0
 800c7a4:	428b      	cmp	r3, r1
 800c7a6:	bf04      	itt	eq
 800c7a8:	6819      	ldreq	r1, [r3, #0]
 800c7aa:	685b      	ldreq	r3, [r3, #4]
 800c7ac:	6063      	str	r3, [r4, #4]
 800c7ae:	bf04      	itt	eq
 800c7b0:	1809      	addeq	r1, r1, r0
 800c7b2:	6021      	streq	r1, [r4, #0]
 800c7b4:	6054      	str	r4, [r2, #4]
 800c7b6:	e7ca      	b.n	800c74e <_free_r+0x22>
 800c7b8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ba:	bf00      	nop
 800c7bc:	2000541c 	.word	0x2000541c

0800c7c0 <_init>:
 800c7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c2:	bf00      	nop
 800c7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7c6:	bc08      	pop	{r3}
 800c7c8:	469e      	mov	lr, r3
 800c7ca:	4770      	bx	lr

0800c7cc <_fini>:
 800c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ce:	bf00      	nop
 800c7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d2:	bc08      	pop	{r3}
 800c7d4:	469e      	mov	lr, r3
 800c7d6:	4770      	bx	lr
