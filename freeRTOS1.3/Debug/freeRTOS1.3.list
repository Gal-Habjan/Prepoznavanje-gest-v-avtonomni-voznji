
freeRTOS1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800c888  0800c888  0000d888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c92c  0800c92c  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c92c  0800c92c  0000d92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c934  0800c934  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c934  0800c934  0000d934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c938  0800c938  0000d938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800c93c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054e0  20000080  0800c9bc  0000e080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005560  0800c9bc  0000e560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025803  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005717  00000000  00000000  000338b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f00  00000000  00000000  00038fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f0  00000000  00000000  0003aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e0f  00000000  00000000  0003c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027153  00000000  00000000  000434cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d68  00000000  00000000  0006a622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c38a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086bc  00000000  00000000  0010c3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a6  00000000  00000000  00114a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c870 	.word	0x0800c870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800c870 	.word	0x0800c870

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <LEDTask>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LEDTask(void *pvParameters) {  // green LED
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	int recievedCommand = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
	for (;;) {
		xQueueReceive(ledQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80004dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <LEDTask+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f107 010c 	add.w	r1, r7, #12
 80004e4:	2264      	movs	r2, #100	@ 0x64
 80004e6:	4618      	mov	r0, r3
 80004e8:	f009 fb66 	bl	8009bb8 <xQueueReceive>

		if (recievedCommand == 1) {
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d106      	bne.n	8000500 <LEDTask+0x30>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004f8:	4806      	ldr	r0, [pc, #24]	@ (8000514 <LEDTask+0x44>)
 80004fa:	f001 f929 	bl	8001750 <HAL_GPIO_WritePin>
 80004fe:	e7ed      	b.n	80004dc <LEDTask+0xc>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000506:	4803      	ldr	r0, [pc, #12]	@ (8000514 <LEDTask+0x44>)
 8000508:	f001 f922 	bl	8001750 <HAL_GPIO_WritePin>
		xQueueReceive(ledQueue, &recievedCommand, pdMS_TO_TICKS(100));
 800050c:	e7e6      	b.n	80004dc <LEDTask+0xc>
 800050e:	bf00      	nop
 8000510:	200001e8 	.word	0x200001e8
 8000514:	40020c00 	.word	0x40020c00

08000518 <DC_MotorTask>:
		}

	}
}

void DC_MotorTask(void *pvParameters) {  // red LED
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	int recievedCommand = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
	for (;;) {
		xQueueReceive(motorQueue, &recievedCommand, pdMS_TO_TICKS(100));
 8000524:	4b2c      	ldr	r3, [pc, #176]	@ (80005d8 <DC_MotorTask+0xc0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f107 010c 	add.w	r1, r7, #12
 800052c:	2264      	movs	r2, #100	@ 0x64
 800052e:	4618      	mov	r0, r3
 8000530:	f009 fb42 	bl	8009bb8 <xQueueReceive>

		if (recievedCommand == 2) {
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d11a      	bne.n	8000570 <DC_MotorTask+0x58>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000540:	4826      	ldr	r0, [pc, #152]	@ (80005dc <DC_MotorTask+0xc4>)
 8000542:	f001 f905 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2102      	movs	r1, #2
 800054a:	4825      	ldr	r0, [pc, #148]	@ (80005e0 <DC_MotorTask+0xc8>)
 800054c:	f001 f900 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2104      	movs	r1, #4
 8000554:	4822      	ldr	r0, [pc, #136]	@ (80005e0 <DC_MotorTask+0xc8>)
 8000556:	f001 f8fb 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2110      	movs	r1, #16
 800055e:	4821      	ldr	r0, [pc, #132]	@ (80005e4 <DC_MotorTask+0xcc>)
 8000560:	f001 f8f6 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2120      	movs	r1, #32
 8000568:	481e      	ldr	r0, [pc, #120]	@ (80005e4 <DC_MotorTask+0xcc>)
 800056a:	f001 f8f1 	bl	8001750 <HAL_GPIO_WritePin>
 800056e:	e7d9      	b.n	8000524 <DC_MotorTask+0xc>
		} else if (recievedCommand == 3) {
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b03      	cmp	r3, #3
 8000574:	d114      	bne.n	80005a0 <DC_MotorTask+0x88>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2102      	movs	r1, #2
 800057a:	4819      	ldr	r0, [pc, #100]	@ (80005e0 <DC_MotorTask+0xc8>)
 800057c:	f001 f8e8 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2104      	movs	r1, #4
 8000584:	4816      	ldr	r0, [pc, #88]	@ (80005e0 <DC_MotorTask+0xc8>)
 8000586:	f001 f8e3 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2110      	movs	r1, #16
 800058e:	4815      	ldr	r0, [pc, #84]	@ (80005e4 <DC_MotorTask+0xcc>)
 8000590:	f001 f8de 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2120      	movs	r1, #32
 8000598:	4812      	ldr	r0, [pc, #72]	@ (80005e4 <DC_MotorTask+0xcc>)
 800059a:	f001 f8d9 	bl	8001750 <HAL_GPIO_WritePin>
 800059e:	e7c1      	b.n	8000524 <DC_MotorTask+0xc>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005a6:	480d      	ldr	r0, [pc, #52]	@ (80005dc <DC_MotorTask+0xc4>)
 80005a8:	f001 f8d2 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2102      	movs	r1, #2
 80005b0:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <DC_MotorTask+0xc8>)
 80005b2:	f001 f8cd 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2104      	movs	r1, #4
 80005ba:	4809      	ldr	r0, [pc, #36]	@ (80005e0 <DC_MotorTask+0xc8>)
 80005bc:	f001 f8c8 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2110      	movs	r1, #16
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <DC_MotorTask+0xcc>)
 80005c6:	f001 f8c3 	bl	8001750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <DC_MotorTask+0xcc>)
 80005d0:	f001 f8be 	bl	8001750 <HAL_GPIO_WritePin>
		xQueueReceive(motorQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80005d4:	e7a6      	b.n	8000524 <DC_MotorTask+0xc>
 80005d6:	bf00      	nop
 80005d8:	200001ec 	.word	0x200001ec
 80005dc:	40020c00 	.word	0x40020c00
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020800 	.word	0x40020800

080005e8 <beeperTask>:
		}

	}
}

void beeperTask(void *pvParameters) {  // blue LED
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	int recievedCommand = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
	for (;;) {
		xQueueReceive(beeperQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <beeperTask+0x40>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f107 010c 	add.w	r1, r7, #12
 80005fc:	2264      	movs	r2, #100	@ 0x64
 80005fe:	4618      	mov	r0, r3
 8000600:	f009 fada 	bl	8009bb8 <xQueueReceive>

		if (recievedCommand == 4) {
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2b04      	cmp	r3, #4
 8000608:	d106      	bne.n	8000618 <beeperTask+0x30>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000610:	4806      	ldr	r0, [pc, #24]	@ (800062c <beeperTask+0x44>)
 8000612:	f001 f89d 	bl	8001750 <HAL_GPIO_WritePin>
 8000616:	e7ed      	b.n	80005f4 <beeperTask+0xc>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800061e:	4803      	ldr	r0, [pc, #12]	@ (800062c <beeperTask+0x44>)
 8000620:	f001 f896 	bl	8001750 <HAL_GPIO_WritePin>
		xQueueReceive(beeperQueue, &recievedCommand, pdMS_TO_TICKS(100));
 8000624:	e7e6      	b.n	80005f4 <beeperTask+0xc>
 8000626:	bf00      	nop
 8000628:	200001f0 	.word	0x200001f0
 800062c:	40020c00 	.word	0x40020c00

08000630 <USBTask>:
		}

	}
}

void USBTask(void *pvParameters) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	int command = -1;
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	60fb      	str	r3, [r7, #12]
	for (;;) {
		command++;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
		if (command > 4) {
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2b04      	cmp	r3, #4
 8000648:	dd01      	ble.n	800064e <USBTask+0x1e>
			command = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
		}

		xQueueSend(ledQueue, &command, pdMS_TO_TICKS(100));
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <USBTask+0x64>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	f107 010c 	add.w	r1, r7, #12
 8000656:	2300      	movs	r3, #0
 8000658:	2264      	movs	r2, #100	@ 0x64
 800065a:	f009 f90d 	bl	8009878 <xQueueGenericSend>
		xQueueSend(motorQueue, &command, pdMS_TO_TICKS(100));
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <USBTask+0x68>)
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	f107 010c 	add.w	r1, r7, #12
 8000666:	2300      	movs	r3, #0
 8000668:	2264      	movs	r2, #100	@ 0x64
 800066a:	f009 f905 	bl	8009878 <xQueueGenericSend>
		xQueueSend(beeperQueue, &command, pdMS_TO_TICKS(100));
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <USBTask+0x6c>)
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	f107 010c 	add.w	r1, r7, #12
 8000676:	2300      	movs	r3, #0
 8000678:	2264      	movs	r2, #100	@ 0x64
 800067a:	f009 f8fd 	bl	8009878 <xQueueGenericSend>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800067e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000682:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <USBTask+0x70>)
 8000684:	f001 f87d 	bl	8001782 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000688:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800068c:	f009 ff24 	bl	800a4d8 <vTaskDelay>
		command++;
 8000690:	e7d5      	b.n	800063e <USBTask+0xe>
 8000692:	bf00      	nop
 8000694:	200001e8 	.word	0x200001e8
 8000698:	200001ec 	.word	0x200001ec
 800069c:	200001f0 	.word	0x200001f0
 80006a0:	40020c00 	.word	0x40020c00

080006a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
// Create a queue with 5 items, each of 1 byte (uint8_t) in size
	//usbQueue = xQueueCreate(5, sizeof(uint8_t));
	ledQueue = xQueueCreate(2, sizeof(int));
 80006aa:	2200      	movs	r2, #0
 80006ac:	2104      	movs	r1, #4
 80006ae:	2002      	movs	r0, #2
 80006b0:	f009 f883 	bl	80097ba <xQueueGenericCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a2c      	ldr	r2, [pc, #176]	@ (8000768 <main+0xc4>)
 80006b8:	6013      	str	r3, [r2, #0]
	motorQueue = xQueueCreate(2, sizeof(int));
 80006ba:	2200      	movs	r2, #0
 80006bc:	2104      	movs	r1, #4
 80006be:	2002      	movs	r0, #2
 80006c0:	f009 f87b 	bl	80097ba <xQueueGenericCreate>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a29      	ldr	r2, [pc, #164]	@ (800076c <main+0xc8>)
 80006c8:	6013      	str	r3, [r2, #0]
	beeperQueue = xQueueCreate(2, sizeof(int));
 80006ca:	2200      	movs	r2, #0
 80006cc:	2104      	movs	r1, #4
 80006ce:	2002      	movs	r0, #2
 80006d0:	f009 f873 	bl	80097ba <xQueueGenericCreate>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a26      	ldr	r2, [pc, #152]	@ (8000770 <main+0xcc>)
 80006d8:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006da:	f000 fd6d 	bl	80011b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006de:	f000 f865 	bl	80007ac <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80006e2:	f000 f8cb 	bl	800087c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006e6:	f000 f9ab 	bl	8000a40 <MX_GPIO_Init>
	MX_I2C1_Init();
 80006ea:	f000 f8e7 	bl	80008bc <MX_I2C1_Init>
	MX_I2S2_Init();
 80006ee:	f000 f913 	bl	8000918 <MX_I2S2_Init>
	MX_I2S3_Init();
 80006f2:	f000 f93f 	bl	8000974 <MX_I2S3_Init>
	MX_SPI1_Init();
 80006f6:	f000 f96d 	bl	80009d4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80006fa:	f008 fc67 	bl	8008fcc <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80006fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000774 <main+0xd0>)
 8000700:	2100      	movs	r1, #0
 8000702:	481d      	ldr	r0, [pc, #116]	@ (8000778 <main+0xd4>)
 8000704:	f008 fcac 	bl	8009060 <osThreadNew>
 8000708:	4603      	mov	r3, r0
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <main+0xd8>)
 800070c:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */

	/* add events, ... */
	xTaskCreate(LEDTask, "LED Task", 128, NULL, 2, &TaskHandle_LEDTask);
 800070e:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <main+0xdc>)
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	2302      	movs	r3, #2
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2300      	movs	r3, #0
 8000718:	2280      	movs	r2, #128	@ 0x80
 800071a:	491a      	ldr	r1, [pc, #104]	@ (8000784 <main+0xe0>)
 800071c:	481a      	ldr	r0, [pc, #104]	@ (8000788 <main+0xe4>)
 800071e:	f009 fd7d 	bl	800a21c <xTaskCreate>
	xTaskCreate(USBTask, "USB Task", 128, NULL, 2, NULL);
 8000722:	2300      	movs	r3, #0
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	2302      	movs	r3, #2
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2300      	movs	r3, #0
 800072c:	2280      	movs	r2, #128	@ 0x80
 800072e:	4917      	ldr	r1, [pc, #92]	@ (800078c <main+0xe8>)
 8000730:	4817      	ldr	r0, [pc, #92]	@ (8000790 <main+0xec>)
 8000732:	f009 fd73 	bl	800a21c <xTaskCreate>
	xTaskCreate(beeperTask, "beeper Task", 128, NULL, 2,
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <main+0xf0>)
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2302      	movs	r3, #2
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2300      	movs	r3, #0
 8000740:	2280      	movs	r2, #128	@ 0x80
 8000742:	4915      	ldr	r1, [pc, #84]	@ (8000798 <main+0xf4>)
 8000744:	4815      	ldr	r0, [pc, #84]	@ (800079c <main+0xf8>)
 8000746:	f009 fd69 	bl	800a21c <xTaskCreate>
			&TaskHandle_beeperTask);
	xTaskCreate(DC_MotorTask, "DC Motor Task", 128, NULL, 2,
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <main+0xfc>)
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	2302      	movs	r3, #2
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2300      	movs	r3, #0
 8000754:	2280      	movs	r2, #128	@ 0x80
 8000756:	4913      	ldr	r1, [pc, #76]	@ (80007a4 <main+0x100>)
 8000758:	4813      	ldr	r0, [pc, #76]	@ (80007a8 <main+0x104>)
 800075a:	f009 fd5f 	bl	800a21c <xTaskCreate>
			&TaskHandle_DC_MotorTask);
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800075e:	f008 fc59 	bl	8009014 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000762:	bf00      	nop
 8000764:	e7fd      	b.n	8000762 <main+0xbe>
 8000766:	bf00      	nop
 8000768:	200001e8 	.word	0x200001e8
 800076c:	200001ec 	.word	0x200001ec
 8000770:	200001f0 	.word	0x200001f0
 8000774:	0800c8f0 	.word	0x0800c8f0
 8000778:	08000c25 	.word	0x08000c25
 800077c:	200001d8 	.word	0x200001d8
 8000780:	200001dc 	.word	0x200001dc
 8000784:	0800c894 	.word	0x0800c894
 8000788:	080004d1 	.word	0x080004d1
 800078c:	0800c8a0 	.word	0x0800c8a0
 8000790:	08000631 	.word	0x08000631
 8000794:	200001e4 	.word	0x200001e4
 8000798:	0800c8ac 	.word	0x0800c8ac
 800079c:	080005e9 	.word	0x080005e9
 80007a0:	200001e0 	.word	0x200001e0
 80007a4:	0800c8b8 	.word	0x0800c8b8
 80007a8:	08000519 	.word	0x08000519

080007ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	@ 0x50
 80007b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	@ 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f00b ff66 	bl	800c68c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <SystemClock_Config+0xc8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	4a26      	ldr	r2, [pc, #152]	@ (8000874 <SystemClock_Config+0xc8>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e0:	4b24      	ldr	r3, [pc, #144]	@ (8000874 <SystemClock_Config+0xc8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <SystemClock_Config+0xcc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a20      	ldr	r2, [pc, #128]	@ (8000878 <SystemClock_Config+0xcc>)
 80007f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <SystemClock_Config+0xcc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000820:	23a8      	movs	r3, #168	@ 0xa8
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000824:	2304      	movs	r3, #4
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000828:	2307      	movs	r3, #7
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fed9 	bl	80045e8 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x94>
		Error_Handler();
 800083c:	f000 fa0e 	bl	8000c5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000850:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2102      	movs	r1, #2
 800085c:	4618      	mov	r0, r3
 800085e:	f004 f93b 	bl	8004ad8 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xc0>
		Error_Handler();
 8000868:	f000 f9f8 	bl	8000c5c <Error_Handler>
	}
}
 800086c:	bf00      	nop
 800086e:	3750      	adds	r7, #80	@ 0x50
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	615a      	str	r2, [r3, #20]

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000892:	2301      	movs	r3, #1
 8000894:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000896:	23c8      	movs	r3, #200	@ 0xc8
 8000898:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800089a:	2305      	movs	r3, #5
 800089c:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80008a2:	463b      	mov	r3, r7
 80008a4:	4618      	mov	r0, r3
 80008a6:	f004 fb55 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <PeriphCommonClock_Config+0x38>
		Error_Handler();
 80008b0:	f000 f9d4 	bl	8000c5c <Error_Handler>
	}
}
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <MX_I2C1_Init+0x50>)
 80008c2:	4a13      	ldr	r2, [pc, #76]	@ (8000910 <MX_I2C1_Init+0x54>)
 80008c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_I2C1_Init+0x50>)
 80008c8:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <MX_I2C1_Init+0x58>)
 80008ca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_I2C1_Init+0x50>)
 80008da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008de:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <MX_I2C1_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_I2C1_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_I2C1_Init+0x50>)
 80008fa:	f003 f891 	bl	8003a20 <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000904:	f000 f9aa 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000009c 	.word	0x2000009c
 8000910:	40005400 	.word	0x40005400
 8000914:	000186a0 	.word	0x000186a0

08000918 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_I2S2_Init+0x50>)
 800091e:	4a13      	ldr	r2, [pc, #76]	@ (800096c <MX_I2S2_Init+0x54>)
 8000920:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_I2S2_Init+0x50>)
 8000924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000928:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_I2S2_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000930:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <MX_I2S2_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_I2S2_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_I2S2_Init+0x50>)
 800093e:	4a0c      	ldr	r2, [pc, #48]	@ (8000970 <MX_I2S2_Init+0x58>)
 8000940:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_I2S2_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_I2S2_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_I2S2_Init+0x50>)
 8000950:	2201      	movs	r2, #1
 8000952:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_I2S2_Init+0x50>)
 8000956:	f003 f9a7 	bl	8003ca8 <HAL_I2S_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2S2_Init+0x4c>
		Error_Handler();
 8000960:	f000 f97c 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000f0 	.word	0x200000f0
 800096c:	40003800 	.word	0x40003800
 8000970:	00017700 	.word	0x00017700

08000974 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_I2S3_Init+0x54>)
 800097a:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <MX_I2S3_Init+0x58>)
 800097c:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_I2S3_Init+0x54>)
 8000980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000984:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_I2S3_Init+0x54>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_I2S3_Init+0x54>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <MX_I2S3_Init+0x54>)
 8000994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000998:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_I2S3_Init+0x54>)
 800099c:	4a0c      	ldr	r2, [pc, #48]	@ (80009d0 <MX_I2S3_Init+0x5c>)
 800099e:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_I2S3_Init+0x54>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_I2S3_Init+0x54>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_I2S3_Init+0x54>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_I2S3_Init+0x54>)
 80009b4:	f003 f978 	bl	8003ca8 <HAL_I2S_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2S3_Init+0x4e>
		Error_Handler();
 80009be:	f000 f94d 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000138 	.word	0x20000138
 80009cc:	40003c00 	.word	0x40003c00
 80009d0:	00017700 	.word	0x00017700

080009d4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80009d8:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_SPI1_Init+0x64>)
 80009da:	4a18      	ldr	r2, [pc, #96]	@ (8000a3c <MX_SPI1_Init+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_SPI1_Init+0x64>)
 80009e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009e4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_SPI1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_SPI1_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_SPI1_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_SPI1_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_SPI1_Init+0x64>)
 8000a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a04:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_SPI1_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <MX_SPI1_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_SPI1_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <MX_SPI1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_SPI1_Init+0x64>)
 8000a20:	220a      	movs	r2, #10
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_SPI1_Init+0x64>)
 8000a26:	f004 fbe7 	bl	80051f8 <HAL_SPI_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000a30:	f000 f914 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000180 	.word	0x20000180
 8000a3c:	40013000 	.word	0x40013000

08000a40 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	@ 0x30
 8000a44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a6c      	ldr	r2, [pc, #432]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b6a      	ldr	r3, [pc, #424]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	4b66      	ldr	r3, [pc, #408]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a65      	ldr	r2, [pc, #404]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b63      	ldr	r3, [pc, #396]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b5f      	ldr	r3, [pc, #380]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a5e      	ldr	r2, [pc, #376]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b58      	ldr	r3, [pc, #352]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a57      	ldr	r2, [pc, #348]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b55      	ldr	r3, [pc, #340]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	4b51      	ldr	r3, [pc, #324]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a50      	ldr	r2, [pc, #320]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a49      	ldr	r2, [pc, #292]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b47      	ldr	r3, [pc, #284]	@ (8000c10 <MX_GPIO_Init+0x1d0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2108      	movs	r1, #8
 8000b02:	4844      	ldr	r0, [pc, #272]	@ (8000c14 <MX_GPIO_Init+0x1d4>)
 8000b04:	f000 fe24 	bl	8001750 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	4842      	ldr	r0, [pc, #264]	@ (8000c18 <MX_GPIO_Init+0x1d8>)
 8000b0e:	f000 fe1f 	bl	8001750 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2106      	movs	r1, #6
 8000b16:	4841      	ldr	r0, [pc, #260]	@ (8000c1c <MX_GPIO_Init+0x1dc>)
 8000b18:	f000 fe1a 	bl	8001750 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2130      	movs	r1, #48	@ 0x30
 8000b20:	483d      	ldr	r0, [pc, #244]	@ (8000c18 <MX_GPIO_Init+0x1d8>)
 8000b22:	f000 fe15 	bl	8001750 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000b26:	2200      	movs	r2, #0
 8000b28:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000b2c:	483c      	ldr	r0, [pc, #240]	@ (8000c20 <MX_GPIO_Init+0x1e0>)
 8000b2e:	f000 fe0f 	bl	8001750 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : DATA_Ready_Pin */
	GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000b32:	2304      	movs	r3, #4
 8000b34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4833      	ldr	r0, [pc, #204]	@ (8000c14 <MX_GPIO_Init+0x1d4>)
 8000b46:	f000 fc7f 	bl	8001448 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	482c      	ldr	r0, [pc, #176]	@ (8000c14 <MX_GPIO_Init+0x1d4>)
 8000b62:	f000 fc71 	bl	8001448 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = INT1_Pin | INT2_Pin | MEMS_INT2_Pin;
 8000b66:	2332      	movs	r3, #50	@ 0x32
 8000b68:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b6a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b6e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4826      	ldr	r0, [pc, #152]	@ (8000c14 <MX_GPIO_Init+0x1d4>)
 8000b7c:	f000 fc64 	bl	8001448 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC4 PC5 */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | GPIO_PIN_4 | GPIO_PIN_5;
 8000b80:	2331      	movs	r3, #49	@ 0x31
 8000b82:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4820      	ldr	r0, [pc, #128]	@ (8000c18 <MX_GPIO_Init+0x1d8>)
 8000b98:	f000 fc56 	bl	8001448 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ba0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ba4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <MX_GPIO_Init+0x1dc>)
 8000bb2:	f000 fc49 	bl	8001448 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2;
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4813      	ldr	r0, [pc, #76]	@ (8000c1c <MX_GPIO_Init+0x1dc>)
 8000bce:	f000 fc3b 	bl	8001448 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000bd2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000bd6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <MX_GPIO_Init+0x1e0>)
 8000bec:	f000 fc2c 	bl	8001448 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <MX_GPIO_Init+0x1e0>)
 8000c04:	f000 fc20 	bl	8001448 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c08:	bf00      	nop
 8000c0a:	3730      	adds	r7, #48	@ 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020c00 	.word	0x40020c00

08000c24 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8000c2c:	f00b f96c 	bl	800bf08 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f008 faa7 	bl	8009184 <osDelay>
 8000c36:	e7fb      	b.n	8000c30 <StartDefaultTask+0xc>

08000c38 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c4a:	f000 fad7 	bl	80011fc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40000800 	.word	0x40000800

08000c5c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	4a11      	ldr	r2, [pc, #68]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <HAL_MspInit+0x54>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	210f      	movs	r1, #15
 8000caa:	f06f 0001 	mvn.w	r0, #1
 8000cae:	f000 fba1 	bl	80013f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	@ (8000d44 <HAL_I2C_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12c      	bne.n	8000d3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_I2C_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a17      	ldr	r2, [pc, #92]	@ (8000d48 <HAL_I2C_MspInit+0x88>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <HAL_I2C_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cfe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d04:	2312      	movs	r3, #18
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d10:	2304      	movs	r3, #4
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <HAL_I2C_MspInit+0x8c>)
 8000d1c:	f000 fb94 	bl	8001448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_I2C_MspInit+0x88>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <HAL_I2C_MspInit+0x88>)
 8000d2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_I2C_MspInit+0x88>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40005400 	.word	0x40005400
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020400 	.word	0x40020400

08000d50 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	@ 0x38
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a59      	ldr	r2, [pc, #356]	@ (8000ed4 <HAL_I2S_MspInit+0x184>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d15b      	bne.n	8000e2a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	4b58      	ldr	r3, [pc, #352]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	4a57      	ldr	r2, [pc, #348]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d82:	4b55      	ldr	r3, [pc, #340]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	4b51      	ldr	r3, [pc, #324]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a50      	ldr	r2, [pc, #320]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a49      	ldr	r2, [pc, #292]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b47      	ldr	r3, [pc, #284]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	483e      	ldr	r0, [pc, #248]	@ (8000edc <HAL_I2S_MspInit+0x18c>)
 8000de2:	f000 fb31 	bl	8001448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000de6:	2308      	movs	r3, #8
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df6:	2305      	movs	r3, #5
 8000df8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4836      	ldr	r0, [pc, #216]	@ (8000edc <HAL_I2S_MspInit+0x18c>)
 8000e02:	f000 fb21 	bl	8001448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e06:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e18:	2305      	movs	r3, #5
 8000e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	482f      	ldr	r0, [pc, #188]	@ (8000ee0 <HAL_I2S_MspInit+0x190>)
 8000e24:	f000 fb10 	bl	8001448 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e28:	e04f      	b.n	8000eca <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ee4 <HAL_I2S_MspInit+0x194>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d14a      	bne.n	8000eca <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	4a26      	ldr	r2, [pc, #152]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e44:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e74:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <HAL_I2S_MspInit+0x188>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4811      	ldr	r0, [pc, #68]	@ (8000ee8 <HAL_I2S_MspInit+0x198>)
 8000ea4:	f000 fad0 	bl	8001448 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ea8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	@ (8000edc <HAL_I2S_MspInit+0x18c>)
 8000ec6:	f000 fabf 	bl	8001448 <HAL_GPIO_Init>
}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	@ 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40003800 	.word	0x40003800
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40003c00 	.word	0x40003c00
 8000ee8:	40020000 	.word	0x40020000

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a19      	ldr	r2, [pc, #100]	@ (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12b      	bne.n	8000f66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a10      	ldr	r2, [pc, #64]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f46:	23e0      	movs	r3, #224	@ 0xe0
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f56:	2305      	movs	r3, #5
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f62:	f000 fa71 	bl	8001448 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	@ 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000

08000f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08e      	sub	sp, #56	@ 0x38
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4b33      	ldr	r3, [pc, #204]	@ (8001060 <HAL_InitTick+0xe4>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	4a32      	ldr	r2, [pc, #200]	@ (8001060 <HAL_InitTick+0xe4>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9c:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <HAL_InitTick+0xe4>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa8:	f107 0210 	add.w	r2, r7, #16
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 ff9c 	bl	8004ef0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d103      	bne.n	8000fca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fc2:	f003 ff81 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
 8000fc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000fc8:	e004      	b.n	8000fd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fca:	f003 ff7d 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd6:	4a23      	ldr	r2, [pc, #140]	@ (8001064 <HAL_InitTick+0xe8>)
 8000fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fdc:	0c9b      	lsrs	r3, r3, #18
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <HAL_InitTick+0xec>)
 8000fe4:	4a21      	ldr	r2, [pc, #132]	@ (800106c <HAL_InitTick+0xf0>)
 8000fe6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8001068 <HAL_InitTick+0xec>)
 8000fea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fee:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8001068 <HAL_InitTick+0xec>)
 8000ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ff4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <HAL_InitTick+0xec>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <HAL_InitTick+0xec>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <HAL_InitTick+0xec>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001008:	4817      	ldr	r0, [pc, #92]	@ (8001068 <HAL_InitTick+0xec>)
 800100a:	f004 f97e 	bl	800530a <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001014:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001018:	2b00      	cmp	r3, #0
 800101a:	d11b      	bne.n	8001054 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800101c:	4812      	ldr	r0, [pc, #72]	@ (8001068 <HAL_InitTick+0xec>)
 800101e:	f004 f9cd 	bl	80053bc <HAL_TIM_Base_Start_IT>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001028:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800102c:	2b00      	cmp	r3, #0
 800102e:	d111      	bne.n	8001054 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001030:	201e      	movs	r0, #30
 8001032:	f000 f9fb 	bl	800142c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d808      	bhi.n	800104e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	201e      	movs	r0, #30
 8001042:	f000 f9d7 	bl	80013f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <HAL_InitTick+0xf4>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e002      	b.n	8001054 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001054:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001058:	4618      	mov	r0, r3
 800105a:	3738      	adds	r7, #56	@ 0x38
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	431bde83 	.word	0x431bde83
 8001068:	200001f4 	.word	0x200001f4
 800106c:	40000800 	.word	0x40000800
 8001070:	20000004 	.word	0x20000004

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <NMI_Handler+0x4>

0800107c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <MemManage_Handler+0x4>

0800108c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <UsageFault_Handler+0x4>

0800109c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <TIM4_IRQHandler+0x10>)
 80010b2:	f004 f9e5 	bl	8005480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001f4 	.word	0x200001f4

080010c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <OTG_FS_IRQHandler+0x10>)
 80010c6:	f000 fe57 	bl	8001d78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20005038 	.word	0x20005038

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	@ (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	@ (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f00b fb30 	bl	800c768 <__errno>
 8001108:	4603      	mov	r3, r0
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20020000 	.word	0x20020000
 8001134:	00000400 	.word	0x00000400
 8001138:	2000023c 	.word	0x2000023c
 800113c:	20005560 	.word	0x20005560

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <SystemInit+0x20>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114a:	4a05      	ldr	r2, [pc, #20]	@ (8001160 <SystemInit+0x20>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800119c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001168:	f7ff ffea 	bl	8001140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	@ (80011a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	@ (80011a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	@ (80011b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f00b faef 	bl	800c774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001196:	f7ff fa85 	bl	80006a4 <main>
  bx  lr    
 800119a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800119c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80011a8:	0800c93c 	.word	0x0800c93c
  ldr r2, =_sbss
 80011ac:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011b0:	20005560 	.word	0x20005560

080011b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <HAL_Init+0x40>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <HAL_Init+0x40>)
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <HAL_Init+0x40>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f8fc 	bl	80013de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	200f      	movs	r0, #15
 80011e8:	f7ff fec8 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fd3c 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	20000240 	.word	0x20000240

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000240 	.word	0x20000240

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	@ (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	@ (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff4c 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001406:	f7ff ff61 	bl	80012cc <__NVIC_GetPriorityGrouping>
 800140a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	6978      	ldr	r0, [r7, #20]
 8001412:	f7ff ffb1 	bl	8001378 <NVIC_EncodePriority>
 8001416:	4602      	mov	r2, r0
 8001418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff80 	bl	8001324 <__NVIC_SetPriority>
}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff54 	bl	80012e8 <__NVIC_EnableIRQ>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	@ 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	e159      	b.n	8001718 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8148 	bne.w	8001712 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d005      	beq.n	800149a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001496:	2b02      	cmp	r3, #2
 8001498:	d130      	bne.n	80014fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 0201 	and.w	r2, r3, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b03      	cmp	r3, #3
 8001506:	d017      	beq.n	8001538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d123      	bne.n	800158c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3208      	adds	r2, #8
 800154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	08da      	lsrs	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3208      	adds	r2, #8
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0203 	and.w	r2, r3, #3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80a2 	beq.w	8001712 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b57      	ldr	r3, [pc, #348]	@ (8001730 <HAL_GPIO_Init+0x2e8>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	4a56      	ldr	r2, [pc, #344]	@ (8001730 <HAL_GPIO_Init+0x2e8>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015de:	4b54      	ldr	r3, [pc, #336]	@ (8001730 <HAL_GPIO_Init+0x2e8>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ea:	4a52      	ldr	r2, [pc, #328]	@ (8001734 <HAL_GPIO_Init+0x2ec>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a49      	ldr	r2, [pc, #292]	@ (8001738 <HAL_GPIO_Init+0x2f0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d019      	beq.n	800164a <HAL_GPIO_Init+0x202>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a48      	ldr	r2, [pc, #288]	@ (800173c <HAL_GPIO_Init+0x2f4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x1fe>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a47      	ldr	r2, [pc, #284]	@ (8001740 <HAL_GPIO_Init+0x2f8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00d      	beq.n	8001642 <HAL_GPIO_Init+0x1fa>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a46      	ldr	r2, [pc, #280]	@ (8001744 <HAL_GPIO_Init+0x2fc>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d007      	beq.n	800163e <HAL_GPIO_Init+0x1f6>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a45      	ldr	r2, [pc, #276]	@ (8001748 <HAL_GPIO_Init+0x300>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_GPIO_Init+0x1f2>
 8001636:	2304      	movs	r3, #4
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x204>
 800163a:	2307      	movs	r3, #7
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x204>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x204>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x204>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x204>
 800164a:	2300      	movs	r3, #0
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165c:	4935      	ldr	r1, [pc, #212]	@ (8001734 <HAL_GPIO_Init+0x2ec>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166a:	4b38      	ldr	r3, [pc, #224]	@ (800174c <HAL_GPIO_Init+0x304>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168e:	4a2f      	ldr	r2, [pc, #188]	@ (800174c <HAL_GPIO_Init+0x304>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001694:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <HAL_GPIO_Init+0x304>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b8:	4a24      	ldr	r2, [pc, #144]	@ (800174c <HAL_GPIO_Init+0x304>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016be:	4b23      	ldr	r3, [pc, #140]	@ (800174c <HAL_GPIO_Init+0x304>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016e2:	4a1a      	ldr	r2, [pc, #104]	@ (800174c <HAL_GPIO_Init+0x304>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e8:	4b18      	ldr	r3, [pc, #96]	@ (800174c <HAL_GPIO_Init+0x304>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170c:	4a0f      	ldr	r2, [pc, #60]	@ (800174c <HAL_GPIO_Init+0x304>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	f67f aea2 	bls.w	8001464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3724      	adds	r7, #36	@ 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400
 8001740:	40020800 	.word	0x40020800
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40021000 	.word	0x40021000
 800174c:	40013c00 	.word	0x40013c00

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800176c:	e003      	b.n	8001776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	041a      	lsls	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4013      	ands	r3, r2
 800179a:	041a      	lsls	r2, r3, #16
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43d9      	mvns	r1, r3
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	400b      	ands	r3, r1
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af02      	add	r7, sp, #8
 80017bc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e059      	b.n	800187c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f00a fbe4 	bl	800bfb0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2203      	movs	r2, #3
 80017ec:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017f6:	d102      	bne.n	80017fe <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f004 f869 	bl	80058da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7c1a      	ldrb	r2, [r3, #16]
 8001810:	f88d 2000 	strb.w	r2, [sp]
 8001814:	3304      	adds	r3, #4
 8001816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001818:	f003 ffea 	bl	80057f0 <USB_CoreInit>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2202      	movs	r2, #2
 8001826:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e026      	b.n	800187c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2101      	movs	r1, #1
 8001834:	4618      	mov	r0, r3
 8001836:	f004 f861 	bl	80058fc <USB_SetCurrentMode>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e017      	b.n	800187c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7c1a      	ldrb	r2, [r3, #16]
 8001854:	f88d 2000 	strb.w	r2, [sp]
 8001858:	3304      	adds	r3, #4
 800185a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800185c:	f004 fa04 	bl	8005c68 <USB_HostInit>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e004      	b.n	800187c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b08b      	sub	sp, #44	@ 0x2c
 8001888:	af04      	add	r7, sp, #16
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4603      	mov	r3, r0
 8001894:	70fb      	strb	r3, [r7, #3]
 8001896:	460b      	mov	r3, r1
 8001898:	70bb      	strb	r3, [r7, #2]
 800189a:	4613      	mov	r3, r2
 800189c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800189e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80018a0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_HCD_HC_Init+0x2c>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e09d      	b.n	80019ec <HAL_HCD_HC_Init+0x168>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3319      	adds	r3, #25
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3314      	adds	r3, #20
 80018dc:	787a      	ldrb	r2, [r7, #1]
 80018de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3315      	adds	r3, #21
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3326      	adds	r3, #38	@ 0x26
 8001904:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001908:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	78bb      	ldrb	r3, [r7, #2]
 800190e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001912:	b2d8      	uxtb	r0, r3
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	3316      	adds	r3, #22
 8001922:	4602      	mov	r2, r0
 8001924:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	4619      	mov	r1, r3
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fbc8 	bl	80020c0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001930:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001934:	2b00      	cmp	r3, #0
 8001936:	da0a      	bge.n	800194e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3317      	adds	r3, #23
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	e009      	b.n	8001962 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3317      	adds	r3, #23
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f004 facc 	bl	8005f04 <USB_GetHostSpeed>
 800196c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800196e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10b      	bne.n	800198e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001976:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800197a:	2b01      	cmp	r3, #1
 800197c:	d107      	bne.n	800198e <HAL_HCD_HC_Init+0x10a>
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d104      	bne.n	800198e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2bbc      	cmp	r3, #188	@ 0xbc
 8001988:	d901      	bls.n	800198e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800198a:	23bc      	movs	r3, #188	@ 0xbc
 800198c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	3318      	adds	r3, #24
 800199e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80019a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	b298      	uxth	r0, r3
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	3328      	adds	r3, #40	@ 0x28
 80019b8:	4602      	mov	r2, r0
 80019ba:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	787c      	ldrb	r4, [r7, #1]
 80019c6:	78ba      	ldrb	r2, [r7, #2]
 80019c8:	78f9      	ldrb	r1, [r7, #3]
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	4623      	mov	r3, r4
 80019da:	f004 fabb 	bl	8005f54 <USB_HC_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd90      	pop	{r4, r7, pc}

080019f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_HCD_HC_Halt+0x1e>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e00f      	b.n	8001a32 <HAL_HCD_HC_Halt+0x3e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fe01 	bl	800662a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	70fb      	strb	r3, [r7, #3]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70bb      	strb	r3, [r7, #2]
 8001a52:	4613      	mov	r3, r2
 8001a54:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3317      	adds	r3, #23
 8001a66:	78ba      	ldrb	r2, [r7, #2]
 8001a68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a6a:	78fa      	ldrb	r2, [r7, #3]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	3326      	adds	r3, #38	@ 0x26
 8001a7a:	787a      	ldrb	r2, [r7, #1]
 8001a7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a7e:	7c3b      	ldrb	r3, [r7, #16]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d114      	bne.n	8001aae <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	332a      	adds	r3, #42	@ 0x2a
 8001a94:	2203      	movs	r2, #3
 8001a96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3319      	adds	r3, #25
 8001aa8:	7f3a      	ldrb	r2, [r7, #28]
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e009      	b.n	8001ac2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	332a      	adds	r3, #42	@ 0x2a
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ac2:	787b      	ldrb	r3, [r7, #1]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	f200 8102 	bhi.w	8001cce <HAL_HCD_HC_SubmitRequest+0x292>
 8001aca:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001ae1 	.word	0x08001ae1
 8001ad4:	08001cb9 	.word	0x08001cb9
 8001ad8:	08001ba5 	.word	0x08001ba5
 8001adc:	08001c2f 	.word	0x08001c2f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001ae0:	7c3b      	ldrb	r3, [r7, #16]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	f040 80f5 	bne.w	8001cd2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001ae8:	78bb      	ldrb	r3, [r7, #2]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d12d      	bne.n	8001b4a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001aee:	8b3b      	ldrh	r3, [r7, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d109      	bne.n	8001b08 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	333d      	adds	r3, #61	@ 0x3d
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	333d      	adds	r3, #61	@ 0x3d
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	332a      	adds	r3, #42	@ 0x2a
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001b32:	e0ce      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	332a      	adds	r3, #42	@ 0x2a
 8001b44:	2202      	movs	r2, #2
 8001b46:	701a      	strb	r2, [r3, #0]
      break;
 8001b48:	e0c3      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001b4a:	78fa      	ldrb	r2, [r7, #3]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	331a      	adds	r3, #26
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	f040 80b8 	bne.w	8001cd2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	333c      	adds	r3, #60	@ 0x3c
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	332a      	adds	r3, #42	@ 0x2a
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
      break;
 8001b8c:	e0a1      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	332a      	adds	r3, #42	@ 0x2a
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	701a      	strb	r2, [r3, #0]
      break;
 8001ba2:	e096      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ba4:	78bb      	ldrb	r3, [r7, #2]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d120      	bne.n	8001bec <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	333d      	adds	r3, #61	@ 0x3d
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10a      	bne.n	8001bd6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	332a      	adds	r3, #42	@ 0x2a
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bd4:	e07e      	b.n	8001cd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bd6:	78fa      	ldrb	r2, [r7, #3]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	332a      	adds	r3, #42	@ 0x2a
 8001be6:	2202      	movs	r2, #2
 8001be8:	701a      	strb	r2, [r3, #0]
      break;
 8001bea:	e073      	b.n	8001cd4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	333c      	adds	r3, #60	@ 0x3c
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	332a      	adds	r3, #42	@ 0x2a
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
      break;
 8001c16:	e05d      	b.n	8001cd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	332a      	adds	r3, #42	@ 0x2a
 8001c28:	2202      	movs	r2, #2
 8001c2a:	701a      	strb	r2, [r3, #0]
      break;
 8001c2c:	e052      	b.n	8001cd4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c2e:	78bb      	ldrb	r3, [r7, #2]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d120      	bne.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	333d      	adds	r3, #61	@ 0x3d
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	332a      	adds	r3, #42	@ 0x2a
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c5e:	e039      	b.n	8001cd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	332a      	adds	r3, #42	@ 0x2a
 8001c70:	2202      	movs	r2, #2
 8001c72:	701a      	strb	r2, [r3, #0]
      break;
 8001c74:	e02e      	b.n	8001cd4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	333c      	adds	r3, #60	@ 0x3c
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10a      	bne.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	332a      	adds	r3, #42	@ 0x2a
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
      break;
 8001ca0:	e018      	b.n	8001cd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	332a      	adds	r3, #42	@ 0x2a
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	701a      	strb	r2, [r3, #0]
      break;
 8001cb6:	e00d      	b.n	8001cd4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb8:	78fa      	ldrb	r2, [r7, #3]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	332a      	adds	r3, #42	@ 0x2a
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
      break;
 8001ccc:	e002      	b.n	8001cd4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001cce:	bf00      	nop
 8001cd0:	e000      	b.n	8001cd4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001cd2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	332c      	adds	r3, #44	@ 0x2c
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	8b39      	ldrh	r1, [r7, #24]
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4403      	add	r3, r0
 8001cf8:	3334      	adds	r3, #52	@ 0x34
 8001cfa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	334c      	adds	r3, #76	@ 0x4c
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d10:	78fa      	ldrb	r2, [r7, #3]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3338      	adds	r3, #56	@ 0x38
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	3315      	adds	r3, #21
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	334d      	adds	r3, #77	@ 0x4d
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	3310      	adds	r3, #16
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	1d19      	adds	r1, r3, #4
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	799b      	ldrb	r3, [r3, #6]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f004 fa0a 	bl	8006180 <USB_HC_StartXfer>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop

08001d78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 ff2a 	bl	8005be8 <USB_GetMode>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	f040 80fb 	bne.w	8001f92 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 feed 	bl	8005b80 <USB_ReadInterrupts>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80f1 	beq.w	8001f90 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fee4 	bl	8005b80 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001dc2:	d104      	bne.n	8001dce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001dcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fed4 	bl	8005b80 <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001de2:	d104      	bne.n	8001dee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001dec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fec4 	bl	8005b80 <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001e02:	d104      	bne.n	8001e0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 feb4 	bl	8005b80 <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d103      	bne.n	8001e2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2202      	movs	r2, #2
 8001e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fea6 	bl	8005b80 <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e3e:	d120      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001e48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d113      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	6938      	ldr	r0, [r7, #16]
 8001e5e:	f003 fd99 	bl	8005994 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e62:	6938      	ldr	r0, [r7, #16]
 8001e64:	f003 fdc8 	bl	80059f8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7a5b      	ldrb	r3, [r3, #9]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d105      	bne.n	8001e7c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 ffa4 	bl	8005dc4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f00a f915 	bl	800c0ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fe7a 	bl	8005b80 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e96:	d102      	bne.n	8001e9e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f001 fd4d 	bl	8003938 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fe6c 	bl	8005b80 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d106      	bne.n	8001ec0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f00a f8de 	bl	800c074 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 fe5b 	bl	8005b80 <USB_ReadInterrupts>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ed4:	d139      	bne.n	8001f4a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fb94 	bl	8006608 <USB_HC_ReadInterrupt>
 8001ee0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e025      	b.n	8001f34 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d018      	beq.n	8001f2e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f12:	d106      	bne.n	8001f22 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f905 	bl	800212a <HCD_HC_IN_IRQHandler>
 8001f20:	e005      	b.n	8001f2e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4619      	mov	r1, r3
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 ff67 	bl	8002dfc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	795b      	ldrb	r3, [r3, #5]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d3d3      	bcc.n	8001ee8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fe16 	bl	8005b80 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d101      	bne.n	8001f62 <HAL_HCD_IRQHandler+0x1ea>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_HCD_IRQHandler+0x1ec>
 8001f62:	2300      	movs	r3, #0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d014      	beq.n	8001f92 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0210 	bic.w	r2, r2, #16
 8001f76:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f001 fbfe 	bl	800377a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699a      	ldr	r2, [r3, #24]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0210 	orr.w	r2, r2, #16
 8001f8c:	619a      	str	r2, [r3, #24]
 8001f8e:	e000      	b.n	8001f92 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001f90:	bf00      	nop
    }
  }
}
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_HCD_Start+0x16>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e013      	b.n	8001fd6 <HAL_HCD_Start+0x3e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2101      	movs	r1, #1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 ff68 	bl	8005e92 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fc76 	bl	80058b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_HCD_Stop+0x16>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e00d      	b.n	8002010 <HAL_HCD_Stop+0x32>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f004 fc32 	bl	800686a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f003 ff0a 	bl	8005e3e <USB_ResetPort>
 800202a:	4603      	mov	r3, r0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	334c      	adds	r3, #76	@ 0x4c
 8002050:	781b      	ldrb	r3, [r3, #0]
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3338      	adds	r3, #56	@ 0x38
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f003 ff4c 	bl	8005f32 <USB_GetCurrentFrame>
 800209a:	4603      	mov	r3, r0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 ff27 	bl	8005f04 <USB_GetHostSpeed>
 80020b6:	4603      	mov	r3, r0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	331a      	adds	r3, #26
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	331b      	adds	r3, #27
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3325      	adds	r3, #37	@ 0x25
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3324      	adds	r3, #36	@ 0x24
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fd2c 	bl	8005ba6 <USB_ReadChInterrupts>
 800214e:	4603      	mov	r3, r0
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b04      	cmp	r3, #4
 8002156:	d11a      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002164:	461a      	mov	r2, r3
 8002166:	2304      	movs	r3, #4
 8002168:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	334d      	adds	r3, #77	@ 0x4d
 800217a:	2207      	movs	r2, #7
 800217c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fa4f 	bl	800662a <USB_HC_Halt>
 800218c:	e09e      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fd05 	bl	8005ba6 <USB_ReadChInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a6:	d11b      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b4:	461a      	mov	r2, r3
 80021b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	334d      	adds	r3, #77	@ 0x4d
 80021cc:	2208      	movs	r2, #8
 80021ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f004 fa26 	bl	800662a <USB_HC_Halt>
 80021de:	e075      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fcdc 	bl	8005ba6 <USB_ReadChInterrupts>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d11a      	bne.n	800222e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002204:	461a      	mov	r2, r3
 8002206:	2308      	movs	r3, #8
 8002208:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	334d      	adds	r3, #77	@ 0x4d
 800221a:	2206      	movs	r2, #6
 800221c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f004 f9ff 	bl	800662a <USB_HC_Halt>
 800222c:	e04e      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fcb5 	bl	8005ba6 <USB_ReadChInterrupts>
 800223c:	4603      	mov	r3, r0
 800223e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002246:	d11b      	bne.n	8002280 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800225a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	334d      	adds	r3, #77	@ 0x4d
 800226c:	2209      	movs	r2, #9
 800226e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f004 f9d6 	bl	800662a <USB_HC_Halt>
 800227e:	e025      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fc8c 	bl	8005ba6 <USB_ReadChInterrupts>
 800228e:	4603      	mov	r3, r0
 8002290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002294:	2b80      	cmp	r3, #128	@ 0x80
 8002296:	d119      	bne.n	80022cc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a4:	461a      	mov	r2, r3
 80022a6:	2380      	movs	r3, #128	@ 0x80
 80022a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	334d      	adds	r3, #77	@ 0x4d
 80022ba:	2207      	movs	r2, #7
 80022bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 f9af 	bl	800662a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fc66 	bl	8005ba6 <USB_ReadChInterrupts>
 80022da:	4603      	mov	r3, r0
 80022dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022e4:	d112      	bne.n	800230c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 f99b 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002300:	461a      	mov	r2, r3
 8002302:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	f000 bd75 	b.w	8002df6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f003 fc46 	bl	8005ba6 <USB_ReadChInterrupts>
 800231a:	4603      	mov	r3, r0
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	f040 8128 	bne.w	8002576 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002332:	461a      	mov	r2, r3
 8002334:	2320      	movs	r3, #32
 8002336:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	331b      	adds	r3, #27
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d119      	bne.n	8002382 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	331b      	adds	r3, #27
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	0151      	lsls	r1, r2, #5
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	440a      	add	r2, r1
 8002378:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800237c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002380:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	799b      	ldrb	r3, [r3, #6]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01b      	beq.n	80023c2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	3330      	adds	r3, #48	@ 0x30
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	1ac9      	subs	r1, r1, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4403      	add	r3, r0
 80023be:	3338      	adds	r3, #56	@ 0x38
 80023c0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	334d      	adds	r3, #77	@ 0x4d
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	3344      	adds	r3, #68	@ 0x44
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f6:	461a      	mov	r2, r3
 80023f8:	2301      	movs	r3, #1
 80023fa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3326      	adds	r3, #38	@ 0x26
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	3326      	adds	r3, #38	@ 0x26
 8002422:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002424:	2b02      	cmp	r3, #2
 8002426:	d110      	bne.n	800244a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f004 f8fa 	bl	800662a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002442:	461a      	mov	r2, r3
 8002444:	2310      	movs	r3, #16
 8002446:	6093      	str	r3, [r2, #8]
 8002448:	e03d      	b.n	80024c6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3326      	adds	r3, #38	@ 0x26
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d00a      	beq.n	8002476 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3326      	adds	r3, #38	@ 0x26
 8002470:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002472:	2b01      	cmp	r3, #1
 8002474:	d127      	bne.n	80024c6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	0151      	lsls	r1, r2, #5
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	440a      	add	r2, r1
 800248c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002490:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002494:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	334c      	adds	r3, #76	@ 0x4c
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	334c      	adds	r3, #76	@ 0x4c
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f009 fe01 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	799b      	ldrb	r3, [r3, #6]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d13b      	bne.n	8002546 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	3338      	adds	r3, #56	@ 0x38
 80024de:	6819      	ldr	r1, [r3, #0]
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4403      	add	r3, r0
 80024ee:	3328      	adds	r3, #40	@ 0x28
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	440b      	add	r3, r1
 80024f4:	1e59      	subs	r1, r3, #1
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4403      	add	r3, r0
 8002504:	3328      	adds	r3, #40	@ 0x28
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	fbb1 f3f3 	udiv	r3, r1, r3
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8470 	beq.w	8002df6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	333c      	adds	r3, #60	@ 0x3c
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	f083 0301 	eor.w	r3, r3, #1
 800252e:	b2d8      	uxtb	r0, r3
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	333c      	adds	r3, #60	@ 0x3c
 800253e:	4602      	mov	r2, r0
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	f000 bc58 	b.w	8002df6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	333c      	adds	r3, #60	@ 0x3c
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	f083 0301 	eor.w	r3, r3, #1
 800255e:	b2d8      	uxtb	r0, r3
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	333c      	adds	r3, #60	@ 0x3c
 800256e:	4602      	mov	r2, r0
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	f000 bc40 	b.w	8002df6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fb11 	bl	8005ba6 <USB_ReadChInterrupts>
 8002584:	4603      	mov	r3, r0
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b20      	cmp	r3, #32
 800258c:	d131      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800259a:	461a      	mov	r2, r3
 800259c:	2320      	movs	r3, #32
 800259e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	331a      	adds	r3, #26
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	f040 841f 	bne.w	8002df6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	331b      	adds	r3, #27
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	334d      	adds	r3, #77	@ 0x4d
 80025dc:	2203      	movs	r2, #3
 80025de:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f004 f81e 	bl	800662a <USB_HC_Halt>
 80025ee:	f000 bc02 	b.w	8002df6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fad3 	bl	8005ba6 <USB_ReadChInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b02      	cmp	r3, #2
 8002608:	f040 8305 	bne.w	8002c16 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002618:	461a      	mov	r2, r3
 800261a:	2302      	movs	r3, #2
 800261c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	334d      	adds	r3, #77	@ 0x4d
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d114      	bne.n	800265e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	334d      	adds	r3, #77	@ 0x4d
 8002644:	2202      	movs	r2, #2
 8002646:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	334c      	adds	r3, #76	@ 0x4c
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e2cc      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	334d      	adds	r3, #77	@ 0x4d
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b06      	cmp	r3, #6
 8002672:	d114      	bne.n	800269e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334d      	adds	r3, #77	@ 0x4d
 8002684:	2202      	movs	r2, #2
 8002686:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334c      	adds	r3, #76	@ 0x4c
 8002698:	2205      	movs	r2, #5
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e2ac      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	334d      	adds	r3, #77	@ 0x4d
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b07      	cmp	r3, #7
 80026b2:	d00b      	beq.n	80026cc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	334d      	adds	r3, #77	@ 0x4d
 80026c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80026c6:	2b09      	cmp	r3, #9
 80026c8:	f040 80a6 	bne.w	8002818 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334d      	adds	r3, #77	@ 0x4d
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3344      	adds	r3, #68	@ 0x44
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	1c59      	adds	r1, r3, #1
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4403      	add	r3, r0
 8002700:	3344      	adds	r3, #68	@ 0x44
 8002702:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3344      	adds	r3, #68	@ 0x44
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d943      	bls.n	80027a2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	3344      	adds	r3, #68	@ 0x44
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	331a      	adds	r3, #26
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d123      	bne.n	800278c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	331b      	adds	r3, #27
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	331c      	adds	r3, #28
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	440a      	add	r2, r1
 8002782:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334c      	adds	r3, #76	@ 0x4c
 800279c:	2204      	movs	r2, #4
 800279e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027a0:	e229      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	334c      	adds	r3, #76	@ 0x4c
 80027b2:	2202      	movs	r2, #2
 80027b4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	3326      	adds	r3, #38	@ 0x26
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3326      	adds	r3, #38	@ 0x26
 80027dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027de:	2b02      	cmp	r3, #2
 80027e0:	f040 8209 	bne.w	8002bf6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002802:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002816:	e1ee      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	334d      	adds	r3, #77	@ 0x4d
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b05      	cmp	r3, #5
 800282c:	f040 80c8 	bne.w	80029c0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	334d      	adds	r3, #77	@ 0x4d
 8002840:	2202      	movs	r2, #2
 8002842:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	331b      	adds	r3, #27
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	f040 81ce 	bne.w	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3326      	adds	r3, #38	@ 0x26
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d16b      	bne.n	800294a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3348      	adds	r3, #72	@ 0x48
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	1c59      	adds	r1, r3, #1
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4403      	add	r3, r0
 8002892:	3348      	adds	r3, #72	@ 0x48
 8002894:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	3348      	adds	r3, #72	@ 0x48
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d943      	bls.n	8002934 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3348      	adds	r3, #72	@ 0x48
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	331b      	adds	r3, #27
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3344      	adds	r3, #68	@ 0x44
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d809      	bhi.n	80028fe <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	331c      	adds	r3, #28
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	0151      	lsls	r1, r2, #5
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	440a      	add	r2, r1
 8002914:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800291c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	334c      	adds	r3, #76	@ 0x4c
 800292e:	2204      	movs	r2, #4
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e014      	b.n	800295e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	334c      	adds	r3, #76	@ 0x4c
 8002944:	2202      	movs	r2, #2
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e009      	b.n	800295e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	334c      	adds	r3, #76	@ 0x4c
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3326      	adds	r3, #38	@ 0x26
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3326      	adds	r3, #38	@ 0x26
 8002984:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002986:	2b02      	cmp	r3, #2
 8002988:	f040 8136 	bne.w	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029a2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029aa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b8:	461a      	mov	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e11b      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	334d      	adds	r3, #77	@ 0x4d
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	f040 8081 	bne.w	8002ada <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	334d      	adds	r3, #77	@ 0x4d
 80029e8:	2202      	movs	r2, #2
 80029ea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	331b      	adds	r3, #27
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	f040 80fa 	bne.w	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	334c      	adds	r3, #76	@ 0x4c
 8002a14:	2202      	movs	r2, #2
 8002a16:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	0151      	lsls	r1, r2, #5
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	440a      	add	r2, r1
 8002a2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a36:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	0151      	lsls	r1, r2, #5
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a56:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	0151      	lsls	r1, r2, #5
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	440a      	add	r2, r1
 8002a6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a72:	f023 0320 	bic.w	r3, r3, #32
 8002a76:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	3326      	adds	r3, #38	@ 0x26
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3326      	adds	r3, #38	@ 0x26
 8002a9e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	f040 80a9 	bne.w	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002abc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ac4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	e08e      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	334d      	adds	r3, #77	@ 0x4d
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d143      	bne.n	8002b78 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334d      	adds	r3, #77	@ 0x4d
 8002b00:	2202      	movs	r2, #2
 8002b02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	334c      	adds	r3, #76	@ 0x4c
 8002b14:	2202      	movs	r2, #2
 8002b16:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3326      	adds	r3, #38	@ 0x26
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3326      	adds	r3, #38	@ 0x26
 8002b3e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d159      	bne.n	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b5a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b62:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b70:	461a      	mov	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e03f      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	334d      	adds	r3, #77	@ 0x4d
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d126      	bne.n	8002bdc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	334d      	adds	r3, #77	@ 0x4d
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3344      	adds	r3, #68	@ 0x44
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1c59      	adds	r1, r3, #1
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4403      	add	r3, r0
 8002bc2:	3344      	adds	r3, #68	@ 0x44
 8002bc4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	334c      	adds	r3, #76	@ 0x4c
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e00d      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	334d      	adds	r3, #77	@ 0x4d
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	f000 8100 	beq.w	8002df4 <HCD_HC_IN_IRQHandler+0xcca>
 8002bf4:	e000      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bf6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	334c      	adds	r3, #76	@ 0x4c
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f009 fa5a 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c14:	e0ef      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 ffc1 	bl	8005ba6 <USB_ReadChInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2a:	2b40      	cmp	r3, #64	@ 0x40
 8002c2c:	d12f      	bne.n	8002c8e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2340      	movs	r3, #64	@ 0x40
 8002c3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	334d      	adds	r3, #77	@ 0x4d
 8002c50:	2205      	movs	r2, #5
 8002c52:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	331a      	adds	r3, #26
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3344      	adds	r3, #68	@ 0x44
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 fccf 	bl	800662a <USB_HC_Halt>
 8002c8c:	e0b3      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 ff85 	bl	8005ba6 <USB_ReadChInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	f040 80a7 	bne.w	8002df6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3326      	adds	r3, #38	@ 0x26
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d11b      	bne.n	8002cf6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3344      	adds	r3, #68	@ 0x44
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	334d      	adds	r3, #77	@ 0x4d
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 fc9b 	bl	800662a <USB_HC_Halt>
 8002cf4:	e03f      	b.n	8002d76 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3326      	adds	r3, #38	@ 0x26
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3326      	adds	r3, #38	@ 0x26
 8002d1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d129      	bne.n	8002d76 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3344      	adds	r3, #68	@ 0x44
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	799b      	ldrb	r3, [r3, #6]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HCD_HC_IN_IRQHandler+0xc2a>
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	331b      	adds	r3, #27
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d110      	bne.n	8002d76 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	334d      	adds	r3, #77	@ 0x4d
 8002d64:	2204      	movs	r2, #4
 8002d66:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fc5a 	bl	800662a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	331b      	adds	r3, #27
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d129      	bne.n	8002de0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	331b      	adds	r3, #27
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	0151      	lsls	r1, r2, #5
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	440a      	add	r2, r1
 8002db6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dbe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	0151      	lsls	r1, r2, #5
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	440a      	add	r2, r1
 8002dd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dda:	f043 0320 	orr.w	r3, r3, #32
 8002dde:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	2310      	movs	r3, #16
 8002df0:	6093      	str	r3, [r2, #8]
 8002df2:	e000      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002df4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f002 fec3 	bl	8005ba6 <USB_ReadChInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d11b      	bne.n	8002e62 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e36:	461a      	mov	r2, r3
 8002e38:	2304      	movs	r3, #4
 8002e3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	334d      	adds	r3, #77	@ 0x4d
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fbe6 	bl	800662a <USB_HC_Halt>
 8002e5e:	f000 bc89 	b.w	8003774 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f002 fe9b 	bl	8005ba6 <USB_ReadChInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	f040 8082 	bne.w	8002f80 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3319      	adds	r3, #25
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d124      	bne.n	8002eee <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3319      	adds	r3, #25
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334c      	adds	r3, #76	@ 0x4c
 8002ec8:	2202      	movs	r2, #2
 8002eca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	334d      	adds	r3, #77	@ 0x4d
 8002edc:	2203      	movs	r2, #3
 8002ede:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 fb9e 	bl	800662a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	331a      	adds	r3, #26
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	f040 8437 	bne.w	8003774 <HCD_HC_OUT_IRQHandler+0x978>
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	331b      	adds	r3, #27
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 842b 	bne.w	8003774 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3326      	adds	r3, #38	@ 0x26
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d009      	beq.n	8002f48 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	331b      	adds	r3, #27
 8002f44:	2201      	movs	r2, #1
 8002f46:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	334d      	adds	r3, #77	@ 0x4d
 8002f58:	2203      	movs	r2, #3
 8002f5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f003 fb60 	bl	800662a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	3344      	adds	r3, #68	@ 0x44
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e3f9      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f002 fe0c 	bl	8005ba6 <USB_ReadChInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f98:	d111      	bne.n	8002fbe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 fb37 	bl	800662a <USB_HC_Halt>
 8002fbc:	e3da      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f002 fded 	bl	8005ba6 <USB_ReadChInterrupts>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d168      	bne.n	80030a8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3344      	adds	r3, #68	@ 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f002 fdd7 	bl	8005ba6 <USB_ReadChInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffe:	2b40      	cmp	r3, #64	@ 0x40
 8003000:	d112      	bne.n	8003028 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3319      	adds	r3, #25
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003022:	461a      	mov	r2, r3
 8003024:	2340      	movs	r3, #64	@ 0x40
 8003026:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	331b      	adds	r3, #27
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d019      	beq.n	8003072 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	331b      	adds	r3, #27
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	0151      	lsls	r1, r2, #5
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	440a      	add	r2, r1
 8003068:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800306c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003070:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	2301      	movs	r3, #1
 8003082:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	334d      	adds	r3, #77	@ 0x4d
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 fac2 	bl	800662a <USB_HC_Halt>
 80030a6:	e365      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fd78 	bl	8005ba6 <USB_ReadChInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030bc:	2b40      	cmp	r3, #64	@ 0x40
 80030be:	d139      	bne.n	8003134 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	334d      	adds	r3, #77	@ 0x4d
 80030d0:	2205      	movs	r2, #5
 80030d2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	331a      	adds	r3, #26
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3319      	adds	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	3344      	adds	r3, #68	@ 0x44
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f003 fa85 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312c:	461a      	mov	r2, r3
 800312e:	2340      	movs	r3, #64	@ 0x40
 8003130:	6093      	str	r3, [r2, #8]
 8003132:	e31f      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f002 fd32 	bl	8005ba6 <USB_ReadChInterrupts>
 8003142:	4603      	mov	r3, r0
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b08      	cmp	r3, #8
 800314a:	d11a      	bne.n	8003182 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003158:	461a      	mov	r2, r3
 800315a:	2308      	movs	r3, #8
 800315c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	334d      	adds	r3, #77	@ 0x4d
 800316e:	2206      	movs	r2, #6
 8003170:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f003 fa55 	bl	800662a <USB_HC_Halt>
 8003180:	e2f8      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f002 fd0b 	bl	8005ba6 <USB_ReadChInterrupts>
 8003190:	4603      	mov	r3, r0
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b10      	cmp	r3, #16
 8003198:	d144      	bne.n	8003224 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3344      	adds	r3, #68	@ 0x44
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	334d      	adds	r3, #77	@ 0x4d
 80031be:	2204      	movs	r2, #4
 80031c0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3319      	adds	r3, #25
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d114      	bne.n	8003202 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3318      	adds	r3, #24
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3319      	adds	r3, #25
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fa0d 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800321c:	461a      	mov	r2, r3
 800321e:	2310      	movs	r3, #16
 8003220:	6093      	str	r3, [r2, #8]
 8003222:	e2a7      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fcba 	bl	8005ba6 <USB_ReadChInterrupts>
 8003232:	4603      	mov	r3, r0
 8003234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003238:	2b80      	cmp	r3, #128	@ 0x80
 800323a:	f040 8083 	bne.w	8003344 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	799b      	ldrb	r3, [r3, #6]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d111      	bne.n	800326a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334d      	adds	r3, #77	@ 0x4d
 8003256:	2207      	movs	r2, #7
 8003258:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f003 f9e1 	bl	800662a <USB_HC_Halt>
 8003268:	e062      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	3344      	adds	r3, #68	@ 0x44
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	1c59      	adds	r1, r3, #1
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4403      	add	r3, r0
 800328a:	3344      	adds	r3, #68	@ 0x44
 800328c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	3344      	adds	r3, #68	@ 0x44
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d922      	bls.n	80032ea <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	3344      	adds	r3, #68	@ 0x44
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334c      	adds	r3, #76	@ 0x4c
 80032c8:	2204      	movs	r2, #4
 80032ca:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	334c      	adds	r3, #76	@ 0x4c
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f008 fef0 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032e8:	e022      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334c      	adds	r3, #76	@ 0x4c
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003314:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800331c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	6093      	str	r3, [r2, #8]
 8003342:	e217      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f002 fc2a 	bl	8005ba6 <USB_ReadChInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335c:	d11b      	bne.n	8003396 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	334d      	adds	r3, #77	@ 0x4d
 800336e:	2209      	movs	r2, #9
 8003370:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f003 f955 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800338c:	461a      	mov	r2, r3
 800338e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003392:	6093      	str	r3, [r2, #8]
 8003394:	e1ee      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	4611      	mov	r1, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 fc01 	bl	8005ba6 <USB_ReadChInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	f040 81df 	bne.w	800376e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	2302      	movs	r3, #2
 80033c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	334d      	adds	r3, #77	@ 0x4d
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 8093 	bne.w	8003500 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	334d      	adds	r3, #77	@ 0x4d
 80033ea:	2202      	movs	r2, #2
 80033ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	334c      	adds	r3, #76	@ 0x4c
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3326      	adds	r3, #38	@ 0x26
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d00b      	beq.n	8003430 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3326      	adds	r3, #38	@ 0x26
 8003428:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800342a:	2b03      	cmp	r3, #3
 800342c:	f040 8190 	bne.w	8003750 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	799b      	ldrb	r3, [r3, #6]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d115      	bne.n	8003464 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	333d      	adds	r3, #61	@ 0x3d
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	f083 0301 	eor.w	r3, r3, #1
 8003450:	b2d8      	uxtb	r0, r3
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	333d      	adds	r3, #61	@ 0x3d
 8003460:	4602      	mov	r2, r0
 8003462:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	799b      	ldrb	r3, [r3, #6]
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 8171 	bne.w	8003750 <HCD_HC_OUT_IRQHandler+0x954>
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	3334      	adds	r3, #52	@ 0x34
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8165 	beq.w	8003750 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	3334      	adds	r3, #52	@ 0x34
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4403      	add	r3, r0
 80034a6:	3328      	adds	r3, #40	@ 0x28
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	440b      	add	r3, r1
 80034ac:	1e59      	subs	r1, r3, #1
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4403      	add	r3, r0
 80034bc:	3328      	adds	r3, #40	@ 0x28
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 813f 	beq.w	8003750 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	333d      	adds	r3, #61	@ 0x3d
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	f083 0301 	eor.w	r3, r3, #1
 80034ea:	b2d8      	uxtb	r0, r3
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	333d      	adds	r3, #61	@ 0x3d
 80034fa:	4602      	mov	r2, r0
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e127      	b.n	8003750 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334d      	adds	r3, #77	@ 0x4d
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d120      	bne.n	8003558 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	334d      	adds	r3, #77	@ 0x4d
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	331b      	adds	r3, #27
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 8107 	bne.w	8003750 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	334c      	adds	r3, #76	@ 0x4c
 8003552:	2202      	movs	r2, #2
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e0fb      	b.n	8003750 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	334d      	adds	r3, #77	@ 0x4d
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b04      	cmp	r3, #4
 800356c:	d13a      	bne.n	80035e4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	334d      	adds	r3, #77	@ 0x4d
 800357e:	2202      	movs	r2, #2
 8003580:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	334c      	adds	r3, #76	@ 0x4c
 8003592:	2202      	movs	r2, #2
 8003594:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	331b      	adds	r3, #27
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	f040 80d1 	bne.w	8003750 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	331b      	adds	r3, #27
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	0151      	lsls	r1, r2, #5
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	440a      	add	r2, r1
 80035d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e0:	6053      	str	r3, [r2, #4]
 80035e2:	e0b5      	b.n	8003750 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334d      	adds	r3, #77	@ 0x4d
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d114      	bne.n	8003624 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334d      	adds	r3, #77	@ 0x4d
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	334c      	adds	r3, #76	@ 0x4c
 800361e:	2202      	movs	r2, #2
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	e095      	b.n	8003750 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	334d      	adds	r3, #77	@ 0x4d
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b06      	cmp	r3, #6
 8003638:	d114      	bne.n	8003664 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334d      	adds	r3, #77	@ 0x4d
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	334c      	adds	r3, #76	@ 0x4c
 800365e:	2205      	movs	r2, #5
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	e075      	b.n	8003750 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	334d      	adds	r3, #77	@ 0x4d
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b07      	cmp	r3, #7
 8003678:	d00a      	beq.n	8003690 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	334d      	adds	r3, #77	@ 0x4d
 800368a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800368c:	2b09      	cmp	r3, #9
 800368e:	d170      	bne.n	8003772 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	334d      	adds	r3, #77	@ 0x4d
 80036a0:	2202      	movs	r2, #2
 80036a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	3344      	adds	r3, #68	@ 0x44
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	1c59      	adds	r1, r3, #1
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4403      	add	r3, r0
 80036c4:	3344      	adds	r3, #68	@ 0x44
 80036c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	3344      	adds	r3, #68	@ 0x44
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d914      	bls.n	8003708 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3344      	adds	r3, #68	@ 0x44
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334c      	adds	r3, #76	@ 0x4c
 8003702:	2204      	movs	r2, #4
 8003704:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003706:	e022      	b.n	800374e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	334c      	adds	r3, #76	@ 0x4c
 8003718:	2202      	movs	r2, #2
 800371a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003732:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800373a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003748:	461a      	mov	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800374e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	334c      	adds	r3, #76	@ 0x4c
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f008 fcae 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800376c:	e002      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003772:	bf00      	nop
  }
}
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b08a      	sub	sp, #40	@ 0x28
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	0c5b      	lsrs	r3, r3, #17
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d004      	beq.n	80037c0 <HCD_RXQLVL_IRQHandler+0x46>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	f000 80b6 	beq.w	800392a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037be:	e0b7      	b.n	8003930 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80b3 	beq.w	800392e <HCD_RXQLVL_IRQHandler+0x1b4>
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	332c      	adds	r3, #44	@ 0x2c
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80a7 	beq.w	800392e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3338      	adds	r3, #56	@ 0x38
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	18d1      	adds	r1, r2, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4403      	add	r3, r0
 8003804:	3334      	adds	r3, #52	@ 0x34
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4299      	cmp	r1, r3
 800380a:	f200 8083 	bhi.w	8003914 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	332c      	adds	r3, #44	@ 0x2c
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	b292      	uxth	r2, r2
 8003828:	4619      	mov	r1, r3
 800382a:	f002 f951 	bl	8005ad0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	332c      	adds	r3, #44	@ 0x2c
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	18d1      	adds	r1, r2, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4403      	add	r3, r0
 8003852:	332c      	adds	r3, #44	@ 0x2c
 8003854:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3338      	adds	r3, #56	@ 0x38
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	18d1      	adds	r1, r2, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4403      	add	r3, r0
 800387a:	3338      	adds	r3, #56	@ 0x38
 800387c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	0cdb      	lsrs	r3, r3, #19
 800388e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003892:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	3328      	adds	r3, #40	@ 0x28
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d13f      	bne.n	800392e <HCD_RXQLVL_IRQHandler+0x1b4>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d03c      	beq.n	800392e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038ca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038d2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	333c      	adds	r3, #60	@ 0x3c
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	f083 0301 	eor.w	r3, r3, #1
 80038fc:	b2d8      	uxtb	r0, r3
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	333c      	adds	r3, #60	@ 0x3c
 800390e:	4602      	mov	r2, r0
 8003910:	701a      	strb	r2, [r3, #0]
      break;
 8003912:	e00c      	b.n	800392e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	334c      	adds	r3, #76	@ 0x4c
 8003924:	2204      	movs	r2, #4
 8003926:	701a      	strb	r2, [r3, #0]
      break;
 8003928:	e001      	b.n	800392e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800392e:	bf00      	nop
  }
}
 8003930:	bf00      	nop
 8003932:	3728      	adds	r7, #40	@ 0x28
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003964:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b02      	cmp	r3, #2
 800396e:	d10b      	bne.n	8003988 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d102      	bne.n	8003980 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f008 fb88 	bl	800c090 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f043 0302 	orr.w	r3, r3, #2
 8003986:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b08      	cmp	r3, #8
 8003990:	d132      	bne.n	80039f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f043 0308 	orr.w	r3, r3, #8
 8003998:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d126      	bne.n	80039f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7a5b      	ldrb	r3, [r3, #9]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d113      	bne.n	80039d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80039b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039b6:	d106      	bne.n	80039c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2102      	movs	r1, #2
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 fa00 	bl	8005dc4 <USB_InitFSLSPClkSel>
 80039c4:	e011      	b.n	80039ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2101      	movs	r1, #1
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 f9f9 	bl	8005dc4 <USB_InitFSLSPClkSel>
 80039d2:	e00a      	b.n	80039ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	79db      	ldrb	r3, [r3, #7]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d106      	bne.n	80039ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039e2:	461a      	mov	r2, r3
 80039e4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80039e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f008 fb7e 	bl	800c0ec <HAL_HCD_PortEnabled_Callback>
 80039f0:	e002      	b.n	80039f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f008 fb88 	bl	800c108 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d103      	bne.n	8003a0a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f043 0320 	orr.w	r3, r3, #32
 8003a08:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a10:	461a      	mov	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6013      	str	r3, [r2, #0]
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e12b      	b.n	8003c8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd f93a 	bl	8000cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	@ 0x24
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a84:	f001 fa20 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
 8003a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4a81      	ldr	r2, [pc, #516]	@ (8003c94 <HAL_I2C_Init+0x274>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d807      	bhi.n	8003aa4 <HAL_I2C_Init+0x84>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a80      	ldr	r2, [pc, #512]	@ (8003c98 <HAL_I2C_Init+0x278>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bf94      	ite	ls
 8003a9c:	2301      	movls	r3, #1
 8003a9e:	2300      	movhi	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e006      	b.n	8003ab2 <HAL_I2C_Init+0x92>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a7d      	ldr	r2, [pc, #500]	@ (8003c9c <HAL_I2C_Init+0x27c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bf94      	ite	ls
 8003aac:	2301      	movls	r3, #1
 8003aae:	2300      	movhi	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0e7      	b.n	8003c8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a78      	ldr	r2, [pc, #480]	@ (8003ca0 <HAL_I2C_Init+0x280>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	0c9b      	lsrs	r3, r3, #18
 8003ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4a6a      	ldr	r2, [pc, #424]	@ (8003c94 <HAL_I2C_Init+0x274>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d802      	bhi.n	8003af4 <HAL_I2C_Init+0xd4>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	3301      	adds	r3, #1
 8003af2:	e009      	b.n	8003b08 <HAL_I2C_Init+0xe8>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	4a69      	ldr	r2, [pc, #420]	@ (8003ca4 <HAL_I2C_Init+0x284>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	099b      	lsrs	r3, r3, #6
 8003b06:	3301      	adds	r3, #1
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	495c      	ldr	r1, [pc, #368]	@ (8003c94 <HAL_I2C_Init+0x274>)
 8003b24:	428b      	cmp	r3, r1
 8003b26:	d819      	bhi.n	8003b5c <HAL_I2C_Init+0x13c>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e59      	subs	r1, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b36:	1c59      	adds	r1, r3, #1
 8003b38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b3c:	400b      	ands	r3, r1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_I2C_Init+0x138>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1e59      	subs	r1, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b50:	3301      	adds	r3, #1
 8003b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b56:	e051      	b.n	8003bfc <HAL_I2C_Init+0x1dc>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	e04f      	b.n	8003bfc <HAL_I2C_Init+0x1dc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d111      	bne.n	8003b88 <HAL_I2C_Init+0x168>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1e58      	subs	r0, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	440b      	add	r3, r1
 8003b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b76:	3301      	adds	r3, #1
 8003b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e012      	b.n	8003bae <HAL_I2C_Init+0x18e>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1e58      	subs	r0, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	0099      	lsls	r1, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Init+0x196>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e022      	b.n	8003bfc <HAL_I2C_Init+0x1dc>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10e      	bne.n	8003bdc <HAL_I2C_Init+0x1bc>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1e58      	subs	r0, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6859      	ldr	r1, [r3, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	440b      	add	r3, r1
 8003bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bda:	e00f      	b.n	8003bfc <HAL_I2C_Init+0x1dc>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e58      	subs	r0, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	0099      	lsls	r1, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	6809      	ldr	r1, [r1, #0]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6911      	ldr	r1, [r2, #16]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68d2      	ldr	r2, [r2, #12]
 8003c36:	4311      	orrs	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	000186a0 	.word	0x000186a0
 8003c98:	001e847f 	.word	0x001e847f
 8003c9c:	003d08ff 	.word	0x003d08ff
 8003ca0:	431bde83 	.word	0x431bde83
 8003ca4:	10624dd3 	.word	0x10624dd3

08003ca8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e128      	b.n	8003f0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a90      	ldr	r2, [pc, #576]	@ (8003f14 <HAL_I2S_Init+0x26c>)
 8003cd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fd f83b 	bl	8000d50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cf0:	f023 030f 	bic.w	r3, r3, #15
 8003cf4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d060      	beq.n	8003dc8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d0e:	2310      	movs	r3, #16
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e001      	b.n	8003d18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d14:	2320      	movs	r3, #32
 8003d16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d802      	bhi.n	8003d26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f001 fa04 	bl	8005134 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d36:	d125      	bne.n	8003d84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d010      	beq.n	8003d62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	3305      	adds	r3, #5
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	e01f      	b.n	8003da2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	461a      	mov	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	3305      	adds	r3, #5
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	e00e      	b.n	8003da2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9e:	3305      	adds	r3, #5
 8003da0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4a5c      	ldr	r2, [pc, #368]	@ (8003f18 <HAL_I2S_Init+0x270>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	08db      	lsrs	r3, r3, #3
 8003dac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e003      	b.n	8003dd0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d902      	bls.n	8003ddc <HAL_I2S_Init+0x134>
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2bff      	cmp	r3, #255	@ 0xff
 8003dda:	d907      	bls.n	8003dec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de0:	f043 0210 	orr.w	r2, r3, #16
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e08f      	b.n	8003f0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	ea42 0103 	orr.w	r1, r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e0a:	f023 030f 	bic.w	r3, r3, #15
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6851      	ldr	r1, [r2, #4]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6892      	ldr	r2, [r2, #8]
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68d2      	ldr	r2, [r2, #12]
 8003e1c:	4311      	orrs	r1, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6992      	ldr	r2, [r2, #24]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d161      	bne.n	8003efc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a38      	ldr	r2, [pc, #224]	@ (8003f1c <HAL_I2S_Init+0x274>)
 8003e3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a37      	ldr	r2, [pc, #220]	@ (8003f20 <HAL_I2S_Init+0x278>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d101      	bne.n	8003e4c <HAL_I2S_Init+0x1a4>
 8003e48:	4b36      	ldr	r3, [pc, #216]	@ (8003f24 <HAL_I2S_Init+0x27c>)
 8003e4a:	e001      	b.n	8003e50 <HAL_I2S_Init+0x1a8>
 8003e4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	4932      	ldr	r1, [pc, #200]	@ (8003f20 <HAL_I2S_Init+0x278>)
 8003e58:	428a      	cmp	r2, r1
 8003e5a:	d101      	bne.n	8003e60 <HAL_I2S_Init+0x1b8>
 8003e5c:	4a31      	ldr	r2, [pc, #196]	@ (8003f24 <HAL_I2S_Init+0x27c>)
 8003e5e:	e001      	b.n	8003e64 <HAL_I2S_Init+0x1bc>
 8003e60:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003e64:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e68:	f023 030f 	bic.w	r3, r3, #15
 8003e6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2b      	ldr	r2, [pc, #172]	@ (8003f20 <HAL_I2S_Init+0x278>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d101      	bne.n	8003e7c <HAL_I2S_Init+0x1d4>
 8003e78:	4b2a      	ldr	r3, [pc, #168]	@ (8003f24 <HAL_I2S_Init+0x27c>)
 8003e7a:	e001      	b.n	8003e80 <HAL_I2S_Init+0x1d8>
 8003e7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e80:	2202      	movs	r2, #2
 8003e82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a25      	ldr	r2, [pc, #148]	@ (8003f20 <HAL_I2S_Init+0x278>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2S_Init+0x1ea>
 8003e8e:	4b25      	ldr	r3, [pc, #148]	@ (8003f24 <HAL_I2S_Init+0x27c>)
 8003e90:	e001      	b.n	8003e96 <HAL_I2S_Init+0x1ee>
 8003e92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea2:	d003      	beq.n	8003eac <HAL_I2S_Init+0x204>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	e001      	b.n	8003eb8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	897b      	ldrh	r3, [r7, #10]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ee4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a0d      	ldr	r2, [pc, #52]	@ (8003f20 <HAL_I2S_Init+0x278>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <HAL_I2S_Init+0x24c>
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <HAL_I2S_Init+0x27c>)
 8003ef2:	e001      	b.n	8003ef8 <HAL_I2S_Init+0x250>
 8003ef4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ef8:	897a      	ldrh	r2, [r7, #10]
 8003efa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	0800401f 	.word	0x0800401f
 8003f18:	cccccccd 	.word	0xcccccccd
 8003f1c:	08004135 	.word	0x08004135
 8003f20:	40003800 	.word	0x40003800
 8003f24:	40003400 	.word	0x40003400

08003f28 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	881a      	ldrh	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10e      	bne.n	8003fb8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fa8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ffb8 	bl	8003f28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	b292      	uxth	r2, r2
 8003fd4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	1c9a      	adds	r2, r3, #2
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10e      	bne.n	8004016 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004006:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ff93 	bl	8003f3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004016:	bf00      	nop
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b086      	sub	sp, #24
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b04      	cmp	r3, #4
 8004038:	d13a      	bne.n	80040b0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d109      	bne.n	8004058 <I2S_IRQHandler+0x3a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404e:	2b40      	cmp	r3, #64	@ 0x40
 8004050:	d102      	bne.n	8004058 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff ffb4 	bl	8003fc0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	d126      	bne.n	80040b0 <I2S_IRQHandler+0x92>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b20      	cmp	r3, #32
 800406e:	d11f      	bne.n	80040b0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800407e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	f043 0202 	orr.w	r2, r3, #2
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff ff50 	bl	8003f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d136      	bne.n	800412a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d109      	bne.n	80040da <I2S_IRQHandler+0xbc>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d0:	2b80      	cmp	r3, #128	@ 0x80
 80040d2:	d102      	bne.n	80040da <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff45 	bl	8003f64 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d122      	bne.n	800412a <I2S_IRQHandler+0x10c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d11b      	bne.n	800412a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004100:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411c:	f043 0204 	orr.w	r2, r3, #4
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ff13 	bl	8003f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800412a:	bf00      	nop
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a92      	ldr	r2, [pc, #584]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800414e:	4b92      	ldr	r3, [pc, #584]	@ (8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004150:	e001      	b.n	8004156 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004152:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a8b      	ldr	r2, [pc, #556]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d101      	bne.n	8004170 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800416c:	4b8a      	ldr	r3, [pc, #552]	@ (8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800416e:	e001      	b.n	8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004170:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004180:	d004      	beq.n	800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f040 8099 	bne.w	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d107      	bne.n	80041a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f925 	bl	80043f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f9c8 	bl	8004550 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c6:	2b40      	cmp	r3, #64	@ 0x40
 80041c8:	d13a      	bne.n	8004240 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d035      	beq.n	8004240 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80041de:	4b6e      	ldr	r3, [pc, #440]	@ (8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041e0:	e001      	b.n	80041e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80041e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4969      	ldr	r1, [pc, #420]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ee:	428b      	cmp	r3, r1
 80041f0:	d101      	bne.n	80041f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80041f2:	4b69      	ldr	r3, [pc, #420]	@ (8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041f4:	e001      	b.n	80041fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80041f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800420e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	f043 0202 	orr.w	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fe88 	bl	8003f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	f040 80c3 	bne.w	80043d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80bd 	beq.w	80043d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004266:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a49      	ldr	r2, [pc, #292]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d101      	bne.n	8004276 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004272:	4b49      	ldr	r3, [pc, #292]	@ (8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004274:	e001      	b.n	800427a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004276:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4944      	ldr	r1, [pc, #272]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004282:	428b      	cmp	r3, r1
 8004284:	d101      	bne.n	800428a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004286:	4b44      	ldr	r3, [pc, #272]	@ (8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004288:	e001      	b.n	800428e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800428a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800428e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004292:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004294:	2300      	movs	r3, #0
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	f043 0204 	orr.w	r2, r3, #4
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff fe4a 	bl	8003f50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042bc:	e089      	b.n	80043d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d107      	bne.n	80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f8be 	bl	8004454 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d107      	bne.n	80042f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f8fd 	bl	80044ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d12f      	bne.n	800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d02a      	beq.n	800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004314:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1e      	ldr	r2, [pc, #120]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d101      	bne.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004320:	4b1d      	ldr	r3, [pc, #116]	@ (8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004322:	e001      	b.n	8004328 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004324:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4919      	ldr	r1, [pc, #100]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004330:	428b      	cmp	r3, r1
 8004332:	d101      	bne.n	8004338 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004334:	4b18      	ldr	r3, [pc, #96]	@ (8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004336:	e001      	b.n	800433c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004338:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800433c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004340:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	f043 0202 	orr.w	r2, r3, #2
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff fdfa 	bl	8003f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b08      	cmp	r3, #8
 8004364:	d136      	bne.n	80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d031      	beq.n	80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a07      	ldr	r2, [pc, #28]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d101      	bne.n	800437e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800437a:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800437c:	e001      	b.n	8004382 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800437e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4902      	ldr	r1, [pc, #8]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800438a:	428b      	cmp	r3, r1
 800438c:	d106      	bne.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800438e:	4b02      	ldr	r3, [pc, #8]	@ (8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004390:	e006      	b.n	80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004392:	bf00      	nop
 8004394:	40003800 	.word	0x40003800
 8004398:	40003400 	.word	0x40003400
 800439c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043a4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f043 0204 	orr.w	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fdc0 	bl	8003f50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043d0:	e000      	b.n	80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043d2:	bf00      	nop
}
 80043d4:	bf00      	nop
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	1c99      	adds	r1, r3, #2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6251      	str	r1, [r2, #36]	@ 0x24
 8004402:	881a      	ldrh	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d113      	bne.n	800444a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004430:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ffc9 	bl	80043dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	1c99      	adds	r1, r3, #2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6251      	str	r1, [r2, #36]	@ 0x24
 8004466:	8819      	ldrh	r1, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1d      	ldr	r2, [pc, #116]	@ (80044e4 <I2SEx_TxISR_I2SExt+0x90>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d101      	bne.n	8004476 <I2SEx_TxISR_I2SExt+0x22>
 8004472:	4b1d      	ldr	r3, [pc, #116]	@ (80044e8 <I2SEx_TxISR_I2SExt+0x94>)
 8004474:	e001      	b.n	800447a <I2SEx_TxISR_I2SExt+0x26>
 8004476:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800447a:	460a      	mov	r2, r1
 800447c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d121      	bne.n	80044da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a12      	ldr	r2, [pc, #72]	@ (80044e4 <I2SEx_TxISR_I2SExt+0x90>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <I2SEx_TxISR_I2SExt+0x50>
 80044a0:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <I2SEx_TxISR_I2SExt+0x94>)
 80044a2:	e001      	b.n	80044a8 <I2SEx_TxISR_I2SExt+0x54>
 80044a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	490d      	ldr	r1, [pc, #52]	@ (80044e4 <I2SEx_TxISR_I2SExt+0x90>)
 80044b0:	428b      	cmp	r3, r1
 80044b2:	d101      	bne.n	80044b8 <I2SEx_TxISR_I2SExt+0x64>
 80044b4:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <I2SEx_TxISR_I2SExt+0x94>)
 80044b6:	e001      	b.n	80044bc <I2SEx_TxISR_I2SExt+0x68>
 80044b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ff81 	bl	80043dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40003800 	.word	0x40003800
 80044e8:	40003400 	.word	0x40003400

080044ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68d8      	ldr	r0, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	1c99      	adds	r1, r3, #2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004504:	b282      	uxth	r2, r0
 8004506:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d113      	bne.n	8004548 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800452e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff ff4a 	bl	80043dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a20      	ldr	r2, [pc, #128]	@ (80045e0 <I2SEx_RxISR_I2SExt+0x90>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d101      	bne.n	8004566 <I2SEx_RxISR_I2SExt+0x16>
 8004562:	4b20      	ldr	r3, [pc, #128]	@ (80045e4 <I2SEx_RxISR_I2SExt+0x94>)
 8004564:	e001      	b.n	800456a <I2SEx_RxISR_I2SExt+0x1a>
 8004566:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800456a:	68d8      	ldr	r0, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004570:	1c99      	adds	r1, r3, #2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004576:	b282      	uxth	r2, r0
 8004578:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d121      	bne.n	80045d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a12      	ldr	r2, [pc, #72]	@ (80045e0 <I2SEx_RxISR_I2SExt+0x90>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d101      	bne.n	80045a0 <I2SEx_RxISR_I2SExt+0x50>
 800459c:	4b11      	ldr	r3, [pc, #68]	@ (80045e4 <I2SEx_RxISR_I2SExt+0x94>)
 800459e:	e001      	b.n	80045a4 <I2SEx_RxISR_I2SExt+0x54>
 80045a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	490d      	ldr	r1, [pc, #52]	@ (80045e0 <I2SEx_RxISR_I2SExt+0x90>)
 80045ac:	428b      	cmp	r3, r1
 80045ae:	d101      	bne.n	80045b4 <I2SEx_RxISR_I2SExt+0x64>
 80045b0:	4b0c      	ldr	r3, [pc, #48]	@ (80045e4 <I2SEx_RxISR_I2SExt+0x94>)
 80045b2:	e001      	b.n	80045b8 <I2SEx_RxISR_I2SExt+0x68>
 80045b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff ff03 	bl	80043dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045d6:	bf00      	nop
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40003800 	.word	0x40003800
 80045e4:	40003400 	.word	0x40003400

080045e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e267      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d075      	beq.n	80046f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004606:	4b88      	ldr	r3, [pc, #544]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b04      	cmp	r3, #4
 8004610:	d00c      	beq.n	800462c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004612:	4b85      	ldr	r3, [pc, #532]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800461a:	2b08      	cmp	r3, #8
 800461c:	d112      	bne.n	8004644 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461e:	4b82      	ldr	r3, [pc, #520]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004626:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800462a:	d10b      	bne.n	8004644 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462c:	4b7e      	ldr	r3, [pc, #504]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d05b      	beq.n	80046f0 <HAL_RCC_OscConfig+0x108>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d157      	bne.n	80046f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e242      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800464c:	d106      	bne.n	800465c <HAL_RCC_OscConfig+0x74>
 800464e:	4b76      	ldr	r3, [pc, #472]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a75      	ldr	r2, [pc, #468]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e01d      	b.n	8004698 <HAL_RCC_OscConfig+0xb0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0x98>
 8004666:	4b70      	ldr	r3, [pc, #448]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a6f      	ldr	r2, [pc, #444]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 800466c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	4b6d      	ldr	r3, [pc, #436]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6c      	ldr	r2, [pc, #432]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e00b      	b.n	8004698 <HAL_RCC_OscConfig+0xb0>
 8004680:	4b69      	ldr	r3, [pc, #420]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a68      	ldr	r2, [pc, #416]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	4b66      	ldr	r3, [pc, #408]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a65      	ldr	r2, [pc, #404]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d013      	beq.n	80046c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fc fdc0 	bl	8001224 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fc fdbc 	bl	8001224 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	@ 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e207      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0xc0>
 80046c6:	e014      	b.n	80046f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fc fdac 	bl	8001224 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d0:	f7fc fda8 	bl	8001224 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	@ 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e1f3      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e2:	4b51      	ldr	r3, [pc, #324]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0xe8>
 80046ee:	e000      	b.n	80046f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d063      	beq.n	80047c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800470a:	4b47      	ldr	r3, [pc, #284]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004712:	2b08      	cmp	r3, #8
 8004714:	d11c      	bne.n	8004750 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004716:	4b44      	ldr	r3, [pc, #272]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d116      	bne.n	8004750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004722:	4b41      	ldr	r3, [pc, #260]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_RCC_OscConfig+0x152>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d001      	beq.n	800473a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e1c7      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473a:	4b3b      	ldr	r3, [pc, #236]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4937      	ldr	r1, [pc, #220]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474e:	e03a      	b.n	80047c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d020      	beq.n	800479a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004758:	4b34      	ldr	r3, [pc, #208]	@ (800482c <HAL_RCC_OscConfig+0x244>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fc fd61 	bl	8001224 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004766:	f7fc fd5d 	bl	8001224 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e1a8      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004778:	4b2b      	ldr	r3, [pc, #172]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004784:	4b28      	ldr	r3, [pc, #160]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4925      	ldr	r1, [pc, #148]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 8004794:	4313      	orrs	r3, r2
 8004796:	600b      	str	r3, [r1, #0]
 8004798:	e015      	b.n	80047c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800479a:	4b24      	ldr	r3, [pc, #144]	@ (800482c <HAL_RCC_OscConfig+0x244>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fc fd40 	bl	8001224 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a8:	f7fc fd3c 	bl	8001224 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e187      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d036      	beq.n	8004840 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d016      	beq.n	8004808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047da:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <HAL_RCC_OscConfig+0x248>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fc fd20 	bl	8001224 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e8:	f7fc fd1c 	bl	8001224 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e167      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <HAL_RCC_OscConfig+0x240>)
 80047fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x200>
 8004806:	e01b      	b.n	8004840 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004808:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <HAL_RCC_OscConfig+0x248>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480e:	f7fc fd09 	bl	8001224 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004814:	e00e      	b.n	8004834 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004816:	f7fc fd05 	bl	8001224 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d907      	bls.n	8004834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e150      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
 8004828:	40023800 	.word	0x40023800
 800482c:	42470000 	.word	0x42470000
 8004830:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004834:	4b88      	ldr	r3, [pc, #544]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ea      	bne.n	8004816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8097 	beq.w	800497c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004852:	4b81      	ldr	r3, [pc, #516]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	4b7d      	ldr	r3, [pc, #500]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	4a7c      	ldr	r2, [pc, #496]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800486c:	6413      	str	r3, [r2, #64]	@ 0x40
 800486e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487e:	4b77      	ldr	r3, [pc, #476]	@ (8004a5c <HAL_RCC_OscConfig+0x474>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d118      	bne.n	80048bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800488a:	4b74      	ldr	r3, [pc, #464]	@ (8004a5c <HAL_RCC_OscConfig+0x474>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a73      	ldr	r2, [pc, #460]	@ (8004a5c <HAL_RCC_OscConfig+0x474>)
 8004890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004896:	f7fc fcc5 	bl	8001224 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489e:	f7fc fcc1 	bl	8001224 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e10c      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a5c <HAL_RCC_OscConfig+0x474>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d106      	bne.n	80048d2 <HAL_RCC_OscConfig+0x2ea>
 80048c4:	4b64      	ldr	r3, [pc, #400]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c8:	4a63      	ldr	r2, [pc, #396]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d0:	e01c      	b.n	800490c <HAL_RCC_OscConfig+0x324>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b05      	cmp	r3, #5
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x30c>
 80048da:	4b5f      	ldr	r3, [pc, #380]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	4a5e      	ldr	r2, [pc, #376]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f2:	e00b      	b.n	800490c <HAL_RCC_OscConfig+0x324>
 80048f4:	4b58      	ldr	r3, [pc, #352]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f8:	4a57      	ldr	r2, [pc, #348]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004900:	4b55      	ldr	r3, [pc, #340]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004904:	4a54      	ldr	r2, [pc, #336]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004906:	f023 0304 	bic.w	r3, r3, #4
 800490a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d015      	beq.n	8004940 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fc fc86 	bl	8001224 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491a:	e00a      	b.n	8004932 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491c:	f7fc fc82 	bl	8001224 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e0cb      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004932:	4b49      	ldr	r3, [pc, #292]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0ee      	beq.n	800491c <HAL_RCC_OscConfig+0x334>
 800493e:	e014      	b.n	800496a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004940:	f7fc fc70 	bl	8001224 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004946:	e00a      	b.n	800495e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fc fc6c 	bl	8001224 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e0b5      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1ee      	bne.n	8004948 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800496a:	7dfb      	ldrb	r3, [r7, #23]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d105      	bne.n	800497c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004970:	4b39      	ldr	r3, [pc, #228]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	4a38      	ldr	r2, [pc, #224]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800497a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80a1 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004986:	4b34      	ldr	r3, [pc, #208]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	2b08      	cmp	r3, #8
 8004990:	d05c      	beq.n	8004a4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d141      	bne.n	8004a1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499a:	4b31      	ldr	r3, [pc, #196]	@ (8004a60 <HAL_RCC_OscConfig+0x478>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fc fc40 	bl	8001224 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fc fc3c 	bl	8001224 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e087      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ba:	4b27      	ldr	r3, [pc, #156]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69da      	ldr	r2, [r3, #28]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	019b      	lsls	r3, r3, #6
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	3b01      	subs	r3, #1
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	061b      	lsls	r3, r3, #24
 80049ea:	491b      	ldr	r1, [pc, #108]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a60 <HAL_RCC_OscConfig+0x478>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f6:	f7fc fc15 	bl	8001224 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fe:	f7fc fc11 	bl	8001224 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e05c      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a10:	4b11      	ldr	r3, [pc, #68]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCC_OscConfig+0x416>
 8004a1c:	e054      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	4b10      	ldr	r3, [pc, #64]	@ (8004a60 <HAL_RCC_OscConfig+0x478>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fc fbfe 	bl	8001224 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fc fbfa 	bl	8001224 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e045      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <HAL_RCC_OscConfig+0x470>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x444>
 8004a4a:	e03d      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d107      	bne.n	8004a64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e038      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	40007000 	.word	0x40007000
 8004a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad4 <HAL_RCC_OscConfig+0x4ec>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d028      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d121      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d11a      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a94:	4013      	ands	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d111      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	3b01      	subs	r3, #1
 8004aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800

08004ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0cc      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aec:	4b68      	ldr	r3, [pc, #416]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d90c      	bls.n	8004b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afa:	4b65      	ldr	r3, [pc, #404]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b02:	4b63      	ldr	r3, [pc, #396]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e0b8      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d020      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b2c:	4b59      	ldr	r3, [pc, #356]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4a58      	ldr	r2, [pc, #352]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b44:	4b53      	ldr	r3, [pc, #332]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	4a52      	ldr	r2, [pc, #328]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b50:	4b50      	ldr	r3, [pc, #320]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	494d      	ldr	r1, [pc, #308]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d044      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d107      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b76:	4b47      	ldr	r3, [pc, #284]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d119      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e07f      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b96:	4b3f      	ldr	r3, [pc, #252]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e06f      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e067      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bb6:	4b37      	ldr	r3, [pc, #220]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f023 0203 	bic.w	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4934      	ldr	r1, [pc, #208]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc8:	f7fc fb2c 	bl	8001224 <HAL_GetTick>
 8004bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd0:	f7fc fb28 	bl	8001224 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e04f      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be6:	4b2b      	ldr	r3, [pc, #172]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 020c 	and.w	r2, r3, #12
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d1eb      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b25      	ldr	r3, [pc, #148]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d20c      	bcs.n	8004c20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b22      	ldr	r3, [pc, #136]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0e:	4b20      	ldr	r3, [pc, #128]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e032      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c2c:	4b19      	ldr	r3, [pc, #100]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4916      	ldr	r1, [pc, #88]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d009      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c4a:	4b12      	ldr	r3, [pc, #72]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	490e      	ldr	r1, [pc, #56]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c5e:	f000 f821 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 8004c62:	4602      	mov	r2, r0
 8004c64:	4b0b      	ldr	r3, [pc, #44]	@ (8004c94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	091b      	lsrs	r3, r3, #4
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	490a      	ldr	r1, [pc, #40]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c0>)
 8004c70:	5ccb      	ldrb	r3, [r1, r3]
 8004c72:	fa22 f303 	lsr.w	r3, r2, r3
 8004c76:	4a09      	ldr	r2, [pc, #36]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c7a:	4b09      	ldr	r3, [pc, #36]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fc f97c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023c00 	.word	0x40023c00
 8004c94:	40023800 	.word	0x40023800
 8004c98:	0800c914 	.word	0x0800c914
 8004c9c:	20000000 	.word	0x20000000
 8004ca0:	20000004 	.word	0x20000004

08004ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca8:	b094      	sub	sp, #80	@ 0x50
 8004caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cbc:	4b79      	ldr	r3, [pc, #484]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 030c 	and.w	r3, r3, #12
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d00d      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	f200 80e1 	bhi.w	8004e90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d003      	beq.n	8004cde <HAL_RCC_GetSysClockFreq+0x3a>
 8004cd6:	e0db      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cd8:	4b73      	ldr	r3, [pc, #460]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cdc:	e0db      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cde:	4b73      	ldr	r3, [pc, #460]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x208>)
 8004ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ce2:	e0d8      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ce4:	4b6f      	ldr	r3, [pc, #444]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cee:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d063      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	099b      	lsrs	r3, r3, #6
 8004d00:	2200      	movs	r2, #0
 8004d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d0e:	2300      	movs	r3, #0
 8004d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d16:	4622      	mov	r2, r4
 8004d18:	462b      	mov	r3, r5
 8004d1a:	f04f 0000 	mov.w	r0, #0
 8004d1e:	f04f 0100 	mov.w	r1, #0
 8004d22:	0159      	lsls	r1, r3, #5
 8004d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d28:	0150      	lsls	r0, r2, #5
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4621      	mov	r1, r4
 8004d30:	1a51      	subs	r1, r2, r1
 8004d32:	6139      	str	r1, [r7, #16]
 8004d34:	4629      	mov	r1, r5
 8004d36:	eb63 0301 	sbc.w	r3, r3, r1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d48:	4659      	mov	r1, fp
 8004d4a:	018b      	lsls	r3, r1, #6
 8004d4c:	4651      	mov	r1, sl
 8004d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d52:	4651      	mov	r1, sl
 8004d54:	018a      	lsls	r2, r1, #6
 8004d56:	4651      	mov	r1, sl
 8004d58:	ebb2 0801 	subs.w	r8, r2, r1
 8004d5c:	4659      	mov	r1, fp
 8004d5e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d76:	4690      	mov	r8, r2
 8004d78:	4699      	mov	r9, r3
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	eb18 0303 	adds.w	r3, r8, r3
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	462b      	mov	r3, r5
 8004d84:	eb49 0303 	adc.w	r3, r9, r3
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d96:	4629      	mov	r1, r5
 8004d98:	024b      	lsls	r3, r1, #9
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004da0:	4621      	mov	r1, r4
 8004da2:	024a      	lsls	r2, r1, #9
 8004da4:	4610      	mov	r0, r2
 8004da6:	4619      	mov	r1, r3
 8004da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004daa:	2200      	movs	r2, #0
 8004dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004db0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004db4:	f7fb fa14 	bl	80001e0 <__aeabi_uldivmod>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dc0:	e058      	b.n	8004e74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc2:	4b38      	ldr	r3, [pc, #224]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	4611      	mov	r1, r2
 8004dce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dd2:	623b      	str	r3, [r7, #32]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ddc:	4642      	mov	r2, r8
 8004dde:	464b      	mov	r3, r9
 8004de0:	f04f 0000 	mov.w	r0, #0
 8004de4:	f04f 0100 	mov.w	r1, #0
 8004de8:	0159      	lsls	r1, r3, #5
 8004dea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dee:	0150      	lsls	r0, r2, #5
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4641      	mov	r1, r8
 8004df6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e14:	ebb2 040a 	subs.w	r4, r2, sl
 8004e18:	eb63 050b 	sbc.w	r5, r3, fp
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	00eb      	lsls	r3, r5, #3
 8004e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e2a:	00e2      	lsls	r2, r4, #3
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	461d      	mov	r5, r3
 8004e30:	4643      	mov	r3, r8
 8004e32:	18e3      	adds	r3, r4, r3
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	464b      	mov	r3, r9
 8004e38:	eb45 0303 	adc.w	r3, r5, r3
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	028b      	lsls	r3, r1, #10
 8004e4e:	4621      	mov	r1, r4
 8004e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e54:	4621      	mov	r1, r4
 8004e56:	028a      	lsls	r2, r1, #10
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e5e:	2200      	movs	r2, #0
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	61fa      	str	r2, [r7, #28]
 8004e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e68:	f7fb f9ba 	bl	80001e0 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4613      	mov	r3, r2
 8004e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	3301      	adds	r3, #1
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e8e:	e002      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e90:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3750      	adds	r7, #80	@ 0x50
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	00f42400 	.word	0x00f42400
 8004eac:	007a1200 	.word	0x007a1200

08004eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb4:	4b03      	ldr	r3, [pc, #12]	@ (8004ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	20000000 	.word	0x20000000

08004ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ecc:	f7ff fff0 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	4b05      	ldr	r3, [pc, #20]	@ (8004ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	0a9b      	lsrs	r3, r3, #10
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	4903      	ldr	r1, [pc, #12]	@ (8004eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ede:	5ccb      	ldrb	r3, [r1, r3]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	0800c924 	.word	0x0800c924

08004ef0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	220f      	movs	r2, #15
 8004efe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f00:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <HAL_RCC_GetClockConfig+0x5c>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 0203 	and.w	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f4c <HAL_RCC_GetClockConfig+0x5c>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f18:	4b0c      	ldr	r3, [pc, #48]	@ (8004f4c <HAL_RCC_GetClockConfig+0x5c>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f24:	4b09      	ldr	r3, [pc, #36]	@ (8004f4c <HAL_RCC_GetClockConfig+0x5c>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	08db      	lsrs	r3, r3, #3
 8004f2a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f32:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <HAL_RCC_GetClockConfig+0x60>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0207 	and.w	r2, r3, #7
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	601a      	str	r2, [r3, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40023c00 	.word	0x40023c00

08004f54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d105      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d038      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f7c:	4b68      	ldr	r3, [pc, #416]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f82:	f7fc f94f 	bl	8001224 <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f8a:	f7fc f94b 	bl	8001224 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e0bd      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f9c:	4b61      	ldr	r3, [pc, #388]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f0      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	019b      	lsls	r3, r3, #6
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	071b      	lsls	r3, r3, #28
 8004fba:	495a      	ldr	r1, [pc, #360]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fc2:	4b57      	ldr	r3, [pc, #348]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc8:	f7fc f92c 	bl	8001224 <HAL_GetTick>
 8004fcc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fd0:	f7fc f928 	bl	8001224 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e09a      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fe2:	4b50      	ldr	r3, [pc, #320]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8083 	beq.w	8005102 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	4b48      	ldr	r3, [pc, #288]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	4a47      	ldr	r2, [pc, #284]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800500a:	6413      	str	r3, [r2, #64]	@ 0x40
 800500c:	4b45      	ldr	r3, [pc, #276]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005018:	4b43      	ldr	r3, [pc, #268]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a42      	ldr	r2, [pc, #264]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800501e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005022:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005024:	f7fc f8fe 	bl	8001224 <HAL_GetTick>
 8005028:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800502a:	e008      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502c:	f7fc f8fa 	bl	8001224 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e06c      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800503e:	4b3a      	ldr	r3, [pc, #232]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800504a:	4b36      	ldr	r3, [pc, #216]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005052:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d02f      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	429a      	cmp	r2, r3
 8005066:	d028      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005068:	4b2e      	ldr	r3, [pc, #184]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005070:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005072:	4b2e      	ldr	r3, [pc, #184]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005078:	4b2c      	ldr	r3, [pc, #176]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800507e:	4a29      	ldr	r2, [pc, #164]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005084:	4b27      	ldr	r3, [pc, #156]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b01      	cmp	r3, #1
 800508e:	d114      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005090:	f7fc f8c8 	bl	8001224 <HAL_GetTick>
 8005094:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005096:	e00a      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005098:	f7fc f8c4 	bl	8001224 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e034      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0ee      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050c6:	d10d      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80050c8:	4b16      	ldr	r3, [pc, #88]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80050d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050dc:	4911      	ldr	r1, [pc, #68]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
 80050e2:	e005      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80050e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80050ee:	6093      	str	r3, [r2, #8]
 80050f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fc:	4909      	ldr	r1, [pc, #36]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	7d1a      	ldrb	r2, [r3, #20]
 8005112:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005114:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	42470068 	.word	0x42470068
 8005124:	40023800 	.word	0x40023800
 8005128:	40007000 	.word	0x40007000
 800512c:	42470e40 	.word	0x42470e40
 8005130:	424711e0 	.word	0x424711e0

08005134 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d141      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005152:	4b25      	ldr	r3, [pc, #148]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d006      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005168:	d131      	bne.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800516a:	4b20      	ldr	r3, [pc, #128]	@ (80051ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800516c:	617b      	str	r3, [r7, #20]
          break;
 800516e:	e031      	b.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005170:	4b1d      	ldr	r3, [pc, #116]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800517c:	d109      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800517e:	4b1a      	ldr	r3, [pc, #104]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005188:	4a19      	ldr	r2, [pc, #100]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e008      	b.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005192:	4b15      	ldr	r3, [pc, #84]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800519c:	4a15      	ldr	r2, [pc, #84]	@ (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051a4:	4b10      	ldr	r3, [pc, #64]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051aa:	099b      	lsrs	r3, r3, #6
 80051ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80051b8:	4b0b      	ldr	r3, [pc, #44]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051be:	0f1b      	lsrs	r3, r3, #28
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ca:	617b      	str	r3, [r7, #20]
          break;
 80051cc:	e002      	b.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
          break;
 80051d2:	bf00      	nop
        }
      }
      break;
 80051d4:	e000      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80051d6:	bf00      	nop
    }
  }
  return frequency;
 80051d8:	697b      	ldr	r3, [r7, #20]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800
 80051ec:	00bb8000 	.word	0x00bb8000
 80051f0:	007a1200 	.word	0x007a1200
 80051f4:	00f42400 	.word	0x00f42400

080051f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e07b      	b.n	8005302 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d108      	bne.n	8005224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800521a:	d009      	beq.n	8005230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	61da      	str	r2, [r3, #28]
 8005222:	e005      	b.n	8005230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fb fe4e 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005266:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b4:	ea42 0103 	orr.w	r1, r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	f003 0104 	and.w	r1, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	f003 0210 	and.w	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e041      	b.n	80053a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d106      	bne.n	8005336 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f839 	bl	80053a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3304      	adds	r3, #4
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f000 f9b1 	bl	80056b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d001      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e044      	b.n	800545e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1e      	ldr	r2, [pc, #120]	@ (800546c <HAL_TIM_Base_Start_IT+0xb0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d018      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x6c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fe:	d013      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x6c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1a      	ldr	r2, [pc, #104]	@ (8005470 <HAL_TIM_Base_Start_IT+0xb4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00e      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x6c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a19      	ldr	r2, [pc, #100]	@ (8005474 <HAL_TIM_Base_Start_IT+0xb8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x6c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a17      	ldr	r2, [pc, #92]	@ (8005478 <HAL_TIM_Base_Start_IT+0xbc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x6c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a16      	ldr	r2, [pc, #88]	@ (800547c <HAL_TIM_Base_Start_IT+0xc0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d111      	bne.n	800544c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b06      	cmp	r3, #6
 8005438:	d010      	beq.n	800545c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0201 	orr.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544a:	e007      	b.n	800545c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40010000 	.word	0x40010000
 8005470:	40000400 	.word	0x40000400
 8005474:	40000800 	.word	0x40000800
 8005478:	40000c00 	.word	0x40000c00
 800547c:	40014000 	.word	0x40014000

08005480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0202 	mvn.w	r2, #2
 80054b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8d2 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f8c4 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8d5 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d020      	beq.n	8005530 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0204 	mvn.w	r2, #4
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f8ac 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f89e 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f8af 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01b      	beq.n	800557c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0208 	mvn.w	r2, #8
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2204      	movs	r2, #4
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f886 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f878 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f889 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b00      	cmp	r3, #0
 8005584:	d020      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01b      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0210 	mvn.w	r2, #16
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2208      	movs	r2, #8
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f860 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f852 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f863 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0201 	mvn.w	r2, #1
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fb fb26 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8e6 	bl	80057dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f834 	bl	800569c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0220 	mvn.w	r2, #32
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8b8 	bl	80057c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3a      	ldr	r2, [pc, #232]	@ (80057ac <TIM_Base_SetConfig+0xfc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00f      	beq.n	80056e8 <TIM_Base_SetConfig+0x38>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ce:	d00b      	beq.n	80056e8 <TIM_Base_SetConfig+0x38>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a37      	ldr	r2, [pc, #220]	@ (80057b0 <TIM_Base_SetConfig+0x100>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_Base_SetConfig+0x38>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a36      	ldr	r2, [pc, #216]	@ (80057b4 <TIM_Base_SetConfig+0x104>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_Base_SetConfig+0x38>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a35      	ldr	r2, [pc, #212]	@ (80057b8 <TIM_Base_SetConfig+0x108>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d108      	bne.n	80056fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2b      	ldr	r2, [pc, #172]	@ (80057ac <TIM_Base_SetConfig+0xfc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01b      	beq.n	800573a <TIM_Base_SetConfig+0x8a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005708:	d017      	beq.n	800573a <TIM_Base_SetConfig+0x8a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a28      	ldr	r2, [pc, #160]	@ (80057b0 <TIM_Base_SetConfig+0x100>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <TIM_Base_SetConfig+0x8a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a27      	ldr	r2, [pc, #156]	@ (80057b4 <TIM_Base_SetConfig+0x104>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00f      	beq.n	800573a <TIM_Base_SetConfig+0x8a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a26      	ldr	r2, [pc, #152]	@ (80057b8 <TIM_Base_SetConfig+0x108>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_Base_SetConfig+0x8a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a25      	ldr	r2, [pc, #148]	@ (80057bc <TIM_Base_SetConfig+0x10c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0x8a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a24      	ldr	r2, [pc, #144]	@ (80057c0 <TIM_Base_SetConfig+0x110>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0x8a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a23      	ldr	r2, [pc, #140]	@ (80057c4 <TIM_Base_SetConfig+0x114>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a0e      	ldr	r2, [pc, #56]	@ (80057ac <TIM_Base_SetConfig+0xfc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d103      	bne.n	8005780 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	611a      	str	r2, [r3, #16]
  }
}
 800579e:	bf00      	nop
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800
 80057b8:	40000c00 	.word	0x40000c00
 80057bc:	40014000 	.word	0x40014000
 80057c0:	40014400 	.word	0x40014400
 80057c4:	40014800 	.word	0x40014800

080057c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057f0:	b084      	sub	sp, #16
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	f107 001c 	add.w	r0, r7, #28
 80057fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005802:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005806:	2b01      	cmp	r3, #1
 8005808:	d123      	bne.n	8005852 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800581e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005832:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005836:	2b01      	cmp	r3, #1
 8005838:	d105      	bne.n	8005846 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9dc 	bl	8005c04 <USB_CoreReset>
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]
 8005850:	e01b      	b.n	800588a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9d0 	bl	8005c04 <USB_CoreReset>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005868:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005874:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	639a      	str	r2, [r3, #56]	@ 0x38
 800587c:	e005      	b.n	800588a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800588a:	7fbb      	ldrb	r3, [r7, #30]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d10b      	bne.n	80058a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f043 0206 	orr.w	r2, r3, #6
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b4:	b004      	add	sp, #16
 80058b6:	4770      	bx	lr

080058b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f043 0201 	orr.w	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d115      	bne.n	800594a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800592a:	200a      	movs	r0, #10
 800592c:	f7fb fc86 	bl	800123c <HAL_Delay>
      ms += 10U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	330a      	adds	r3, #10
 8005934:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f956 	bl	8005be8 <USB_GetMode>
 800593c:	4603      	mov	r3, r0
 800593e:	2b01      	cmp	r3, #1
 8005940:	d01e      	beq.n	8005980 <USB_SetCurrentMode+0x84>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2bc7      	cmp	r3, #199	@ 0xc7
 8005946:	d9f0      	bls.n	800592a <USB_SetCurrentMode+0x2e>
 8005948:	e01a      	b.n	8005980 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d115      	bne.n	800597c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800595c:	200a      	movs	r0, #10
 800595e:	f7fb fc6d 	bl	800123c <HAL_Delay>
      ms += 10U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	330a      	adds	r3, #10
 8005966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f93d 	bl	8005be8 <USB_GetMode>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <USB_SetCurrentMode+0x84>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2bc7      	cmp	r3, #199	@ 0xc7
 8005978:	d9f0      	bls.n	800595c <USB_SetCurrentMode+0x60>
 800597a:	e001      	b.n	8005980 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e005      	b.n	800598c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2bc8      	cmp	r3, #200	@ 0xc8
 8005984:	d101      	bne.n	800598a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059ae:	d901      	bls.n	80059b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e01b      	b.n	80059ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	daf2      	bge.n	80059a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	019b      	lsls	r3, r3, #6
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059d8:	d901      	bls.n	80059de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e006      	b.n	80059ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d0f0      	beq.n	80059cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a10:	d901      	bls.n	8005a16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e018      	b.n	8005a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	daf2      	bge.n	8005a04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2210      	movs	r2, #16
 8005a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a34:	d901      	bls.n	8005a3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e006      	b.n	8005a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d0f0      	beq.n	8005a28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b089      	sub	sp, #36	@ 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	460b      	mov	r3, r1
 8005a64:	71fb      	strb	r3, [r7, #7]
 8005a66:	4613      	mov	r3, r2
 8005a68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d123      	bne.n	8005ac2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a7a:	88bb      	ldrh	r3, [r7, #4]
 8005a7c:	3303      	adds	r3, #3
 8005a7e:	089b      	lsrs	r3, r3, #2
 8005a80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	e018      	b.n	8005aba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	031a      	lsls	r2, r3, #12
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a94:	461a      	mov	r2, r3
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d3e2      	bcc.n	8005a88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3724      	adds	r7, #36	@ 0x24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b08b      	sub	sp, #44	@ 0x2c
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	f003 0303 	and.w	r3, r3, #3
 8005af4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	623b      	str	r3, [r7, #32]
 8005afa:	e014      	b.n	8005b26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	3301      	adds	r3, #1
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	3301      	adds	r3, #1
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d3e6      	bcc.n	8005afc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b2e:	8bfb      	ldrh	r3, [r7, #30]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01e      	beq.n	8005b72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f107 0310 	add.w	r3, r7, #16
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	701a      	strb	r2, [r3, #0]
      i++;
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	3301      	adds	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005b66:	8bfb      	ldrh	r3, [r7, #30]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b6c:	8bfb      	ldrh	r3, [r7, #30]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1ea      	bne.n	8005b48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	372c      	adds	r7, #44	@ 0x2c
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4013      	ands	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b98:	68fb      	ldr	r3, [r7, #12]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bda:	68bb      	ldr	r3, [r7, #8]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c1c:	d901      	bls.n	8005c22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e01b      	b.n	8005c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	daf2      	bge.n	8005c10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c46:	d901      	bls.n	8005c4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e006      	b.n	8005c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d0f0      	beq.n	8005c3a <USB_CoreReset+0x36>

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c68:	b084      	sub	sp, #16
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d119      	bne.n	8005cf2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d10a      	bne.n	8005cdc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cd4:	f043 0304 	orr.w	r3, r3, #4
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e014      	b.n	8005d06 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cea:	f023 0304 	bic.w	r3, r3, #4
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	e009      	b.n	8005d06 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d00:	f023 0304 	bic.w	r3, r3, #4
 8005d04:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d06:	2110      	movs	r1, #16
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff fe43 	bl	8005994 <USB_FlushTxFifo>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff fe6d 	bl	80059f8 <USB_FlushRxFifo>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	e015      	b.n	8005d5a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4e:	461a      	mov	r2, r3
 8005d50:	2300      	movs	r3, #0
 8005d52:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	3301      	adds	r3, #1
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d5e:	461a      	mov	r2, r3
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d3e3      	bcc.n	8005d2e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d72:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2280      	movs	r2, #128	@ 0x80
 8005d78:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8005db8 <USB_HostInit+0x150>)
 8005d7e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a0e      	ldr	r2, [pc, #56]	@ (8005dbc <USB_HostInit+0x154>)
 8005d84:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d105      	bne.n	8005d9c <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	f043 0210 	orr.w	r2, r3, #16
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699a      	ldr	r2, [r3, #24]
 8005da0:	4b07      	ldr	r3, [pc, #28]	@ (8005dc0 <USB_HostInit+0x158>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005db4:	b004      	add	sp, #16
 8005db6:	4770      	bx	lr
 8005db8:	00600080 	.word	0x00600080
 8005dbc:	004000e0 	.word	0x004000e0
 8005dc0:	a3200008 	.word	0xa3200008

08005dc4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	68f9      	ldr	r1, [r7, #12]
 8005df8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d107      	bne.n	8005e16 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005e12:	6053      	str	r3, [r2, #4]
 8005e14:	e00c      	b.n	8005e30 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d107      	bne.n	8005e2c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e22:	461a      	mov	r2, r3
 8005e24:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005e28:	6053      	str	r3, [r2, #4]
 8005e2a:	e001      	b.n	8005e30 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005e5e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e6c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e6e:	2064      	movs	r0, #100	@ 0x64
 8005e70:	f7fb f9e4 	bl	800123c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e80:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e82:	200a      	movs	r0, #10
 8005e84:	f7fb f9da 	bl	800123c <HAL_Delay>

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005eb6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <USB_DriveVbus+0x44>
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d106      	bne.n	8005ed6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ed0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ed4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee0:	d109      	bne.n	8005ef6 <USB_DriveVbus+0x64>
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ef0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ef4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	0c5b      	lsrs	r3, r3, #17
 8005f22:	f003 0303 	and.w	r3, r3, #3
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	b29b      	uxth	r3, r3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	461a      	mov	r2, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	70fb      	strb	r3, [r7, #3]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70bb      	strb	r3, [r7, #2]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f82:	461a      	mov	r2, r3
 8005f84:	f04f 33ff 	mov.w	r3, #4294967295
 8005f88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f8a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d867      	bhi.n	8006062 <USB_HC_Init+0x10e>
 8005f92:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <USB_HC_Init+0x44>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fa9 	.word	0x08005fa9
 8005f9c:	08006025 	.word	0x08006025
 8005fa0:	08005fa9 	.word	0x08005fa9
 8005fa4:	08005fe7 	.word	0x08005fe7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005fba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005fbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	da51      	bge.n	8006068 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	78fa      	ldrb	r2, [r7, #3]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005fe4:	e040      	b.n	8006068 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005ff8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ffa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	da34      	bge.n	800606c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	440a      	add	r2, r1
 8006018:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800601c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006020:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006022:	e023      	b.n	800606c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	4413      	add	r3, r2
 800602c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006030:	461a      	mov	r2, r3
 8006032:	f240 2325 	movw	r3, #549	@ 0x225
 8006036:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006038:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800603c:	2b00      	cmp	r3, #0
 800603e:	da17      	bge.n	8006070 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4413      	add	r3, r2
 8006048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	440a      	add	r2, r1
 8006056:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800605a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800605e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006060:	e006      	b.n	8006070 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	77fb      	strb	r3, [r7, #31]
      break;
 8006066:	e004      	b.n	8006072 <USB_HC_Init+0x11e>
      break;
 8006068:	bf00      	nop
 800606a:	e002      	b.n	8006072 <USB_HC_Init+0x11e>
      break;
 800606c:	bf00      	nop
 800606e:	e000      	b.n	8006072 <USB_HC_Init+0x11e>
      break;
 8006070:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800607e:	461a      	mov	r2, r3
 8006080:	2300      	movs	r3, #0
 8006082:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	440a      	add	r2, r1
 800609a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800609e:	f043 0302 	orr.w	r3, r3, #2
 80060a2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	2101      	movs	r1, #1
 80060b4:	fa01 f303 	lsl.w	r3, r1, r3
 80060b8:	6939      	ldr	r1, [r7, #16]
 80060ba:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80060be:	4313      	orrs	r3, r2
 80060c0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da03      	bge.n	80060de <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	e001      	b.n	80060e2 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff ff0e 	bl	8005f04 <USB_GetHostSpeed>
 80060e8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80060ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d106      	bne.n	8006100 <USB_HC_Init+0x1ac>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d003      	beq.n	8006100 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e001      	b.n	8006104 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006104:	787b      	ldrb	r3, [r7, #1]
 8006106:	059b      	lsls	r3, r3, #22
 8006108:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800610c:	78bb      	ldrb	r3, [r7, #2]
 800610e:	02db      	lsls	r3, r3, #11
 8006110:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006114:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006116:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800611a:	049b      	lsls	r3, r3, #18
 800611c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006120:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006122:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006124:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006128:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	431a      	orrs	r2, r3
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006132:	78fa      	ldrb	r2, [r7, #3]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	440a      	add	r2, r1
 800613a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800613e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006142:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006144:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006148:	2b03      	cmp	r3, #3
 800614a:	d003      	beq.n	8006154 <USB_HC_Init+0x200>
 800614c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006150:	2b01      	cmp	r3, #1
 8006152:	d10f      	bne.n	8006174 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	440a      	add	r2, r1
 800616a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800616e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006172:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006174:	7ffb      	ldrb	r3, [r7, #31]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop

08006180 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	@ 0x30
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	4613      	mov	r3, r2
 800618c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006198:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800619c:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	799b      	ldrb	r3, [r3, #6]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d158      	bne.n	8006258 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80061a6:	2301      	movs	r3, #1
 80061a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	78db      	ldrb	r3, [r3, #3]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d007      	beq.n	80061c2 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	8a92      	ldrh	r2, [r2, #20]
 80061b8:	fb03 f202 	mul.w	r2, r3, r2
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	61da      	str	r2, [r3, #28]
 80061c0:	e079      	b.n	80062b6 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	7c9b      	ldrb	r3, [r3, #18]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d130      	bne.n	800622c <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	2bbc      	cmp	r3, #188	@ 0xbc
 80061d0:	d918      	bls.n	8006204 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	8a9b      	ldrh	r3, [r3, #20]
 80061d6:	461a      	mov	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d003      	beq.n	80061f4 <USB_HC_StartXfer+0x74>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d103      	bne.n	80061fc <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2202      	movs	r2, #2
 80061f8:	60da      	str	r2, [r3, #12]
 80061fa:	e05c      	b.n	80062b6 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2201      	movs	r2, #1
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	e058      	b.n	80062b6 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	6a1a      	ldr	r2, [r3, #32]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d007      	beq.n	8006224 <USB_HC_StartXfer+0xa4>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d003      	beq.n	8006224 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2204      	movs	r2, #4
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	e048      	b.n	80062b6 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2203      	movs	r2, #3
 8006228:	60da      	str	r2, [r3, #12]
 800622a:	e044      	b.n	80062b6 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d10d      	bne.n	800624e <USB_HC_StartXfer+0xce>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	8a92      	ldrh	r2, [r2, #20]
 800623a:	4293      	cmp	r3, r2
 800623c:	d907      	bls.n	800624e <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800623e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	8a92      	ldrh	r2, [r2, #20]
 8006244:	fb03 f202 	mul.w	r2, r3, r2
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	61da      	str	r2, [r3, #28]
 800624c:	e033      	b.n	80062b6 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6a1a      	ldr	r2, [r3, #32]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	61da      	str	r2, [r3, #28]
 8006256:	e02e      	b.n	80062b6 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d018      	beq.n	8006292 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	8a92      	ldrh	r2, [r2, #20]
 8006268:	4413      	add	r3, r2
 800626a:	3b01      	subs	r3, #1
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	8a92      	ldrh	r2, [r2, #20]
 8006270:	fbb3 f3f2 	udiv	r3, r3, r2
 8006274:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006276:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006278:	8b7b      	ldrh	r3, [r7, #26]
 800627a:	429a      	cmp	r2, r3
 800627c:	d90b      	bls.n	8006296 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800627e:	8b7b      	ldrh	r3, [r7, #26]
 8006280:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006282:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	8a92      	ldrh	r2, [r2, #20]
 8006288:	fb03 f202 	mul.w	r2, r3, r2
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	61da      	str	r2, [r3, #28]
 8006290:	e001      	b.n	8006296 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8006292:	2301      	movs	r3, #1
 8006294:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	78db      	ldrb	r3, [r3, #3]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800629e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	8a92      	ldrh	r2, [r2, #20]
 80062a4:	fb03 f202 	mul.w	r2, r3, r2
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	61da      	str	r2, [r3, #28]
 80062ac:	e003      	b.n	80062b6 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6a1a      	ldr	r2, [r3, #32]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062c0:	04d9      	lsls	r1, r3, #19
 80062c2:	4ba4      	ldr	r3, [pc, #656]	@ (8006554 <USB_HC_StartXfer+0x3d4>)
 80062c4:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062c6:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	7d9b      	ldrb	r3, [r3, #22]
 80062cc:	075b      	lsls	r3, r3, #29
 80062ce:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062d2:	69f9      	ldr	r1, [r7, #28]
 80062d4:	0148      	lsls	r0, r1, #5
 80062d6:	6a39      	ldr	r1, [r7, #32]
 80062d8:	4401      	add	r1, r0
 80062da:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062de:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062e0:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d009      	beq.n	80062fc <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6999      	ldr	r1, [r3, #24]
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062f8:	460a      	mov	r2, r1
 80062fa:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	bf0c      	ite	eq
 800630c:	2301      	moveq	r3, #1
 800630e:	2300      	movne	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	6a3a      	ldr	r2, [r7, #32]
 8006328:	440a      	add	r2, r1
 800632a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800632e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006332:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	4413      	add	r3, r2
 800633c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	7e7b      	ldrb	r3, [r7, #25]
 8006344:	075b      	lsls	r3, r3, #29
 8006346:	69f9      	ldr	r1, [r7, #28]
 8006348:	0148      	lsls	r0, r1, #5
 800634a:	6a39      	ldr	r1, [r7, #32]
 800634c:	4401      	add	r1, r0
 800634e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006352:	4313      	orrs	r3, r2
 8006354:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	799b      	ldrb	r3, [r3, #6]
 800635a:	2b01      	cmp	r3, #1
 800635c:	f040 80c4 	bne.w	80064e8 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	7c5b      	ldrb	r3, [r3, #17]
 8006364:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800636a:	4313      	orrs	r3, r2
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	440a      	add	r2, r1
 8006374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006378:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800637c:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	6a3a      	ldr	r2, [r7, #32]
 8006392:	440a      	add	r2, r1
 8006394:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006398:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800639c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	79db      	ldrb	r3, [r3, #7]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d123      	bne.n	80063ee <USB_HC_StartXfer+0x26e>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	78db      	ldrb	r3, [r3, #3]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11f      	bne.n	80063ee <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	6a3a      	ldr	r2, [r7, #32]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063cc:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	6a3a      	ldr	r2, [r7, #32]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ec:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	7c9b      	ldrb	r3, [r3, #18]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d003      	beq.n	80063fe <USB_HC_StartXfer+0x27e>
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	7c9b      	ldrb	r3, [r3, #18]
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d117      	bne.n	800642e <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006402:	2b01      	cmp	r3, #1
 8006404:	d113      	bne.n	800642e <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	78db      	ldrb	r3, [r3, #3]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d10f      	bne.n	800642e <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	440a      	add	r2, r1
 8006424:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642c:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	7c9b      	ldrb	r3, [r3, #18]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d163      	bne.n	80064fe <USB_HC_StartXfer+0x37e>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	78db      	ldrb	r3, [r3, #3]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d15f      	bne.n	80064fe <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	3b01      	subs	r3, #1
 8006444:	2b03      	cmp	r3, #3
 8006446:	d859      	bhi.n	80064fc <USB_HC_StartXfer+0x37c>
 8006448:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <USB_HC_StartXfer+0x2d0>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006461 	.word	0x08006461
 8006454:	08006483 	.word	0x08006483
 8006458:	080064a5 	.word	0x080064a5
 800645c:	080064c7 	.word	0x080064c7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	4413      	add	r3, r2
 8006468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	6a3a      	ldr	r2, [r7, #32]
 8006474:	440a      	add	r2, r1
 8006476:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800647a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800647e:	6053      	str	r3, [r2, #4]
          break;
 8006480:	e03d      	b.n	80064fe <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	4413      	add	r3, r2
 800648a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	6a3a      	ldr	r2, [r7, #32]
 8006496:	440a      	add	r2, r1
 8006498:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800649c:	f043 030e 	orr.w	r3, r3, #14
 80064a0:	6053      	str	r3, [r2, #4]
          break;
 80064a2:	e02c      	b.n	80064fe <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	6a3a      	ldr	r2, [r7, #32]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064c2:	6053      	str	r3, [r2, #4]
          break;
 80064c4:	e01b      	b.n	80064fe <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064e4:	6053      	str	r3, [r2, #4]
          break;
 80064e6:	e00a      	b.n	80064fe <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f4:	461a      	mov	r2, r3
 80064f6:	2300      	movs	r3, #0
 80064f8:	6053      	str	r3, [r2, #4]
 80064fa:	e000      	b.n	80064fe <USB_HC_StartXfer+0x37e>
          break;
 80064fc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006514:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	78db      	ldrb	r3, [r3, #3]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d004      	beq.n	8006528 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	e003      	b.n	8006530 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800652e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006536:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006544:	461a      	mov	r2, r3
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	e055      	b.n	8006600 <USB_HC_StartXfer+0x480>
 8006554:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	78db      	ldrb	r3, [r3, #3]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d14e      	bne.n	80065fe <USB_HC_StartXfer+0x47e>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d04a      	beq.n	80065fe <USB_HC_StartXfer+0x47e>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	79db      	ldrb	r3, [r3, #7]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d146      	bne.n	80065fe <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	7c9b      	ldrb	r3, [r3, #18]
 8006574:	2b03      	cmp	r3, #3
 8006576:	d831      	bhi.n	80065dc <USB_HC_StartXfer+0x45c>
 8006578:	a201      	add	r2, pc, #4	@ (adr r2, 8006580 <USB_HC_StartXfer+0x400>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	08006591 	.word	0x08006591
 8006584:	080065b5 	.word	0x080065b5
 8006588:	08006591 	.word	0x08006591
 800658c:	080065b5 	.word	0x080065b5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	3303      	adds	r3, #3
 8006596:	089b      	lsrs	r3, r3, #2
 8006598:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800659a:	8afa      	ldrh	r2, [r7, #22]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d91c      	bls.n	80065e0 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f043 0220 	orr.w	r2, r3, #32
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80065b2:	e015      	b.n	80065e0 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	3303      	adds	r3, #3
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80065be:	8afa      	ldrh	r2, [r7, #22]
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d90a      	bls.n	80065e4 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80065da:	e003      	b.n	80065e4 <USB_HC_StartXfer+0x464>

      default:
        break;
 80065dc:	bf00      	nop
 80065de:	e002      	b.n	80065e6 <USB_HC_StartXfer+0x466>
        break;
 80065e0:	bf00      	nop
 80065e2:	e000      	b.n	80065e6 <USB_HC_StartXfer+0x466>
        break;
 80065e4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6999      	ldr	r1, [r3, #24]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	785a      	ldrb	r2, [r3, #1]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2000      	movs	r0, #0
 80065f6:	9000      	str	r0, [sp, #0]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f7ff fa2b 	bl	8005a54 <USB_WritePacket>
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3728      	adds	r7, #40	@ 0x28
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	b29b      	uxth	r3, r3
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800662a:	b480      	push	{r7}
 800662c:	b089      	sub	sp, #36	@ 0x24
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	0c9b      	lsrs	r3, r3, #18
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	0fdb      	lsrs	r3, r3, #31
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	0fdb      	lsrs	r3, r3, #31
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b20      	cmp	r3, #32
 800668e:	d10d      	bne.n	80066ac <USB_HC_Halt+0x82>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10a      	bne.n	80066ac <USB_HC_Halt+0x82>
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d002      	beq.n	80066a8 <USB_HC_Halt+0x7e>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d101      	bne.n	80066ac <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	e0d8      	b.n	800685e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <USB_HC_Halt+0x8e>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d173      	bne.n	80067a0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066d6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d14a      	bne.n	800677a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d133      	bne.n	8006758 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	440a      	add	r2, r1
 8006706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800670a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800670e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	440a      	add	r2, r1
 8006726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800672a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800672e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	3301      	adds	r3, #1
 8006734:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800673c:	d82e      	bhi.n	800679c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006754:	d0ec      	beq.n	8006730 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006756:	e081      	b.n	800685c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	4413      	add	r3, r2
 8006760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	440a      	add	r2, r1
 800676e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006772:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006776:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006778:	e070      	b.n	800685c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	0151      	lsls	r1, r2, #5
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	440a      	add	r2, r1
 8006790:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006794:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006798:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800679a:	e05f      	b.n	800685c <USB_HC_Halt+0x232>
            break;
 800679c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800679e:	e05d      	b.n	800685c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d133      	bne.n	8006838 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	0151      	lsls	r1, r2, #5
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	440a      	add	r2, r1
 8006806:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800680a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800680e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	3301      	adds	r3, #1
 8006814:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800681c:	d81d      	bhi.n	800685a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006830:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006834:	d0ec      	beq.n	8006810 <USB_HC_Halt+0x1e6>
 8006836:	e011      	b.n	800685c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	440a      	add	r2, r1
 800684e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006852:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	e000      	b.n	800685c <USB_HC_Halt+0x232>
          break;
 800685a:	bf00      	nop
    }
  }

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3724      	adds	r7, #36	@ 0x24
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b088      	sub	sp, #32
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff f82b 	bl	80058da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006884:	2110      	movs	r1, #16
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff f884 	bl	8005994 <USB_FlushTxFifo>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff f8ae 	bl	80059f8 <USB_FlushRxFifo>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068a6:	2300      	movs	r3, #0
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	e01f      	b.n	80068ec <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068c2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068ca:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e0:	461a      	mov	r2, r3
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	3301      	adds	r3, #1
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b0f      	cmp	r3, #15
 80068f0:	d9dc      	bls.n	80068ac <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068f2:	2300      	movs	r3, #0
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	e034      	b.n	8006962 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800690e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006916:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800691e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4413      	add	r3, r2
 8006928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800692c:	461a      	mov	r2, r3
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800693e:	d80c      	bhi.n	800695a <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	4413      	add	r3, r2
 8006948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006952:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006956:	d0ec      	beq.n	8006932 <USB_StopHost+0xc8>
 8006958:	e000      	b.n	800695c <USB_StopHost+0xf2>
        break;
 800695a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	3301      	adds	r3, #1
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b0f      	cmp	r3, #15
 8006966:	d9c7      	bls.n	80068f8 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800696e:	461a      	mov	r2, r3
 8006970:	f04f 33ff 	mov.w	r3, #4294967295
 8006974:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f04f 32ff 	mov.w	r2, #4294967295
 800697c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fe ff9a 	bl	80058b8 <USB_EnableGlobalInt>

  return ret;
 8006984:	7ffb      	ldrb	r3, [r7, #31]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800698e:	b590      	push	{r4, r7, lr}
 8006990:	b089      	sub	sp, #36	@ 0x24
 8006992:	af04      	add	r7, sp, #16
 8006994:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006996:	2301      	movs	r3, #1
 8006998:	2202      	movs	r2, #2
 800699a:	2102      	movs	r1, #2
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fcd2 	bl	8007346 <USBH_FindInterface>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2bff      	cmp	r3, #255	@ 0xff
 80069aa:	d002      	beq.n	80069b2 <USBH_CDC_InterfaceInit+0x24>
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d901      	bls.n	80069b6 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069b2:	2302      	movs	r3, #2
 80069b4:	e13d      	b.n	8006c32 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fca7 	bl	800730e <USBH_SelectInterface>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069ca:	2302      	movs	r3, #2
 80069cc:	e131      	b.n	8006c32 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80069d4:	2050      	movs	r0, #80	@ 0x50
 80069d6:	f005 fd9b 	bl	800c510 <malloc>
 80069da:	4603      	mov	r3, r0
 80069dc:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069ee:	2302      	movs	r3, #2
 80069f0:	e11f      	b.n	8006c32 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069f2:	2250      	movs	r2, #80	@ 0x50
 80069f4:	2100      	movs	r1, #0
 80069f6:	68b8      	ldr	r0, [r7, #8]
 80069f8:	f005 fe48 	bl	800c68c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	211a      	movs	r1, #26
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	4413      	add	r3, r2
 8006a08:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b25b      	sxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	da15      	bge.n	8006a40 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	211a      	movs	r1, #26
 8006a1a:	fb01 f303 	mul.w	r3, r1, r3
 8006a1e:	4413      	add	r3, r2
 8006a20:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	211a      	movs	r1, #26
 8006a30:	fb01 f303 	mul.w	r3, r1, r3
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f002 fa19 	bl	8008e7e <USBH_AllocPipe>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	7819      	ldrb	r1, [r3, #0]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	7858      	ldrb	r0, [r3, #1]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	8952      	ldrh	r2, [r2, #10]
 8006a6c:	9202      	str	r2, [sp, #8]
 8006a6e:	2203      	movs	r2, #3
 8006a70:	9201      	str	r2, [sp, #4]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	4623      	mov	r3, r4
 8006a76:	4602      	mov	r2, r0
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f002 f9d1 	bl	8008e20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f005 fcbc 	bl	800c404 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	2200      	movs	r2, #0
 8006a90:	210a      	movs	r1, #10
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fc57 	bl	8007346 <USBH_FindInterface>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	2bff      	cmp	r3, #255	@ 0xff
 8006aa0:	d002      	beq.n	8006aa8 <USBH_CDC_InterfaceInit+0x11a>
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d901      	bls.n	8006aac <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e0c2      	b.n	8006c32 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	211a      	movs	r1, #26
 8006ab2:	fb01 f303 	mul.w	r3, r1, r3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b25b      	sxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	da16      	bge.n	8006af2 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	211a      	movs	r1, #26
 8006aca:	fb01 f303 	mul.w	r3, r1, r3
 8006ace:	4413      	add	r3, r2
 8006ad0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ad4:	781a      	ldrb	r2, [r3, #0]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	211a      	movs	r1, #26
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006aea:	881a      	ldrh	r2, [r3, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	835a      	strh	r2, [r3, #26]
 8006af0:	e015      	b.n	8006b1e <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	211a      	movs	r1, #26
 8006af8:	fb01 f303 	mul.w	r3, r1, r3
 8006afc:	4413      	add	r3, r2
 8006afe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	211a      	movs	r1, #26
 8006b0e:	fb01 f303 	mul.w	r3, r1, r3
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006b18:	881a      	ldrh	r2, [r3, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	211a      	movs	r1, #26
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	4413      	add	r3, r2
 8006b2a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	b25b      	sxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	da16      	bge.n	8006b64 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	211a      	movs	r1, #26
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	4413      	add	r3, r2
 8006b42:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	211a      	movs	r1, #26
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b5c:	881a      	ldrh	r2, [r3, #0]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	835a      	strh	r2, [r3, #26]
 8006b62:	e015      	b.n	8006b90 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	211a      	movs	r1, #26
 8006b6a:	fb01 f303 	mul.w	r3, r1, r3
 8006b6e:	4413      	add	r3, r2
 8006b70:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	211a      	movs	r1, #26
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b8a:	881a      	ldrh	r2, [r3, #0]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	7b9b      	ldrb	r3, [r3, #14]
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f002 f971 	bl	8008e7e <USBH_AllocPipe>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	7bdb      	ldrb	r3, [r3, #15]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f002 f967 	bl	8008e7e <USBH_AllocPipe>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	7b59      	ldrb	r1, [r3, #13]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	7b98      	ldrb	r0, [r3, #14]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	8b12      	ldrh	r2, [r2, #24]
 8006bd0:	9202      	str	r2, [sp, #8]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	9201      	str	r2, [sp, #4]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4623      	mov	r3, r4
 8006bda:	4602      	mov	r2, r0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f002 f91f 	bl	8008e20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	7b19      	ldrb	r1, [r3, #12]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	7bd8      	ldrb	r0, [r3, #15]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	8b52      	ldrh	r2, [r2, #26]
 8006bfa:	9202      	str	r2, [sp, #8]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	9201      	str	r2, [sp, #4]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	4623      	mov	r3, r4
 8006c04:	4602      	mov	r2, r0
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f002 f90a 	bl	8008e20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	7b5b      	ldrb	r3, [r3, #13]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f005 fbf1 	bl	800c404 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	7b1b      	ldrb	r3, [r3, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f005 fbea 	bl	800c404 <USBH_LL_SetToggle>

  return USBH_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd90      	pop	{r4, r7, pc}

08006c3a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00e      	beq.n	8006c72 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f002 f8ff 	bl	8008e5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f002 f92a 	bl	8008ec0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	7b1b      	ldrb	r3, [r3, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	7b1b      	ldrb	r3, [r3, #12]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f002 f8ec 	bl	8008e5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	7b1b      	ldrb	r3, [r3, #12]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f002 f917 	bl	8008ec0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	7b5b      	ldrb	r3, [r3, #13]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00e      	beq.n	8006cbe <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	7b5b      	ldrb	r3, [r3, #13]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f002 f8d9 	bl	8008e5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	7b5b      	ldrb	r3, [r3, #13]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f002 f904 	bl	8008ec0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00b      	beq.n	8006ce2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f005 fc24 	bl	800c520 <free>
    phost->pActiveClass->pData = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cde:	2200      	movs	r2, #0
 8006ce0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3340      	adds	r3, #64	@ 0x40
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f8b2 	bl	8006e6e <GetLineCoding>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d1a:	2102      	movs	r1, #2
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d20:	7afb      	ldrb	r3, [r7, #11]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d34:	2301      	movs	r3, #1
 8006d36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d877      	bhi.n	8006e40 <USBH_CDC_Process+0x114>
 8006d50:	a201      	add	r2, pc, #4	@ (adr r2, 8006d58 <USBH_CDC_Process+0x2c>)
 8006d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d56:	bf00      	nop
 8006d58:	08006d6d 	.word	0x08006d6d
 8006d5c:	08006d73 	.word	0x08006d73
 8006d60:	08006da3 	.word	0x08006da3
 8006d64:	08006e17 	.word	0x08006e17
 8006d68:	08006e25 	.word	0x08006e25
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d70:	e06d      	b.n	8006e4e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f897 	bl	8006eac <SetLineCoding>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d90:	e058      	b.n	8006e44 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d055      	beq.n	8006e44 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006da0:	e050      	b.n	8006e44 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	3340      	adds	r3, #64	@ 0x40
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f860 	bl	8006e6e <GetLineCoding>
 8006dae:	4603      	mov	r3, r0
 8006db0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d126      	bne.n	8006e06 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dca:	791b      	ldrb	r3, [r3, #4]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d13b      	bne.n	8006e48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dda:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d133      	bne.n	8006e48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dea:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d12b      	bne.n	8006e48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d124      	bne.n	8006e48 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f982 	bl	8007108 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e04:	e020      	b.n	8006e48 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d01d      	beq.n	8006e48 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006e14:	e018      	b.n	8006e48 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f867 	bl	8006eea <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f8f6 	bl	800700e <CDC_ProcessReception>
      break;
 8006e22:	e014      	b.n	8006e4e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e24:	2100      	movs	r1, #0
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 f984 	bl	8008134 <USBH_ClrFeature>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006e3e:	e005      	b.n	8006e4c <USBH_CDC_Process+0x120>

    default:
      break;
 8006e40:	bf00      	nop
 8006e42:	e004      	b.n	8006e4e <USBH_CDC_Process+0x122>
      break;
 8006e44:	bf00      	nop
 8006e46:	e002      	b.n	8006e4e <USBH_CDC_Process+0x122>
      break;
 8006e48:	bf00      	nop
 8006e4a:	e000      	b.n	8006e4e <USBH_CDC_Process+0x122>
      break;
 8006e4c:	bf00      	nop

  }

  return status;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	22a1      	movs	r2, #161	@ 0xa1
 8006e7c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2221      	movs	r2, #33	@ 0x21
 8006e82:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2207      	movs	r2, #7
 8006e94:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2207      	movs	r2, #7
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 fc7e 	bl	800879e <USBH_CtlReq>
 8006ea2:	4603      	mov	r3, r0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2221      	movs	r2, #33	@ 0x21
 8006eba:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2207      	movs	r2, #7
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 fc5f 	bl	800879e <USBH_CtlReq>
 8006ee0:	4603      	mov	r3, r0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b086      	sub	sp, #24
 8006eee:	af02      	add	r7, sp, #8
 8006ef0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006efc:	2300      	movs	r3, #0
 8006efe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d002      	beq.n	8006f10 <CDC_ProcessTransmission+0x26>
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d023      	beq.n	8006f56 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006f0e:	e07a      	b.n	8007006 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	8b12      	ldrh	r2, [r2, #24]
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d90b      	bls.n	8006f34 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	69d9      	ldr	r1, [r3, #28]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8b1a      	ldrh	r2, [r3, #24]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	7b5b      	ldrb	r3, [r3, #13]
 8006f28:	2001      	movs	r0, #1
 8006f2a:	9000      	str	r0, [sp, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 ff34 	bl	8008d9a <USBH_BulkSendData>
 8006f32:	e00b      	b.n	8006f4c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	7b5b      	ldrb	r3, [r3, #13]
 8006f42:	2001      	movs	r0, #1
 8006f44:	9000      	str	r0, [sp, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 ff27 	bl	8008d9a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006f54:	e057      	b.n	8007006 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	7b5b      	ldrb	r3, [r3, #13]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f005 fa27 	bl	800c3b0 <USBH_LL_GetURBState>
 8006f62:	4603      	mov	r3, r0
 8006f64:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d136      	bne.n	8006fda <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	8b12      	ldrh	r2, [r2, #24]
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d90e      	bls.n	8006f96 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	8b12      	ldrh	r2, [r2, #24]
 8006f80:	1a9a      	subs	r2, r3, r2
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	8b12      	ldrh	r2, [r2, #24]
 8006f8e:	441a      	add	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	61da      	str	r2, [r3, #28]
 8006f94:	e002      	b.n	8006f9c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006fac:	e006      	b.n	8006fbc <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f892 	bl	80070e0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f002 f964 	bl	80092a0 <osMessageQueuePut>
      break;
 8006fd8:	e014      	b.n	8007004 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006fda:	7afb      	ldrb	r3, [r7, #11]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d111      	bne.n	8007004 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2204      	movs	r2, #4
 8006fec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2200      	movs	r2, #0
 8007000:	f002 f94e 	bl	80092a0 <osMessageQueuePut>
      break;
 8007004:	bf00      	nop
  }
}
 8007006:	bf00      	nop
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b086      	sub	sp, #24
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007020:	2300      	movs	r3, #0
 8007022:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800702a:	2b03      	cmp	r3, #3
 800702c:	d002      	beq.n	8007034 <CDC_ProcessReception+0x26>
 800702e:	2b04      	cmp	r3, #4
 8007030:	d00e      	beq.n	8007050 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007032:	e051      	b.n	80070d8 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	6a19      	ldr	r1, [r3, #32]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	8b5a      	ldrh	r2, [r3, #26]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	7b1b      	ldrb	r3, [r3, #12]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 fecf 	bl	8008de4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2204      	movs	r2, #4
 800704a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800704e:	e043      	b.n	80070d8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	7b1b      	ldrb	r3, [r3, #12]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f005 f9aa 	bl	800c3b0 <USBH_LL_GetURBState>
 800705c:	4603      	mov	r3, r0
 800705e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007060:	7cfb      	ldrb	r3, [r7, #19]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d137      	bne.n	80070d6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	7b1b      	ldrb	r3, [r3, #12]
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f005 f90d 	bl	800c28c <USBH_LL_GetLastXferSize>
 8007072:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	429a      	cmp	r2, r3
 800707c:	d016      	beq.n	80070ac <CDC_ProcessReception+0x9e>
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	8b5b      	ldrh	r3, [r3, #26]
 8007082:	461a      	mov	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4293      	cmp	r3, r2
 8007088:	d110      	bne.n	80070ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad2      	subs	r2, r2, r3
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	6a1a      	ldr	r2, [r3, #32]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	441a      	add	r2, r3
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2203      	movs	r2, #3
 80070a6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 80070aa:	e006      	b.n	80070ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f81d 	bl	80070f4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2204      	movs	r2, #4
 80070be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80070ce:	2300      	movs	r3, #0
 80070d0:	2200      	movs	r2, #0
 80070d2:	f002 f8e5 	bl	80092a0 <osMessageQueuePut>
      break;
 80070d6:	bf00      	nop
  }
}
 80070d8:	bf00      	nop
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	4613      	mov	r3, r2
 8007128:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007130:	2302      	movs	r3, #2
 8007132:	e044      	b.n	80071be <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	79fa      	ldrb	r2, [r7, #7]
 8007138:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f841 	bl	80071d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007180:	2200      	movs	r2, #0
 8007182:	2104      	movs	r1, #4
 8007184:	2010      	movs	r0, #16
 8007186:	f002 f818 	bl	80091ba <osMessageQueueNew>
 800718a:	4602      	mov	r2, r0
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007192:	4b0d      	ldr	r3, [pc, #52]	@ (80071c8 <USBH_Init+0xac>)
 8007194:	4a0d      	ldr	r2, [pc, #52]	@ (80071cc <USBH_Init+0xb0>)
 8007196:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007198:	4b0b      	ldr	r3, [pc, #44]	@ (80071c8 <USBH_Init+0xac>)
 800719a:	2280      	movs	r2, #128	@ 0x80
 800719c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800719e:	4b0a      	ldr	r3, [pc, #40]	@ (80071c8 <USBH_Init+0xac>)
 80071a0:	2218      	movs	r2, #24
 80071a2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80071a4:	4a08      	ldr	r2, [pc, #32]	@ (80071c8 <USBH_Init+0xac>)
 80071a6:	68f9      	ldr	r1, [r7, #12]
 80071a8:	4809      	ldr	r0, [pc, #36]	@ (80071d0 <USBH_Init+0xb4>)
 80071aa:	f001 ff59 	bl	8009060 <osThreadNew>
 80071ae:	4602      	mov	r2, r0
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f004 ffb4 	bl	800c124 <USBH_LL_Init>

  return USBH_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000244 	.word	0x20000244
 80071cc:	0800c8cc 	.word	0x0800c8cc
 80071d0:	08007e85 	.word	0x08007e85

080071d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e009      	b.n	80071fa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	33e0      	adds	r3, #224	@ 0xe0
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	2200      	movs	r2, #0
 80071f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3301      	adds	r3, #1
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b0f      	cmp	r3, #15
 80071fe:	d9f2      	bls.n	80071e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e009      	b.n	800721a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007220:	d3f1      	bcc.n	8007206 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2240      	movs	r2, #64	@ 0x40
 8007246:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	331c      	adds	r3, #28
 8007272:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007276:	2100      	movs	r1, #0
 8007278:	4618      	mov	r0, r3
 800727a:	f005 fa07 	bl	800c68c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007288:	2100      	movs	r1, #0
 800728a:	4618      	mov	r0, r3
 800728c:	f005 f9fe 	bl	800c68c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007296:	2212      	movs	r2, #18
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f005 f9f6 	bl	800c68c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80072a6:	223e      	movs	r2, #62	@ 0x3e
 80072a8:	2100      	movs	r1, #0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f005 f9ee 	bl	800c68c <memset>

  return USBH_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d016      	beq.n	80072fc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10e      	bne.n	80072f6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80072de:	1c59      	adds	r1, r3, #1
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	33de      	adds	r3, #222	@ 0xde
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]
 80072f4:	e004      	b.n	8007300 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072f6:	2302      	movs	r3, #2
 80072f8:	73fb      	strb	r3, [r7, #15]
 80072fa:	e001      	b.n	8007300 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072fc:	2302      	movs	r3, #2
 80072fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007324:	78fa      	ldrb	r2, [r7, #3]
 8007326:	429a      	cmp	r2, r3
 8007328:	d204      	bcs.n	8007334 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007332:	e001      	b.n	8007338 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007334:	2302      	movs	r3, #2
 8007336:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007346:	b480      	push	{r7}
 8007348:	b087      	sub	sp, #28
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	4608      	mov	r0, r1
 8007350:	4611      	mov	r1, r2
 8007352:	461a      	mov	r2, r3
 8007354:	4603      	mov	r3, r0
 8007356:	70fb      	strb	r3, [r7, #3]
 8007358:	460b      	mov	r3, r1
 800735a:	70bb      	strb	r3, [r7, #2]
 800735c:	4613      	mov	r3, r2
 800735e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800736e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007370:	e025      	b.n	80073be <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	221a      	movs	r2, #26
 8007376:	fb02 f303 	mul.w	r3, r2, r3
 800737a:	3308      	adds	r3, #8
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	3302      	adds	r3, #2
 8007382:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	795b      	ldrb	r3, [r3, #5]
 8007388:	78fa      	ldrb	r2, [r7, #3]
 800738a:	429a      	cmp	r2, r3
 800738c:	d002      	beq.n	8007394 <USBH_FindInterface+0x4e>
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	2bff      	cmp	r3, #255	@ 0xff
 8007392:	d111      	bne.n	80073b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007398:	78ba      	ldrb	r2, [r7, #2]
 800739a:	429a      	cmp	r2, r3
 800739c:	d002      	beq.n	80073a4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800739e:	78bb      	ldrb	r3, [r7, #2]
 80073a0:	2bff      	cmp	r3, #255	@ 0xff
 80073a2:	d109      	bne.n	80073b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073a8:	787a      	ldrb	r2, [r7, #1]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d002      	beq.n	80073b4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073ae:	787b      	ldrb	r3, [r7, #1]
 80073b0:	2bff      	cmp	r3, #255	@ 0xff
 80073b2:	d101      	bne.n	80073b8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	e006      	b.n	80073c6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	3301      	adds	r3, #1
 80073bc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d9d6      	bls.n	8007372 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073c4:	23ff      	movs	r3, #255	@ 0xff
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f004 fede 	bl	800c19c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80073e0:	2101      	movs	r1, #1
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f004 fff7 	bl	800c3d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af04      	add	r7, sp, #16
 80073fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073fc:	2302      	movs	r3, #2
 80073fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b01      	cmp	r3, #1
 800740e:	d102      	bne.n	8007416 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2203      	movs	r2, #3
 8007414:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b0b      	cmp	r3, #11
 800741e:	f200 8244 	bhi.w	80078aa <USBH_Process+0x4b6>
 8007422:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <USBH_Process+0x34>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	08007459 	.word	0x08007459
 800742c:	080074a7 	.word	0x080074a7
 8007430:	0800752b 	.word	0x0800752b
 8007434:	08007829 	.word	0x08007829
 8007438:	080078ab 	.word	0x080078ab
 800743c:	080075e7 	.word	0x080075e7
 8007440:	080077b3 	.word	0x080077b3
 8007444:	08007639 	.word	0x08007639
 8007448:	08007675 	.word	0x08007675
 800744c:	080076ad 	.word	0x080076ad
 8007450:	0800770b 	.word	0x0800770b
 8007454:	08007811 	.word	0x08007811
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8224 	beq.w	80078ae <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800746c:	20c8      	movs	r0, #200	@ 0xc8
 800746e:	f004 fffc 	bl	800c46a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f004 feef 	bl	800c256 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800749c:	2300      	movs	r3, #0
 800749e:	2200      	movs	r2, #0
 80074a0:	f001 fefe 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80074a4:	e203      	b.n	80078ae <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d107      	bne.n	80074c0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	e025      	b.n	800750c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80074c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074ca:	d914      	bls.n	80074f6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80074d2:	3301      	adds	r3, #1
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d903      	bls.n	80074ee <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	220d      	movs	r2, #13
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	e00e      	b.n	800750c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
 80074f4:	e00a      	b.n	800750c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80074fc:	f103 020a 	add.w	r2, r3, #10
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007506:	200a      	movs	r0, #10
 8007508:	f004 ffaf 	bl	800c46a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007520:	2300      	movs	r3, #0
 8007522:	2200      	movs	r2, #0
 8007524:	f001 febc 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      break;
 8007528:	e1c8      	b.n	80078bc <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800753a:	2104      	movs	r1, #4
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007540:	2064      	movs	r0, #100	@ 0x64
 8007542:	f004 ff92 	bl	800c46a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f004 fe5e 	bl	800c208 <USBH_LL_GetSpeed>
 800754c:	4603      	mov	r3, r0
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2205      	movs	r2, #5
 800755a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fc8d 	bl	8008e7e <USBH_AllocPipe>
 8007564:	4603      	mov	r3, r0
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800756c:	2180      	movs	r1, #128	@ 0x80
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fc85 	bl	8008e7e <USBH_AllocPipe>
 8007574:	4603      	mov	r3, r0
 8007576:	461a      	mov	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	7919      	ldrb	r1, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007590:	9202      	str	r2, [sp, #8]
 8007592:	2200      	movs	r2, #0
 8007594:	9201      	str	r2, [sp, #4]
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	4603      	mov	r3, r0
 800759a:	2280      	movs	r2, #128	@ 0x80
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fc3f 	bl	8008e20 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	7959      	ldrb	r1, [r3, #5]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075b6:	9202      	str	r2, [sp, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	9201      	str	r2, [sp, #4]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4603      	mov	r3, r0
 80075c0:	2200      	movs	r2, #0
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fc2c 	bl	8008e20 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80075dc:	2300      	movs	r3, #0
 80075de:	2200      	movs	r2, #0
 80075e0:	f001 fe5e 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      break;
 80075e4:	e16a      	b.n	80078bc <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f96e 	bl	80078c8 <USBH_HandleEnum>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f040 815c 	bne.w	80078b2 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007608:	2b01      	cmp	r3, #1
 800760a:	d103      	bne.n	8007614 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2208      	movs	r2, #8
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	e002      	b.n	800761a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2207      	movs	r2, #7
 8007618:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2205      	movs	r2, #5
 800761e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800762e:	2300      	movs	r3, #0
 8007630:	2200      	movs	r2, #0
 8007632:	f001 fe35 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007636:	e13c      	b.n	80078b2 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8139 	beq.w	80078b6 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800764a:	2101      	movs	r1, #1
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2208      	movs	r2, #8
 8007654:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2205      	movs	r2, #5
 800765a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800766a:	2300      	movs	r3, #0
 800766c:	2200      	movs	r2, #0
 800766e:	f001 fe17 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007672:	e120      	b.n	80078b6 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fd12 	bl	80080a6 <USBH_SetCfg>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d102      	bne.n	800768e <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2209      	movs	r2, #9
 800768c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80076a2:	2300      	movs	r3, #0
 80076a4:	2200      	movs	r2, #0
 80076a6:	f001 fdfb 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      break;
 80076aa:	e107      	b.n	80078bc <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d015      	beq.n	80076e6 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80076ba:	2101      	movs	r1, #1
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fd15 	bl	80080ec <USBH_SetFeature>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d103      	bne.n	80076d6 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	220a      	movs	r2, #10
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	e00a      	b.n	80076ec <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d106      	bne.n	80076ec <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	220a      	movs	r2, #10
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e002      	b.n	80076ec <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	220a      	movs	r2, #10
 80076ea:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007700:	2300      	movs	r3, #0
 8007702:	2200      	movs	r2, #0
 8007704:	f001 fdcc 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      break;
 8007708:	e0d8      	b.n	80078bc <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007710:	2b00      	cmp	r3, #0
 8007712:	d03f      	beq.n	8007794 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800771c:	2300      	movs	r3, #0
 800771e:	73fb      	strb	r3, [r7, #15]
 8007720:	e016      	b.n	8007750 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007722:	7bfa      	ldrb	r2, [r7, #15]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	32de      	adds	r2, #222	@ 0xde
 8007728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772c:	791a      	ldrb	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007734:	429a      	cmp	r2, r3
 8007736:	d108      	bne.n	800774a <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007738:	7bfa      	ldrb	r2, [r7, #15]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32de      	adds	r2, #222	@ 0xde
 800773e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007748:	e005      	b.n	8007756 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	3301      	adds	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0e5      	beq.n	8007722 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d016      	beq.n	800778e <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2206      	movs	r2, #6
 8007776:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800777e:	2103      	movs	r1, #3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
 8007784:	e006      	b.n	8007794 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	220d      	movs	r2, #13
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	e002      	b.n	8007794 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	220d      	movs	r2, #13
 8007792:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2205      	movs	r2, #5
 8007798:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077a8:	2300      	movs	r3, #0
 80077aa:	2200      	movs	r2, #0
 80077ac:	f001 fd78 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      break;
 80077b0:	e084      	b.n	80078bc <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d017      	beq.n	80077ec <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	4798      	blx	r3
 80077c8:	4603      	mov	r3, r0
 80077ca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	220b      	movs	r2, #11
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	e00a      	b.n	80077f2 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d106      	bne.n	80077f2 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	220d      	movs	r2, #13
 80077e8:	701a      	strb	r2, [r3, #0]
 80077ea:	e002      	b.n	80077f2 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	220d      	movs	r2, #13
 80077f0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2205      	movs	r2, #5
 80077f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007806:	2300      	movs	r3, #0
 8007808:	2200      	movs	r2, #0
 800780a:	f001 fd49 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      break;
 800780e:	e055      	b.n	80078bc <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d04f      	beq.n	80078ba <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
      }
      break;
 8007826:	e048      	b.n	80078ba <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fccf 	bl	80071d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007864:	2105      	movs	r1, #5
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b01      	cmp	r3, #1
 8007874:	d107      	bne.n	8007886 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff fda7 	bl	80073d2 <USBH_Start>
 8007884:	e002      	b.n	800788c <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f004 fc88 	bl	800c19c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80078a0:	2300      	movs	r3, #0
 80078a2:	2200      	movs	r2, #0
 80078a4:	f001 fcfc 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      break;
 80078a8:	e008      	b.n	80078bc <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80078aa:	bf00      	nop
 80078ac:	e006      	b.n	80078bc <USBH_Process+0x4c8>
      break;
 80078ae:	bf00      	nop
 80078b0:	e004      	b.n	80078bc <USBH_Process+0x4c8>
      break;
 80078b2:	bf00      	nop
 80078b4:	e002      	b.n	80078bc <USBH_Process+0x4c8>
    break;
 80078b6:	bf00      	nop
 80078b8:	e000      	b.n	80078bc <USBH_Process+0x4c8>
      break;
 80078ba:	bf00      	nop
  }
  return USBH_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop

080078c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af04      	add	r7, sp, #16
 80078ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b07      	cmp	r3, #7
 80078de:	f200 8204 	bhi.w	8007cea <USBH_HandleEnum+0x422>
 80078e2:	a201      	add	r2, pc, #4	@ (adr r2, 80078e8 <USBH_HandleEnum+0x20>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	08007909 	.word	0x08007909
 80078ec:	080079c3 	.word	0x080079c3
 80078f0:	08007a2d 	.word	0x08007a2d
 80078f4:	08007ab7 	.word	0x08007ab7
 80078f8:	08007b21 	.word	0x08007b21
 80078fc:	08007b91 	.word	0x08007b91
 8007900:	08007c2d 	.word	0x08007c2d
 8007904:	08007cab 	.word	0x08007cab
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007908:	2108      	movs	r1, #8
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fae8 	bl	8007ee0 <USBH_Get_DevDesc>
 8007910:	4603      	mov	r3, r0
 8007912:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d12e      	bne.n	8007978 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	7919      	ldrb	r1, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800793e:	9202      	str	r2, [sp, #8]
 8007940:	2200      	movs	r2, #0
 8007942:	9201      	str	r2, [sp, #4]
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	4603      	mov	r3, r0
 8007948:	2280      	movs	r2, #128	@ 0x80
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fa68 	bl	8008e20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7959      	ldrb	r1, [r3, #5]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007964:	9202      	str	r2, [sp, #8]
 8007966:	2200      	movs	r2, #0
 8007968:	9201      	str	r2, [sp, #4]
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	4603      	mov	r3, r0
 800796e:	2200      	movs	r2, #0
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fa55 	bl	8008e20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007976:	e1ba      	b.n	8007cee <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2b03      	cmp	r3, #3
 800797c:	f040 81b7 	bne.w	8007cee <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007986:	3301      	adds	r3, #1
 8007988:	b2da      	uxtb	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007996:	2b03      	cmp	r3, #3
 8007998:	d903      	bls.n	80079a2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	220d      	movs	r2, #13
 800799e:	701a      	strb	r2, [r3, #0]
      break;
 80079a0:	e1a5      	b.n	8007cee <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	795b      	ldrb	r3, [r3, #5]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fa89 	bl	8008ec0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	791b      	ldrb	r3, [r3, #4]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 fa83 	bl	8008ec0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
      break;
 80079c0:	e195      	b.n	8007cee <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80079c2:	2112      	movs	r1, #18
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fa8b 	bl	8007ee0 <USBH_Get_DevDesc>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d103      	bne.n	80079dc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079da:	e18a      	b.n	8007cf2 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b03      	cmp	r3, #3
 80079e0:	f040 8187 	bne.w	8007cf2 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079ea:	3301      	adds	r3, #1
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d903      	bls.n	8007a06 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	220d      	movs	r2, #13
 8007a02:	701a      	strb	r2, [r3, #0]
      break;
 8007a04:	e175      	b.n	8007cf2 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	795b      	ldrb	r3, [r3, #5]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 fa57 	bl	8008ec0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	791b      	ldrb	r3, [r3, #4]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 fa51 	bl	8008ec0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
      break;
 8007a2a:	e162      	b.n	8007cf2 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb15 	bl	800805e <USBH_SetAddress>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d130      	bne.n	8007aa0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007a3e:	2002      	movs	r0, #2
 8007a40:	f004 fd13 	bl	800c46a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2203      	movs	r2, #3
 8007a50:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7919      	ldrb	r1, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a66:	9202      	str	r2, [sp, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	9201      	str	r2, [sp, #4]
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2280      	movs	r2, #128	@ 0x80
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 f9d4 	bl	8008e20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	7959      	ldrb	r1, [r3, #5]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a8c:	9202      	str	r2, [sp, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	9201      	str	r2, [sp, #4]
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4603      	mov	r3, r0
 8007a96:	2200      	movs	r2, #0
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f9c1 	bl	8008e20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a9e:	e12a      	b.n	8007cf6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	f040 8127 	bne.w	8007cf6 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	220d      	movs	r2, #13
 8007aac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	705a      	strb	r2, [r3, #1]
      break;
 8007ab4:	e11f      	b.n	8007cf6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007ab6:	2109      	movs	r1, #9
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa3d 	bl	8007f38 <USBH_Get_CfgDesc>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d103      	bne.n	8007ad0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2204      	movs	r2, #4
 8007acc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ace:	e114      	b.n	8007cfa <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	f040 8111 	bne.w	8007cfa <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ade:	3301      	adds	r3, #1
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d903      	bls.n	8007afa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	220d      	movs	r2, #13
 8007af6:	701a      	strb	r2, [r3, #0]
      break;
 8007af8:	e0ff      	b.n	8007cfa <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	795b      	ldrb	r3, [r3, #5]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 f9dd 	bl	8008ec0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	791b      	ldrb	r3, [r3, #4]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 f9d7 	bl	8008ec0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	701a      	strb	r2, [r3, #0]
      break;
 8007b1e:	e0ec      	b.n	8007cfa <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fa05 	bl	8007f38 <USBH_Get_CfgDesc>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d103      	bne.n	8007b40 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2205      	movs	r2, #5
 8007b3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b3e:	e0de      	b.n	8007cfe <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	f040 80db 	bne.w	8007cfe <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b4e:	3301      	adds	r3, #1
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d903      	bls.n	8007b6a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	220d      	movs	r2, #13
 8007b66:	701a      	strb	r2, [r3, #0]
      break;
 8007b68:	e0c9      	b.n	8007cfe <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	795b      	ldrb	r3, [r3, #5]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f9a5 	bl	8008ec0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	791b      	ldrb	r3, [r3, #4]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 f99f 	bl	8008ec0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
      break;
 8007b8e:	e0b6      	b.n	8007cfe <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d036      	beq.n	8007c08 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ba6:	23ff      	movs	r3, #255	@ 0xff
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f9ef 	bl	8007f8c <USBH_Get_StringDesc>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d111      	bne.n	8007bdc <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2206      	movs	r2, #6
 8007bbc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2205      	movs	r2, #5
 8007bc2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f001 fb63 	bl	80092a0 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bda:	e092      	b.n	8007d02 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	f040 808f 	bne.w	8007d02 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2206      	movs	r2, #6
 8007be8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2205      	movs	r2, #5
 8007bee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2200      	movs	r2, #0
 8007c02:	f001 fb4d 	bl	80092a0 <osMessageQueuePut>
      break;
 8007c06:	e07c      	b.n	8007d02 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2206      	movs	r2, #6
 8007c0c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2205      	movs	r2, #5
 8007c12:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007c22:	2300      	movs	r3, #0
 8007c24:	2200      	movs	r2, #0
 8007c26:	f001 fb3b 	bl	80092a0 <osMessageQueuePut>
      break;
 8007c2a:	e06a      	b.n	8007d02 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d027      	beq.n	8007c86 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c42:	23ff      	movs	r3, #255	@ 0xff
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f9a1 	bl	8007f8c <USBH_Get_StringDesc>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d103      	bne.n	8007c5c <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2207      	movs	r2, #7
 8007c58:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c5a:	e054      	b.n	8007d06 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d151      	bne.n	8007d06 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2207      	movs	r2, #7
 8007c66:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2205      	movs	r2, #5
 8007c6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f001 fb0e 	bl	80092a0 <osMessageQueuePut>
      break;
 8007c84:	e03f      	b.n	8007d06 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2207      	movs	r2, #7
 8007c8a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2205      	movs	r2, #5
 8007c90:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f001 fafc 	bl	80092a0 <osMessageQueuePut>
      break;
 8007ca8:	e02d      	b.n	8007d06 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d017      	beq.n	8007ce4 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cc0:	23ff      	movs	r3, #255	@ 0xff
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f962 	bl	8007f8c <USBH_Get_StringDesc>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007cd6:	e018      	b.n	8007d0a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d115      	bne.n	8007d0a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce2:	e012      	b.n	8007d0a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce8:	e00f      	b.n	8007d0a <USBH_HandleEnum+0x442>

    default:
      break;
 8007cea:	bf00      	nop
 8007cec:	e00e      	b.n	8007d0c <USBH_HandleEnum+0x444>
      break;
 8007cee:	bf00      	nop
 8007cf0:	e00c      	b.n	8007d0c <USBH_HandleEnum+0x444>
      break;
 8007cf2:	bf00      	nop
 8007cf4:	e00a      	b.n	8007d0c <USBH_HandleEnum+0x444>
      break;
 8007cf6:	bf00      	nop
 8007cf8:	e008      	b.n	8007d0c <USBH_HandleEnum+0x444>
      break;
 8007cfa:	bf00      	nop
 8007cfc:	e006      	b.n	8007d0c <USBH_HandleEnum+0x444>
      break;
 8007cfe:	bf00      	nop
 8007d00:	e004      	b.n	8007d0c <USBH_HandleEnum+0x444>
      break;
 8007d02:	bf00      	nop
 8007d04:	e002      	b.n	8007d0c <USBH_HandleEnum+0x444>
      break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <USBH_HandleEnum+0x444>
      break;
 8007d0a:	bf00      	nop
  }
  return Status;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop

08007d18 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f804 	bl	8007d5a <USBH_HandleSof>
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b0b      	cmp	r3, #11
 8007d6a:	d10a      	bne.n	8007d82 <USBH_HandleSof+0x28>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
  }
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007dae:	2300      	movs	r3, #0
 8007db0:	2200      	movs	r2, #0
 8007db2:	f001 fa75 	bl	80092a0 <osMessageQueuePut>
#endif
#endif

  return;
 8007db6:	bf00      	nop
}
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007dce:	bf00      	nop
}
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2200      	movs	r2, #0
 8007e12:	f001 fa45 	bl	80092a0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f004 f9c6 	bl	800c1d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	791b      	ldrb	r3, [r3, #4]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 f837 	bl	8008ec0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	795b      	ldrb	r3, [r3, #5]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 f831 	bl	8008ec0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e72:	2300      	movs	r3, #0
 8007e74:	2200      	movs	r2, #0
 8007e76:	f001 fa13 	bl	80092a0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e98:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f001 fa5f 	bl	8009360 <osMessageQueueGet>
 8007ea2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1f0      	bne.n	8007e8c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff faa2 	bl	80073f4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007eb0:	e7ec      	b.n	8007e8c <USBH_Process_OS+0x8>

08007eb2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f001 f9e5 	bl	80092a0 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007eec:	887b      	ldrh	r3, [r7, #2]
 8007eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ef2:	d901      	bls.n	8007ef8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e01b      	b.n	8007f30 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007efe:	887b      	ldrh	r3, [r7, #2]
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	4613      	mov	r3, r2
 8007f04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f08:	2100      	movs	r1, #0
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f872 	bl	8007ff4 <USBH_GetDescriptor>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f20:	887a      	ldrh	r2, [r7, #2]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f929 	bl	800817c <USBH_ParseDevDesc>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	331c      	adds	r3, #28
 8007f48:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007f4a:	887b      	ldrh	r3, [r7, #2]
 8007f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f50:	d901      	bls.n	8007f56 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e016      	b.n	8007f84 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f56:	887b      	ldrh	r3, [r7, #2]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f60:	2100      	movs	r1, #0
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f846 	bl	8007ff4 <USBH_GetDescriptor>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d107      	bne.n	8007f82 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007f72:	887b      	ldrh	r3, [r7, #2]
 8007f74:	461a      	mov	r2, r3
 8007f76:	68b9      	ldr	r1, [r7, #8]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f9af 	bl	80082dc <USBH_ParseCfgDesc>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	607a      	str	r2, [r7, #4]
 8007f96:	461a      	mov	r2, r3
 8007f98:	460b      	mov	r3, r1
 8007f9a:	72fb      	strb	r3, [r7, #11]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007fa0:	893b      	ldrh	r3, [r7, #8]
 8007fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa6:	d802      	bhi.n	8007fae <USBH_Get_StringDesc+0x22>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e01c      	b.n	8007fec <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007fb2:	7afb      	ldrb	r3, [r7, #11]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007fba:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007fc2:	893b      	ldrh	r3, [r7, #8]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	2100      	movs	r1, #0
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 f812 	bl	8007ff4 <USBH_GetDescriptor>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d107      	bne.n	8007fea <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007fe0:	893a      	ldrh	r2, [r7, #8]
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fb8d 	bl	8008704 <USBH_ParseStringDesc>
  }

  return status;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	607b      	str	r3, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	72fb      	strb	r3, [r7, #11]
 8008002:	4613      	mov	r3, r2
 8008004:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	789b      	ldrb	r3, [r3, #2]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d11c      	bne.n	8008048 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800800e:	7afb      	ldrb	r3, [r7, #11]
 8008010:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008014:	b2da      	uxtb	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2206      	movs	r2, #6
 800801e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	893a      	ldrh	r2, [r7, #8]
 8008024:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008026:	893b      	ldrh	r3, [r7, #8]
 8008028:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800802c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008030:	d104      	bne.n	800803c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f240 4209 	movw	r2, #1033	@ 0x409
 8008038:	829a      	strh	r2, [r3, #20]
 800803a:	e002      	b.n	8008042 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8b3a      	ldrh	r2, [r7, #24]
 8008046:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008048:	8b3b      	ldrh	r3, [r7, #24]
 800804a:	461a      	mov	r2, r3
 800804c:	6879      	ldr	r1, [r7, #4]
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 fba5 	bl	800879e <USBH_CtlReq>
 8008054:	4603      	mov	r3, r0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	789b      	ldrb	r3, [r3, #2]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d10f      	bne.n	8008092 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2205      	movs	r2, #5
 800807c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	b29a      	uxth	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008092:	2200      	movs	r2, #0
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fb81 	bl	800879e <USBH_CtlReq>
 800809c:	4603      	mov	r3, r0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	789b      	ldrb	r3, [r3, #2]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d10e      	bne.n	80080d8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2209      	movs	r2, #9
 80080c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	887a      	ldrh	r2, [r7, #2]
 80080ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080d8:	2200      	movs	r2, #0
 80080da:	2100      	movs	r1, #0
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fb5e 	bl	800879e <USBH_CtlReq>
 80080e2:	4603      	mov	r3, r0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	789b      	ldrb	r3, [r3, #2]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d10f      	bne.n	8008120 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2203      	movs	r2, #3
 800810a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800810c:	78fb      	ldrb	r3, [r7, #3]
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008120:	2200      	movs	r2, #0
 8008122:	2100      	movs	r1, #0
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fb3a 	bl	800879e <USBH_CtlReq>
 800812a:	4603      	mov	r3, r0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	789b      	ldrb	r3, [r3, #2]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d10f      	bne.n	8008168 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	b29a      	uxth	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008168:	2200      	movs	r2, #0
 800816a:	2100      	movs	r1, #0
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fb16 	bl	800879e <USBH_CtlReq>
 8008172:	4603      	mov	r3, r0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008190:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800819c:	2302      	movs	r3, #2
 800819e:	e094      	b.n	80082ca <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	785a      	ldrb	r2, [r3, #1]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	3302      	adds	r3, #2
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	3303      	adds	r3, #3
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	4313      	orrs	r3, r2
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	791a      	ldrb	r2, [r3, #4]
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	795a      	ldrb	r2, [r3, #5]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	799a      	ldrb	r2, [r3, #6]
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	79da      	ldrb	r2, [r3, #7]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d11b      	bne.n	8008236 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	79db      	ldrb	r3, [r3, #7]
 8008202:	2b20      	cmp	r3, #32
 8008204:	dc0f      	bgt.n	8008226 <USBH_ParseDevDesc+0xaa>
 8008206:	2b08      	cmp	r3, #8
 8008208:	db0f      	blt.n	800822a <USBH_ParseDevDesc+0xae>
 800820a:	3b08      	subs	r3, #8
 800820c:	4a32      	ldr	r2, [pc, #200]	@ (80082d8 <USBH_ParseDevDesc+0x15c>)
 800820e:	fa22 f303 	lsr.w	r3, r2, r3
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	bf14      	ite	ne
 800821a:	2301      	movne	r3, #1
 800821c:	2300      	moveq	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d106      	bne.n	8008232 <USBH_ParseDevDesc+0xb6>
 8008224:	e001      	b.n	800822a <USBH_ParseDevDesc+0xae>
 8008226:	2b40      	cmp	r3, #64	@ 0x40
 8008228:	d003      	beq.n	8008232 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2208      	movs	r2, #8
 800822e:	71da      	strb	r2, [r3, #7]
        break;
 8008230:	e000      	b.n	8008234 <USBH_ParseDevDesc+0xb8>
        break;
 8008232:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008234:	e00e      	b.n	8008254 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800823c:	2b02      	cmp	r3, #2
 800823e:	d107      	bne.n	8008250 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	79db      	ldrb	r3, [r3, #7]
 8008244:	2b08      	cmp	r3, #8
 8008246:	d005      	beq.n	8008254 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	2208      	movs	r2, #8
 800824c:	71da      	strb	r2, [r3, #7]
 800824e:	e001      	b.n	8008254 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008250:	2303      	movs	r3, #3
 8008252:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	2b08      	cmp	r3, #8
 8008258:	d936      	bls.n	80082c8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	3308      	adds	r3, #8
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	461a      	mov	r2, r3
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	3309      	adds	r3, #9
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	b29b      	uxth	r3, r3
 800826c:	4313      	orrs	r3, r2
 800826e:	b29a      	uxth	r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	330a      	adds	r3, #10
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	330b      	adds	r3, #11
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	b29b      	uxth	r3, r3
 8008286:	4313      	orrs	r3, r2
 8008288:	b29a      	uxth	r2, r3
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	330c      	adds	r3, #12
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	330d      	adds	r3, #13
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	b29b      	uxth	r3, r3
 80082a0:	4313      	orrs	r3, r2
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	7b9a      	ldrb	r2, [r3, #14]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	7bda      	ldrb	r2, [r3, #15]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	7c1a      	ldrb	r2, [r3, #16]
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	7c5a      	ldrb	r2, [r3, #17]
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	371c      	adds	r7, #28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	01000101 	.word	0x01000101

080082dc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08c      	sub	sp, #48	@ 0x30
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	4613      	mov	r3, r2
 80082e8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80082f0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800830a:	2302      	movs	r3, #2
 800830c:	e0da      	b.n	80084c4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b09      	cmp	r3, #9
 8008318:	d002      	beq.n	8008320 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831c:	2209      	movs	r2, #9
 800831e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	781a      	ldrb	r2, [r3, #0]
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	785a      	ldrb	r2, [r3, #1]
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	3302      	adds	r3, #2
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	3303      	adds	r3, #3
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	b29b      	uxth	r3, r3
 8008342:	4313      	orrs	r3, r2
 8008344:	b29b      	uxth	r3, r3
 8008346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800834a:	bf28      	it	cs
 800834c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008350:	b29a      	uxth	r2, r3
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	791a      	ldrb	r2, [r3, #4]
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	795a      	ldrb	r2, [r3, #5]
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	799a      	ldrb	r2, [r3, #6]
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	79da      	ldrb	r2, [r3, #7]
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	7a1a      	ldrb	r2, [r3, #8]
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800837e:	88fb      	ldrh	r3, [r7, #6]
 8008380:	2b09      	cmp	r3, #9
 8008382:	f240 809d 	bls.w	80084c0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008386:	2309      	movs	r3, #9
 8008388:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800838e:	e081      	b.n	8008494 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008390:	f107 0316 	add.w	r3, r7, #22
 8008394:	4619      	mov	r1, r3
 8008396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008398:	f000 f9e7 	bl	800876a <USBH_GetNextDesc>
 800839c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800839e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d176      	bne.n	8008494 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	d002      	beq.n	80083b4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80083ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b0:	2209      	movs	r2, #9
 80083b2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80083b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083b8:	221a      	movs	r2, #26
 80083ba:	fb02 f303 	mul.w	r3, r2, r3
 80083be:	3308      	adds	r3, #8
 80083c0:	6a3a      	ldr	r2, [r7, #32]
 80083c2:	4413      	add	r3, r2
 80083c4:	3302      	adds	r3, #2
 80083c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80083c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083ca:	69f8      	ldr	r0, [r7, #28]
 80083cc:	f000 f87e 	bl	80084cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083da:	e043      	b.n	8008464 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80083dc:	f107 0316 	add.w	r3, r7, #22
 80083e0:	4619      	mov	r1, r3
 80083e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e4:	f000 f9c1 	bl	800876a <USBH_GetNextDesc>
 80083e8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80083ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ec:	785b      	ldrb	r3, [r3, #1]
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d138      	bne.n	8008464 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	795b      	ldrb	r3, [r3, #5]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d113      	bne.n	8008422 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d003      	beq.n	800840a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	799b      	ldrb	r3, [r3, #6]
 8008406:	2b03      	cmp	r3, #3
 8008408:	d10b      	bne.n	8008422 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	79db      	ldrb	r3, [r3, #7]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10b      	bne.n	800842a <USBH_ParseCfgDesc+0x14e>
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b09      	cmp	r3, #9
 8008418:	d007      	beq.n	800842a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800841a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841c:	2209      	movs	r2, #9
 800841e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008420:	e003      	b.n	800842a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008424:	2207      	movs	r2, #7
 8008426:	701a      	strb	r2, [r3, #0]
 8008428:	e000      	b.n	800842c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800842a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800842c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008430:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008434:	3201      	adds	r2, #1
 8008436:	00d2      	lsls	r2, r2, #3
 8008438:	211a      	movs	r1, #26
 800843a:	fb01 f303 	mul.w	r3, r1, r3
 800843e:	4413      	add	r3, r2
 8008440:	3308      	adds	r3, #8
 8008442:	6a3a      	ldr	r2, [r7, #32]
 8008444:	4413      	add	r3, r2
 8008446:	3304      	adds	r3, #4
 8008448:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800844a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800844c:	69b9      	ldr	r1, [r7, #24]
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 f870 	bl	8008534 <USBH_ParseEPDesc>
 8008454:	4603      	mov	r3, r0
 8008456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800845a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800845e:	3301      	adds	r3, #1
 8008460:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	791b      	ldrb	r3, [r3, #4]
 8008468:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800846c:	429a      	cmp	r2, r3
 800846e:	d204      	bcs.n	800847a <USBH_ParseCfgDesc+0x19e>
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	885a      	ldrh	r2, [r3, #2]
 8008474:	8afb      	ldrh	r3, [r7, #22]
 8008476:	429a      	cmp	r2, r3
 8008478:	d8b0      	bhi.n	80083dc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	791b      	ldrb	r3, [r3, #4]
 800847e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008482:	429a      	cmp	r2, r3
 8008484:	d201      	bcs.n	800848a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008486:	2303      	movs	r3, #3
 8008488:	e01c      	b.n	80084c4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800848a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800848e:	3301      	adds	r3, #1
 8008490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008498:	2b01      	cmp	r3, #1
 800849a:	d805      	bhi.n	80084a8 <USBH_ParseCfgDesc+0x1cc>
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	885a      	ldrh	r2, [r3, #2]
 80084a0:	8afb      	ldrh	r3, [r7, #22]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	f63f af74 	bhi.w	8008390 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	791b      	ldrb	r3, [r3, #4]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	bf28      	it	cs
 80084b0:	2302      	movcs	r3, #2
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d201      	bcs.n	80084c0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80084bc:	2303      	movs	r3, #3
 80084be:	e001      	b.n	80084c4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80084c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3730      	adds	r7, #48	@ 0x30
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781a      	ldrb	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	785a      	ldrb	r2, [r3, #1]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	789a      	ldrb	r2, [r3, #2]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	78da      	ldrb	r2, [r3, #3]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	3304      	adds	r3, #4
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	bf28      	it	cs
 8008500:	2302      	movcs	r3, #2
 8008502:	b2da      	uxtb	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	795a      	ldrb	r2, [r3, #5]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	799a      	ldrb	r2, [r3, #6]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	79da      	ldrb	r2, [r3, #7]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	7a1a      	ldrb	r2, [r3, #8]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	721a      	strb	r2, [r3, #8]
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	781a      	ldrb	r2, [r3, #0]
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	785a      	ldrb	r2, [r3, #1]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	789a      	ldrb	r2, [r3, #2]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	78da      	ldrb	r2, [r3, #3]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	3304      	adds	r3, #4
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3305      	adds	r3, #5
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	021b      	lsls	r3, r3, #8
 8008574:	b29b      	uxth	r3, r3
 8008576:	4313      	orrs	r3, r2
 8008578:	b29a      	uxth	r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	799a      	ldrb	r2, [r3, #6]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	889b      	ldrh	r3, [r3, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008596:	d804      	bhi.n	80085a2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800859c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085a0:	d901      	bls.n	80085a6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80085a2:	2303      	movs	r3, #3
 80085a4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d136      	bne.n	800861e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	78db      	ldrb	r3, [r3, #3]
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d108      	bne.n	80085ce <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	889b      	ldrh	r3, [r3, #4]
 80085c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085c4:	f240 8097 	bls.w	80086f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085c8:	2303      	movs	r3, #3
 80085ca:	75fb      	strb	r3, [r7, #23]
 80085cc:	e093      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	78db      	ldrb	r3, [r3, #3]
 80085d2:	f003 0303 	and.w	r3, r3, #3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d107      	bne.n	80085ea <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	889b      	ldrh	r3, [r3, #4]
 80085de:	2b40      	cmp	r3, #64	@ 0x40
 80085e0:	f240 8089 	bls.w	80086f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085e4:	2303      	movs	r3, #3
 80085e6:	75fb      	strb	r3, [r7, #23]
 80085e8:	e085      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	78db      	ldrb	r3, [r3, #3]
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d005      	beq.n	8008602 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	78db      	ldrb	r3, [r3, #3]
 80085fa:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d10a      	bne.n	8008618 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	799b      	ldrb	r3, [r3, #6]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <USBH_ParseEPDesc+0xde>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	799b      	ldrb	r3, [r3, #6]
 800860e:	2b10      	cmp	r3, #16
 8008610:	d970      	bls.n	80086f4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008612:	2303      	movs	r3, #3
 8008614:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008616:	e06d      	b.n	80086f4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008618:	2303      	movs	r3, #3
 800861a:	75fb      	strb	r3, [r7, #23]
 800861c:	e06b      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008624:	2b01      	cmp	r3, #1
 8008626:	d13c      	bne.n	80086a2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	78db      	ldrb	r3, [r3, #3]
 800862c:	f003 0303 	and.w	r3, r3, #3
 8008630:	2b02      	cmp	r3, #2
 8008632:	d005      	beq.n	8008640 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	78db      	ldrb	r3, [r3, #3]
 8008638:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	889b      	ldrh	r3, [r3, #4]
 8008644:	2b40      	cmp	r3, #64	@ 0x40
 8008646:	d956      	bls.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008648:	2303      	movs	r3, #3
 800864a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800864c:	e053      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	78db      	ldrb	r3, [r3, #3]
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	2b01      	cmp	r3, #1
 8008658:	d10e      	bne.n	8008678 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	799b      	ldrb	r3, [r3, #6]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d007      	beq.n	8008672 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008666:	2b10      	cmp	r3, #16
 8008668:	d803      	bhi.n	8008672 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800866e:	2b40      	cmp	r3, #64	@ 0x40
 8008670:	d941      	bls.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008672:	2303      	movs	r3, #3
 8008674:	75fb      	strb	r3, [r7, #23]
 8008676:	e03e      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	78db      	ldrb	r3, [r3, #3]
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	2b03      	cmp	r3, #3
 8008682:	d10b      	bne.n	800869c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	799b      	ldrb	r3, [r3, #6]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <USBH_ParseEPDesc+0x162>
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	889b      	ldrh	r3, [r3, #4]
 8008690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008694:	d32f      	bcc.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008696:	2303      	movs	r3, #3
 8008698:	75fb      	strb	r3, [r7, #23]
 800869a:	e02c      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800869c:	2303      	movs	r3, #3
 800869e:	75fb      	strb	r3, [r7, #23]
 80086a0:	e029      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d120      	bne.n	80086ee <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	78db      	ldrb	r3, [r3, #3]
 80086b0:	f003 0303 	and.w	r3, r3, #3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d106      	bne.n	80086c6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	889b      	ldrh	r3, [r3, #4]
 80086bc:	2b08      	cmp	r3, #8
 80086be:	d01a      	beq.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086c0:	2303      	movs	r3, #3
 80086c2:	75fb      	strb	r3, [r7, #23]
 80086c4:	e017      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	78db      	ldrb	r3, [r3, #3]
 80086ca:	f003 0303 	and.w	r3, r3, #3
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d10a      	bne.n	80086e8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	799b      	ldrb	r3, [r3, #6]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <USBH_ParseEPDesc+0x1ae>
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	889b      	ldrh	r3, [r3, #4]
 80086de:	2b08      	cmp	r3, #8
 80086e0:	d909      	bls.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086e2:	2303      	movs	r3, #3
 80086e4:	75fb      	strb	r3, [r7, #23]
 80086e6:	e006      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086e8:	2303      	movs	r3, #3
 80086ea:	75fb      	strb	r3, [r7, #23]
 80086ec:	e003      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80086ee:	2303      	movs	r3, #3
 80086f0:	75fb      	strb	r3, [r7, #23]
 80086f2:	e000      	b.n	80086f6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086f4:	bf00      	nop
  }

  return status;
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	4613      	mov	r3, r2
 8008710:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2b03      	cmp	r3, #3
 800871a:	d120      	bne.n	800875e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	1e9a      	subs	r2, r3, #2
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	4293      	cmp	r3, r2
 8008726:	bf28      	it	cs
 8008728:	4613      	movcs	r3, r2
 800872a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3302      	adds	r3, #2
 8008730:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008732:	2300      	movs	r3, #0
 8008734:	82fb      	strh	r3, [r7, #22]
 8008736:	e00b      	b.n	8008750 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008738:	8afb      	ldrh	r3, [r7, #22]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4413      	add	r3, r2
 800873e:	781a      	ldrb	r2, [r3, #0]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	3301      	adds	r3, #1
 8008748:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800874a:	8afb      	ldrh	r3, [r7, #22]
 800874c:	3302      	adds	r3, #2
 800874e:	82fb      	strh	r3, [r7, #22]
 8008750:	8afa      	ldrh	r2, [r7, #22]
 8008752:	8abb      	ldrh	r3, [r7, #20]
 8008754:	429a      	cmp	r2, r3
 8008756:	d3ef      	bcc.n	8008738 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2200      	movs	r2, #0
 800875c:	701a      	strb	r2, [r3, #0]
  }
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	7812      	ldrb	r2, [r2, #0]
 800877c:	4413      	add	r3, r2
 800877e:	b29a      	uxth	r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4413      	add	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008790:	68fb      	ldr	r3, [r7, #12]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b086      	sub	sp, #24
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	4613      	mov	r3, r2
 80087aa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80087ac:	2301      	movs	r3, #1
 80087ae:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	789b      	ldrb	r3, [r3, #2]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d002      	beq.n	80087be <USBH_CtlReq+0x20>
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d01d      	beq.n	80087f8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80087bc:	e043      	b.n	8008846 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	88fa      	ldrh	r2, [r7, #6]
 80087c8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2201      	movs	r2, #1
 80087ce:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2202      	movs	r2, #2
 80087d4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80087d6:	2301      	movs	r3, #1
 80087d8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2203      	movs	r2, #3
 80087de:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087ee:	2300      	movs	r3, #0
 80087f0:	2200      	movs	r2, #0
 80087f2:	f000 fd55 	bl	80092a0 <osMessageQueuePut>
      break;
 80087f6:	e026      	b.n	8008846 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f829 	bl	8008850 <USBH_HandleControl>
 80087fe:	4603      	mov	r3, r0
 8008800:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <USBH_CtlReq+0x70>
 8008808:	7dfb      	ldrb	r3, [r7, #23]
 800880a:	2b03      	cmp	r3, #3
 800880c:	d106      	bne.n	800881c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2201      	movs	r2, #1
 8008812:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	761a      	strb	r2, [r3, #24]
 800881a:	e005      	b.n	8008828 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d102      	bne.n	8008828 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2201      	movs	r2, #1
 8008826:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2203      	movs	r2, #3
 800882c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800883c:	2300      	movs	r3, #0
 800883e:	2200      	movs	r2, #0
 8008840:	f000 fd2e 	bl	80092a0 <osMessageQueuePut>
      break;
 8008844:	bf00      	nop
  }
  return status;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af02      	add	r7, sp, #8
 8008856:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008858:	2301      	movs	r3, #1
 800885a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800885c:	2300      	movs	r3, #0
 800885e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	7e1b      	ldrb	r3, [r3, #24]
 8008864:	3b01      	subs	r3, #1
 8008866:	2b0a      	cmp	r3, #10
 8008868:	f200 8229 	bhi.w	8008cbe <USBH_HandleControl+0x46e>
 800886c:	a201      	add	r2, pc, #4	@ (adr r2, 8008874 <USBH_HandleControl+0x24>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	080088a1 	.word	0x080088a1
 8008878:	080088bb 	.word	0x080088bb
 800887c:	0800895d 	.word	0x0800895d
 8008880:	08008983 	.word	0x08008983
 8008884:	08008a0f 	.word	0x08008a0f
 8008888:	08008a39 	.word	0x08008a39
 800888c:	08008afb 	.word	0x08008afb
 8008890:	08008b1d 	.word	0x08008b1d
 8008894:	08008baf 	.word	0x08008baf
 8008898:	08008bd5 	.word	0x08008bd5
 800889c:	08008c67 	.word	0x08008c67
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f103 0110 	add.w	r1, r3, #16
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	795b      	ldrb	r3, [r3, #5]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fa17 	bl	8008ce0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	761a      	strb	r2, [r3, #24]
      break;
 80088b8:	e20c      	b.n	8008cd4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	795b      	ldrb	r3, [r3, #5]
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f003 fd75 	bl	800c3b0 <USBH_LL_GetURBState>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d12c      	bne.n	800892a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	7c1b      	ldrb	r3, [r3, #16]
 80088d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	8adb      	ldrh	r3, [r3, #22]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80088e2:	7b7b      	ldrb	r3, [r7, #13]
 80088e4:	2b80      	cmp	r3, #128	@ 0x80
 80088e6:	d103      	bne.n	80088f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2203      	movs	r2, #3
 80088ec:	761a      	strb	r2, [r3, #24]
 80088ee:	e00d      	b.n	800890c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2205      	movs	r2, #5
 80088f4:	761a      	strb	r2, [r3, #24]
 80088f6:	e009      	b.n	800890c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80088f8:	7b7b      	ldrb	r3, [r7, #13]
 80088fa:	2b80      	cmp	r3, #128	@ 0x80
 80088fc:	d103      	bne.n	8008906 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2209      	movs	r2, #9
 8008902:	761a      	strb	r2, [r3, #24]
 8008904:	e002      	b.n	800890c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2207      	movs	r2, #7
 800890a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2203      	movs	r2, #3
 8008910:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008920:	2300      	movs	r3, #0
 8008922:	2200      	movs	r2, #0
 8008924:	f000 fcbc 	bl	80092a0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008928:	e1cb      	b.n	8008cc2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800892a:	7bbb      	ldrb	r3, [r7, #14]
 800892c:	2b04      	cmp	r3, #4
 800892e:	d003      	beq.n	8008938 <USBH_HandleControl+0xe8>
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b02      	cmp	r3, #2
 8008934:	f040 81c5 	bne.w	8008cc2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	220b      	movs	r2, #11
 800893c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2203      	movs	r2, #3
 8008942:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008952:	2300      	movs	r3, #0
 8008954:	2200      	movs	r2, #0
 8008956:	f000 fca3 	bl	80092a0 <osMessageQueuePut>
      break;
 800895a:	e1b2      	b.n	8008cc2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008962:	b29a      	uxth	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6899      	ldr	r1, [r3, #8]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	899a      	ldrh	r2, [r3, #12]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	791b      	ldrb	r3, [r3, #4]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f9f2 	bl	8008d5e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2204      	movs	r2, #4
 800897e:	761a      	strb	r2, [r3, #24]
      break;
 8008980:	e1a8      	b.n	8008cd4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	791b      	ldrb	r3, [r3, #4]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f003 fd11 	bl	800c3b0 <USBH_LL_GetURBState>
 800898e:	4603      	mov	r3, r0
 8008990:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d110      	bne.n	80089ba <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2209      	movs	r2, #9
 800899c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2203      	movs	r2, #3
 80089a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089b2:	2300      	movs	r3, #0
 80089b4:	2200      	movs	r2, #0
 80089b6:	f000 fc73 	bl	80092a0 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b05      	cmp	r3, #5
 80089be:	d110      	bne.n	80089e2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089c0:	2303      	movs	r3, #3
 80089c2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2203      	movs	r2, #3
 80089c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089d8:	2300      	movs	r3, #0
 80089da:	2200      	movs	r2, #0
 80089dc:	f000 fc60 	bl	80092a0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089e0:	e171      	b.n	8008cc6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	f040 816e 	bne.w	8008cc6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	220b      	movs	r2, #11
 80089ee:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2203      	movs	r2, #3
 80089f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a04:	2300      	movs	r3, #0
 8008a06:	2200      	movs	r2, #0
 8008a08:	f000 fc4a 	bl	80092a0 <osMessageQueuePut>
      break;
 8008a0c:	e15b      	b.n	8008cc6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6899      	ldr	r1, [r3, #8]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	899a      	ldrh	r2, [r3, #12]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	795b      	ldrb	r3, [r3, #5]
 8008a1a:	2001      	movs	r0, #1
 8008a1c:	9000      	str	r0, [sp, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f978 	bl	8008d14 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2206      	movs	r2, #6
 8008a34:	761a      	strb	r2, [r3, #24]
      break;
 8008a36:	e14d      	b.n	8008cd4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	795b      	ldrb	r3, [r3, #5]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f003 fcb6 	bl	800c3b0 <USBH_LL_GetURBState>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d111      	bne.n	8008a72 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2207      	movs	r2, #7
 8008a52:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2203      	movs	r2, #3
 8008a58:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f000 fc18 	bl	80092a0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a70:	e12b      	b.n	8008cca <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	2b05      	cmp	r3, #5
 8008a76:	d113      	bne.n	8008aa0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	220c      	movs	r2, #12
 8008a7c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2203      	movs	r2, #3
 8008a86:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a96:	2300      	movs	r3, #0
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f000 fc01 	bl	80092a0 <osMessageQueuePut>
      break;
 8008a9e:	e114      	b.n	8008cca <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d111      	bne.n	8008aca <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2205      	movs	r2, #5
 8008aaa:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2203      	movs	r2, #3
 8008ab0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f000 fbec 	bl	80092a0 <osMessageQueuePut>
      break;
 8008ac8:	e0ff      	b.n	8008cca <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	f040 80fc 	bne.w	8008cca <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	220b      	movs	r2, #11
 8008ad6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008ad8:	2302      	movs	r3, #2
 8008ada:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2203      	movs	r2, #3
 8008ae0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008af0:	2300      	movs	r3, #0
 8008af2:	2200      	movs	r2, #0
 8008af4:	f000 fbd4 	bl	80092a0 <osMessageQueuePut>
      break;
 8008af8:	e0e7      	b.n	8008cca <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	791b      	ldrb	r3, [r3, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	2100      	movs	r1, #0
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f92b 	bl	8008d5e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2208      	movs	r2, #8
 8008b18:	761a      	strb	r2, [r3, #24]

      break;
 8008b1a:	e0db      	b.n	8008cd4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	791b      	ldrb	r3, [r3, #4]
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f003 fc44 	bl	800c3b0 <USBH_LL_GetURBState>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d113      	bne.n	8008b5a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	220d      	movs	r2, #13
 8008b36:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2203      	movs	r2, #3
 8008b40:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b50:	2300      	movs	r3, #0
 8008b52:	2200      	movs	r2, #0
 8008b54:	f000 fba4 	bl	80092a0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b58:	e0b9      	b.n	8008cce <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	2b04      	cmp	r3, #4
 8008b5e:	d111      	bne.n	8008b84 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	220b      	movs	r2, #11
 8008b64:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2203      	movs	r2, #3
 8008b6a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f000 fb8f 	bl	80092a0 <osMessageQueuePut>
      break;
 8008b82:	e0a4      	b.n	8008cce <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
 8008b86:	2b05      	cmp	r3, #5
 8008b88:	f040 80a1 	bne.w	8008cce <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2203      	movs	r2, #3
 8008b94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f000 fb7a 	bl	80092a0 <osMessageQueuePut>
      break;
 8008bac:	e08f      	b.n	8008cce <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	795b      	ldrb	r3, [r3, #5]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	9200      	str	r2, [sp, #0]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	2100      	movs	r1, #0
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f8aa 	bl	8008d14 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	220a      	movs	r2, #10
 8008bd0:	761a      	strb	r2, [r3, #24]
      break;
 8008bd2:	e07f      	b.n	8008cd4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	795b      	ldrb	r3, [r3, #5]
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f003 fbe8 	bl	800c3b0 <USBH_LL_GetURBState>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d113      	bne.n	8008c12 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	220d      	movs	r2, #13
 8008bf2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c08:	2300      	movs	r3, #0
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f000 fb48 	bl	80092a0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c10:	e05f      	b.n	8008cd2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d111      	bne.n	8008c3c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2209      	movs	r2, #9
 8008c1c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2203      	movs	r2, #3
 8008c22:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c32:	2300      	movs	r3, #0
 8008c34:	2200      	movs	r2, #0
 8008c36:	f000 fb33 	bl	80092a0 <osMessageQueuePut>
      break;
 8008c3a:	e04a      	b.n	8008cd2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	d147      	bne.n	8008cd2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	220b      	movs	r2, #11
 8008c46:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2203      	movs	r2, #3
 8008c4c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f000 fb1e 	bl	80092a0 <osMessageQueuePut>
      break;
 8008c64:	e035      	b.n	8008cd2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	7e5b      	ldrb	r3, [r3, #25]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	765a      	strb	r2, [r3, #25]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	7e5b      	ldrb	r3, [r3, #25]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d806      	bhi.n	8008c88 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008c86:	e025      	b.n	8008cd4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c8e:	2106      	movs	r1, #6
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	795b      	ldrb	r3, [r3, #5]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f90d 	bl	8008ec0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	791b      	ldrb	r3, [r3, #4]
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f907 	bl	8008ec0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008cb8:	2302      	movs	r3, #2
 8008cba:	73fb      	strb	r3, [r7, #15]
      break;
 8008cbc:	e00a      	b.n	8008cd4 <USBH_HandleControl+0x484>

    default:
      break;
 8008cbe:	bf00      	nop
 8008cc0:	e008      	b.n	8008cd4 <USBH_HandleControl+0x484>
      break;
 8008cc2:	bf00      	nop
 8008cc4:	e006      	b.n	8008cd4 <USBH_HandleControl+0x484>
      break;
 8008cc6:	bf00      	nop
 8008cc8:	e004      	b.n	8008cd4 <USBH_HandleControl+0x484>
      break;
 8008cca:	bf00      	nop
 8008ccc:	e002      	b.n	8008cd4 <USBH_HandleControl+0x484>
      break;
 8008cce:	bf00      	nop
 8008cd0:	e000      	b.n	8008cd4 <USBH_HandleControl+0x484>
      break;
 8008cd2:	bf00      	nop
  }

  return status;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop

08008ce0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af04      	add	r7, sp, #16
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cee:	79f9      	ldrb	r1, [r7, #7]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	9303      	str	r3, [sp, #12]
 8008cf4:	2308      	movs	r3, #8
 8008cf6:	9302      	str	r3, [sp, #8]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	2300      	movs	r3, #0
 8008d02:	2200      	movs	r2, #0
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f003 fb22 	bl	800c34e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af04      	add	r7, sp, #16
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4611      	mov	r1, r2
 8008d20:	461a      	mov	r2, r3
 8008d22:	460b      	mov	r3, r1
 8008d24:	80fb      	strh	r3, [r7, #6]
 8008d26:	4613      	mov	r3, r2
 8008d28:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d38:	7979      	ldrb	r1, [r7, #5]
 8008d3a:	7e3b      	ldrb	r3, [r7, #24]
 8008d3c:	9303      	str	r3, [sp, #12]
 8008d3e:	88fb      	ldrh	r3, [r7, #6]
 8008d40:	9302      	str	r3, [sp, #8]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	2301      	movs	r3, #1
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f003 fafd 	bl	800c34e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b088      	sub	sp, #32
 8008d62:	af04      	add	r7, sp, #16
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	80fb      	strh	r3, [r7, #6]
 8008d70:	4613      	mov	r3, r2
 8008d72:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d74:	7979      	ldrb	r1, [r7, #5]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9303      	str	r3, [sp, #12]
 8008d7a:	88fb      	ldrh	r3, [r7, #6]
 8008d7c:	9302      	str	r3, [sp, #8]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	2301      	movs	r3, #1
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	2300      	movs	r3, #0
 8008d88:	2201      	movs	r2, #1
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f003 fadf 	bl	800c34e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d90:	2300      	movs	r3, #0

}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b088      	sub	sp, #32
 8008d9e:	af04      	add	r7, sp, #16
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	4611      	mov	r1, r2
 8008da6:	461a      	mov	r2, r3
 8008da8:	460b      	mov	r3, r1
 8008daa:	80fb      	strh	r3, [r7, #6]
 8008dac:	4613      	mov	r3, r2
 8008dae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dbe:	7979      	ldrb	r1, [r7, #5]
 8008dc0:	7e3b      	ldrb	r3, [r7, #24]
 8008dc2:	9303      	str	r3, [sp, #12]
 8008dc4:	88fb      	ldrh	r3, [r7, #6]
 8008dc6:	9302      	str	r3, [sp, #8]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	2301      	movs	r3, #1
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f003 faba 	bl	800c34e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af04      	add	r7, sp, #16
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4611      	mov	r1, r2
 8008df0:	461a      	mov	r2, r3
 8008df2:	460b      	mov	r3, r1
 8008df4:	80fb      	strh	r3, [r7, #6]
 8008df6:	4613      	mov	r3, r2
 8008df8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dfa:	7979      	ldrb	r1, [r7, #5]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9303      	str	r3, [sp, #12]
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	9302      	str	r3, [sp, #8]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	2301      	movs	r3, #1
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	2201      	movs	r2, #1
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f003 fa9c 	bl	800c34e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af04      	add	r7, sp, #16
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4603      	mov	r3, r0
 8008e30:	70fb      	strb	r3, [r7, #3]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70bb      	strb	r3, [r7, #2]
 8008e36:	4613      	mov	r3, r2
 8008e38:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008e3a:	7878      	ldrb	r0, [r7, #1]
 8008e3c:	78ba      	ldrb	r2, [r7, #2]
 8008e3e:	78f9      	ldrb	r1, [r7, #3]
 8008e40:	8b3b      	ldrh	r3, [r7, #24]
 8008e42:	9302      	str	r3, [sp, #8]
 8008e44:	7d3b      	ldrb	r3, [r7, #20]
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	7c3b      	ldrb	r3, [r7, #16]
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f003 fa2f 	bl	800c2b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	460b      	mov	r3, r1
 8008e68:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f003 fa4e 	bl	800c310 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	460b      	mov	r3, r1
 8008e88:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f836 	bl	8008efc <USBH_GetFreePipe>
 8008e90:	4603      	mov	r3, r0
 8008e92:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008e94:	89fb      	ldrh	r3, [r7, #14]
 8008e96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00a      	beq.n	8008eb4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008e9e:	78fa      	ldrb	r2, [r7, #3]
 8008ea0:	89fb      	ldrh	r3, [r7, #14]
 8008ea2:	f003 030f 	and.w	r3, r3, #15
 8008ea6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	33e0      	adds	r3, #224	@ 0xe0
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	440b      	add	r3, r1
 8008eb2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008eb4:	89fb      	ldrh	r3, [r7, #14]
 8008eb6:	b2db      	uxtb	r3, r3
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	2b0f      	cmp	r3, #15
 8008ed0:	d80d      	bhi.n	8008eee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	33e0      	adds	r3, #224	@ 0xe0
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	78fb      	ldrb	r3, [r7, #3]
 8008ee0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	33e0      	adds	r3, #224	@ 0xe0
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	440b      	add	r3, r1
 8008eec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]
 8008f0c:	e00f      	b.n	8008f2e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	33e0      	adds	r3, #224	@ 0xe0
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	e007      	b.n	8008f38 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	73fb      	strb	r3, [r7, #15]
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	2b0f      	cmp	r3, #15
 8008f32:	d9ec      	bls.n	8008f0e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008f34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <__NVIC_SetPriority>:
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	db0a      	blt.n	8008f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	490c      	ldr	r1, [pc, #48]	@ (8008f90 <__NVIC_SetPriority+0x4c>)
 8008f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f62:	0112      	lsls	r2, r2, #4
 8008f64:	b2d2      	uxtb	r2, r2
 8008f66:	440b      	add	r3, r1
 8008f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008f6c:	e00a      	b.n	8008f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	4908      	ldr	r1, [pc, #32]	@ (8008f94 <__NVIC_SetPriority+0x50>)
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	f003 030f 	and.w	r3, r3, #15
 8008f7a:	3b04      	subs	r3, #4
 8008f7c:	0112      	lsls	r2, r2, #4
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	440b      	add	r3, r1
 8008f82:	761a      	strb	r2, [r3, #24]
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	e000e100 	.word	0xe000e100
 8008f94:	e000ed00 	.word	0xe000ed00

08008f98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f9c:	4b05      	ldr	r3, [pc, #20]	@ (8008fb4 <SysTick_Handler+0x1c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008fa0:	f001 ff34 	bl	800ae0c <xTaskGetSchedulerState>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d001      	beq.n	8008fae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008faa:	f002 fd2d 	bl	800ba08 <xPortSysTickHandler>
  }
}
 8008fae:	bf00      	nop
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	e000e010 	.word	0xe000e010

08008fb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	f06f 0004 	mvn.w	r0, #4
 8008fc2:	f7ff ffbf 	bl	8008f44 <__NVIC_SetPriority>
#endif
}
 8008fc6:	bf00      	nop
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fd2:	f3ef 8305 	mrs	r3, IPSR
 8008fd6:	603b      	str	r3, [r7, #0]
  return(result);
 8008fd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008fde:	f06f 0305 	mvn.w	r3, #5
 8008fe2:	607b      	str	r3, [r7, #4]
 8008fe4:	e00c      	b.n	8009000 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8009010 <osKernelInitialize+0x44>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d105      	bne.n	8008ffa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008fee:	4b08      	ldr	r3, [pc, #32]	@ (8009010 <osKernelInitialize+0x44>)
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	607b      	str	r3, [r7, #4]
 8008ff8:	e002      	b.n	8009000 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009000:	687b      	ldr	r3, [r7, #4]
}
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20000268 	.word	0x20000268

08009014 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800901a:	f3ef 8305 	mrs	r3, IPSR
 800901e:	603b      	str	r3, [r7, #0]
  return(result);
 8009020:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009026:	f06f 0305 	mvn.w	r3, #5
 800902a:	607b      	str	r3, [r7, #4]
 800902c:	e010      	b.n	8009050 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800902e:	4b0b      	ldr	r3, [pc, #44]	@ (800905c <osKernelStart+0x48>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d109      	bne.n	800904a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009036:	f7ff ffbf 	bl	8008fb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800903a:	4b08      	ldr	r3, [pc, #32]	@ (800905c <osKernelStart+0x48>)
 800903c:	2202      	movs	r2, #2
 800903e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009040:	f001 fa80 	bl	800a544 <vTaskStartScheduler>
      stat = osOK;
 8009044:	2300      	movs	r3, #0
 8009046:	607b      	str	r3, [r7, #4]
 8009048:	e002      	b.n	8009050 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800904a:	f04f 33ff 	mov.w	r3, #4294967295
 800904e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009050:	687b      	ldr	r3, [r7, #4]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20000268 	.word	0x20000268

08009060 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009060:	b580      	push	{r7, lr}
 8009062:	b08e      	sub	sp, #56	@ 0x38
 8009064:	af04      	add	r7, sp, #16
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800906c:	2300      	movs	r3, #0
 800906e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009070:	f3ef 8305 	mrs	r3, IPSR
 8009074:	617b      	str	r3, [r7, #20]
  return(result);
 8009076:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009078:	2b00      	cmp	r3, #0
 800907a:	d17e      	bne.n	800917a <osThreadNew+0x11a>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d07b      	beq.n	800917a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009082:	2380      	movs	r3, #128	@ 0x80
 8009084:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009086:	2318      	movs	r3, #24
 8009088:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800908e:	f04f 33ff 	mov.w	r3, #4294967295
 8009092:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d045      	beq.n	8009126 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <osThreadNew+0x48>
        name = attr->name;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d008      	beq.n	80090ce <osThreadNew+0x6e>
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	2b38      	cmp	r3, #56	@ 0x38
 80090c0:	d805      	bhi.n	80090ce <osThreadNew+0x6e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <osThreadNew+0x72>
        return (NULL);
 80090ce:	2300      	movs	r3, #0
 80090d0:	e054      	b.n	800917c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	089b      	lsrs	r3, r3, #2
 80090e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00e      	beq.n	8009108 <osThreadNew+0xa8>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	2ba7      	cmp	r3, #167	@ 0xa7
 80090f0:	d90a      	bls.n	8009108 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d006      	beq.n	8009108 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <osThreadNew+0xa8>
        mem = 1;
 8009102:	2301      	movs	r3, #1
 8009104:	61bb      	str	r3, [r7, #24]
 8009106:	e010      	b.n	800912a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10c      	bne.n	800912a <osThreadNew+0xca>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d108      	bne.n	800912a <osThreadNew+0xca>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <osThreadNew+0xca>
          mem = 0;
 8009120:	2300      	movs	r3, #0
 8009122:	61bb      	str	r3, [r7, #24]
 8009124:	e001      	b.n	800912a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d110      	bne.n	8009152 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009138:	9202      	str	r2, [sp, #8]
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6a3a      	ldr	r2, [r7, #32]
 8009144:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f001 f808 	bl	800a15c <xTaskCreateStatic>
 800914c:	4603      	mov	r3, r0
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	e013      	b.n	800917a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d110      	bne.n	800917a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	b29a      	uxth	r2, r3
 800915c:	f107 0310 	add.w	r3, r7, #16
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f001 f856 	bl	800a21c <xTaskCreate>
 8009170:	4603      	mov	r3, r0
 8009172:	2b01      	cmp	r3, #1
 8009174:	d001      	beq.n	800917a <osThreadNew+0x11a>
            hTask = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800917a:	693b      	ldr	r3, [r7, #16]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3728      	adds	r7, #40	@ 0x28
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800918c:	f3ef 8305 	mrs	r3, IPSR
 8009190:	60bb      	str	r3, [r7, #8]
  return(result);
 8009192:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <osDelay+0x1c>
    stat = osErrorISR;
 8009198:	f06f 0305 	mvn.w	r3, #5
 800919c:	60fb      	str	r3, [r7, #12]
 800919e:	e007      	b.n	80091b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f001 f994 	bl	800a4d8 <vTaskDelay>
    }
  }

  return (stat);
 80091b0:	68fb      	ldr	r3, [r7, #12]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b08a      	sub	sp, #40	@ 0x28
 80091be:	af02      	add	r7, sp, #8
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	60b9      	str	r1, [r7, #8]
 80091c4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ca:	f3ef 8305 	mrs	r3, IPSR
 80091ce:	613b      	str	r3, [r7, #16]
  return(result);
 80091d0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d15f      	bne.n	8009296 <osMessageQueueNew+0xdc>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d05c      	beq.n	8009296 <osMessageQueueNew+0xdc>
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d059      	beq.n	8009296 <osMessageQueueNew+0xdc>
    mem = -1;
 80091e2:	f04f 33ff 	mov.w	r3, #4294967295
 80091e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d029      	beq.n	8009242 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d012      	beq.n	800921c <osMessageQueueNew+0x62>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	2b4f      	cmp	r3, #79	@ 0x4f
 80091fc:	d90e      	bls.n	800921c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	695a      	ldr	r2, [r3, #20]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	fb01 f303 	mul.w	r3, r1, r3
 8009212:	429a      	cmp	r2, r3
 8009214:	d302      	bcc.n	800921c <osMessageQueueNew+0x62>
        mem = 1;
 8009216:	2301      	movs	r3, #1
 8009218:	61bb      	str	r3, [r7, #24]
 800921a:	e014      	b.n	8009246 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d110      	bne.n	8009246 <osMessageQueueNew+0x8c>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10c      	bne.n	8009246 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009230:	2b00      	cmp	r3, #0
 8009232:	d108      	bne.n	8009246 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <osMessageQueueNew+0x8c>
          mem = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	61bb      	str	r3, [r7, #24]
 8009240:	e001      	b.n	8009246 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d10b      	bne.n	8009264 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691a      	ldr	r2, [r3, #16]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	2100      	movs	r1, #0
 8009256:	9100      	str	r1, [sp, #0]
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 fa30 	bl	80096c0 <xQueueGenericCreateStatic>
 8009260:	61f8      	str	r0, [r7, #28]
 8009262:	e008      	b.n	8009276 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d105      	bne.n	8009276 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800926a:	2200      	movs	r2, #0
 800926c:	68b9      	ldr	r1, [r7, #8]
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f000 faa3 	bl	80097ba <xQueueGenericCreate>
 8009274:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00c      	beq.n	8009296 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <osMessageQueueNew+0xd0>
        name = attr->name;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	e001      	b.n	800928e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800928e:	6979      	ldr	r1, [r7, #20]
 8009290:	69f8      	ldr	r0, [r7, #28]
 8009292:	f000 ff05 	bl	800a0a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009296:	69fb      	ldr	r3, [r7, #28]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3720      	adds	r7, #32
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	4613      	mov	r3, r2
 80092ae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092b8:	f3ef 8305 	mrs	r3, IPSR
 80092bc:	617b      	str	r3, [r7, #20]
  return(result);
 80092be:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d028      	beq.n	8009316 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d005      	beq.n	80092d6 <osMessageQueuePut+0x36>
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <osMessageQueuePut+0x36>
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80092d6:	f06f 0303 	mvn.w	r3, #3
 80092da:	61fb      	str	r3, [r7, #28]
 80092dc:	e038      	b.n	8009350 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80092de:	2300      	movs	r3, #0
 80092e0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80092e2:	f107 0210 	add.w	r2, r7, #16
 80092e6:	2300      	movs	r3, #0
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	69b8      	ldr	r0, [r7, #24]
 80092ec:	f000 fbc6 	bl	8009a7c <xQueueGenericSendFromISR>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d003      	beq.n	80092fe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80092f6:	f06f 0302 	mvn.w	r3, #2
 80092fa:	61fb      	str	r3, [r7, #28]
 80092fc:	e028      	b.n	8009350 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d025      	beq.n	8009350 <osMessageQueuePut+0xb0>
 8009304:	4b15      	ldr	r3, [pc, #84]	@ (800935c <osMessageQueuePut+0xbc>)
 8009306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	e01c      	b.n	8009350 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <osMessageQueuePut+0x82>
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d103      	bne.n	800932a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009322:	f06f 0303 	mvn.w	r3, #3
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	e012      	b.n	8009350 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800932a:	2300      	movs	r3, #0
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	68b9      	ldr	r1, [r7, #8]
 8009330:	69b8      	ldr	r0, [r7, #24]
 8009332:	f000 faa1 	bl	8009878 <xQueueGenericSend>
 8009336:	4603      	mov	r3, r0
 8009338:	2b01      	cmp	r3, #1
 800933a:	d009      	beq.n	8009350 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009342:	f06f 0301 	mvn.w	r3, #1
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	e002      	b.n	8009350 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800934a:	f06f 0302 	mvn.w	r3, #2
 800934e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009350:	69fb      	ldr	r3, [r7, #28]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3720      	adds	r7, #32
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	e000ed04 	.word	0xe000ed04

08009360 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009372:	2300      	movs	r3, #0
 8009374:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009376:	f3ef 8305 	mrs	r3, IPSR
 800937a:	617b      	str	r3, [r7, #20]
  return(result);
 800937c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800937e:	2b00      	cmp	r3, #0
 8009380:	d028      	beq.n	80093d4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <osMessageQueueGet+0x34>
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <osMessageQueueGet+0x34>
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009394:	f06f 0303 	mvn.w	r3, #3
 8009398:	61fb      	str	r3, [r7, #28]
 800939a:	e037      	b.n	800940c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800939c:	2300      	movs	r3, #0
 800939e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80093a0:	f107 0310 	add.w	r3, r7, #16
 80093a4:	461a      	mov	r2, r3
 80093a6:	68b9      	ldr	r1, [r7, #8]
 80093a8:	69b8      	ldr	r0, [r7, #24]
 80093aa:	f000 fce7 	bl	8009d7c <xQueueReceiveFromISR>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d003      	beq.n	80093bc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80093b4:	f06f 0302 	mvn.w	r3, #2
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	e027      	b.n	800940c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d024      	beq.n	800940c <osMessageQueueGet+0xac>
 80093c2:	4b15      	ldr	r3, [pc, #84]	@ (8009418 <osMessageQueueGet+0xb8>)
 80093c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	e01b      	b.n	800940c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <osMessageQueueGet+0x80>
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d103      	bne.n	80093e8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80093e0:	f06f 0303 	mvn.w	r3, #3
 80093e4:	61fb      	str	r3, [r7, #28]
 80093e6:	e011      	b.n	800940c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	69b8      	ldr	r0, [r7, #24]
 80093ee:	f000 fbe3 	bl	8009bb8 <xQueueReceive>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d009      	beq.n	800940c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80093fe:	f06f 0301 	mvn.w	r3, #1
 8009402:	61fb      	str	r3, [r7, #28]
 8009404:	e002      	b.n	800940c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009406:	f06f 0302 	mvn.w	r3, #2
 800940a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800940c:	69fb      	ldr	r3, [r7, #28]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	e000ed04 	.word	0xe000ed04

0800941c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4a07      	ldr	r2, [pc, #28]	@ (8009448 <vApplicationGetIdleTaskMemory+0x2c>)
 800942c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	4a06      	ldr	r2, [pc, #24]	@ (800944c <vApplicationGetIdleTaskMemory+0x30>)
 8009432:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2280      	movs	r2, #128	@ 0x80
 8009438:	601a      	str	r2, [r3, #0]
}
 800943a:	bf00      	nop
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	2000026c 	.word	0x2000026c
 800944c:	20000314 	.word	0x20000314

08009450 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4a07      	ldr	r2, [pc, #28]	@ (800947c <vApplicationGetTimerTaskMemory+0x2c>)
 8009460:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	4a06      	ldr	r2, [pc, #24]	@ (8009480 <vApplicationGetTimerTaskMemory+0x30>)
 8009466:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800946e:	601a      	str	r2, [r3, #0]
}
 8009470:	bf00      	nop
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	20000514 	.word	0x20000514
 8009480:	200005bc 	.word	0x200005bc

08009484 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f103 0208 	add.w	r2, r3, #8
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f04f 32ff 	mov.w	r2, #4294967295
 800949c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f103 0208 	add.w	r2, r3, #8
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f103 0208 	add.w	r2, r3, #8
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094de:	b480      	push	{r7}
 80094e0:	b085      	sub	sp, #20
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	601a      	str	r2, [r3, #0]
}
 800951a:	bf00      	nop
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953c:	d103      	bne.n	8009546 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	e00c      	b.n	8009560 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3308      	adds	r3, #8
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	e002      	b.n	8009554 <vListInsert+0x2e>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	429a      	cmp	r2, r3
 800955e:	d2f6      	bcs.n	800954e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	601a      	str	r2, [r3, #0]
}
 800958c:	bf00      	nop
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	6892      	ldr	r2, [r2, #8]
 80095ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6852      	ldr	r2, [r2, #4]
 80095b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d103      	bne.n	80095cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	1e5a      	subs	r2, r3, #1
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10b      	bne.n	8009618 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009612:	bf00      	nop
 8009614:	bf00      	nop
 8009616:	e7fd      	b.n	8009614 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009618:	f002 f966 	bl	800b8e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009624:	68f9      	ldr	r1, [r7, #12]
 8009626:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009628:	fb01 f303 	mul.w	r3, r1, r3
 800962c:	441a      	add	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009648:	3b01      	subs	r3, #1
 800964a:	68f9      	ldr	r1, [r7, #12]
 800964c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800964e:	fb01 f303 	mul.w	r3, r1, r3
 8009652:	441a      	add	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	22ff      	movs	r2, #255	@ 0xff
 800965c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	22ff      	movs	r2, #255	@ 0xff
 8009664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d114      	bne.n	8009698 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d01a      	beq.n	80096ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3310      	adds	r3, #16
 800967a:	4618      	mov	r0, r3
 800967c:	f001 fa00 	bl	800aa80 <xTaskRemoveFromEventList>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d012      	beq.n	80096ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009686:	4b0d      	ldr	r3, [pc, #52]	@ (80096bc <xQueueGenericReset+0xd0>)
 8009688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	e009      	b.n	80096ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3310      	adds	r3, #16
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff fef1 	bl	8009484 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3324      	adds	r3, #36	@ 0x24
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff feec 	bl	8009484 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096ac:	f002 f94e 	bl	800b94c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096b0:	2301      	movs	r3, #1
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	e000ed04 	.word	0xe000ed04

080096c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08e      	sub	sp, #56	@ 0x38
 80096c4:	af02      	add	r7, sp, #8
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10b      	bne.n	80096ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
 80096ea:	e7fd      	b.n	80096e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10b      	bne.n	800970a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop
 8009708:	e7fd      	b.n	8009706 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <xQueueGenericCreateStatic+0x56>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <xQueueGenericCreateStatic+0x5a>
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <xQueueGenericCreateStatic+0x5c>
 800971a:	2300      	movs	r3, #0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10b      	bne.n	8009738 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	623b      	str	r3, [r7, #32]
}
 8009732:	bf00      	nop
 8009734:	bf00      	nop
 8009736:	e7fd      	b.n	8009734 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d102      	bne.n	8009744 <xQueueGenericCreateStatic+0x84>
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <xQueueGenericCreateStatic+0x88>
 8009744:	2301      	movs	r3, #1
 8009746:	e000      	b.n	800974a <xQueueGenericCreateStatic+0x8a>
 8009748:	2300      	movs	r3, #0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10b      	bne.n	8009766 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	61fb      	str	r3, [r7, #28]
}
 8009760:	bf00      	nop
 8009762:	bf00      	nop
 8009764:	e7fd      	b.n	8009762 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009766:	2350      	movs	r3, #80	@ 0x50
 8009768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b50      	cmp	r3, #80	@ 0x50
 800976e:	d00b      	beq.n	8009788 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	61bb      	str	r3, [r7, #24]
}
 8009782:	bf00      	nop
 8009784:	bf00      	nop
 8009786:	e7fd      	b.n	8009784 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009788:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800978e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00d      	beq.n	80097b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009796:	2201      	movs	r2, #1
 8009798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800979c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	4613      	mov	r3, r2
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 f840 	bl	8009830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3730      	adds	r7, #48	@ 0x30
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b08a      	sub	sp, #40	@ 0x28
 80097be:	af02      	add	r7, sp, #8
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	4613      	mov	r3, r2
 80097c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10b      	bne.n	80097e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	613b      	str	r3, [r7, #16]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	fb02 f303 	mul.w	r3, r2, r3
 80097ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	3350      	adds	r3, #80	@ 0x50
 80097f4:	4618      	mov	r0, r3
 80097f6:	f002 f999 	bl	800bb2c <pvPortMalloc>
 80097fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d011      	beq.n	8009826 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	3350      	adds	r3, #80	@ 0x50
 800980a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009814:	79fa      	ldrb	r2, [r7, #7]
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	4613      	mov	r3, r2
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 f805 	bl	8009830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009826:	69bb      	ldr	r3, [r7, #24]
	}
 8009828:	4618      	mov	r0, r3
 800982a:	3720      	adds	r7, #32
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
 800983c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d103      	bne.n	800984c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	e002      	b.n	8009852 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800985e:	2101      	movs	r1, #1
 8009860:	69b8      	ldr	r0, [r7, #24]
 8009862:	f7ff fec3 	bl	80095ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08e      	sub	sp, #56	@ 0x38
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10b      	bne.n	80098ac <xQueueGenericSend+0x34>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80098a6:	bf00      	nop
 80098a8:	bf00      	nop
 80098aa:	e7fd      	b.n	80098a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d103      	bne.n	80098ba <xQueueGenericSend+0x42>
 80098b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <xQueueGenericSend+0x46>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e000      	b.n	80098c0 <xQueueGenericSend+0x48>
 80098be:	2300      	movs	r3, #0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10b      	bne.n	80098dc <xQueueGenericSend+0x64>
	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
 80098da:	e7fd      	b.n	80098d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d103      	bne.n	80098ea <xQueueGenericSend+0x72>
 80098e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d101      	bne.n	80098ee <xQueueGenericSend+0x76>
 80098ea:	2301      	movs	r3, #1
 80098ec:	e000      	b.n	80098f0 <xQueueGenericSend+0x78>
 80098ee:	2300      	movs	r3, #0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10b      	bne.n	800990c <xQueueGenericSend+0x94>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	623b      	str	r3, [r7, #32]
}
 8009906:	bf00      	nop
 8009908:	bf00      	nop
 800990a:	e7fd      	b.n	8009908 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800990c:	f001 fa7e 	bl	800ae0c <xTaskGetSchedulerState>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d102      	bne.n	800991c <xQueueGenericSend+0xa4>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <xQueueGenericSend+0xa8>
 800991c:	2301      	movs	r3, #1
 800991e:	e000      	b.n	8009922 <xQueueGenericSend+0xaa>
 8009920:	2300      	movs	r3, #0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10b      	bne.n	800993e <xQueueGenericSend+0xc6>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	61fb      	str	r3, [r7, #28]
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	e7fd      	b.n	800993a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800993e:	f001 ffd3 	bl	800b8e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800994a:	429a      	cmp	r2, r3
 800994c:	d302      	bcc.n	8009954 <xQueueGenericSend+0xdc>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b02      	cmp	r3, #2
 8009952:	d129      	bne.n	80099a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	68b9      	ldr	r1, [r7, #8]
 8009958:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800995a:	f000 fa91 	bl	8009e80 <prvCopyDataToQueue>
 800995e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009964:	2b00      	cmp	r3, #0
 8009966:	d010      	beq.n	800998a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996a:	3324      	adds	r3, #36	@ 0x24
 800996c:	4618      	mov	r0, r3
 800996e:	f001 f887 	bl	800aa80 <xTaskRemoveFromEventList>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d013      	beq.n	80099a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009978:	4b3f      	ldr	r3, [pc, #252]	@ (8009a78 <xQueueGenericSend+0x200>)
 800997a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	e00a      	b.n	80099a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800998a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998c:	2b00      	cmp	r3, #0
 800998e:	d007      	beq.n	80099a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009990:	4b39      	ldr	r3, [pc, #228]	@ (8009a78 <xQueueGenericSend+0x200>)
 8009992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80099a0:	f001 ffd4 	bl	800b94c <vPortExitCritical>
				return pdPASS;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e063      	b.n	8009a70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d103      	bne.n	80099b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099ae:	f001 ffcd 	bl	800b94c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	e05c      	b.n	8009a70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d106      	bne.n	80099ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099bc:	f107 0314 	add.w	r3, r7, #20
 80099c0:	4618      	mov	r0, r3
 80099c2:	f001 f8c1 	bl	800ab48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099c6:	2301      	movs	r3, #1
 80099c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099ca:	f001 ffbf 	bl	800b94c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099ce:	f000 fe29 	bl	800a624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099d2:	f001 ff89 	bl	800b8e8 <vPortEnterCritical>
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099dc:	b25b      	sxtb	r3, r3
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e2:	d103      	bne.n	80099ec <xQueueGenericSend+0x174>
 80099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099f2:	b25b      	sxtb	r3, r3
 80099f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f8:	d103      	bne.n	8009a02 <xQueueGenericSend+0x18a>
 80099fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a02:	f001 ffa3 	bl	800b94c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a06:	1d3a      	adds	r2, r7, #4
 8009a08:	f107 0314 	add.w	r3, r7, #20
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f001 f8b0 	bl	800ab74 <xTaskCheckForTimeOut>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d124      	bne.n	8009a64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a1c:	f000 fb28 	bl	800a070 <prvIsQueueFull>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d018      	beq.n	8009a58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	3310      	adds	r3, #16
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 ffd4 	bl	800a9dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a36:	f000 fab3 	bl	8009fa0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a3a:	f000 fe01 	bl	800a640 <xTaskResumeAll>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f47f af7c 	bne.w	800993e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009a46:	4b0c      	ldr	r3, [pc, #48]	@ (8009a78 <xQueueGenericSend+0x200>)
 8009a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	e772      	b.n	800993e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a5a:	f000 faa1 	bl	8009fa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a5e:	f000 fdef 	bl	800a640 <xTaskResumeAll>
 8009a62:	e76c      	b.n	800993e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a66:	f000 fa9b 	bl	8009fa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a6a:	f000 fde9 	bl	800a640 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3738      	adds	r7, #56	@ 0x38
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	e000ed04 	.word	0xe000ed04

08009a7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b090      	sub	sp, #64	@ 0x40
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10b      	bne.n	8009aac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009aa6:	bf00      	nop
 8009aa8:	bf00      	nop
 8009aaa:	e7fd      	b.n	8009aa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d103      	bne.n	8009aba <xQueueGenericSendFromISR+0x3e>
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <xQueueGenericSendFromISR+0x42>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e000      	b.n	8009ac0 <xQueueGenericSendFromISR+0x44>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10b      	bne.n	8009adc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	e7fd      	b.n	8009ad8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d103      	bne.n	8009aea <xQueueGenericSendFromISR+0x6e>
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d101      	bne.n	8009aee <xQueueGenericSendFromISR+0x72>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <xQueueGenericSendFromISR+0x74>
 8009aee:	2300      	movs	r3, #0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10b      	bne.n	8009b0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	623b      	str	r3, [r7, #32]
}
 8009b06:	bf00      	nop
 8009b08:	bf00      	nop
 8009b0a:	e7fd      	b.n	8009b08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b0c:	f001 ffcc 	bl	800baa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b10:	f3ef 8211 	mrs	r2, BASEPRI
 8009b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	61fa      	str	r2, [r7, #28]
 8009b26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d302      	bcc.n	8009b3e <xQueueGenericSendFromISR+0xc2>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d12f      	bne.n	8009b9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	68b9      	ldr	r1, [r7, #8]
 8009b52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b54:	f000 f994 	bl	8009e80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b60:	d112      	bne.n	8009b88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d016      	beq.n	8009b98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6c:	3324      	adds	r3, #36	@ 0x24
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 ff86 	bl	800aa80 <xTaskRemoveFromEventList>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00e      	beq.n	8009b98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	e007      	b.n	8009b98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	b25a      	sxtb	r2, r3
 8009b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009b9c:	e001      	b.n	8009ba2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009bac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3740      	adds	r7, #64	@ 0x40
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08c      	sub	sp, #48	@ 0x30
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10b      	bne.n	8009bea <xQueueReceive+0x32>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	623b      	str	r3, [r7, #32]
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	e7fd      	b.n	8009be6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d103      	bne.n	8009bf8 <xQueueReceive+0x40>
 8009bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <xQueueReceive+0x44>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e000      	b.n	8009bfe <xQueueReceive+0x46>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10b      	bne.n	8009c1a <xQueueReceive+0x62>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	61fb      	str	r3, [r7, #28]
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	e7fd      	b.n	8009c16 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c1a:	f001 f8f7 	bl	800ae0c <xTaskGetSchedulerState>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d102      	bne.n	8009c2a <xQueueReceive+0x72>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <xQueueReceive+0x76>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e000      	b.n	8009c30 <xQueueReceive+0x78>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10b      	bne.n	8009c4c <xQueueReceive+0x94>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	61bb      	str	r3, [r7, #24]
}
 8009c46:	bf00      	nop
 8009c48:	bf00      	nop
 8009c4a:	e7fd      	b.n	8009c48 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c4c:	f001 fe4c 	bl	800b8e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c54:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01f      	beq.n	8009c9c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c5c:	68b9      	ldr	r1, [r7, #8]
 8009c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c60:	f000 f978 	bl	8009f54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c66:	1e5a      	subs	r2, r3, #1
 8009c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00f      	beq.n	8009c94 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	3310      	adds	r3, #16
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 ff01 	bl	800aa80 <xTaskRemoveFromEventList>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d007      	beq.n	8009c94 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c84:	4b3c      	ldr	r3, [pc, #240]	@ (8009d78 <xQueueReceive+0x1c0>)
 8009c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c94:	f001 fe5a 	bl	800b94c <vPortExitCritical>
				return pdPASS;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e069      	b.n	8009d70 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d103      	bne.n	8009caa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ca2:	f001 fe53 	bl	800b94c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	e062      	b.n	8009d70 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d106      	bne.n	8009cbe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cb0:	f107 0310 	add.w	r3, r7, #16
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 ff47 	bl	800ab48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cbe:	f001 fe45 	bl	800b94c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cc2:	f000 fcaf 	bl	800a624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cc6:	f001 fe0f 	bl	800b8e8 <vPortEnterCritical>
 8009cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cd0:	b25b      	sxtb	r3, r3
 8009cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd6:	d103      	bne.n	8009ce0 <xQueueReceive+0x128>
 8009cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ce6:	b25b      	sxtb	r3, r3
 8009ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cec:	d103      	bne.n	8009cf6 <xQueueReceive+0x13e>
 8009cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cf6:	f001 fe29 	bl	800b94c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cfa:	1d3a      	adds	r2, r7, #4
 8009cfc:	f107 0310 	add.w	r3, r7, #16
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 ff36 	bl	800ab74 <xTaskCheckForTimeOut>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d123      	bne.n	8009d56 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d10:	f000 f998 	bl	800a044 <prvIsQueueEmpty>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d017      	beq.n	8009d4a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1c:	3324      	adds	r3, #36	@ 0x24
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	4611      	mov	r1, r2
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 fe5a 	bl	800a9dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d2a:	f000 f939 	bl	8009fa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d2e:	f000 fc87 	bl	800a640 <xTaskResumeAll>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d189      	bne.n	8009c4c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009d38:	4b0f      	ldr	r3, [pc, #60]	@ (8009d78 <xQueueReceive+0x1c0>)
 8009d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	e780      	b.n	8009c4c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d4c:	f000 f928 	bl	8009fa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d50:	f000 fc76 	bl	800a640 <xTaskResumeAll>
 8009d54:	e77a      	b.n	8009c4c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d58:	f000 f922 	bl	8009fa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d5c:	f000 fc70 	bl	800a640 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d62:	f000 f96f 	bl	800a044 <prvIsQueueEmpty>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f43f af6f 	beq.w	8009c4c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3730      	adds	r7, #48	@ 0x30
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	e000ed04 	.word	0xe000ed04

08009d7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08e      	sub	sp, #56	@ 0x38
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10b      	bne.n	8009daa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	623b      	str	r3, [r7, #32]
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop
 8009da8:	e7fd      	b.n	8009da6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d103      	bne.n	8009db8 <xQueueReceiveFromISR+0x3c>
 8009db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <xQueueReceiveFromISR+0x40>
 8009db8:	2301      	movs	r3, #1
 8009dba:	e000      	b.n	8009dbe <xQueueReceiveFromISR+0x42>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10b      	bne.n	8009dda <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	61fb      	str	r3, [r7, #28]
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	e7fd      	b.n	8009dd6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dda:	f001 fe65 	bl	800baa8 <vPortValidateInterruptPriority>
	__asm volatile
 8009dde:	f3ef 8211 	mrs	r2, BASEPRI
 8009de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	61ba      	str	r2, [r7, #24]
 8009df4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009df6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d02f      	beq.n	8009e66 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e10:	68b9      	ldr	r1, [r7, #8]
 8009e12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e14:	f000 f89e 	bl	8009f54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	1e5a      	subs	r2, r3, #1
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e28:	d112      	bne.n	8009e50 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d016      	beq.n	8009e60 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	3310      	adds	r3, #16
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 fe22 	bl	800aa80 <xTaskRemoveFromEventList>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00e      	beq.n	8009e60 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00b      	beq.n	8009e60 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	e007      	b.n	8009e60 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e54:	3301      	adds	r3, #1
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	b25a      	sxtb	r2, r3
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009e60:	2301      	movs	r3, #1
 8009e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e64:	e001      	b.n	8009e6a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	f383 8811 	msr	BASEPRI, r3
}
 8009e74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3738      	adds	r7, #56	@ 0x38
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10d      	bne.n	8009eba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d14d      	bne.n	8009f42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 ffcc 	bl	800ae48 <xTaskPriorityDisinherit>
 8009eb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	609a      	str	r2, [r3, #8]
 8009eb8:	e043      	b.n	8009f42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d119      	bne.n	8009ef4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6858      	ldr	r0, [r3, #4]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec8:	461a      	mov	r2, r3
 8009eca:	68b9      	ldr	r1, [r7, #8]
 8009ecc:	f002 fc78 	bl	800c7c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed8:	441a      	add	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d32b      	bcc.n	8009f42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	605a      	str	r2, [r3, #4]
 8009ef2:	e026      	b.n	8009f42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	68d8      	ldr	r0, [r3, #12]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009efc:	461a      	mov	r2, r3
 8009efe:	68b9      	ldr	r1, [r7, #8]
 8009f00:	f002 fc5e 	bl	800c7c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f0c:	425b      	negs	r3, r3
 8009f0e:	441a      	add	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	68da      	ldr	r2, [r3, #12]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d207      	bcs.n	8009f30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f28:	425b      	negs	r3, r3
 8009f2a:	441a      	add	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d105      	bne.n	8009f42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009f4a:	697b      	ldr	r3, [r7, #20]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d018      	beq.n	8009f98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68da      	ldr	r2, [r3, #12]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f6e:	441a      	add	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68da      	ldr	r2, [r3, #12]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d303      	bcc.n	8009f88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68d9      	ldr	r1, [r3, #12]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f90:	461a      	mov	r2, r3
 8009f92:	6838      	ldr	r0, [r7, #0]
 8009f94:	f002 fc14 	bl	800c7c0 <memcpy>
	}
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009fa8:	f001 fc9e 	bl	800b8e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fb4:	e011      	b.n	8009fda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d012      	beq.n	8009fe4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	3324      	adds	r3, #36	@ 0x24
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 fd5c 	bl	800aa80 <xTaskRemoveFromEventList>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fce:	f000 fe35 	bl	800ac3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	dce9      	bgt.n	8009fb6 <prvUnlockQueue+0x16>
 8009fe2:	e000      	b.n	8009fe6 <prvUnlockQueue+0x46>
					break;
 8009fe4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	22ff      	movs	r2, #255	@ 0xff
 8009fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009fee:	f001 fcad 	bl	800b94c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ff2:	f001 fc79 	bl	800b8e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ffc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ffe:	e011      	b.n	800a024 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d012      	beq.n	800a02e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3310      	adds	r3, #16
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 fd37 	bl	800aa80 <xTaskRemoveFromEventList>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d001      	beq.n	800a01c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a018:	f000 fe10 	bl	800ac3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
 800a01e:	3b01      	subs	r3, #1
 800a020:	b2db      	uxtb	r3, r3
 800a022:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	dce9      	bgt.n	800a000 <prvUnlockQueue+0x60>
 800a02c:	e000      	b.n	800a030 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a02e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	22ff      	movs	r2, #255	@ 0xff
 800a034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a038:	f001 fc88 	bl	800b94c <vPortExitCritical>
}
 800a03c:	bf00      	nop
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a04c:	f001 fc4c 	bl	800b8e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a058:	2301      	movs	r3, #1
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	e001      	b.n	800a062 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a05e:	2300      	movs	r3, #0
 800a060:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a062:	f001 fc73 	bl	800b94c <vPortExitCritical>

	return xReturn;
 800a066:	68fb      	ldr	r3, [r7, #12]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a078:	f001 fc36 	bl	800b8e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a084:	429a      	cmp	r2, r3
 800a086:	d102      	bne.n	800a08e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a088:	2301      	movs	r3, #1
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	e001      	b.n	800a092 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a08e:	2300      	movs	r3, #0
 800a090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a092:	f001 fc5b 	bl	800b94c <vPortExitCritical>

	return xReturn;
 800a096:	68fb      	ldr	r3, [r7, #12]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
 800a0ae:	e014      	b.n	800a0da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a0b0:	4a0f      	ldr	r2, [pc, #60]	@ (800a0f0 <vQueueAddToRegistry+0x50>)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10b      	bne.n	800a0d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0bc:	490c      	ldr	r1, [pc, #48]	@ (800a0f0 <vQueueAddToRegistry+0x50>)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0c6:	4a0a      	ldr	r2, [pc, #40]	@ (800a0f0 <vQueueAddToRegistry+0x50>)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	00db      	lsls	r3, r3, #3
 800a0cc:	4413      	add	r3, r2
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0d2:	e006      	b.n	800a0e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b07      	cmp	r3, #7
 800a0de:	d9e7      	bls.n	800a0b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	200009bc 	.word	0x200009bc

0800a0f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a104:	f001 fbf0 	bl	800b8e8 <vPortEnterCritical>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a10e:	b25b      	sxtb	r3, r3
 800a110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a114:	d103      	bne.n	800a11e <vQueueWaitForMessageRestricted+0x2a>
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a124:	b25b      	sxtb	r3, r3
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d103      	bne.n	800a134 <vQueueWaitForMessageRestricted+0x40>
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a134:	f001 fc0a 	bl	800b94c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d106      	bne.n	800a14e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	3324      	adds	r3, #36	@ 0x24
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fc6d 	bl	800aa28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a14e:	6978      	ldr	r0, [r7, #20]
 800a150:	f7ff ff26 	bl	8009fa0 <prvUnlockQueue>
	}
 800a154:	bf00      	nop
 800a156:	3718      	adds	r7, #24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08e      	sub	sp, #56	@ 0x38
 800a160:	af04      	add	r7, sp, #16
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10b      	bne.n	800a188 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	623b      	str	r3, [r7, #32]
}
 800a182:	bf00      	nop
 800a184:	bf00      	nop
 800a186:	e7fd      	b.n	800a184 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10b      	bne.n	800a1a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	61fb      	str	r3, [r7, #28]
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	e7fd      	b.n	800a1a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1a6:	23a8      	movs	r3, #168	@ 0xa8
 800a1a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2ba8      	cmp	r3, #168	@ 0xa8
 800a1ae:	d00b      	beq.n	800a1c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	61bb      	str	r3, [r7, #24]
}
 800a1c2:	bf00      	nop
 800a1c4:	bf00      	nop
 800a1c6:	e7fd      	b.n	800a1c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d01e      	beq.n	800a20e <xTaskCreateStatic+0xb2>
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d01b      	beq.n	800a20e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	9303      	str	r3, [sp, #12]
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	9302      	str	r3, [sp, #8]
 800a1f0:	f107 0314 	add.w	r3, r7, #20
 800a1f4:	9301      	str	r3, [sp, #4]
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	68b9      	ldr	r1, [r7, #8]
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f851 	bl	800a2a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a208:	f000 f8f6 	bl	800a3f8 <prvAddNewTaskToReadyList>
 800a20c:	e001      	b.n	800a212 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a212:	697b      	ldr	r3, [r7, #20]
	}
 800a214:	4618      	mov	r0, r3
 800a216:	3728      	adds	r7, #40	@ 0x28
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08c      	sub	sp, #48	@ 0x30
 800a220:	af04      	add	r7, sp, #16
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	603b      	str	r3, [r7, #0]
 800a228:	4613      	mov	r3, r2
 800a22a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a22c:	88fb      	ldrh	r3, [r7, #6]
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4618      	mov	r0, r3
 800a232:	f001 fc7b 	bl	800bb2c <pvPortMalloc>
 800a236:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00e      	beq.n	800a25c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a23e:	20a8      	movs	r0, #168	@ 0xa8
 800a240:	f001 fc74 	bl	800bb2c <pvPortMalloc>
 800a244:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	631a      	str	r2, [r3, #48]	@ 0x30
 800a252:	e005      	b.n	800a260 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a254:	6978      	ldr	r0, [r7, #20]
 800a256:	f001 fd37 	bl	800bcc8 <vPortFree>
 800a25a:	e001      	b.n	800a260 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a25c:	2300      	movs	r3, #0
 800a25e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d017      	beq.n	800a296 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a26e:	88fa      	ldrh	r2, [r7, #6]
 800a270:	2300      	movs	r3, #0
 800a272:	9303      	str	r3, [sp, #12]
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	9302      	str	r3, [sp, #8]
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27a:	9301      	str	r3, [sp, #4]
 800a27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	68b9      	ldr	r1, [r7, #8]
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f000 f80f 	bl	800a2a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a28a:	69f8      	ldr	r0, [r7, #28]
 800a28c:	f000 f8b4 	bl	800a3f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a290:	2301      	movs	r3, #1
 800a292:	61bb      	str	r3, [r7, #24]
 800a294:	e002      	b.n	800a29c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a296:	f04f 33ff 	mov.w	r3, #4294967295
 800a29a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a29c:	69bb      	ldr	r3, [r7, #24]
	}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3720      	adds	r7, #32
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
	...

0800a2a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b088      	sub	sp, #32
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	461a      	mov	r2, r3
 800a2c0:	21a5      	movs	r1, #165	@ 0xa5
 800a2c2:	f002 f9e3 	bl	800c68c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	f023 0307 	bic.w	r3, r3, #7
 800a2de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00b      	beq.n	800a302 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	617b      	str	r3, [r7, #20]
}
 800a2fc:	bf00      	nop
 800a2fe:	bf00      	nop
 800a300:	e7fd      	b.n	800a2fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d01f      	beq.n	800a348 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a308:	2300      	movs	r3, #0
 800a30a:	61fb      	str	r3, [r7, #28]
 800a30c:	e012      	b.n	800a334 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	4413      	add	r3, r2
 800a314:	7819      	ldrb	r1, [r3, #0]
 800a316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	4413      	add	r3, r2
 800a31c:	3334      	adds	r3, #52	@ 0x34
 800a31e:	460a      	mov	r2, r1
 800a320:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	4413      	add	r3, r2
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d006      	beq.n	800a33c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	3301      	adds	r3, #1
 800a332:	61fb      	str	r3, [r7, #28]
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	2b0f      	cmp	r3, #15
 800a338:	d9e9      	bls.n	800a30e <prvInitialiseNewTask+0x66>
 800a33a:	e000      	b.n	800a33e <prvInitialiseNewTask+0x96>
			{
				break;
 800a33c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a346:	e003      	b.n	800a350 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a352:	2b37      	cmp	r3, #55	@ 0x37
 800a354:	d901      	bls.n	800a35a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a356:	2337      	movs	r3, #55	@ 0x37
 800a358:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a35e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a364:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a368:	2200      	movs	r2, #0
 800a36a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36e:	3304      	adds	r3, #4
 800a370:	4618      	mov	r0, r3
 800a372:	f7ff f8a7 	bl	80094c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a378:	3318      	adds	r3, #24
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff f8a2 	bl	80094c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a384:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a388:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a394:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	2200      	movs	r2, #0
 800a39a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a8:	3354      	adds	r3, #84	@ 0x54
 800a3aa:	224c      	movs	r2, #76	@ 0x4c
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f002 f96c 	bl	800c68c <memset>
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b6:	4a0d      	ldr	r2, [pc, #52]	@ (800a3ec <prvInitialiseNewTask+0x144>)
 800a3b8:	659a      	str	r2, [r3, #88]	@ 0x58
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f0 <prvInitialiseNewTask+0x148>)
 800a3be:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c2:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f4 <prvInitialiseNewTask+0x14c>)
 800a3c4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	68f9      	ldr	r1, [r7, #12]
 800a3ca:	69b8      	ldr	r0, [r7, #24]
 800a3cc:	f001 f95a 	bl	800b684 <pxPortInitialiseStack>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3e2:	bf00      	nop
 800a3e4:	3720      	adds	r7, #32
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20005420 	.word	0x20005420
 800a3f0:	20005488 	.word	0x20005488
 800a3f4:	200054f0 	.word	0x200054f0

0800a3f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a400:	f001 fa72 	bl	800b8e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a404:	4b2d      	ldr	r3, [pc, #180]	@ (800a4bc <prvAddNewTaskToReadyList+0xc4>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3301      	adds	r3, #1
 800a40a:	4a2c      	ldr	r2, [pc, #176]	@ (800a4bc <prvAddNewTaskToReadyList+0xc4>)
 800a40c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a40e:	4b2c      	ldr	r3, [pc, #176]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc8>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d109      	bne.n	800a42a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a416:	4a2a      	ldr	r2, [pc, #168]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc8>)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a41c:	4b27      	ldr	r3, [pc, #156]	@ (800a4bc <prvAddNewTaskToReadyList+0xc4>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d110      	bne.n	800a446 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a424:	f000 fc2e 	bl	800ac84 <prvInitialiseTaskLists>
 800a428:	e00d      	b.n	800a446 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a42a:	4b26      	ldr	r3, [pc, #152]	@ (800a4c4 <prvAddNewTaskToReadyList+0xcc>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d109      	bne.n	800a446 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a432:	4b23      	ldr	r3, [pc, #140]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc8>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d802      	bhi.n	800a446 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a440:	4a1f      	ldr	r2, [pc, #124]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc8>)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a446:	4b20      	ldr	r3, [pc, #128]	@ (800a4c8 <prvAddNewTaskToReadyList+0xd0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3301      	adds	r3, #1
 800a44c:	4a1e      	ldr	r2, [pc, #120]	@ (800a4c8 <prvAddNewTaskToReadyList+0xd0>)
 800a44e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a450:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c8 <prvAddNewTaskToReadyList+0xd0>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45c:	4b1b      	ldr	r3, [pc, #108]	@ (800a4cc <prvAddNewTaskToReadyList+0xd4>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	d903      	bls.n	800a46c <prvAddNewTaskToReadyList+0x74>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a468:	4a18      	ldr	r2, [pc, #96]	@ (800a4cc <prvAddNewTaskToReadyList+0xd4>)
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4a15      	ldr	r2, [pc, #84]	@ (800a4d0 <prvAddNewTaskToReadyList+0xd8>)
 800a47a:	441a      	add	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3304      	adds	r3, #4
 800a480:	4619      	mov	r1, r3
 800a482:	4610      	mov	r0, r2
 800a484:	f7ff f82b 	bl	80094de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a488:	f001 fa60 	bl	800b94c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a48c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c4 <prvAddNewTaskToReadyList+0xcc>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00e      	beq.n	800a4b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a494:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc8>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d207      	bcs.n	800a4b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d4 <prvAddNewTaskToReadyList+0xdc>)
 800a4a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4b2:	bf00      	nop
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000ed0 	.word	0x20000ed0
 800a4c0:	200009fc 	.word	0x200009fc
 800a4c4:	20000edc 	.word	0x20000edc
 800a4c8:	20000eec 	.word	0x20000eec
 800a4cc:	20000ed8 	.word	0x20000ed8
 800a4d0:	20000a00 	.word	0x20000a00
 800a4d4:	e000ed04 	.word	0xe000ed04

0800a4d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d018      	beq.n	800a51c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4ea:	4b14      	ldr	r3, [pc, #80]	@ (800a53c <vTaskDelay+0x64>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00b      	beq.n	800a50a <vTaskDelay+0x32>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	60bb      	str	r3, [r7, #8]
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop
 800a508:	e7fd      	b.n	800a506 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a50a:	f000 f88b 	bl	800a624 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a50e:	2100      	movs	r1, #0
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fd09 	bl	800af28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a516:	f000 f893 	bl	800a640 <xTaskResumeAll>
 800a51a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d107      	bne.n	800a532 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a522:	4b07      	ldr	r3, [pc, #28]	@ (800a540 <vTaskDelay+0x68>)
 800a524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a532:	bf00      	nop
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20000ef8 	.word	0x20000ef8
 800a540:	e000ed04 	.word	0xe000ed04

0800a544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b08a      	sub	sp, #40	@ 0x28
 800a548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a552:	463a      	mov	r2, r7
 800a554:	1d39      	adds	r1, r7, #4
 800a556:	f107 0308 	add.w	r3, r7, #8
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe ff5e 	bl	800941c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	9202      	str	r2, [sp, #8]
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	2300      	movs	r3, #0
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	2300      	movs	r3, #0
 800a570:	460a      	mov	r2, r1
 800a572:	4924      	ldr	r1, [pc, #144]	@ (800a604 <vTaskStartScheduler+0xc0>)
 800a574:	4824      	ldr	r0, [pc, #144]	@ (800a608 <vTaskStartScheduler+0xc4>)
 800a576:	f7ff fdf1 	bl	800a15c <xTaskCreateStatic>
 800a57a:	4603      	mov	r3, r0
 800a57c:	4a23      	ldr	r2, [pc, #140]	@ (800a60c <vTaskStartScheduler+0xc8>)
 800a57e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a580:	4b22      	ldr	r3, [pc, #136]	@ (800a60c <vTaskStartScheduler+0xc8>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a588:	2301      	movs	r3, #1
 800a58a:	617b      	str	r3, [r7, #20]
 800a58c:	e001      	b.n	800a592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a58e:	2300      	movs	r3, #0
 800a590:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d102      	bne.n	800a59e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a598:	f000 fd1a 	bl	800afd0 <xTimerCreateTimerTask>
 800a59c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d11b      	bne.n	800a5dc <vTaskStartScheduler+0x98>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	613b      	str	r3, [r7, #16]
}
 800a5b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5b8:	4b15      	ldr	r3, [pc, #84]	@ (800a610 <vTaskStartScheduler+0xcc>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3354      	adds	r3, #84	@ 0x54
 800a5be:	4a15      	ldr	r2, [pc, #84]	@ (800a614 <vTaskStartScheduler+0xd0>)
 800a5c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5c2:	4b15      	ldr	r3, [pc, #84]	@ (800a618 <vTaskStartScheduler+0xd4>)
 800a5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5ca:	4b14      	ldr	r3, [pc, #80]	@ (800a61c <vTaskStartScheduler+0xd8>)
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5d0:	4b13      	ldr	r3, [pc, #76]	@ (800a620 <vTaskStartScheduler+0xdc>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5d6:	f001 f8e3 	bl	800b7a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5da:	e00f      	b.n	800a5fc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e2:	d10b      	bne.n	800a5fc <vTaskStartScheduler+0xb8>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	60fb      	str	r3, [r7, #12]
}
 800a5f6:	bf00      	nop
 800a5f8:	bf00      	nop
 800a5fa:	e7fd      	b.n	800a5f8 <vTaskStartScheduler+0xb4>
}
 800a5fc:	bf00      	nop
 800a5fe:	3718      	adds	r7, #24
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	0800c8d8 	.word	0x0800c8d8
 800a608:	0800ac55 	.word	0x0800ac55
 800a60c:	20000ef4 	.word	0x20000ef4
 800a610:	200009fc 	.word	0x200009fc
 800a614:	20000030 	.word	0x20000030
 800a618:	20000ef0 	.word	0x20000ef0
 800a61c:	20000edc 	.word	0x20000edc
 800a620:	20000ed4 	.word	0x20000ed4

0800a624 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a624:	b480      	push	{r7}
 800a626:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a628:	4b04      	ldr	r3, [pc, #16]	@ (800a63c <vTaskSuspendAll+0x18>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3301      	adds	r3, #1
 800a62e:	4a03      	ldr	r2, [pc, #12]	@ (800a63c <vTaskSuspendAll+0x18>)
 800a630:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a632:	bf00      	nop
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	20000ef8 	.word	0x20000ef8

0800a640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a64e:	4b42      	ldr	r3, [pc, #264]	@ (800a758 <xTaskResumeAll+0x118>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10b      	bne.n	800a66e <xTaskResumeAll+0x2e>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	603b      	str	r3, [r7, #0]
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	e7fd      	b.n	800a66a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a66e:	f001 f93b 	bl	800b8e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a672:	4b39      	ldr	r3, [pc, #228]	@ (800a758 <xTaskResumeAll+0x118>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3b01      	subs	r3, #1
 800a678:	4a37      	ldr	r2, [pc, #220]	@ (800a758 <xTaskResumeAll+0x118>)
 800a67a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a67c:	4b36      	ldr	r3, [pc, #216]	@ (800a758 <xTaskResumeAll+0x118>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d162      	bne.n	800a74a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a684:	4b35      	ldr	r3, [pc, #212]	@ (800a75c <xTaskResumeAll+0x11c>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d05e      	beq.n	800a74a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a68c:	e02f      	b.n	800a6ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a68e:	4b34      	ldr	r3, [pc, #208]	@ (800a760 <xTaskResumeAll+0x120>)
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3318      	adds	r3, #24
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe ff7c 	bl	8009598 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fe ff77 	bl	8009598 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ae:	4b2d      	ldr	r3, [pc, #180]	@ (800a764 <xTaskResumeAll+0x124>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d903      	bls.n	800a6be <xTaskResumeAll+0x7e>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ba:	4a2a      	ldr	r2, [pc, #168]	@ (800a764 <xTaskResumeAll+0x124>)
 800a6bc:	6013      	str	r3, [r2, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4a27      	ldr	r2, [pc, #156]	@ (800a768 <xTaskResumeAll+0x128>)
 800a6cc:	441a      	add	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	f7fe ff02 	bl	80094de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6de:	4b23      	ldr	r3, [pc, #140]	@ (800a76c <xTaskResumeAll+0x12c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d302      	bcc.n	800a6ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a6e8:	4b21      	ldr	r3, [pc, #132]	@ (800a770 <xTaskResumeAll+0x130>)
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a760 <xTaskResumeAll+0x120>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1cb      	bne.n	800a68e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6fc:	f000 fb66 	bl	800adcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a700:	4b1c      	ldr	r3, [pc, #112]	@ (800a774 <xTaskResumeAll+0x134>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d010      	beq.n	800a72e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a70c:	f000 f846 	bl	800a79c <xTaskIncrementTick>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a716:	4b16      	ldr	r3, [pc, #88]	@ (800a770 <xTaskResumeAll+0x130>)
 800a718:	2201      	movs	r2, #1
 800a71a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3b01      	subs	r3, #1
 800a720:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1f1      	bne.n	800a70c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a728:	4b12      	ldr	r3, [pc, #72]	@ (800a774 <xTaskResumeAll+0x134>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a72e:	4b10      	ldr	r3, [pc, #64]	@ (800a770 <xTaskResumeAll+0x130>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d009      	beq.n	800a74a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a736:	2301      	movs	r3, #1
 800a738:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a73a:	4b0f      	ldr	r3, [pc, #60]	@ (800a778 <xTaskResumeAll+0x138>)
 800a73c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a740:	601a      	str	r2, [r3, #0]
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a74a:	f001 f8ff 	bl	800b94c <vPortExitCritical>

	return xAlreadyYielded;
 800a74e:	68bb      	ldr	r3, [r7, #8]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000ef8 	.word	0x20000ef8
 800a75c:	20000ed0 	.word	0x20000ed0
 800a760:	20000e90 	.word	0x20000e90
 800a764:	20000ed8 	.word	0x20000ed8
 800a768:	20000a00 	.word	0x20000a00
 800a76c:	200009fc 	.word	0x200009fc
 800a770:	20000ee4 	.word	0x20000ee4
 800a774:	20000ee0 	.word	0x20000ee0
 800a778:	e000ed04 	.word	0xe000ed04

0800a77c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a782:	4b05      	ldr	r3, [pc, #20]	@ (800a798 <xTaskGetTickCount+0x1c>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a788:	687b      	ldr	r3, [r7, #4]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	20000ed4 	.word	0x20000ed4

0800a79c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a8e4 <xTaskIncrementTick+0x148>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f040 8090 	bne.w	800a8d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7b0:	4b4d      	ldr	r3, [pc, #308]	@ (800a8e8 <xTaskIncrementTick+0x14c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7b8:	4a4b      	ldr	r2, [pc, #300]	@ (800a8e8 <xTaskIncrementTick+0x14c>)
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d121      	bne.n	800a808 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7c4:	4b49      	ldr	r3, [pc, #292]	@ (800a8ec <xTaskIncrementTick+0x150>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00b      	beq.n	800a7e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	603b      	str	r3, [r7, #0]
}
 800a7e0:	bf00      	nop
 800a7e2:	bf00      	nop
 800a7e4:	e7fd      	b.n	800a7e2 <xTaskIncrementTick+0x46>
 800a7e6:	4b41      	ldr	r3, [pc, #260]	@ (800a8ec <xTaskIncrementTick+0x150>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	4b40      	ldr	r3, [pc, #256]	@ (800a8f0 <xTaskIncrementTick+0x154>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a3e      	ldr	r2, [pc, #248]	@ (800a8ec <xTaskIncrementTick+0x150>)
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	4a3e      	ldr	r2, [pc, #248]	@ (800a8f0 <xTaskIncrementTick+0x154>)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6013      	str	r3, [r2, #0]
 800a7fa:	4b3e      	ldr	r3, [pc, #248]	@ (800a8f4 <xTaskIncrementTick+0x158>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3301      	adds	r3, #1
 800a800:	4a3c      	ldr	r2, [pc, #240]	@ (800a8f4 <xTaskIncrementTick+0x158>)
 800a802:	6013      	str	r3, [r2, #0]
 800a804:	f000 fae2 	bl	800adcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a808:	4b3b      	ldr	r3, [pc, #236]	@ (800a8f8 <xTaskIncrementTick+0x15c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d349      	bcc.n	800a8a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a812:	4b36      	ldr	r3, [pc, #216]	@ (800a8ec <xTaskIncrementTick+0x150>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d104      	bne.n	800a826 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a81c:	4b36      	ldr	r3, [pc, #216]	@ (800a8f8 <xTaskIncrementTick+0x15c>)
 800a81e:	f04f 32ff 	mov.w	r2, #4294967295
 800a822:	601a      	str	r2, [r3, #0]
					break;
 800a824:	e03f      	b.n	800a8a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a826:	4b31      	ldr	r3, [pc, #196]	@ (800a8ec <xTaskIncrementTick+0x150>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d203      	bcs.n	800a846 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a83e:	4a2e      	ldr	r2, [pc, #184]	@ (800a8f8 <xTaskIncrementTick+0x15c>)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a844:	e02f      	b.n	800a8a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	3304      	adds	r3, #4
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe fea4 	bl	8009598 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a854:	2b00      	cmp	r3, #0
 800a856:	d004      	beq.n	800a862 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	3318      	adds	r3, #24
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe fe9b 	bl	8009598 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a866:	4b25      	ldr	r3, [pc, #148]	@ (800a8fc <xTaskIncrementTick+0x160>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d903      	bls.n	800a876 <xTaskIncrementTick+0xda>
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a872:	4a22      	ldr	r2, [pc, #136]	@ (800a8fc <xTaskIncrementTick+0x160>)
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a87a:	4613      	mov	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4a1f      	ldr	r2, [pc, #124]	@ (800a900 <xTaskIncrementTick+0x164>)
 800a884:	441a      	add	r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	3304      	adds	r3, #4
 800a88a:	4619      	mov	r1, r3
 800a88c:	4610      	mov	r0, r2
 800a88e:	f7fe fe26 	bl	80094de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a896:	4b1b      	ldr	r3, [pc, #108]	@ (800a904 <xTaskIncrementTick+0x168>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d3b8      	bcc.n	800a812 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8a4:	e7b5      	b.n	800a812 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8a6:	4b17      	ldr	r3, [pc, #92]	@ (800a904 <xTaskIncrementTick+0x168>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ac:	4914      	ldr	r1, [pc, #80]	@ (800a900 <xTaskIncrementTick+0x164>)
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d901      	bls.n	800a8c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a8c2:	4b11      	ldr	r3, [pc, #68]	@ (800a908 <xTaskIncrementTick+0x16c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d007      	beq.n	800a8da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	e004      	b.n	800a8da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a8d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a90c <xTaskIncrementTick+0x170>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	4a0d      	ldr	r2, [pc, #52]	@ (800a90c <xTaskIncrementTick+0x170>)
 800a8d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8da:	697b      	ldr	r3, [r7, #20]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	20000ef8 	.word	0x20000ef8
 800a8e8:	20000ed4 	.word	0x20000ed4
 800a8ec:	20000e88 	.word	0x20000e88
 800a8f0:	20000e8c 	.word	0x20000e8c
 800a8f4:	20000ee8 	.word	0x20000ee8
 800a8f8:	20000ef0 	.word	0x20000ef0
 800a8fc:	20000ed8 	.word	0x20000ed8
 800a900:	20000a00 	.word	0x20000a00
 800a904:	200009fc 	.word	0x200009fc
 800a908:	20000ee4 	.word	0x20000ee4
 800a90c:	20000ee0 	.word	0x20000ee0

0800a910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a916:	4b2b      	ldr	r3, [pc, #172]	@ (800a9c4 <vTaskSwitchContext+0xb4>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a91e:	4b2a      	ldr	r3, [pc, #168]	@ (800a9c8 <vTaskSwitchContext+0xb8>)
 800a920:	2201      	movs	r2, #1
 800a922:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a924:	e047      	b.n	800a9b6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a926:	4b28      	ldr	r3, [pc, #160]	@ (800a9c8 <vTaskSwitchContext+0xb8>)
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a92c:	4b27      	ldr	r3, [pc, #156]	@ (800a9cc <vTaskSwitchContext+0xbc>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60fb      	str	r3, [r7, #12]
 800a932:	e011      	b.n	800a958 <vTaskSwitchContext+0x48>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10b      	bne.n	800a952 <vTaskSwitchContext+0x42>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	607b      	str	r3, [r7, #4]
}
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	e7fd      	b.n	800a94e <vTaskSwitchContext+0x3e>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3b01      	subs	r3, #1
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	491d      	ldr	r1, [pc, #116]	@ (800a9d0 <vTaskSwitchContext+0xc0>)
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4613      	mov	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	440b      	add	r3, r1
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0e3      	beq.n	800a934 <vTaskSwitchContext+0x24>
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4a16      	ldr	r2, [pc, #88]	@ (800a9d0 <vTaskSwitchContext+0xc0>)
 800a978:	4413      	add	r3, r2
 800a97a:	60bb      	str	r3, [r7, #8]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	605a      	str	r2, [r3, #4]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	3308      	adds	r3, #8
 800a98e:	429a      	cmp	r2, r3
 800a990:	d104      	bne.n	800a99c <vTaskSwitchContext+0x8c>
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	605a      	str	r2, [r3, #4]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a9d4 <vTaskSwitchContext+0xc4>)
 800a9a4:	6013      	str	r3, [r2, #0]
 800a9a6:	4a09      	ldr	r2, [pc, #36]	@ (800a9cc <vTaskSwitchContext+0xbc>)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9ac:	4b09      	ldr	r3, [pc, #36]	@ (800a9d4 <vTaskSwitchContext+0xc4>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3354      	adds	r3, #84	@ 0x54
 800a9b2:	4a09      	ldr	r2, [pc, #36]	@ (800a9d8 <vTaskSwitchContext+0xc8>)
 800a9b4:	6013      	str	r3, [r2, #0]
}
 800a9b6:	bf00      	nop
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	20000ef8 	.word	0x20000ef8
 800a9c8:	20000ee4 	.word	0x20000ee4
 800a9cc:	20000ed8 	.word	0x20000ed8
 800a9d0:	20000a00 	.word	0x20000a00
 800a9d4:	200009fc 	.word	0x200009fc
 800a9d8:	20000030 	.word	0x20000030

0800a9dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10b      	bne.n	800aa04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f0:	f383 8811 	msr	BASEPRI, r3
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	60fb      	str	r3, [r7, #12]
}
 800a9fe:	bf00      	nop
 800aa00:	bf00      	nop
 800aa02:	e7fd      	b.n	800aa00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa04:	4b07      	ldr	r3, [pc, #28]	@ (800aa24 <vTaskPlaceOnEventList+0x48>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3318      	adds	r3, #24
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7fe fd8a 	bl	8009526 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa12:	2101      	movs	r1, #1
 800aa14:	6838      	ldr	r0, [r7, #0]
 800aa16:	f000 fa87 	bl	800af28 <prvAddCurrentTaskToDelayedList>
}
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	200009fc 	.word	0x200009fc

0800aa28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10b      	bne.n	800aa52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	617b      	str	r3, [r7, #20]
}
 800aa4c:	bf00      	nop
 800aa4e:	bf00      	nop
 800aa50:	e7fd      	b.n	800aa4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa52:	4b0a      	ldr	r3, [pc, #40]	@ (800aa7c <vTaskPlaceOnEventListRestricted+0x54>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3318      	adds	r3, #24
 800aa58:	4619      	mov	r1, r3
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f7fe fd3f 	bl	80094de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa66:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	68b8      	ldr	r0, [r7, #8]
 800aa70:	f000 fa5a 	bl	800af28 <prvAddCurrentTaskToDelayedList>
	}
 800aa74:	bf00      	nop
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	200009fc 	.word	0x200009fc

0800aa80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10b      	bne.n	800aaae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	60fb      	str	r3, [r7, #12]
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	e7fd      	b.n	800aaaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	3318      	adds	r3, #24
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe fd70 	bl	8009598 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab8:	4b1d      	ldr	r3, [pc, #116]	@ (800ab30 <xTaskRemoveFromEventList+0xb0>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d11d      	bne.n	800aafc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	3304      	adds	r3, #4
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fe fd67 	bl	8009598 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aace:	4b19      	ldr	r3, [pc, #100]	@ (800ab34 <xTaskRemoveFromEventList+0xb4>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d903      	bls.n	800aade <xTaskRemoveFromEventList+0x5e>
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aada:	4a16      	ldr	r2, [pc, #88]	@ (800ab34 <xTaskRemoveFromEventList+0xb4>)
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae2:	4613      	mov	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4a13      	ldr	r2, [pc, #76]	@ (800ab38 <xTaskRemoveFromEventList+0xb8>)
 800aaec:	441a      	add	r2, r3
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7fe fcf2 	bl	80094de <vListInsertEnd>
 800aafa:	e005      	b.n	800ab08 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	3318      	adds	r3, #24
 800ab00:	4619      	mov	r1, r3
 800ab02:	480e      	ldr	r0, [pc, #56]	@ (800ab3c <xTaskRemoveFromEventList+0xbc>)
 800ab04:	f7fe fceb 	bl	80094de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab40 <xTaskRemoveFromEventList+0xc0>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d905      	bls.n	800ab22 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab16:	2301      	movs	r3, #1
 800ab18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ab44 <xTaskRemoveFromEventList+0xc4>)
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	e001      	b.n	800ab26 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab26:	697b      	ldr	r3, [r7, #20]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	20000ef8 	.word	0x20000ef8
 800ab34:	20000ed8 	.word	0x20000ed8
 800ab38:	20000a00 	.word	0x20000a00
 800ab3c:	20000e90 	.word	0x20000e90
 800ab40:	200009fc 	.word	0x200009fc
 800ab44:	20000ee4 	.word	0x20000ee4

0800ab48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab50:	4b06      	ldr	r3, [pc, #24]	@ (800ab6c <vTaskInternalSetTimeOutState+0x24>)
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab58:	4b05      	ldr	r3, [pc, #20]	@ (800ab70 <vTaskInternalSetTimeOutState+0x28>)
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	605a      	str	r2, [r3, #4]
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	20000ee8 	.word	0x20000ee8
 800ab70:	20000ed4 	.word	0x20000ed4

0800ab74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10b      	bne.n	800ab9c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	613b      	str	r3, [r7, #16]
}
 800ab96:	bf00      	nop
 800ab98:	bf00      	nop
 800ab9a:	e7fd      	b.n	800ab98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10b      	bne.n	800abba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	60fb      	str	r3, [r7, #12]
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	e7fd      	b.n	800abb6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800abba:	f000 fe95 	bl	800b8e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abbe:	4b1d      	ldr	r3, [pc, #116]	@ (800ac34 <xTaskCheckForTimeOut+0xc0>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd6:	d102      	bne.n	800abde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800abd8:	2300      	movs	r3, #0
 800abda:	61fb      	str	r3, [r7, #28]
 800abdc:	e023      	b.n	800ac26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	4b15      	ldr	r3, [pc, #84]	@ (800ac38 <xTaskCheckForTimeOut+0xc4>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d007      	beq.n	800abfa <xTaskCheckForTimeOut+0x86>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	69ba      	ldr	r2, [r7, #24]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d302      	bcc.n	800abfa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abf4:	2301      	movs	r3, #1
 800abf6:	61fb      	str	r3, [r7, #28]
 800abf8:	e015      	b.n	800ac26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d20b      	bcs.n	800ac1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	1ad2      	subs	r2, r2, r3
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7ff ff99 	bl	800ab48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac16:	2300      	movs	r3, #0
 800ac18:	61fb      	str	r3, [r7, #28]
 800ac1a:	e004      	b.n	800ac26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac22:	2301      	movs	r3, #1
 800ac24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac26:	f000 fe91 	bl	800b94c <vPortExitCritical>

	return xReturn;
 800ac2a:	69fb      	ldr	r3, [r7, #28]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3720      	adds	r7, #32
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	20000ed4 	.word	0x20000ed4
 800ac38:	20000ee8 	.word	0x20000ee8

0800ac3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac40:	4b03      	ldr	r3, [pc, #12]	@ (800ac50 <vTaskMissedYield+0x14>)
 800ac42:	2201      	movs	r2, #1
 800ac44:	601a      	str	r2, [r3, #0]
}
 800ac46:	bf00      	nop
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	20000ee4 	.word	0x20000ee4

0800ac54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac5c:	f000 f852 	bl	800ad04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac60:	4b06      	ldr	r3, [pc, #24]	@ (800ac7c <prvIdleTask+0x28>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d9f9      	bls.n	800ac5c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac68:	4b05      	ldr	r3, [pc, #20]	@ (800ac80 <prvIdleTask+0x2c>)
 800ac6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac78:	e7f0      	b.n	800ac5c <prvIdleTask+0x8>
 800ac7a:	bf00      	nop
 800ac7c:	20000a00 	.word	0x20000a00
 800ac80:	e000ed04 	.word	0xe000ed04

0800ac84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	607b      	str	r3, [r7, #4]
 800ac8e:	e00c      	b.n	800acaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4a12      	ldr	r2, [pc, #72]	@ (800ace4 <prvInitialiseTaskLists+0x60>)
 800ac9c:	4413      	add	r3, r2
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe fbf0 	bl	8009484 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3301      	adds	r3, #1
 800aca8:	607b      	str	r3, [r7, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2b37      	cmp	r3, #55	@ 0x37
 800acae:	d9ef      	bls.n	800ac90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acb0:	480d      	ldr	r0, [pc, #52]	@ (800ace8 <prvInitialiseTaskLists+0x64>)
 800acb2:	f7fe fbe7 	bl	8009484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acb6:	480d      	ldr	r0, [pc, #52]	@ (800acec <prvInitialiseTaskLists+0x68>)
 800acb8:	f7fe fbe4 	bl	8009484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acbc:	480c      	ldr	r0, [pc, #48]	@ (800acf0 <prvInitialiseTaskLists+0x6c>)
 800acbe:	f7fe fbe1 	bl	8009484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acc2:	480c      	ldr	r0, [pc, #48]	@ (800acf4 <prvInitialiseTaskLists+0x70>)
 800acc4:	f7fe fbde 	bl	8009484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800acc8:	480b      	ldr	r0, [pc, #44]	@ (800acf8 <prvInitialiseTaskLists+0x74>)
 800acca:	f7fe fbdb 	bl	8009484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800acce:	4b0b      	ldr	r3, [pc, #44]	@ (800acfc <prvInitialiseTaskLists+0x78>)
 800acd0:	4a05      	ldr	r2, [pc, #20]	@ (800ace8 <prvInitialiseTaskLists+0x64>)
 800acd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acd4:	4b0a      	ldr	r3, [pc, #40]	@ (800ad00 <prvInitialiseTaskLists+0x7c>)
 800acd6:	4a05      	ldr	r2, [pc, #20]	@ (800acec <prvInitialiseTaskLists+0x68>)
 800acd8:	601a      	str	r2, [r3, #0]
}
 800acda:	bf00      	nop
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	20000a00 	.word	0x20000a00
 800ace8:	20000e60 	.word	0x20000e60
 800acec:	20000e74 	.word	0x20000e74
 800acf0:	20000e90 	.word	0x20000e90
 800acf4:	20000ea4 	.word	0x20000ea4
 800acf8:	20000ebc 	.word	0x20000ebc
 800acfc:	20000e88 	.word	0x20000e88
 800ad00:	20000e8c 	.word	0x20000e8c

0800ad04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad0a:	e019      	b.n	800ad40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad0c:	f000 fdec 	bl	800b8e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad10:	4b10      	ldr	r3, [pc, #64]	@ (800ad54 <prvCheckTasksWaitingTermination+0x50>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fe fc3b 	bl	8009598 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad22:	4b0d      	ldr	r3, [pc, #52]	@ (800ad58 <prvCheckTasksWaitingTermination+0x54>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	4a0b      	ldr	r2, [pc, #44]	@ (800ad58 <prvCheckTasksWaitingTermination+0x54>)
 800ad2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ad5c <prvCheckTasksWaitingTermination+0x58>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	4a0a      	ldr	r2, [pc, #40]	@ (800ad5c <prvCheckTasksWaitingTermination+0x58>)
 800ad34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad36:	f000 fe09 	bl	800b94c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f810 	bl	800ad60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad40:	4b06      	ldr	r3, [pc, #24]	@ (800ad5c <prvCheckTasksWaitingTermination+0x58>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1e1      	bne.n	800ad0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20000ea4 	.word	0x20000ea4
 800ad58:	20000ed0 	.word	0x20000ed0
 800ad5c:	20000eb8 	.word	0x20000eb8

0800ad60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	3354      	adds	r3, #84	@ 0x54
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f001 fc95 	bl	800c69c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d108      	bne.n	800ad8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 ffa1 	bl	800bcc8 <vPortFree>
				vPortFree( pxTCB );
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 ff9e 	bl	800bcc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad8c:	e019      	b.n	800adc2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d103      	bne.n	800ada0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 ff95 	bl	800bcc8 <vPortFree>
	}
 800ad9e:	e010      	b.n	800adc2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d00b      	beq.n	800adc2 <prvDeleteTCB+0x62>
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	60fb      	str	r3, [r7, #12]
}
 800adbc:	bf00      	nop
 800adbe:	bf00      	nop
 800adc0:	e7fd      	b.n	800adbe <prvDeleteTCB+0x5e>
	}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
	...

0800adcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800add2:	4b0c      	ldr	r3, [pc, #48]	@ (800ae04 <prvResetNextTaskUnblockTime+0x38>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d104      	bne.n	800ade6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800addc:	4b0a      	ldr	r3, [pc, #40]	@ (800ae08 <prvResetNextTaskUnblockTime+0x3c>)
 800adde:	f04f 32ff 	mov.w	r2, #4294967295
 800ade2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ade4:	e008      	b.n	800adf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade6:	4b07      	ldr	r3, [pc, #28]	@ (800ae04 <prvResetNextTaskUnblockTime+0x38>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	4a04      	ldr	r2, [pc, #16]	@ (800ae08 <prvResetNextTaskUnblockTime+0x3c>)
 800adf6:	6013      	str	r3, [r2, #0]
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	20000e88 	.word	0x20000e88
 800ae08:	20000ef0 	.word	0x20000ef0

0800ae0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae12:	4b0b      	ldr	r3, [pc, #44]	@ (800ae40 <xTaskGetSchedulerState+0x34>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d102      	bne.n	800ae20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	607b      	str	r3, [r7, #4]
 800ae1e:	e008      	b.n	800ae32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae20:	4b08      	ldr	r3, [pc, #32]	@ (800ae44 <xTaskGetSchedulerState+0x38>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d102      	bne.n	800ae2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae28:	2302      	movs	r3, #2
 800ae2a:	607b      	str	r3, [r7, #4]
 800ae2c:	e001      	b.n	800ae32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae32:	687b      	ldr	r3, [r7, #4]
	}
 800ae34:	4618      	mov	r0, r3
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	20000edc 	.word	0x20000edc
 800ae44:	20000ef8 	.word	0x20000ef8

0800ae48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae54:	2300      	movs	r3, #0
 800ae56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d058      	beq.n	800af10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae5e:	4b2f      	ldr	r3, [pc, #188]	@ (800af1c <xTaskPriorityDisinherit+0xd4>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d00b      	beq.n	800ae80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ae68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	60fb      	str	r3, [r7, #12]
}
 800ae7a:	bf00      	nop
 800ae7c:	bf00      	nop
 800ae7e:	e7fd      	b.n	800ae7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10b      	bne.n	800aea0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ae88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	60bb      	str	r3, [r7, #8]
}
 800ae9a:	bf00      	nop
 800ae9c:	bf00      	nop
 800ae9e:	e7fd      	b.n	800ae9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea4:	1e5a      	subs	r2, r3, #1
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d02c      	beq.n	800af10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d128      	bne.n	800af10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	3304      	adds	r3, #4
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe fb68 	bl	8009598 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee0:	4b0f      	ldr	r3, [pc, #60]	@ (800af20 <xTaskPriorityDisinherit+0xd8>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d903      	bls.n	800aef0 <xTaskPriorityDisinherit+0xa8>
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeec:	4a0c      	ldr	r2, [pc, #48]	@ (800af20 <xTaskPriorityDisinherit+0xd8>)
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef4:	4613      	mov	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4a09      	ldr	r2, [pc, #36]	@ (800af24 <xTaskPriorityDisinherit+0xdc>)
 800aefe:	441a      	add	r2, r3
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	3304      	adds	r3, #4
 800af04:	4619      	mov	r1, r3
 800af06:	4610      	mov	r0, r2
 800af08:	f7fe fae9 	bl	80094de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af0c:	2301      	movs	r3, #1
 800af0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af10:	697b      	ldr	r3, [r7, #20]
	}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	200009fc 	.word	0x200009fc
 800af20:	20000ed8 	.word	0x20000ed8
 800af24:	20000a00 	.word	0x20000a00

0800af28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af32:	4b21      	ldr	r3, [pc, #132]	@ (800afb8 <prvAddCurrentTaskToDelayedList+0x90>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af38:	4b20      	ldr	r3, [pc, #128]	@ (800afbc <prvAddCurrentTaskToDelayedList+0x94>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	3304      	adds	r3, #4
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe fb2a 	bl	8009598 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4a:	d10a      	bne.n	800af62 <prvAddCurrentTaskToDelayedList+0x3a>
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d007      	beq.n	800af62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af52:	4b1a      	ldr	r3, [pc, #104]	@ (800afbc <prvAddCurrentTaskToDelayedList+0x94>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3304      	adds	r3, #4
 800af58:	4619      	mov	r1, r3
 800af5a:	4819      	ldr	r0, [pc, #100]	@ (800afc0 <prvAddCurrentTaskToDelayedList+0x98>)
 800af5c:	f7fe fabf 	bl	80094de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af60:	e026      	b.n	800afb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4413      	add	r3, r2
 800af68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af6a:	4b14      	ldr	r3, [pc, #80]	@ (800afbc <prvAddCurrentTaskToDelayedList+0x94>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	429a      	cmp	r2, r3
 800af78:	d209      	bcs.n	800af8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af7a:	4b12      	ldr	r3, [pc, #72]	@ (800afc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	4b0f      	ldr	r3, [pc, #60]	@ (800afbc <prvAddCurrentTaskToDelayedList+0x94>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	3304      	adds	r3, #4
 800af84:	4619      	mov	r1, r3
 800af86:	4610      	mov	r0, r2
 800af88:	f7fe facd 	bl	8009526 <vListInsert>
}
 800af8c:	e010      	b.n	800afb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af8e:	4b0e      	ldr	r3, [pc, #56]	@ (800afc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	4b0a      	ldr	r3, [pc, #40]	@ (800afbc <prvAddCurrentTaskToDelayedList+0x94>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3304      	adds	r3, #4
 800af98:	4619      	mov	r1, r3
 800af9a:	4610      	mov	r0, r2
 800af9c:	f7fe fac3 	bl	8009526 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800afa0:	4b0a      	ldr	r3, [pc, #40]	@ (800afcc <prvAddCurrentTaskToDelayedList+0xa4>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d202      	bcs.n	800afb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800afaa:	4a08      	ldr	r2, [pc, #32]	@ (800afcc <prvAddCurrentTaskToDelayedList+0xa4>)
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	6013      	str	r3, [r2, #0]
}
 800afb0:	bf00      	nop
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20000ed4 	.word	0x20000ed4
 800afbc:	200009fc 	.word	0x200009fc
 800afc0:	20000ebc 	.word	0x20000ebc
 800afc4:	20000e8c 	.word	0x20000e8c
 800afc8:	20000e88 	.word	0x20000e88
 800afcc:	20000ef0 	.word	0x20000ef0

0800afd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08a      	sub	sp, #40	@ 0x28
 800afd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800afda:	f000 fb13 	bl	800b604 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800afde:	4b1d      	ldr	r3, [pc, #116]	@ (800b054 <xTimerCreateTimerTask+0x84>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d021      	beq.n	800b02a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800afe6:	2300      	movs	r3, #0
 800afe8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afee:	1d3a      	adds	r2, r7, #4
 800aff0:	f107 0108 	add.w	r1, r7, #8
 800aff4:	f107 030c 	add.w	r3, r7, #12
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe fa29 	bl	8009450 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800affe:	6879      	ldr	r1, [r7, #4]
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	9202      	str	r2, [sp, #8]
 800b006:	9301      	str	r3, [sp, #4]
 800b008:	2302      	movs	r3, #2
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	2300      	movs	r3, #0
 800b00e:	460a      	mov	r2, r1
 800b010:	4911      	ldr	r1, [pc, #68]	@ (800b058 <xTimerCreateTimerTask+0x88>)
 800b012:	4812      	ldr	r0, [pc, #72]	@ (800b05c <xTimerCreateTimerTask+0x8c>)
 800b014:	f7ff f8a2 	bl	800a15c <xTaskCreateStatic>
 800b018:	4603      	mov	r3, r0
 800b01a:	4a11      	ldr	r2, [pc, #68]	@ (800b060 <xTimerCreateTimerTask+0x90>)
 800b01c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b01e:	4b10      	ldr	r3, [pc, #64]	@ (800b060 <xTimerCreateTimerTask+0x90>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b026:	2301      	movs	r3, #1
 800b028:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10b      	bne.n	800b048 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	613b      	str	r3, [r7, #16]
}
 800b042:	bf00      	nop
 800b044:	bf00      	nop
 800b046:	e7fd      	b.n	800b044 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b048:	697b      	ldr	r3, [r7, #20]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20000f2c 	.word	0x20000f2c
 800b058:	0800c8e0 	.word	0x0800c8e0
 800b05c:	0800b19d 	.word	0x0800b19d
 800b060:	20000f30 	.word	0x20000f30

0800b064 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08a      	sub	sp, #40	@ 0x28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b072:	2300      	movs	r3, #0
 800b074:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10b      	bne.n	800b094 <xTimerGenericCommand+0x30>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	623b      	str	r3, [r7, #32]
}
 800b08e:	bf00      	nop
 800b090:	bf00      	nop
 800b092:	e7fd      	b.n	800b090 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b094:	4b19      	ldr	r3, [pc, #100]	@ (800b0fc <xTimerGenericCommand+0x98>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d02a      	beq.n	800b0f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b05      	cmp	r3, #5
 800b0ac:	dc18      	bgt.n	800b0e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b0ae:	f7ff fead 	bl	800ae0c <xTaskGetSchedulerState>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d109      	bne.n	800b0cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b0b8:	4b10      	ldr	r3, [pc, #64]	@ (800b0fc <xTimerGenericCommand+0x98>)
 800b0ba:	6818      	ldr	r0, [r3, #0]
 800b0bc:	f107 0110 	add.w	r1, r7, #16
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c4:	f7fe fbd8 	bl	8009878 <xQueueGenericSend>
 800b0c8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0ca:	e012      	b.n	800b0f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b0cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b0fc <xTimerGenericCommand+0x98>)
 800b0ce:	6818      	ldr	r0, [r3, #0]
 800b0d0:	f107 0110 	add.w	r1, r7, #16
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f7fe fbce 	bl	8009878 <xQueueGenericSend>
 800b0dc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0de:	e008      	b.n	800b0f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0e0:	4b06      	ldr	r3, [pc, #24]	@ (800b0fc <xTimerGenericCommand+0x98>)
 800b0e2:	6818      	ldr	r0, [r3, #0]
 800b0e4:	f107 0110 	add.w	r1, r7, #16
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	f7fe fcc6 	bl	8009a7c <xQueueGenericSendFromISR>
 800b0f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3728      	adds	r7, #40	@ 0x28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	20000f2c 	.word	0x20000f2c

0800b100 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af02      	add	r7, sp, #8
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b10a:	4b23      	ldr	r3, [pc, #140]	@ (800b198 <prvProcessExpiredTimer+0x98>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	3304      	adds	r3, #4
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fe fa3d 	bl	8009598 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b124:	f003 0304 	and.w	r3, r3, #4
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d023      	beq.n	800b174 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	699a      	ldr	r2, [r3, #24]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	18d1      	adds	r1, r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	6978      	ldr	r0, [r7, #20]
 800b13a:	f000 f8d5 	bl	800b2e8 <prvInsertTimerInActiveList>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d020      	beq.n	800b186 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b144:	2300      	movs	r3, #0
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	2300      	movs	r3, #0
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	2100      	movs	r1, #0
 800b14e:	6978      	ldr	r0, [r7, #20]
 800b150:	f7ff ff88 	bl	800b064 <xTimerGenericCommand>
 800b154:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d114      	bne.n	800b186 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	60fb      	str	r3, [r7, #12]
}
 800b16e:	bf00      	nop
 800b170:	bf00      	nop
 800b172:	e7fd      	b.n	800b170 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b17a:	f023 0301 	bic.w	r3, r3, #1
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	6978      	ldr	r0, [r7, #20]
 800b18c:	4798      	blx	r3
}
 800b18e:	bf00      	nop
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20000f24 	.word	0x20000f24

0800b19c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1a4:	f107 0308 	add.w	r3, r7, #8
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f000 f859 	bl	800b260 <prvGetNextExpireTime>
 800b1ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f000 f805 	bl	800b1c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b1ba:	f000 f8d7 	bl	800b36c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1be:	bf00      	nop
 800b1c0:	e7f0      	b.n	800b1a4 <prvTimerTask+0x8>
	...

0800b1c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b1ce:	f7ff fa29 	bl	800a624 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1d2:	f107 0308 	add.w	r3, r7, #8
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 f866 	bl	800b2a8 <prvSampleTimeNow>
 800b1dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d130      	bne.n	800b246 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10a      	bne.n	800b200 <prvProcessTimerOrBlockTask+0x3c>
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d806      	bhi.n	800b200 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b1f2:	f7ff fa25 	bl	800a640 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b1f6:	68f9      	ldr	r1, [r7, #12]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff ff81 	bl	800b100 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b1fe:	e024      	b.n	800b24a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d008      	beq.n	800b218 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b206:	4b13      	ldr	r3, [pc, #76]	@ (800b254 <prvProcessTimerOrBlockTask+0x90>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <prvProcessTimerOrBlockTask+0x50>
 800b210:	2301      	movs	r3, #1
 800b212:	e000      	b.n	800b216 <prvProcessTimerOrBlockTask+0x52>
 800b214:	2300      	movs	r3, #0
 800b216:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b218:	4b0f      	ldr	r3, [pc, #60]	@ (800b258 <prvProcessTimerOrBlockTask+0x94>)
 800b21a:	6818      	ldr	r0, [r3, #0]
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	4619      	mov	r1, r3
 800b226:	f7fe ff65 	bl	800a0f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b22a:	f7ff fa09 	bl	800a640 <xTaskResumeAll>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10a      	bne.n	800b24a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b234:	4b09      	ldr	r3, [pc, #36]	@ (800b25c <prvProcessTimerOrBlockTask+0x98>)
 800b236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	f3bf 8f6f 	isb	sy
}
 800b244:	e001      	b.n	800b24a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b246:	f7ff f9fb 	bl	800a640 <xTaskResumeAll>
}
 800b24a:	bf00      	nop
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20000f28 	.word	0x20000f28
 800b258:	20000f2c 	.word	0x20000f2c
 800b25c:	e000ed04 	.word	0xe000ed04

0800b260 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b268:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a4 <prvGetNextExpireTime+0x44>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <prvGetNextExpireTime+0x16>
 800b272:	2201      	movs	r2, #1
 800b274:	e000      	b.n	800b278 <prvGetNextExpireTime+0x18>
 800b276:	2200      	movs	r2, #0
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d105      	bne.n	800b290 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b284:	4b07      	ldr	r3, [pc, #28]	@ (800b2a4 <prvGetNextExpireTime+0x44>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	e001      	b.n	800b294 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b294:	68fb      	ldr	r3, [r7, #12]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	20000f24 	.word	0x20000f24

0800b2a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b2b0:	f7ff fa64 	bl	800a77c <xTaskGetTickCount>
 800b2b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b2e4 <prvSampleTimeNow+0x3c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d205      	bcs.n	800b2cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b2c0:	f000 f93a 	bl	800b538 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	e002      	b.n	800b2d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b2d2:	4a04      	ldr	r2, [pc, #16]	@ (800b2e4 <prvSampleTimeNow+0x3c>)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20000f34 	.word	0x20000f34

0800b2e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d812      	bhi.n	800b334 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	1ad2      	subs	r2, r2, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d302      	bcc.n	800b322 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b31c:	2301      	movs	r3, #1
 800b31e:	617b      	str	r3, [r7, #20]
 800b320:	e01b      	b.n	800b35a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b322:	4b10      	ldr	r3, [pc, #64]	@ (800b364 <prvInsertTimerInActiveList+0x7c>)
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3304      	adds	r3, #4
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f7fe f8fa 	bl	8009526 <vListInsert>
 800b332:	e012      	b.n	800b35a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d206      	bcs.n	800b34a <prvInsertTimerInActiveList+0x62>
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	429a      	cmp	r2, r3
 800b342:	d302      	bcc.n	800b34a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b344:	2301      	movs	r3, #1
 800b346:	617b      	str	r3, [r7, #20]
 800b348:	e007      	b.n	800b35a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b34a:	4b07      	ldr	r3, [pc, #28]	@ (800b368 <prvInsertTimerInActiveList+0x80>)
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3304      	adds	r3, #4
 800b352:	4619      	mov	r1, r3
 800b354:	4610      	mov	r0, r2
 800b356:	f7fe f8e6 	bl	8009526 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b35a:	697b      	ldr	r3, [r7, #20]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	20000f28 	.word	0x20000f28
 800b368:	20000f24 	.word	0x20000f24

0800b36c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08e      	sub	sp, #56	@ 0x38
 800b370:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b372:	e0ce      	b.n	800b512 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	da19      	bge.n	800b3ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b37a:	1d3b      	adds	r3, r7, #4
 800b37c:	3304      	adds	r3, #4
 800b37e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10b      	bne.n	800b39e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	61fb      	str	r3, [r7, #28]
}
 800b398:	bf00      	nop
 800b39a:	bf00      	nop
 800b39c:	e7fd      	b.n	800b39a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3a4:	6850      	ldr	r0, [r2, #4]
 800b3a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3a8:	6892      	ldr	r2, [r2, #8]
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f2c0 80ae 	blt.w	800b512 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d004      	beq.n	800b3cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7fe f8e6 	bl	8009598 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7ff ff6a 	bl	800b2a8 <prvSampleTimeNow>
 800b3d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b09      	cmp	r3, #9
 800b3da:	f200 8097 	bhi.w	800b50c <prvProcessReceivedCommands+0x1a0>
 800b3de:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e4 <prvProcessReceivedCommands+0x78>)
 800b3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e4:	0800b40d 	.word	0x0800b40d
 800b3e8:	0800b40d 	.word	0x0800b40d
 800b3ec:	0800b40d 	.word	0x0800b40d
 800b3f0:	0800b483 	.word	0x0800b483
 800b3f4:	0800b497 	.word	0x0800b497
 800b3f8:	0800b4e3 	.word	0x0800b4e3
 800b3fc:	0800b40d 	.word	0x0800b40d
 800b400:	0800b40d 	.word	0x0800b40d
 800b404:	0800b483 	.word	0x0800b483
 800b408:	0800b497 	.word	0x0800b497
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b412:	f043 0301 	orr.w	r3, r3, #1
 800b416:	b2da      	uxtb	r2, r3
 800b418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	18d1      	adds	r1, r2, r3
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b42a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b42c:	f7ff ff5c 	bl	800b2e8 <prvInsertTimerInActiveList>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d06c      	beq.n	800b510 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b438:	6a1b      	ldr	r3, [r3, #32]
 800b43a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b43c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b444:	f003 0304 	and.w	r3, r3, #4
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d061      	beq.n	800b510 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	441a      	add	r2, r3
 800b454:	2300      	movs	r3, #0
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	2300      	movs	r3, #0
 800b45a:	2100      	movs	r1, #0
 800b45c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b45e:	f7ff fe01 	bl	800b064 <xTimerGenericCommand>
 800b462:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b464:	6a3b      	ldr	r3, [r7, #32]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d152      	bne.n	800b510 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	61bb      	str	r3, [r7, #24]
}
 800b47c:	bf00      	nop
 800b47e:	bf00      	nop
 800b480:	e7fd      	b.n	800b47e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b488:	f023 0301 	bic.w	r3, r3, #1
 800b48c:	b2da      	uxtb	r2, r3
 800b48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b490:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b494:	e03d      	b.n	800b512 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b49c:	f043 0301 	orr.w	r3, r3, #1
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b0:	699b      	ldr	r3, [r3, #24]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10b      	bne.n	800b4ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ba:	f383 8811 	msr	BASEPRI, r3
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f3bf 8f4f 	dsb	sy
 800b4c6:	617b      	str	r3, [r7, #20]
}
 800b4c8:	bf00      	nop
 800b4ca:	bf00      	nop
 800b4cc:	e7fd      	b.n	800b4ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	699a      	ldr	r2, [r3, #24]
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d4:	18d1      	adds	r1, r2, r3
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4dc:	f7ff ff04 	bl	800b2e8 <prvInsertTimerInActiveList>
					break;
 800b4e0:	e017      	b.n	800b512 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4e8:	f003 0302 	and.w	r3, r3, #2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d103      	bne.n	800b4f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b4f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4f2:	f000 fbe9 	bl	800bcc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b4f6:	e00c      	b.n	800b512 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4fe:	f023 0301 	bic.w	r3, r3, #1
 800b502:	b2da      	uxtb	r2, r3
 800b504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b506:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b50a:	e002      	b.n	800b512 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b50c:	bf00      	nop
 800b50e:	e000      	b.n	800b512 <prvProcessReceivedCommands+0x1a6>
					break;
 800b510:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b512:	4b08      	ldr	r3, [pc, #32]	@ (800b534 <prvProcessReceivedCommands+0x1c8>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	1d39      	adds	r1, r7, #4
 800b518:	2200      	movs	r2, #0
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fe fb4c 	bl	8009bb8 <xQueueReceive>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	f47f af26 	bne.w	800b374 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b528:	bf00      	nop
 800b52a:	bf00      	nop
 800b52c:	3730      	adds	r7, #48	@ 0x30
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	20000f2c 	.word	0x20000f2c

0800b538 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b53e:	e049      	b.n	800b5d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b540:	4b2e      	ldr	r3, [pc, #184]	@ (800b5fc <prvSwitchTimerLists+0xc4>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b54a:	4b2c      	ldr	r3, [pc, #176]	@ (800b5fc <prvSwitchTimerLists+0xc4>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3304      	adds	r3, #4
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe f81d 	bl	8009598 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	2b00      	cmp	r3, #0
 800b572:	d02f      	beq.n	800b5d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	4413      	add	r3, r2
 800b57c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	429a      	cmp	r2, r3
 800b584:	d90e      	bls.n	800b5a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b592:	4b1a      	ldr	r3, [pc, #104]	@ (800b5fc <prvSwitchTimerLists+0xc4>)
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	3304      	adds	r3, #4
 800b59a:	4619      	mov	r1, r3
 800b59c:	4610      	mov	r0, r2
 800b59e:	f7fd ffc2 	bl	8009526 <vListInsert>
 800b5a2:	e017      	b.n	800b5d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f7ff fd58 	bl	800b064 <xTimerGenericCommand>
 800b5b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10b      	bne.n	800b5d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	603b      	str	r3, [r7, #0]
}
 800b5ce:	bf00      	nop
 800b5d0:	bf00      	nop
 800b5d2:	e7fd      	b.n	800b5d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5d4:	4b09      	ldr	r3, [pc, #36]	@ (800b5fc <prvSwitchTimerLists+0xc4>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1b0      	bne.n	800b540 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b5de:	4b07      	ldr	r3, [pc, #28]	@ (800b5fc <prvSwitchTimerLists+0xc4>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b5e4:	4b06      	ldr	r3, [pc, #24]	@ (800b600 <prvSwitchTimerLists+0xc8>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a04      	ldr	r2, [pc, #16]	@ (800b5fc <prvSwitchTimerLists+0xc4>)
 800b5ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b5ec:	4a04      	ldr	r2, [pc, #16]	@ (800b600 <prvSwitchTimerLists+0xc8>)
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	6013      	str	r3, [r2, #0]
}
 800b5f2:	bf00      	nop
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20000f24 	.word	0x20000f24
 800b600:	20000f28 	.word	0x20000f28

0800b604 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b60a:	f000 f96d 	bl	800b8e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b60e:	4b15      	ldr	r3, [pc, #84]	@ (800b664 <prvCheckForValidListAndQueue+0x60>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d120      	bne.n	800b658 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b616:	4814      	ldr	r0, [pc, #80]	@ (800b668 <prvCheckForValidListAndQueue+0x64>)
 800b618:	f7fd ff34 	bl	8009484 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b61c:	4813      	ldr	r0, [pc, #76]	@ (800b66c <prvCheckForValidListAndQueue+0x68>)
 800b61e:	f7fd ff31 	bl	8009484 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b622:	4b13      	ldr	r3, [pc, #76]	@ (800b670 <prvCheckForValidListAndQueue+0x6c>)
 800b624:	4a10      	ldr	r2, [pc, #64]	@ (800b668 <prvCheckForValidListAndQueue+0x64>)
 800b626:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b628:	4b12      	ldr	r3, [pc, #72]	@ (800b674 <prvCheckForValidListAndQueue+0x70>)
 800b62a:	4a10      	ldr	r2, [pc, #64]	@ (800b66c <prvCheckForValidListAndQueue+0x68>)
 800b62c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b62e:	2300      	movs	r3, #0
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	4b11      	ldr	r3, [pc, #68]	@ (800b678 <prvCheckForValidListAndQueue+0x74>)
 800b634:	4a11      	ldr	r2, [pc, #68]	@ (800b67c <prvCheckForValidListAndQueue+0x78>)
 800b636:	2110      	movs	r1, #16
 800b638:	200a      	movs	r0, #10
 800b63a:	f7fe f841 	bl	80096c0 <xQueueGenericCreateStatic>
 800b63e:	4603      	mov	r3, r0
 800b640:	4a08      	ldr	r2, [pc, #32]	@ (800b664 <prvCheckForValidListAndQueue+0x60>)
 800b642:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b644:	4b07      	ldr	r3, [pc, #28]	@ (800b664 <prvCheckForValidListAndQueue+0x60>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d005      	beq.n	800b658 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b64c:	4b05      	ldr	r3, [pc, #20]	@ (800b664 <prvCheckForValidListAndQueue+0x60>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	490b      	ldr	r1, [pc, #44]	@ (800b680 <prvCheckForValidListAndQueue+0x7c>)
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe fd24 	bl	800a0a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b658:	f000 f978 	bl	800b94c <vPortExitCritical>
}
 800b65c:	bf00      	nop
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	20000f2c 	.word	0x20000f2c
 800b668:	20000efc 	.word	0x20000efc
 800b66c:	20000f10 	.word	0x20000f10
 800b670:	20000f24 	.word	0x20000f24
 800b674:	20000f28 	.word	0x20000f28
 800b678:	20000fd8 	.word	0x20000fd8
 800b67c:	20000f38 	.word	0x20000f38
 800b680:	0800c8e8 	.word	0x0800c8e8

0800b684 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	3b04      	subs	r3, #4
 800b694:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b69c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3b04      	subs	r3, #4
 800b6a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f023 0201 	bic.w	r2, r3, #1
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3b04      	subs	r3, #4
 800b6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6b4:	4a0c      	ldr	r2, [pc, #48]	@ (800b6e8 <pxPortInitialiseStack+0x64>)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	3b14      	subs	r3, #20
 800b6be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	3b04      	subs	r3, #4
 800b6ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f06f 0202 	mvn.w	r2, #2
 800b6d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3b20      	subs	r3, #32
 800b6d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6da:	68fb      	ldr	r3, [r7, #12]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	0800b6ed 	.word	0x0800b6ed

0800b6ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6f6:	4b13      	ldr	r3, [pc, #76]	@ (800b744 <prvTaskExitError+0x58>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fe:	d00b      	beq.n	800b718 <prvTaskExitError+0x2c>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	60fb      	str	r3, [r7, #12]
}
 800b712:	bf00      	nop
 800b714:	bf00      	nop
 800b716:	e7fd      	b.n	800b714 <prvTaskExitError+0x28>
	__asm volatile
 800b718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71c:	f383 8811 	msr	BASEPRI, r3
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	60bb      	str	r3, [r7, #8]
}
 800b72a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b72c:	bf00      	nop
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d0fc      	beq.n	800b72e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	2000002c 	.word	0x2000002c
	...

0800b750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b750:	4b07      	ldr	r3, [pc, #28]	@ (800b770 <pxCurrentTCBConst2>)
 800b752:	6819      	ldr	r1, [r3, #0]
 800b754:	6808      	ldr	r0, [r1, #0]
 800b756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75a:	f380 8809 	msr	PSP, r0
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f04f 0000 	mov.w	r0, #0
 800b766:	f380 8811 	msr	BASEPRI, r0
 800b76a:	4770      	bx	lr
 800b76c:	f3af 8000 	nop.w

0800b770 <pxCurrentTCBConst2>:
 800b770:	200009fc 	.word	0x200009fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop

0800b778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b778:	4808      	ldr	r0, [pc, #32]	@ (800b79c <prvPortStartFirstTask+0x24>)
 800b77a:	6800      	ldr	r0, [r0, #0]
 800b77c:	6800      	ldr	r0, [r0, #0]
 800b77e:	f380 8808 	msr	MSP, r0
 800b782:	f04f 0000 	mov.w	r0, #0
 800b786:	f380 8814 	msr	CONTROL, r0
 800b78a:	b662      	cpsie	i
 800b78c:	b661      	cpsie	f
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	df00      	svc	0
 800b798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b79a:	bf00      	nop
 800b79c:	e000ed08 	.word	0xe000ed08

0800b7a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b7a6:	4b47      	ldr	r3, [pc, #284]	@ (800b8c4 <xPortStartScheduler+0x124>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a47      	ldr	r2, [pc, #284]	@ (800b8c8 <xPortStartScheduler+0x128>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d10b      	bne.n	800b7c8 <xPortStartScheduler+0x28>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	613b      	str	r3, [r7, #16]
}
 800b7c2:	bf00      	nop
 800b7c4:	bf00      	nop
 800b7c6:	e7fd      	b.n	800b7c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7c8:	4b3e      	ldr	r3, [pc, #248]	@ (800b8c4 <xPortStartScheduler+0x124>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a3f      	ldr	r2, [pc, #252]	@ (800b8cc <xPortStartScheduler+0x12c>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d10b      	bne.n	800b7ea <xPortStartScheduler+0x4a>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	60fb      	str	r3, [r7, #12]
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop
 800b7e8:	e7fd      	b.n	800b7e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7ea:	4b39      	ldr	r3, [pc, #228]	@ (800b8d0 <xPortStartScheduler+0x130>)
 800b7ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	22ff      	movs	r2, #255	@ 0xff
 800b7fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	b2db      	uxtb	r3, r3
 800b802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b804:	78fb      	ldrb	r3, [r7, #3]
 800b806:	b2db      	uxtb	r3, r3
 800b808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	4b31      	ldr	r3, [pc, #196]	@ (800b8d4 <xPortStartScheduler+0x134>)
 800b810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b812:	4b31      	ldr	r3, [pc, #196]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b814:	2207      	movs	r2, #7
 800b816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b818:	e009      	b.n	800b82e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b81a:	4b2f      	ldr	r3, [pc, #188]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	3b01      	subs	r3, #1
 800b820:	4a2d      	ldr	r2, [pc, #180]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b824:	78fb      	ldrb	r3, [r7, #3]
 800b826:	b2db      	uxtb	r3, r3
 800b828:	005b      	lsls	r3, r3, #1
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	b2db      	uxtb	r3, r3
 800b832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b836:	2b80      	cmp	r3, #128	@ 0x80
 800b838:	d0ef      	beq.n	800b81a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b83a:	4b27      	ldr	r3, [pc, #156]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f1c3 0307 	rsb	r3, r3, #7
 800b842:	2b04      	cmp	r3, #4
 800b844:	d00b      	beq.n	800b85e <xPortStartScheduler+0xbe>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	60bb      	str	r3, [r7, #8]
}
 800b858:	bf00      	nop
 800b85a:	bf00      	nop
 800b85c:	e7fd      	b.n	800b85a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b85e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	021b      	lsls	r3, r3, #8
 800b864:	4a1c      	ldr	r2, [pc, #112]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b868:	4b1b      	ldr	r3, [pc, #108]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b870:	4a19      	ldr	r2, [pc, #100]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	b2da      	uxtb	r2, r3
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b87c:	4b17      	ldr	r3, [pc, #92]	@ (800b8dc <xPortStartScheduler+0x13c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a16      	ldr	r2, [pc, #88]	@ (800b8dc <xPortStartScheduler+0x13c>)
 800b882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b888:	4b14      	ldr	r3, [pc, #80]	@ (800b8dc <xPortStartScheduler+0x13c>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a13      	ldr	r2, [pc, #76]	@ (800b8dc <xPortStartScheduler+0x13c>)
 800b88e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b894:	f000 f8da 	bl	800ba4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b898:	4b11      	ldr	r3, [pc, #68]	@ (800b8e0 <xPortStartScheduler+0x140>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b89e:	f000 f8f9 	bl	800ba94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b8a2:	4b10      	ldr	r3, [pc, #64]	@ (800b8e4 <xPortStartScheduler+0x144>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a0f      	ldr	r2, [pc, #60]	@ (800b8e4 <xPortStartScheduler+0x144>)
 800b8a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b8ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b8ae:	f7ff ff63 	bl	800b778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b8b2:	f7ff f82d 	bl	800a910 <vTaskSwitchContext>
	prvTaskExitError();
 800b8b6:	f7ff ff19 	bl	800b6ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3718      	adds	r7, #24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	e000ed00 	.word	0xe000ed00
 800b8c8:	410fc271 	.word	0x410fc271
 800b8cc:	410fc270 	.word	0x410fc270
 800b8d0:	e000e400 	.word	0xe000e400
 800b8d4:	20001028 	.word	0x20001028
 800b8d8:	2000102c 	.word	0x2000102c
 800b8dc:	e000ed20 	.word	0xe000ed20
 800b8e0:	2000002c 	.word	0x2000002c
 800b8e4:	e000ef34 	.word	0xe000ef34

0800b8e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	607b      	str	r3, [r7, #4]
}
 800b900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b902:	4b10      	ldr	r3, [pc, #64]	@ (800b944 <vPortEnterCritical+0x5c>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	3301      	adds	r3, #1
 800b908:	4a0e      	ldr	r2, [pc, #56]	@ (800b944 <vPortEnterCritical+0x5c>)
 800b90a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b90c:	4b0d      	ldr	r3, [pc, #52]	@ (800b944 <vPortEnterCritical+0x5c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d110      	bne.n	800b936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b914:	4b0c      	ldr	r3, [pc, #48]	@ (800b948 <vPortEnterCritical+0x60>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00b      	beq.n	800b936 <vPortEnterCritical+0x4e>
	__asm volatile
 800b91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	603b      	str	r3, [r7, #0]
}
 800b930:	bf00      	nop
 800b932:	bf00      	nop
 800b934:	e7fd      	b.n	800b932 <vPortEnterCritical+0x4a>
	}
}
 800b936:	bf00      	nop
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	2000002c 	.word	0x2000002c
 800b948:	e000ed04 	.word	0xe000ed04

0800b94c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b952:	4b12      	ldr	r3, [pc, #72]	@ (800b99c <vPortExitCritical+0x50>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10b      	bne.n	800b972 <vPortExitCritical+0x26>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	607b      	str	r3, [r7, #4]
}
 800b96c:	bf00      	nop
 800b96e:	bf00      	nop
 800b970:	e7fd      	b.n	800b96e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b972:	4b0a      	ldr	r3, [pc, #40]	@ (800b99c <vPortExitCritical+0x50>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3b01      	subs	r3, #1
 800b978:	4a08      	ldr	r2, [pc, #32]	@ (800b99c <vPortExitCritical+0x50>)
 800b97a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b97c:	4b07      	ldr	r3, [pc, #28]	@ (800b99c <vPortExitCritical+0x50>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d105      	bne.n	800b990 <vPortExitCritical+0x44>
 800b984:	2300      	movs	r3, #0
 800b986:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	f383 8811 	msr	BASEPRI, r3
}
 800b98e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	2000002c 	.word	0x2000002c

0800b9a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b9a0:	f3ef 8009 	mrs	r0, PSP
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	4b15      	ldr	r3, [pc, #84]	@ (800ba00 <pxCurrentTCBConst>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	f01e 0f10 	tst.w	lr, #16
 800b9b0:	bf08      	it	eq
 800b9b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b9b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ba:	6010      	str	r0, [r2, #0]
 800b9bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b9c4:	f380 8811 	msr	BASEPRI, r0
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f7fe ff9e 	bl	800a910 <vTaskSwitchContext>
 800b9d4:	f04f 0000 	mov.w	r0, #0
 800b9d8:	f380 8811 	msr	BASEPRI, r0
 800b9dc:	bc09      	pop	{r0, r3}
 800b9de:	6819      	ldr	r1, [r3, #0]
 800b9e0:	6808      	ldr	r0, [r1, #0]
 800b9e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e6:	f01e 0f10 	tst.w	lr, #16
 800b9ea:	bf08      	it	eq
 800b9ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9f0:	f380 8809 	msr	PSP, r0
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	f3af 8000 	nop.w

0800ba00 <pxCurrentTCBConst>:
 800ba00:	200009fc 	.word	0x200009fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba04:	bf00      	nop
 800ba06:	bf00      	nop

0800ba08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	607b      	str	r3, [r7, #4]
}
 800ba20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba22:	f7fe febb 	bl	800a79c <xTaskIncrementTick>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d003      	beq.n	800ba34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba2c:	4b06      	ldr	r3, [pc, #24]	@ (800ba48 <xPortSysTickHandler+0x40>)
 800ba2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba32:	601a      	str	r2, [r3, #0]
 800ba34:	2300      	movs	r3, #0
 800ba36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	f383 8811 	msr	BASEPRI, r3
}
 800ba3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba40:	bf00      	nop
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	e000ed04 	.word	0xe000ed04

0800ba4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba50:	4b0b      	ldr	r3, [pc, #44]	@ (800ba80 <vPortSetupTimerInterrupt+0x34>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba56:	4b0b      	ldr	r3, [pc, #44]	@ (800ba84 <vPortSetupTimerInterrupt+0x38>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba88 <vPortSetupTimerInterrupt+0x3c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a0a      	ldr	r2, [pc, #40]	@ (800ba8c <vPortSetupTimerInterrupt+0x40>)
 800ba62:	fba2 2303 	umull	r2, r3, r2, r3
 800ba66:	099b      	lsrs	r3, r3, #6
 800ba68:	4a09      	ldr	r2, [pc, #36]	@ (800ba90 <vPortSetupTimerInterrupt+0x44>)
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba6e:	4b04      	ldr	r3, [pc, #16]	@ (800ba80 <vPortSetupTimerInterrupt+0x34>)
 800ba70:	2207      	movs	r2, #7
 800ba72:	601a      	str	r2, [r3, #0]
}
 800ba74:	bf00      	nop
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	e000e010 	.word	0xe000e010
 800ba84:	e000e018 	.word	0xe000e018
 800ba88:	20000000 	.word	0x20000000
 800ba8c:	10624dd3 	.word	0x10624dd3
 800ba90:	e000e014 	.word	0xe000e014

0800ba94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800baa4 <vPortEnableVFP+0x10>
 800ba98:	6801      	ldr	r1, [r0, #0]
 800ba9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ba9e:	6001      	str	r1, [r0, #0]
 800baa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800baa2:	bf00      	nop
 800baa4:	e000ed88 	.word	0xe000ed88

0800baa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800baae:	f3ef 8305 	mrs	r3, IPSR
 800bab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b0f      	cmp	r3, #15
 800bab8:	d915      	bls.n	800bae6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800baba:	4a18      	ldr	r2, [pc, #96]	@ (800bb1c <vPortValidateInterruptPriority+0x74>)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	4413      	add	r3, r2
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bac4:	4b16      	ldr	r3, [pc, #88]	@ (800bb20 <vPortValidateInterruptPriority+0x78>)
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	7afa      	ldrb	r2, [r7, #11]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d20b      	bcs.n	800bae6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	607b      	str	r3, [r7, #4]
}
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	e7fd      	b.n	800bae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bae6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb24 <vPortValidateInterruptPriority+0x7c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800baee:	4b0e      	ldr	r3, [pc, #56]	@ (800bb28 <vPortValidateInterruptPriority+0x80>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d90b      	bls.n	800bb0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	603b      	str	r3, [r7, #0]
}
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
 800bb0c:	e7fd      	b.n	800bb0a <vPortValidateInterruptPriority+0x62>
	}
 800bb0e:	bf00      	nop
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	e000e3f0 	.word	0xe000e3f0
 800bb20:	20001028 	.word	0x20001028
 800bb24:	e000ed0c 	.word	0xe000ed0c
 800bb28:	2000102c 	.word	0x2000102c

0800bb2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	@ 0x28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb34:	2300      	movs	r3, #0
 800bb36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb38:	f7fe fd74 	bl	800a624 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb3c:	4b5c      	ldr	r3, [pc, #368]	@ (800bcb0 <pvPortMalloc+0x184>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb44:	f000 f924 	bl	800bd90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb48:	4b5a      	ldr	r3, [pc, #360]	@ (800bcb4 <pvPortMalloc+0x188>)
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4013      	ands	r3, r2
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f040 8095 	bne.w	800bc80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d01e      	beq.n	800bb9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bb5c:	2208      	movs	r2, #8
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4413      	add	r3, r2
 800bb62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f003 0307 	and.w	r3, r3, #7
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d015      	beq.n	800bb9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f023 0307 	bic.w	r3, r3, #7
 800bb74:	3308      	adds	r3, #8
 800bb76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f003 0307 	and.w	r3, r3, #7
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00b      	beq.n	800bb9a <pvPortMalloc+0x6e>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	617b      	str	r3, [r7, #20]
}
 800bb94:	bf00      	nop
 800bb96:	bf00      	nop
 800bb98:	e7fd      	b.n	800bb96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d06f      	beq.n	800bc80 <pvPortMalloc+0x154>
 800bba0:	4b45      	ldr	r3, [pc, #276]	@ (800bcb8 <pvPortMalloc+0x18c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d86a      	bhi.n	800bc80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bbaa:	4b44      	ldr	r3, [pc, #272]	@ (800bcbc <pvPortMalloc+0x190>)
 800bbac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bbae:	4b43      	ldr	r3, [pc, #268]	@ (800bcbc <pvPortMalloc+0x190>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbb4:	e004      	b.n	800bbc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d903      	bls.n	800bbd2 <pvPortMalloc+0xa6>
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1f1      	bne.n	800bbb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bbd2:	4b37      	ldr	r3, [pc, #220]	@ (800bcb0 <pvPortMalloc+0x184>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d051      	beq.n	800bc80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bbdc:	6a3b      	ldr	r3, [r7, #32]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2208      	movs	r2, #8
 800bbe2:	4413      	add	r3, r2
 800bbe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	1ad2      	subs	r2, r2, r3
 800bbf6:	2308      	movs	r3, #8
 800bbf8:	005b      	lsls	r3, r3, #1
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d920      	bls.n	800bc40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bbfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4413      	add	r3, r2
 800bc04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	f003 0307 	and.w	r3, r3, #7
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <pvPortMalloc+0xfc>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	613b      	str	r3, [r7, #16]
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	e7fd      	b.n	800bc24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	1ad2      	subs	r2, r2, r3
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc3a:	69b8      	ldr	r0, [r7, #24]
 800bc3c:	f000 f90a 	bl	800be54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc40:	4b1d      	ldr	r3, [pc, #116]	@ (800bcb8 <pvPortMalloc+0x18c>)
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	4a1b      	ldr	r2, [pc, #108]	@ (800bcb8 <pvPortMalloc+0x18c>)
 800bc4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc4e:	4b1a      	ldr	r3, [pc, #104]	@ (800bcb8 <pvPortMalloc+0x18c>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	4b1b      	ldr	r3, [pc, #108]	@ (800bcc0 <pvPortMalloc+0x194>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d203      	bcs.n	800bc62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc5a:	4b17      	ldr	r3, [pc, #92]	@ (800bcb8 <pvPortMalloc+0x18c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a18      	ldr	r2, [pc, #96]	@ (800bcc0 <pvPortMalloc+0x194>)
 800bc60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	4b13      	ldr	r3, [pc, #76]	@ (800bcb4 <pvPortMalloc+0x188>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	431a      	orrs	r2, r3
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc72:	2200      	movs	r2, #0
 800bc74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc76:	4b13      	ldr	r3, [pc, #76]	@ (800bcc4 <pvPortMalloc+0x198>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	4a11      	ldr	r2, [pc, #68]	@ (800bcc4 <pvPortMalloc+0x198>)
 800bc7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc80:	f7fe fcde 	bl	800a640 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	f003 0307 	and.w	r3, r3, #7
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00b      	beq.n	800bca6 <pvPortMalloc+0x17a>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	60fb      	str	r3, [r7, #12]
}
 800bca0:	bf00      	nop
 800bca2:	bf00      	nop
 800bca4:	e7fd      	b.n	800bca2 <pvPortMalloc+0x176>
	return pvReturn;
 800bca6:	69fb      	ldr	r3, [r7, #28]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3728      	adds	r7, #40	@ 0x28
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	20004c38 	.word	0x20004c38
 800bcb4:	20004c4c 	.word	0x20004c4c
 800bcb8:	20004c3c 	.word	0x20004c3c
 800bcbc:	20004c30 	.word	0x20004c30
 800bcc0:	20004c40 	.word	0x20004c40
 800bcc4:	20004c44 	.word	0x20004c44

0800bcc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d04f      	beq.n	800bd7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bcda:	2308      	movs	r3, #8
 800bcdc:	425b      	negs	r3, r3
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	4413      	add	r3, r2
 800bce2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	4b25      	ldr	r3, [pc, #148]	@ (800bd84 <vPortFree+0xbc>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10b      	bne.n	800bd0e <vPortFree+0x46>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	60fb      	str	r3, [r7, #12]
}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop
 800bd0c:	e7fd      	b.n	800bd0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00b      	beq.n	800bd2e <vPortFree+0x66>
	__asm volatile
 800bd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd1a:	f383 8811 	msr	BASEPRI, r3
 800bd1e:	f3bf 8f6f 	isb	sy
 800bd22:	f3bf 8f4f 	dsb	sy
 800bd26:	60bb      	str	r3, [r7, #8]
}
 800bd28:	bf00      	nop
 800bd2a:	bf00      	nop
 800bd2c:	e7fd      	b.n	800bd2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	4b14      	ldr	r3, [pc, #80]	@ (800bd84 <vPortFree+0xbc>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4013      	ands	r3, r2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d01e      	beq.n	800bd7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d11a      	bne.n	800bd7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	4b0e      	ldr	r3, [pc, #56]	@ (800bd84 <vPortFree+0xbc>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	43db      	mvns	r3, r3
 800bd4e:	401a      	ands	r2, r3
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd54:	f7fe fc66 	bl	800a624 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd88 <vPortFree+0xc0>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4413      	add	r3, r2
 800bd62:	4a09      	ldr	r2, [pc, #36]	@ (800bd88 <vPortFree+0xc0>)
 800bd64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd66:	6938      	ldr	r0, [r7, #16]
 800bd68:	f000 f874 	bl	800be54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd6c:	4b07      	ldr	r3, [pc, #28]	@ (800bd8c <vPortFree+0xc4>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3301      	adds	r3, #1
 800bd72:	4a06      	ldr	r2, [pc, #24]	@ (800bd8c <vPortFree+0xc4>)
 800bd74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd76:	f7fe fc63 	bl	800a640 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd7a:	bf00      	nop
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	20004c4c 	.word	0x20004c4c
 800bd88:	20004c3c 	.word	0x20004c3c
 800bd8c:	20004c48 	.word	0x20004c48

0800bd90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bd9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd9c:	4b27      	ldr	r3, [pc, #156]	@ (800be3c <prvHeapInit+0xac>)
 800bd9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f003 0307 	and.w	r3, r3, #7
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00c      	beq.n	800bdc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3307      	adds	r3, #7
 800bdae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f023 0307 	bic.w	r3, r3, #7
 800bdb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	4a1f      	ldr	r2, [pc, #124]	@ (800be3c <prvHeapInit+0xac>)
 800bdc0:	4413      	add	r3, r2
 800bdc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bdc8:	4a1d      	ldr	r2, [pc, #116]	@ (800be40 <prvHeapInit+0xb0>)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bdce:	4b1c      	ldr	r3, [pc, #112]	@ (800be40 <prvHeapInit+0xb0>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	4413      	add	r3, r2
 800bdda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bddc:	2208      	movs	r2, #8
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	1a9b      	subs	r3, r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f023 0307 	bic.w	r3, r3, #7
 800bdea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4a15      	ldr	r2, [pc, #84]	@ (800be44 <prvHeapInit+0xb4>)
 800bdf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bdf2:	4b14      	ldr	r3, [pc, #80]	@ (800be44 <prvHeapInit+0xb4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bdfa:	4b12      	ldr	r3, [pc, #72]	@ (800be44 <prvHeapInit+0xb4>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2200      	movs	r2, #0
 800be00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	1ad2      	subs	r2, r2, r3
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be10:	4b0c      	ldr	r3, [pc, #48]	@ (800be44 <prvHeapInit+0xb4>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	4a0a      	ldr	r2, [pc, #40]	@ (800be48 <prvHeapInit+0xb8>)
 800be1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	4a09      	ldr	r2, [pc, #36]	@ (800be4c <prvHeapInit+0xbc>)
 800be26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be28:	4b09      	ldr	r3, [pc, #36]	@ (800be50 <prvHeapInit+0xc0>)
 800be2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800be2e:	601a      	str	r2, [r3, #0]
}
 800be30:	bf00      	nop
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	20001030 	.word	0x20001030
 800be40:	20004c30 	.word	0x20004c30
 800be44:	20004c38 	.word	0x20004c38
 800be48:	20004c40 	.word	0x20004c40
 800be4c:	20004c3c 	.word	0x20004c3c
 800be50:	20004c4c 	.word	0x20004c4c

0800be54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be5c:	4b28      	ldr	r3, [pc, #160]	@ (800bf00 <prvInsertBlockIntoFreeList+0xac>)
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	e002      	b.n	800be68 <prvInsertBlockIntoFreeList+0x14>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d8f7      	bhi.n	800be62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	4413      	add	r3, r2
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	429a      	cmp	r2, r3
 800be82:	d108      	bne.n	800be96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	441a      	add	r2, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	441a      	add	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d118      	bne.n	800bedc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	4b15      	ldr	r3, [pc, #84]	@ (800bf04 <prvInsertBlockIntoFreeList+0xb0>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d00d      	beq.n	800bed2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	441a      	add	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	601a      	str	r2, [r3, #0]
 800bed0:	e008      	b.n	800bee4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bed2:	4b0c      	ldr	r3, [pc, #48]	@ (800bf04 <prvInsertBlockIntoFreeList+0xb0>)
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	e003      	b.n	800bee4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d002      	beq.n	800bef2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bef2:	bf00      	nop
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	20004c30 	.word	0x20004c30
 800bf04:	20004c38 	.word	0x20004c38

0800bf08 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	490e      	ldr	r1, [pc, #56]	@ (800bf48 <MX_USB_HOST_Init+0x40>)
 800bf10:	480e      	ldr	r0, [pc, #56]	@ (800bf4c <MX_USB_HOST_Init+0x44>)
 800bf12:	f7fb f903 	bl	800711c <USBH_Init>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bf1c:	f7f4 fe9e 	bl	8000c5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bf20:	490b      	ldr	r1, [pc, #44]	@ (800bf50 <MX_USB_HOST_Init+0x48>)
 800bf22:	480a      	ldr	r0, [pc, #40]	@ (800bf4c <MX_USB_HOST_Init+0x44>)
 800bf24:	f7fb f9c9 	bl	80072ba <USBH_RegisterClass>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bf2e:	f7f4 fe95 	bl	8000c5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bf32:	4806      	ldr	r0, [pc, #24]	@ (800bf4c <MX_USB_HOST_Init+0x44>)
 800bf34:	f7fb fa4d 	bl	80073d2 <USBH_Start>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d001      	beq.n	800bf42 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bf3e:	f7f4 fe8d 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bf42:	bf00      	nop
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	0800bf55 	.word	0x0800bf55
 800bf4c:	20004c50 	.word	0x20004c50
 800bf50:	2000000c 	.word	0x2000000c

0800bf54 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bf60:	78fb      	ldrb	r3, [r7, #3]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	d819      	bhi.n	800bf9c <USBH_UserProcess+0x48>
 800bf68:	a201      	add	r2, pc, #4	@ (adr r2, 800bf70 <USBH_UserProcess+0x1c>)
 800bf6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6e:	bf00      	nop
 800bf70:	0800bf9d 	.word	0x0800bf9d
 800bf74:	0800bf8d 	.word	0x0800bf8d
 800bf78:	0800bf9d 	.word	0x0800bf9d
 800bf7c:	0800bf95 	.word	0x0800bf95
 800bf80:	0800bf85 	.word	0x0800bf85
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bf84:	4b09      	ldr	r3, [pc, #36]	@ (800bfac <USBH_UserProcess+0x58>)
 800bf86:	2203      	movs	r2, #3
 800bf88:	701a      	strb	r2, [r3, #0]
  break;
 800bf8a:	e008      	b.n	800bf9e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bf8c:	4b07      	ldr	r3, [pc, #28]	@ (800bfac <USBH_UserProcess+0x58>)
 800bf8e:	2202      	movs	r2, #2
 800bf90:	701a      	strb	r2, [r3, #0]
  break;
 800bf92:	e004      	b.n	800bf9e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bf94:	4b05      	ldr	r3, [pc, #20]	@ (800bfac <USBH_UserProcess+0x58>)
 800bf96:	2201      	movs	r2, #1
 800bf98:	701a      	strb	r2, [r3, #0]
  break;
 800bf9a:	e000      	b.n	800bf9e <USBH_UserProcess+0x4a>

  default:
  break;
 800bf9c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bf9e:	bf00      	nop
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	20005034 	.word	0x20005034

0800bfb0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08a      	sub	sp, #40	@ 0x28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfb8:	f107 0314 	add.w	r3, r7, #20
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	605a      	str	r2, [r3, #4]
 800bfc2:	609a      	str	r2, [r3, #8]
 800bfc4:	60da      	str	r2, [r3, #12]
 800bfc6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfd0:	d147      	bne.n	800c062 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	613b      	str	r3, [r7, #16]
 800bfd6:	4b25      	ldr	r3, [pc, #148]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800bfd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfda:	4a24      	ldr	r2, [pc, #144]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800bfdc:	f043 0301 	orr.w	r3, r3, #1
 800bfe0:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfe2:	4b22      	ldr	r3, [pc, #136]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800bfe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe6:	f003 0301 	and.w	r3, r3, #1
 800bfea:	613b      	str	r3, [r7, #16]
 800bfec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bfee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bff4:	2300      	movs	r3, #0
 800bff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bff8:	2300      	movs	r3, #0
 800bffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bffc:	f107 0314 	add.w	r3, r7, #20
 800c000:	4619      	mov	r1, r3
 800c002:	481b      	ldr	r0, [pc, #108]	@ (800c070 <HAL_HCD_MspInit+0xc0>)
 800c004:	f7f5 fa20 	bl	8001448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c008:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c00c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c00e:	2302      	movs	r3, #2
 800c010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c012:	2300      	movs	r3, #0
 800c014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c016:	2303      	movs	r3, #3
 800c018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c01a:	230a      	movs	r3, #10
 800c01c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c01e:	f107 0314 	add.w	r3, r7, #20
 800c022:	4619      	mov	r1, r3
 800c024:	4812      	ldr	r0, [pc, #72]	@ (800c070 <HAL_HCD_MspInit+0xc0>)
 800c026:	f7f5 fa0f 	bl	8001448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c02a:	4b10      	ldr	r3, [pc, #64]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800c02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c02e:	4a0f      	ldr	r2, [pc, #60]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800c030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c034:	6353      	str	r3, [r2, #52]	@ 0x34
 800c036:	2300      	movs	r3, #0
 800c038:	60fb      	str	r3, [r7, #12]
 800c03a:	4b0c      	ldr	r3, [pc, #48]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800c03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c03e:	4a0b      	ldr	r2, [pc, #44]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800c040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c044:	6453      	str	r3, [r2, #68]	@ 0x44
 800c046:	4b09      	ldr	r3, [pc, #36]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800c048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c04a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c04e:	60fb      	str	r3, [r7, #12]
 800c050:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c052:	2200      	movs	r2, #0
 800c054:	2105      	movs	r1, #5
 800c056:	2043      	movs	r0, #67	@ 0x43
 800c058:	f7f5 f9cc 	bl	80013f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c05c:	2043      	movs	r0, #67	@ 0x43
 800c05e:	f7f5 f9e5 	bl	800142c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c062:	bf00      	nop
 800c064:	3728      	adds	r7, #40	@ 0x28
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	40023800 	.word	0x40023800
 800c070:	40020000 	.word	0x40020000

0800c074 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c082:	4618      	mov	r0, r3
 800c084:	f7fb fe57 	bl	8007d36 <USBH_LL_IncTimer>
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fb fe9b 	bl	8007dda <USBH_LL_Connect>
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fb feb0 	bl	8007e20 <USBH_LL_Disconnect>
}
 800c0c0:	bf00      	nop
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fb fee7 	bl	8007eb2 <USBH_LL_NotifyURBChange>
#endif
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fb fe45 	bl	8007d8a <USBH_LL_PortEnabled>
}
 800c100:	bf00      	nop
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c116:	4618      	mov	r0, r3
 800c118:	f7fb fe51 	bl	8007dbe <USBH_LL_PortDisabled>
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c132:	2b01      	cmp	r3, #1
 800c134:	d12a      	bne.n	800c18c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c136:	4a18      	ldr	r2, [pc, #96]	@ (800c198 <USBH_LL_Init+0x74>)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a15      	ldr	r2, [pc, #84]	@ (800c198 <USBH_LL_Init+0x74>)
 800c142:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c146:	4b14      	ldr	r3, [pc, #80]	@ (800c198 <USBH_LL_Init+0x74>)
 800c148:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c14c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c14e:	4b12      	ldr	r3, [pc, #72]	@ (800c198 <USBH_LL_Init+0x74>)
 800c150:	2208      	movs	r2, #8
 800c152:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c154:	4b10      	ldr	r3, [pc, #64]	@ (800c198 <USBH_LL_Init+0x74>)
 800c156:	2201      	movs	r2, #1
 800c158:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c15a:	4b0f      	ldr	r3, [pc, #60]	@ (800c198 <USBH_LL_Init+0x74>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c160:	4b0d      	ldr	r3, [pc, #52]	@ (800c198 <USBH_LL_Init+0x74>)
 800c162:	2202      	movs	r2, #2
 800c164:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c166:	4b0c      	ldr	r3, [pc, #48]	@ (800c198 <USBH_LL_Init+0x74>)
 800c168:	2200      	movs	r2, #0
 800c16a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c16c:	480a      	ldr	r0, [pc, #40]	@ (800c198 <USBH_LL_Init+0x74>)
 800c16e:	f7f5 fb22 	bl	80017b6 <HAL_HCD_Init>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c178:	f7f4 fd70 	bl	8000c5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c17c:	4806      	ldr	r0, [pc, #24]	@ (800c198 <USBH_LL_Init+0x74>)
 800c17e:	f7f5 ff83 	bl	8002088 <HAL_HCD_GetCurrentFrame>
 800c182:	4603      	mov	r3, r0
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7fb fdc6 	bl	8007d18 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20005038 	.word	0x20005038

0800c19c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7f5 fef0 	bl	8001f98 <HAL_HCD_Start>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 f95e 	bl	800c480 <USBH_Get_USB_Status>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7f5 fef8 	bl	8001fde <HAL_HCD_Stop>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 f943 	bl	800c480 <USBH_Get_USB_Status>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c210:	2301      	movs	r3, #1
 800c212:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7f5 ff42 	bl	80020a4 <HAL_HCD_GetCurrentSpeed>
 800c220:	4603      	mov	r3, r0
 800c222:	2b02      	cmp	r3, #2
 800c224:	d00c      	beq.n	800c240 <USBH_LL_GetSpeed+0x38>
 800c226:	2b02      	cmp	r3, #2
 800c228:	d80d      	bhi.n	800c246 <USBH_LL_GetSpeed+0x3e>
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <USBH_LL_GetSpeed+0x2c>
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d003      	beq.n	800c23a <USBH_LL_GetSpeed+0x32>
 800c232:	e008      	b.n	800c246 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
    break;
 800c238:	e008      	b.n	800c24c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c23a:	2301      	movs	r3, #1
 800c23c:	73fb      	strb	r3, [r7, #15]
    break;
 800c23e:	e005      	b.n	800c24c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c240:	2302      	movs	r3, #2
 800c242:	73fb      	strb	r3, [r7, #15]
    break;
 800c244:	e002      	b.n	800c24c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c246:	2301      	movs	r3, #1
 800c248:	73fb      	strb	r3, [r7, #15]
    break;
 800c24a:	bf00      	nop
  }
  return  speed;
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7f5 fed3 	bl	8002018 <HAL_HCD_ResetPort>
 800c272:	4603      	mov	r3, r0
 800c274:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 f901 	bl	800c480 <USBH_Get_USB_Status>
 800c27e:	4603      	mov	r3, r0
 800c280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c282:	7bbb      	ldrb	r3, [r7, #14]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c29e:	78fa      	ldrb	r2, [r7, #3]
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7f5 fedb 	bl	800205e <HAL_HCD_HC_GetXferCount>
 800c2a8:	4603      	mov	r3, r0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c2b2:	b590      	push	{r4, r7, lr}
 800c2b4:	b089      	sub	sp, #36	@ 0x24
 800c2b6:	af04      	add	r7, sp, #16
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	4608      	mov	r0, r1
 800c2bc:	4611      	mov	r1, r2
 800c2be:	461a      	mov	r2, r3
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	70fb      	strb	r3, [r7, #3]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	70bb      	strb	r3, [r7, #2]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c2da:	787c      	ldrb	r4, [r7, #1]
 800c2dc:	78ba      	ldrb	r2, [r7, #2]
 800c2de:	78f9      	ldrb	r1, [r7, #3]
 800c2e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c2e2:	9302      	str	r3, [sp, #8]
 800c2e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	4623      	mov	r3, r4
 800c2f2:	f7f5 fac7 	bl	8001884 <HAL_HCD_HC_Init>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 f8bf 	bl	800c480 <USBH_Get_USB_Status>
 800c302:	4603      	mov	r3, r0
 800c304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c306:	7bbb      	ldrb	r3, [r7, #14]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd90      	pop	{r4, r7, pc}

0800c310 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c32a:	78fa      	ldrb	r2, [r7, #3]
 800c32c:	4611      	mov	r1, r2
 800c32e:	4618      	mov	r0, r3
 800c330:	f7f5 fb60 	bl	80019f4 <HAL_HCD_HC_Halt>
 800c334:	4603      	mov	r3, r0
 800c336:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 f8a0 	bl	800c480 <USBH_Get_USB_Status>
 800c340:	4603      	mov	r3, r0
 800c342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c344:	7bbb      	ldrb	r3, [r7, #14]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c34e:	b590      	push	{r4, r7, lr}
 800c350:	b089      	sub	sp, #36	@ 0x24
 800c352:	af04      	add	r7, sp, #16
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	4608      	mov	r0, r1
 800c358:	4611      	mov	r1, r2
 800c35a:	461a      	mov	r2, r3
 800c35c:	4603      	mov	r3, r0
 800c35e:	70fb      	strb	r3, [r7, #3]
 800c360:	460b      	mov	r3, r1
 800c362:	70bb      	strb	r3, [r7, #2]
 800c364:	4613      	mov	r3, r2
 800c366:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c376:	787c      	ldrb	r4, [r7, #1]
 800c378:	78ba      	ldrb	r2, [r7, #2]
 800c37a:	78f9      	ldrb	r1, [r7, #3]
 800c37c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c380:	9303      	str	r3, [sp, #12]
 800c382:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c384:	9302      	str	r3, [sp, #8]
 800c386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c388:	9301      	str	r3, [sp, #4]
 800c38a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	4623      	mov	r3, r4
 800c392:	f7f5 fb53 	bl	8001a3c <HAL_HCD_HC_SubmitRequest>
 800c396:	4603      	mov	r3, r0
 800c398:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 f86f 	bl	800c480 <USBH_Get_USB_Status>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd90      	pop	{r4, r7, pc}

0800c3b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c3c2:	78fa      	ldrb	r2, [r7, #3]
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f5 fe34 	bl	8002034 <HAL_HCD_HC_GetURBState>
 800c3cc:	4603      	mov	r3, r0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b082      	sub	sp, #8
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	460b      	mov	r3, r1
 800c3e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d103      	bne.n	800c3f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c3ec:	78fb      	ldrb	r3, [r7, #3]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 f872 	bl	800c4d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c3f4:	20c8      	movs	r0, #200	@ 0xc8
 800c3f6:	f7f4 ff21 	bl	800123c <HAL_Delay>
  return USBH_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	70fb      	strb	r3, [r7, #3]
 800c410:	4613      	mov	r3, r2
 800c412:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c41a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c41c:	78fa      	ldrb	r2, [r7, #3]
 800c41e:	68f9      	ldr	r1, [r7, #12]
 800c420:	4613      	mov	r3, r2
 800c422:	011b      	lsls	r3, r3, #4
 800c424:	1a9b      	subs	r3, r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	440b      	add	r3, r1
 800c42a:	3317      	adds	r3, #23
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00a      	beq.n	800c448 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c432:	78fa      	ldrb	r2, [r7, #3]
 800c434:	68f9      	ldr	r1, [r7, #12]
 800c436:	4613      	mov	r3, r2
 800c438:	011b      	lsls	r3, r3, #4
 800c43a:	1a9b      	subs	r3, r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	440b      	add	r3, r1
 800c440:	333c      	adds	r3, #60	@ 0x3c
 800c442:	78ba      	ldrb	r2, [r7, #2]
 800c444:	701a      	strb	r2, [r3, #0]
 800c446:	e009      	b.n	800c45c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c448:	78fa      	ldrb	r2, [r7, #3]
 800c44a:	68f9      	ldr	r1, [r7, #12]
 800c44c:	4613      	mov	r3, r2
 800c44e:	011b      	lsls	r3, r3, #4
 800c450:	1a9b      	subs	r3, r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	440b      	add	r3, r1
 800c456:	333d      	adds	r3, #61	@ 0x3d
 800c458:	78ba      	ldrb	r2, [r7, #2]
 800c45a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b082      	sub	sp, #8
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7f4 fee2 	bl	800123c <HAL_Delay>
}
 800c478:	bf00      	nop
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c48e:	79fb      	ldrb	r3, [r7, #7]
 800c490:	2b03      	cmp	r3, #3
 800c492:	d817      	bhi.n	800c4c4 <USBH_Get_USB_Status+0x44>
 800c494:	a201      	add	r2, pc, #4	@ (adr r2, 800c49c <USBH_Get_USB_Status+0x1c>)
 800c496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49a:	bf00      	nop
 800c49c:	0800c4ad 	.word	0x0800c4ad
 800c4a0:	0800c4b3 	.word	0x0800c4b3
 800c4a4:	0800c4b9 	.word	0x0800c4b9
 800c4a8:	0800c4bf 	.word	0x0800c4bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b0:	e00b      	b.n	800c4ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b6:	e008      	b.n	800c4ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c4bc:	e005      	b.n	800c4ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c4be:	2302      	movs	r3, #2
 800c4c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c2:	e002      	b.n	800c4ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c8:	bf00      	nop
  }
  return usb_status;
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c4e6:	79fb      	ldrb	r3, [r7, #7]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d102      	bne.n	800c4f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	73fb      	strb	r3, [r7, #15]
 800c4f0:	e001      	b.n	800c4f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	4803      	ldr	r0, [pc, #12]	@ (800c50c <MX_DriverVbusFS+0x34>)
 800c4fe:	f7f5 f927 	bl	8001750 <HAL_GPIO_WritePin>
}
 800c502:	bf00      	nop
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	40020800 	.word	0x40020800

0800c510 <malloc>:
 800c510:	4b02      	ldr	r3, [pc, #8]	@ (800c51c <malloc+0xc>)
 800c512:	4601      	mov	r1, r0
 800c514:	6818      	ldr	r0, [r3, #0]
 800c516:	f000 b82d 	b.w	800c574 <_malloc_r>
 800c51a:	bf00      	nop
 800c51c:	20000030 	.word	0x20000030

0800c520 <free>:
 800c520:	4b02      	ldr	r3, [pc, #8]	@ (800c52c <free+0xc>)
 800c522:	4601      	mov	r1, r0
 800c524:	6818      	ldr	r0, [r3, #0]
 800c526:	f000 b959 	b.w	800c7dc <_free_r>
 800c52a:	bf00      	nop
 800c52c:	20000030 	.word	0x20000030

0800c530 <sbrk_aligned>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	4e0f      	ldr	r6, [pc, #60]	@ (800c570 <sbrk_aligned+0x40>)
 800c534:	460c      	mov	r4, r1
 800c536:	6831      	ldr	r1, [r6, #0]
 800c538:	4605      	mov	r5, r0
 800c53a:	b911      	cbnz	r1, 800c542 <sbrk_aligned+0x12>
 800c53c:	f000 f904 	bl	800c748 <_sbrk_r>
 800c540:	6030      	str	r0, [r6, #0]
 800c542:	4621      	mov	r1, r4
 800c544:	4628      	mov	r0, r5
 800c546:	f000 f8ff 	bl	800c748 <_sbrk_r>
 800c54a:	1c43      	adds	r3, r0, #1
 800c54c:	d103      	bne.n	800c556 <sbrk_aligned+0x26>
 800c54e:	f04f 34ff 	mov.w	r4, #4294967295
 800c552:	4620      	mov	r0, r4
 800c554:	bd70      	pop	{r4, r5, r6, pc}
 800c556:	1cc4      	adds	r4, r0, #3
 800c558:	f024 0403 	bic.w	r4, r4, #3
 800c55c:	42a0      	cmp	r0, r4
 800c55e:	d0f8      	beq.n	800c552 <sbrk_aligned+0x22>
 800c560:	1a21      	subs	r1, r4, r0
 800c562:	4628      	mov	r0, r5
 800c564:	f000 f8f0 	bl	800c748 <_sbrk_r>
 800c568:	3001      	adds	r0, #1
 800c56a:	d1f2      	bne.n	800c552 <sbrk_aligned+0x22>
 800c56c:	e7ef      	b.n	800c54e <sbrk_aligned+0x1e>
 800c56e:	bf00      	nop
 800c570:	20005418 	.word	0x20005418

0800c574 <_malloc_r>:
 800c574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c578:	1ccd      	adds	r5, r1, #3
 800c57a:	f025 0503 	bic.w	r5, r5, #3
 800c57e:	3508      	adds	r5, #8
 800c580:	2d0c      	cmp	r5, #12
 800c582:	bf38      	it	cc
 800c584:	250c      	movcc	r5, #12
 800c586:	2d00      	cmp	r5, #0
 800c588:	4606      	mov	r6, r0
 800c58a:	db01      	blt.n	800c590 <_malloc_r+0x1c>
 800c58c:	42a9      	cmp	r1, r5
 800c58e:	d904      	bls.n	800c59a <_malloc_r+0x26>
 800c590:	230c      	movs	r3, #12
 800c592:	6033      	str	r3, [r6, #0]
 800c594:	2000      	movs	r0, #0
 800c596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c59a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c670 <_malloc_r+0xfc>
 800c59e:	f000 f869 	bl	800c674 <__malloc_lock>
 800c5a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c5a6:	461c      	mov	r4, r3
 800c5a8:	bb44      	cbnz	r4, 800c5fc <_malloc_r+0x88>
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f7ff ffbf 	bl	800c530 <sbrk_aligned>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	d158      	bne.n	800c66a <_malloc_r+0xf6>
 800c5b8:	f8d8 4000 	ldr.w	r4, [r8]
 800c5bc:	4627      	mov	r7, r4
 800c5be:	2f00      	cmp	r7, #0
 800c5c0:	d143      	bne.n	800c64a <_malloc_r+0xd6>
 800c5c2:	2c00      	cmp	r4, #0
 800c5c4:	d04b      	beq.n	800c65e <_malloc_r+0xea>
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	eb04 0903 	add.w	r9, r4, r3
 800c5d0:	f000 f8ba 	bl	800c748 <_sbrk_r>
 800c5d4:	4581      	cmp	r9, r0
 800c5d6:	d142      	bne.n	800c65e <_malloc_r+0xea>
 800c5d8:	6821      	ldr	r1, [r4, #0]
 800c5da:	1a6d      	subs	r5, r5, r1
 800c5dc:	4629      	mov	r1, r5
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7ff ffa6 	bl	800c530 <sbrk_aligned>
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	d03a      	beq.n	800c65e <_malloc_r+0xea>
 800c5e8:	6823      	ldr	r3, [r4, #0]
 800c5ea:	442b      	add	r3, r5
 800c5ec:	6023      	str	r3, [r4, #0]
 800c5ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	bb62      	cbnz	r2, 800c650 <_malloc_r+0xdc>
 800c5f6:	f8c8 7000 	str.w	r7, [r8]
 800c5fa:	e00f      	b.n	800c61c <_malloc_r+0xa8>
 800c5fc:	6822      	ldr	r2, [r4, #0]
 800c5fe:	1b52      	subs	r2, r2, r5
 800c600:	d420      	bmi.n	800c644 <_malloc_r+0xd0>
 800c602:	2a0b      	cmp	r2, #11
 800c604:	d917      	bls.n	800c636 <_malloc_r+0xc2>
 800c606:	1961      	adds	r1, r4, r5
 800c608:	42a3      	cmp	r3, r4
 800c60a:	6025      	str	r5, [r4, #0]
 800c60c:	bf18      	it	ne
 800c60e:	6059      	strne	r1, [r3, #4]
 800c610:	6863      	ldr	r3, [r4, #4]
 800c612:	bf08      	it	eq
 800c614:	f8c8 1000 	streq.w	r1, [r8]
 800c618:	5162      	str	r2, [r4, r5]
 800c61a:	604b      	str	r3, [r1, #4]
 800c61c:	4630      	mov	r0, r6
 800c61e:	f000 f82f 	bl	800c680 <__malloc_unlock>
 800c622:	f104 000b 	add.w	r0, r4, #11
 800c626:	1d23      	adds	r3, r4, #4
 800c628:	f020 0007 	bic.w	r0, r0, #7
 800c62c:	1ac2      	subs	r2, r0, r3
 800c62e:	bf1c      	itt	ne
 800c630:	1a1b      	subne	r3, r3, r0
 800c632:	50a3      	strne	r3, [r4, r2]
 800c634:	e7af      	b.n	800c596 <_malloc_r+0x22>
 800c636:	6862      	ldr	r2, [r4, #4]
 800c638:	42a3      	cmp	r3, r4
 800c63a:	bf0c      	ite	eq
 800c63c:	f8c8 2000 	streq.w	r2, [r8]
 800c640:	605a      	strne	r2, [r3, #4]
 800c642:	e7eb      	b.n	800c61c <_malloc_r+0xa8>
 800c644:	4623      	mov	r3, r4
 800c646:	6864      	ldr	r4, [r4, #4]
 800c648:	e7ae      	b.n	800c5a8 <_malloc_r+0x34>
 800c64a:	463c      	mov	r4, r7
 800c64c:	687f      	ldr	r7, [r7, #4]
 800c64e:	e7b6      	b.n	800c5be <_malloc_r+0x4a>
 800c650:	461a      	mov	r2, r3
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	42a3      	cmp	r3, r4
 800c656:	d1fb      	bne.n	800c650 <_malloc_r+0xdc>
 800c658:	2300      	movs	r3, #0
 800c65a:	6053      	str	r3, [r2, #4]
 800c65c:	e7de      	b.n	800c61c <_malloc_r+0xa8>
 800c65e:	230c      	movs	r3, #12
 800c660:	6033      	str	r3, [r6, #0]
 800c662:	4630      	mov	r0, r6
 800c664:	f000 f80c 	bl	800c680 <__malloc_unlock>
 800c668:	e794      	b.n	800c594 <_malloc_r+0x20>
 800c66a:	6005      	str	r5, [r0, #0]
 800c66c:	e7d6      	b.n	800c61c <_malloc_r+0xa8>
 800c66e:	bf00      	nop
 800c670:	2000541c 	.word	0x2000541c

0800c674 <__malloc_lock>:
 800c674:	4801      	ldr	r0, [pc, #4]	@ (800c67c <__malloc_lock+0x8>)
 800c676:	f000 b8a1 	b.w	800c7bc <__retarget_lock_acquire_recursive>
 800c67a:	bf00      	nop
 800c67c:	2000555c 	.word	0x2000555c

0800c680 <__malloc_unlock>:
 800c680:	4801      	ldr	r0, [pc, #4]	@ (800c688 <__malloc_unlock+0x8>)
 800c682:	f000 b89c 	b.w	800c7be <__retarget_lock_release_recursive>
 800c686:	bf00      	nop
 800c688:	2000555c 	.word	0x2000555c

0800c68c <memset>:
 800c68c:	4402      	add	r2, r0
 800c68e:	4603      	mov	r3, r0
 800c690:	4293      	cmp	r3, r2
 800c692:	d100      	bne.n	800c696 <memset+0xa>
 800c694:	4770      	bx	lr
 800c696:	f803 1b01 	strb.w	r1, [r3], #1
 800c69a:	e7f9      	b.n	800c690 <memset+0x4>

0800c69c <_reclaim_reent>:
 800c69c:	4b29      	ldr	r3, [pc, #164]	@ (800c744 <_reclaim_reent+0xa8>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4283      	cmp	r3, r0
 800c6a2:	b570      	push	{r4, r5, r6, lr}
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	d04b      	beq.n	800c740 <_reclaim_reent+0xa4>
 800c6a8:	69c3      	ldr	r3, [r0, #28]
 800c6aa:	b1ab      	cbz	r3, 800c6d8 <_reclaim_reent+0x3c>
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	b16b      	cbz	r3, 800c6cc <_reclaim_reent+0x30>
 800c6b0:	2500      	movs	r5, #0
 800c6b2:	69e3      	ldr	r3, [r4, #28]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	5959      	ldr	r1, [r3, r5]
 800c6b8:	2900      	cmp	r1, #0
 800c6ba:	d13b      	bne.n	800c734 <_reclaim_reent+0x98>
 800c6bc:	3504      	adds	r5, #4
 800c6be:	2d80      	cmp	r5, #128	@ 0x80
 800c6c0:	d1f7      	bne.n	800c6b2 <_reclaim_reent+0x16>
 800c6c2:	69e3      	ldr	r3, [r4, #28]
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	68d9      	ldr	r1, [r3, #12]
 800c6c8:	f000 f888 	bl	800c7dc <_free_r>
 800c6cc:	69e3      	ldr	r3, [r4, #28]
 800c6ce:	6819      	ldr	r1, [r3, #0]
 800c6d0:	b111      	cbz	r1, 800c6d8 <_reclaim_reent+0x3c>
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f000 f882 	bl	800c7dc <_free_r>
 800c6d8:	6961      	ldr	r1, [r4, #20]
 800c6da:	b111      	cbz	r1, 800c6e2 <_reclaim_reent+0x46>
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f000 f87d 	bl	800c7dc <_free_r>
 800c6e2:	69e1      	ldr	r1, [r4, #28]
 800c6e4:	b111      	cbz	r1, 800c6ec <_reclaim_reent+0x50>
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 f878 	bl	800c7dc <_free_r>
 800c6ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c6ee:	b111      	cbz	r1, 800c6f6 <_reclaim_reent+0x5a>
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f000 f873 	bl	800c7dc <_free_r>
 800c6f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6f8:	b111      	cbz	r1, 800c700 <_reclaim_reent+0x64>
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 f86e 	bl	800c7dc <_free_r>
 800c700:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c702:	b111      	cbz	r1, 800c70a <_reclaim_reent+0x6e>
 800c704:	4620      	mov	r0, r4
 800c706:	f000 f869 	bl	800c7dc <_free_r>
 800c70a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c70c:	b111      	cbz	r1, 800c714 <_reclaim_reent+0x78>
 800c70e:	4620      	mov	r0, r4
 800c710:	f000 f864 	bl	800c7dc <_free_r>
 800c714:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c716:	b111      	cbz	r1, 800c71e <_reclaim_reent+0x82>
 800c718:	4620      	mov	r0, r4
 800c71a:	f000 f85f 	bl	800c7dc <_free_r>
 800c71e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c720:	b111      	cbz	r1, 800c728 <_reclaim_reent+0x8c>
 800c722:	4620      	mov	r0, r4
 800c724:	f000 f85a 	bl	800c7dc <_free_r>
 800c728:	6a23      	ldr	r3, [r4, #32]
 800c72a:	b14b      	cbz	r3, 800c740 <_reclaim_reent+0xa4>
 800c72c:	4620      	mov	r0, r4
 800c72e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c732:	4718      	bx	r3
 800c734:	680e      	ldr	r6, [r1, #0]
 800c736:	4620      	mov	r0, r4
 800c738:	f000 f850 	bl	800c7dc <_free_r>
 800c73c:	4631      	mov	r1, r6
 800c73e:	e7bb      	b.n	800c6b8 <_reclaim_reent+0x1c>
 800c740:	bd70      	pop	{r4, r5, r6, pc}
 800c742:	bf00      	nop
 800c744:	20000030 	.word	0x20000030

0800c748 <_sbrk_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4d06      	ldr	r5, [pc, #24]	@ (800c764 <_sbrk_r+0x1c>)
 800c74c:	2300      	movs	r3, #0
 800c74e:	4604      	mov	r4, r0
 800c750:	4608      	mov	r0, r1
 800c752:	602b      	str	r3, [r5, #0]
 800c754:	f7f4 fcbe 	bl	80010d4 <_sbrk>
 800c758:	1c43      	adds	r3, r0, #1
 800c75a:	d102      	bne.n	800c762 <_sbrk_r+0x1a>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	b103      	cbz	r3, 800c762 <_sbrk_r+0x1a>
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	bd38      	pop	{r3, r4, r5, pc}
 800c764:	20005558 	.word	0x20005558

0800c768 <__errno>:
 800c768:	4b01      	ldr	r3, [pc, #4]	@ (800c770 <__errno+0x8>)
 800c76a:	6818      	ldr	r0, [r3, #0]
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	20000030 	.word	0x20000030

0800c774 <__libc_init_array>:
 800c774:	b570      	push	{r4, r5, r6, lr}
 800c776:	4d0d      	ldr	r5, [pc, #52]	@ (800c7ac <__libc_init_array+0x38>)
 800c778:	4c0d      	ldr	r4, [pc, #52]	@ (800c7b0 <__libc_init_array+0x3c>)
 800c77a:	1b64      	subs	r4, r4, r5
 800c77c:	10a4      	asrs	r4, r4, #2
 800c77e:	2600      	movs	r6, #0
 800c780:	42a6      	cmp	r6, r4
 800c782:	d109      	bne.n	800c798 <__libc_init_array+0x24>
 800c784:	4d0b      	ldr	r5, [pc, #44]	@ (800c7b4 <__libc_init_array+0x40>)
 800c786:	4c0c      	ldr	r4, [pc, #48]	@ (800c7b8 <__libc_init_array+0x44>)
 800c788:	f000 f872 	bl	800c870 <_init>
 800c78c:	1b64      	subs	r4, r4, r5
 800c78e:	10a4      	asrs	r4, r4, #2
 800c790:	2600      	movs	r6, #0
 800c792:	42a6      	cmp	r6, r4
 800c794:	d105      	bne.n	800c7a2 <__libc_init_array+0x2e>
 800c796:	bd70      	pop	{r4, r5, r6, pc}
 800c798:	f855 3b04 	ldr.w	r3, [r5], #4
 800c79c:	4798      	blx	r3
 800c79e:	3601      	adds	r6, #1
 800c7a0:	e7ee      	b.n	800c780 <__libc_init_array+0xc>
 800c7a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7a6:	4798      	blx	r3
 800c7a8:	3601      	adds	r6, #1
 800c7aa:	e7f2      	b.n	800c792 <__libc_init_array+0x1e>
 800c7ac:	0800c934 	.word	0x0800c934
 800c7b0:	0800c934 	.word	0x0800c934
 800c7b4:	0800c934 	.word	0x0800c934
 800c7b8:	0800c938 	.word	0x0800c938

0800c7bc <__retarget_lock_acquire_recursive>:
 800c7bc:	4770      	bx	lr

0800c7be <__retarget_lock_release_recursive>:
 800c7be:	4770      	bx	lr

0800c7c0 <memcpy>:
 800c7c0:	440a      	add	r2, r1
 800c7c2:	4291      	cmp	r1, r2
 800c7c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7c8:	d100      	bne.n	800c7cc <memcpy+0xc>
 800c7ca:	4770      	bx	lr
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7d6:	4291      	cmp	r1, r2
 800c7d8:	d1f9      	bne.n	800c7ce <memcpy+0xe>
 800c7da:	bd10      	pop	{r4, pc}

0800c7dc <_free_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4605      	mov	r5, r0
 800c7e0:	2900      	cmp	r1, #0
 800c7e2:	d041      	beq.n	800c868 <_free_r+0x8c>
 800c7e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7e8:	1f0c      	subs	r4, r1, #4
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	bfb8      	it	lt
 800c7ee:	18e4      	addlt	r4, r4, r3
 800c7f0:	f7ff ff40 	bl	800c674 <__malloc_lock>
 800c7f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c86c <_free_r+0x90>)
 800c7f6:	6813      	ldr	r3, [r2, #0]
 800c7f8:	b933      	cbnz	r3, 800c808 <_free_r+0x2c>
 800c7fa:	6063      	str	r3, [r4, #4]
 800c7fc:	6014      	str	r4, [r2, #0]
 800c7fe:	4628      	mov	r0, r5
 800c800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c804:	f7ff bf3c 	b.w	800c680 <__malloc_unlock>
 800c808:	42a3      	cmp	r3, r4
 800c80a:	d908      	bls.n	800c81e <_free_r+0x42>
 800c80c:	6820      	ldr	r0, [r4, #0]
 800c80e:	1821      	adds	r1, r4, r0
 800c810:	428b      	cmp	r3, r1
 800c812:	bf01      	itttt	eq
 800c814:	6819      	ldreq	r1, [r3, #0]
 800c816:	685b      	ldreq	r3, [r3, #4]
 800c818:	1809      	addeq	r1, r1, r0
 800c81a:	6021      	streq	r1, [r4, #0]
 800c81c:	e7ed      	b.n	800c7fa <_free_r+0x1e>
 800c81e:	461a      	mov	r2, r3
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	b10b      	cbz	r3, 800c828 <_free_r+0x4c>
 800c824:	42a3      	cmp	r3, r4
 800c826:	d9fa      	bls.n	800c81e <_free_r+0x42>
 800c828:	6811      	ldr	r1, [r2, #0]
 800c82a:	1850      	adds	r0, r2, r1
 800c82c:	42a0      	cmp	r0, r4
 800c82e:	d10b      	bne.n	800c848 <_free_r+0x6c>
 800c830:	6820      	ldr	r0, [r4, #0]
 800c832:	4401      	add	r1, r0
 800c834:	1850      	adds	r0, r2, r1
 800c836:	4283      	cmp	r3, r0
 800c838:	6011      	str	r1, [r2, #0]
 800c83a:	d1e0      	bne.n	800c7fe <_free_r+0x22>
 800c83c:	6818      	ldr	r0, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	6053      	str	r3, [r2, #4]
 800c842:	4408      	add	r0, r1
 800c844:	6010      	str	r0, [r2, #0]
 800c846:	e7da      	b.n	800c7fe <_free_r+0x22>
 800c848:	d902      	bls.n	800c850 <_free_r+0x74>
 800c84a:	230c      	movs	r3, #12
 800c84c:	602b      	str	r3, [r5, #0]
 800c84e:	e7d6      	b.n	800c7fe <_free_r+0x22>
 800c850:	6820      	ldr	r0, [r4, #0]
 800c852:	1821      	adds	r1, r4, r0
 800c854:	428b      	cmp	r3, r1
 800c856:	bf04      	itt	eq
 800c858:	6819      	ldreq	r1, [r3, #0]
 800c85a:	685b      	ldreq	r3, [r3, #4]
 800c85c:	6063      	str	r3, [r4, #4]
 800c85e:	bf04      	itt	eq
 800c860:	1809      	addeq	r1, r1, r0
 800c862:	6021      	streq	r1, [r4, #0]
 800c864:	6054      	str	r4, [r2, #4]
 800c866:	e7ca      	b.n	800c7fe <_free_r+0x22>
 800c868:	bd38      	pop	{r3, r4, r5, pc}
 800c86a:	bf00      	nop
 800c86c:	2000541c 	.word	0x2000541c

0800c870 <_init>:
 800c870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c872:	bf00      	nop
 800c874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c876:	bc08      	pop	{r3}
 800c878:	469e      	mov	lr, r3
 800c87a:	4770      	bx	lr

0800c87c <_fini>:
 800c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87e:	bf00      	nop
 800c880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c882:	bc08      	pop	{r3}
 800c884:	469e      	mov	lr, r3
 800c886:	4770      	bx	lr
