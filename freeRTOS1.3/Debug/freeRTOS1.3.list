
freeRTOS1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800cbc8  0800cbc8  0000dbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc80  0800cc80  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc80  0800cc80  0000dc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc88  0800cc88  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc88  0800cc88  0000dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc8c  0800cc8c  0000dc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800cc90  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054e8  20000080  0800cd10  0000e080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005568  0800cd10  0000e568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025962  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005758  00000000  00000000  00033a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  00039170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017fd  00000000  00000000  0003b080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e0f  00000000  00000000  0003c87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000271dd  00000000  00000000  0004368c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1dba  00000000  00000000  0006a869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000870c  00000000  00000000  0010c668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a6  00000000  00000000  00114d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cbb0 	.word	0x0800cbb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800cbb0 	.word	0x0800cbb0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <LEDTask>:
const uint8_t ucLedState = 1;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LEDTask(void *pvParameters) {  // green LED
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	uint32_t recievedCommand = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
	xLedTaskHandle = xTaskGetCurrentTaskHandle();
 80004dc:	f00a fd08 	bl	800aef0 <xTaskGetCurrentTaskHandle>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000518 <LEDTask+0x48>)
 80004e4:	6013      	str	r3, [r2, #0]
//    uint32_t ulNotificationValue;
	for (;;) {

		xTaskNotifyWait(0, 0x00, &recievedCommand, portMAX_DELAY); //Waits untill a task is called
 80004e6:	f107 020c 	add.w	r2, r7, #12
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f00a fd9b 	bl	800b02c <xTaskNotifyWait>

		if (recievedCommand == 1) {
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d106      	bne.n	800050a <LEDTask+0x3a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000502:	4806      	ldr	r0, [pc, #24]	@ (800051c <LEDTask+0x4c>)
 8000504:	f001 f996 	bl	8001834 <HAL_GPIO_WritePin>
 8000508:	e7ed      	b.n	80004e6 <LEDTask+0x16>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000510:	4802      	ldr	r0, [pc, #8]	@ (800051c <LEDTask+0x4c>)
 8000512:	f001 f98f 	bl	8001834 <HAL_GPIO_WritePin>
		xTaskNotifyWait(0, 0x00, &recievedCommand, portMAX_DELAY); //Waits untill a task is called
 8000516:	e7e6      	b.n	80004e6 <LEDTask+0x16>
 8000518:	200001f4 	.word	0x200001f4
 800051c:	40020c00 	.word	0x40020c00

08000520 <usbRecieveData>:
		}
	}
}
static int usbCommand = 0;
void usbRecieveData(int *data) {
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

	*data = usbCommand;
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <usbRecieveData+0x34>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	601a      	str	r2, [r3, #0]
	if (++usbCommand > 4) {
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <usbRecieveData+0x34>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	4a07      	ldr	r2, [pc, #28]	@ (8000554 <usbRecieveData+0x34>)
 8000538:	6013      	str	r3, [r2, #0]
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <usbRecieveData+0x34>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b04      	cmp	r3, #4
 8000540:	dd02      	ble.n	8000548 <usbRecieveData+0x28>
		usbCommand = 0;
 8000542:	4b04      	ldr	r3, [pc, #16]	@ (8000554 <usbRecieveData+0x34>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
	}
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	200001f8 	.word	0x200001f8

08000558 <DC_MotorTask>:

void DC_MotorTask(void *pvParameters) {  // red LED
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	int recievedCommand = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
	for (;;) {
		xQueueReceive(motorQueue, &recievedCommand, pdMS_TO_TICKS(100));
 8000564:	4b2c      	ldr	r3, [pc, #176]	@ (8000618 <DC_MotorTask+0xc0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f107 010c 	add.w	r1, r7, #12
 800056c:	2264      	movs	r2, #100	@ 0x64
 800056e:	4618      	mov	r0, r3
 8000570:	f009 fb94 	bl	8009c9c <xQueueReceive>

		if (recievedCommand == 2) {
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d11a      	bne.n	80005b0 <DC_MotorTask+0x58>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000580:	4826      	ldr	r0, [pc, #152]	@ (800061c <DC_MotorTask+0xc4>)
 8000582:	f001 f957 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2102      	movs	r1, #2
 800058a:	4825      	ldr	r0, [pc, #148]	@ (8000620 <DC_MotorTask+0xc8>)
 800058c:	f001 f952 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2104      	movs	r1, #4
 8000594:	4822      	ldr	r0, [pc, #136]	@ (8000620 <DC_MotorTask+0xc8>)
 8000596:	f001 f94d 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2110      	movs	r1, #16
 800059e:	4821      	ldr	r0, [pc, #132]	@ (8000624 <DC_MotorTask+0xcc>)
 80005a0:	f001 f948 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2120      	movs	r1, #32
 80005a8:	481e      	ldr	r0, [pc, #120]	@ (8000624 <DC_MotorTask+0xcc>)
 80005aa:	f001 f943 	bl	8001834 <HAL_GPIO_WritePin>
 80005ae:	e7d9      	b.n	8000564 <DC_MotorTask+0xc>
		} else if (recievedCommand == 3) {
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d114      	bne.n	80005e0 <DC_MotorTask+0x88>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2102      	movs	r1, #2
 80005ba:	4819      	ldr	r0, [pc, #100]	@ (8000620 <DC_MotorTask+0xc8>)
 80005bc:	f001 f93a 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2104      	movs	r1, #4
 80005c4:	4816      	ldr	r0, [pc, #88]	@ (8000620 <DC_MotorTask+0xc8>)
 80005c6:	f001 f935 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	4815      	ldr	r0, [pc, #84]	@ (8000624 <DC_MotorTask+0xcc>)
 80005d0:	f001 f930 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2120      	movs	r1, #32
 80005d8:	4812      	ldr	r0, [pc, #72]	@ (8000624 <DC_MotorTask+0xcc>)
 80005da:	f001 f92b 	bl	8001834 <HAL_GPIO_WritePin>
 80005de:	e7c1      	b.n	8000564 <DC_MotorTask+0xc>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005e6:	480d      	ldr	r0, [pc, #52]	@ (800061c <DC_MotorTask+0xc4>)
 80005e8:	f001 f924 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2102      	movs	r1, #2
 80005f0:	480b      	ldr	r0, [pc, #44]	@ (8000620 <DC_MotorTask+0xc8>)
 80005f2:	f001 f91f 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2104      	movs	r1, #4
 80005fa:	4809      	ldr	r0, [pc, #36]	@ (8000620 <DC_MotorTask+0xc8>)
 80005fc:	f001 f91a 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	4807      	ldr	r0, [pc, #28]	@ (8000624 <DC_MotorTask+0xcc>)
 8000606:	f001 f915 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2120      	movs	r1, #32
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <DC_MotorTask+0xcc>)
 8000610:	f001 f910 	bl	8001834 <HAL_GPIO_WritePin>
		xQueueReceive(motorQueue, &recievedCommand, pdMS_TO_TICKS(100));
 8000614:	e7a6      	b.n	8000564 <DC_MotorTask+0xc>
 8000616:	bf00      	nop
 8000618:	200001ec 	.word	0x200001ec
 800061c:	40020c00 	.word	0x40020c00
 8000620:	40020000 	.word	0x40020000
 8000624:	40020800 	.word	0x40020800

08000628 <beeper_noise>:

		}

	}
}
void beeper_noise() {   //pin je pb7
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
	uint32_t leveli_svetlosti[5] = { 50, 80, 50, 120, 0 };
 800062e:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <beeper_noise+0x74>)
 8000630:	463c      	mov	r4, r7
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	682b      	ldr	r3, [r5, #0]
 800063a:	6023      	str	r3, [r4, #0]

	for (uint8_t var = 0; var < 5; ++var) {
 800063c:	2300      	movs	r3, #0
 800063e:	75fb      	strb	r3, [r7, #23]
 8000640:	e020      	b.n	8000684 <beeper_noise+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	4816      	ldr	r0, [pc, #88]	@ (80006a0 <beeper_noise+0x78>)
 8000648:	f001 f8f4 	bl	8001834 <HAL_GPIO_WritePin>
		HAL_Delay(leveli_svetlosti[var]);
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	3318      	adds	r3, #24
 8000652:	443b      	add	r3, r7
 8000654:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fe61 	bl	8001320 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	480f      	ldr	r0, [pc, #60]	@ (80006a0 <beeper_noise+0x78>)
 8000664:	f001 f8e6 	bl	8001834 <HAL_GPIO_WritePin>
		HAL_Delay(120 - leveli_svetlosti[var]);
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	3318      	adds	r3, #24
 800066e:	443b      	add	r3, r7
 8000670:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000674:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fe51 	bl	8001320 <HAL_Delay>
	for (uint8_t var = 0; var < 5; ++var) {
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	3301      	adds	r3, #1
 8000682:	75fb      	strb	r3, [r7, #23]
 8000684:	7dfb      	ldrb	r3, [r7, #23]
 8000686:	2b04      	cmp	r3, #4
 8000688:	d9db      	bls.n	8000642 <beeper_noise+0x1a>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <beeper_noise+0x78>)
 8000690:	f001 f8d0 	bl	8001834 <HAL_GPIO_WritePin>

}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bdb0      	pop	{r4, r5, r7, pc}
 800069c:	0800cbd4 	.word	0x0800cbd4
 80006a0:	40020400 	.word	0x40020400

080006a4 <beeperTask>:
void beeperTask(void *pvParameters) {  // blue LED
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	int recievedCommand = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
	for (;;) {
		xQueueReceive(beeperQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <beeperTask+0x44>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f107 010c 	add.w	r1, r7, #12
 80006b8:	2264      	movs	r2, #100	@ 0x64
 80006ba:	4618      	mov	r0, r3
 80006bc:	f009 faee 	bl	8009c9c <xQueueReceive>

		if (recievedCommand == 4) {
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	d108      	bne.n	80006d8 <beeperTask+0x34>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006cc:	4807      	ldr	r0, [pc, #28]	@ (80006ec <beeperTask+0x48>)
 80006ce:	f001 f8b1 	bl	8001834 <HAL_GPIO_WritePin>
			beeper_noise();
 80006d2:	f7ff ffa9 	bl	8000628 <beeper_noise>
 80006d6:	e7eb      	b.n	80006b0 <beeperTask+0xc>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006de:	4803      	ldr	r0, [pc, #12]	@ (80006ec <beeperTask+0x48>)
 80006e0:	f001 f8a8 	bl	8001834 <HAL_GPIO_WritePin>
		xQueueReceive(beeperQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80006e4:	e7e4      	b.n	80006b0 <beeperTask+0xc>
 80006e6:	bf00      	nop
 80006e8:	200001f0 	.word	0x200001f0
 80006ec:	40020c00 	.word	0x40020c00

080006f0 <USBTask>:
		}

	}
}

void USBTask(void *pvParameters) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	int command = -1;
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
 80006fc:	60fb      	str	r3, [r7, #12]
	for (;;) {
		command++;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
		if (command > 4) {
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b04      	cmp	r3, #4
 8000708:	dd01      	ble.n	800070e <USBTask+0x1e>
			command = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
		}
		usbRecieveData(&command);
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff04 	bl	8000520 <usbRecieveData>

		xQueueSend(ledQueue, &command, pdMS_TO_TICKS(100));
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <USBTask+0x84>)
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	f107 010c 	add.w	r1, r7, #12
 8000720:	2300      	movs	r3, #0
 8000722:	2264      	movs	r2, #100	@ 0x64
 8000724:	f009 f91a 	bl	800995c <xQueueGenericSend>
		if (xLedTaskHandle != NULL) {
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <USBTask+0x88>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d007      	beq.n	8000740 <USBTask+0x50>
			xTaskNotify(xLedTaskHandle, command, eSetValueWithoutOverwrite);
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <USBTask+0x88>)
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4619      	mov	r1, r3
 8000738:	2300      	movs	r3, #0
 800073a:	2204      	movs	r2, #4
 800073c:	f00a fcd6 	bl	800b0ec <xTaskGenericNotify>
		}
//        xQueueSend(ledQueue, &command, pdMS_TO_TICKS(100));
		xQueueSend(motorQueue, &command, pdMS_TO_TICKS(100));
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <USBTask+0x8c>)
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	f107 010c 	add.w	r1, r7, #12
 8000748:	2300      	movs	r3, #0
 800074a:	2264      	movs	r2, #100	@ 0x64
 800074c:	f009 f906 	bl	800995c <xQueueGenericSend>
		xQueueSend(beeperQueue, &command, pdMS_TO_TICKS(100));
 8000750:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <USBTask+0x90>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	f107 010c 	add.w	r1, r7, #12
 8000758:	2300      	movs	r3, #0
 800075a:	2264      	movs	r2, #100	@ 0x64
 800075c:	f009 f8fe 	bl	800995c <xQueueGenericSend>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000760:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000764:	4807      	ldr	r0, [pc, #28]	@ (8000784 <USBTask+0x94>)
 8000766:	f001 f87e 	bl	8001866 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800076a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800076e:	f009 ff25 	bl	800a5bc <vTaskDelay>
		command++;
 8000772:	e7c4      	b.n	80006fe <USBTask+0xe>
 8000774:	200001e8 	.word	0x200001e8
 8000778:	200001f4 	.word	0x200001f4
 800077c:	200001ec 	.word	0x200001ec
 8000780:	200001f0 	.word	0x200001f0
 8000784:	40020c00 	.word	0x40020c00

08000788 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
// Create a queue with 5 items, each of 1 byte (uint8_t) in size
	//usbQueue = xQueueCreate(5, sizeof(uint8_t));
	ledQueue = xQueueCreate(2, sizeof(int));
 800078e:	2200      	movs	r2, #0
 8000790:	2104      	movs	r1, #4
 8000792:	2002      	movs	r0, #2
 8000794:	f009 f883 	bl	800989e <xQueueGenericCreate>
 8000798:	4603      	mov	r3, r0
 800079a:	4a2c      	ldr	r2, [pc, #176]	@ (800084c <main+0xc4>)
 800079c:	6013      	str	r3, [r2, #0]
	motorQueue = xQueueCreate(2, sizeof(int));
 800079e:	2200      	movs	r2, #0
 80007a0:	2104      	movs	r1, #4
 80007a2:	2002      	movs	r0, #2
 80007a4:	f009 f87b 	bl	800989e <xQueueGenericCreate>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a29      	ldr	r2, [pc, #164]	@ (8000850 <main+0xc8>)
 80007ac:	6013      	str	r3, [r2, #0]
	beeperQueue = xQueueCreate(2, sizeof(int));
 80007ae:	2200      	movs	r2, #0
 80007b0:	2104      	movs	r1, #4
 80007b2:	2002      	movs	r0, #2
 80007b4:	f009 f873 	bl	800989e <xQueueGenericCreate>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <main+0xcc>)
 80007bc:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007be:	f000 fd6d 	bl	800129c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007c2:	f000 f865 	bl	8000890 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80007c6:	f000 f8cb 	bl	8000960 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007ca:	f000 f9ab 	bl	8000b24 <MX_GPIO_Init>
	MX_I2C1_Init();
 80007ce:	f000 f8e7 	bl	80009a0 <MX_I2C1_Init>
	MX_I2S2_Init();
 80007d2:	f000 f913 	bl	80009fc <MX_I2S2_Init>
	MX_I2S3_Init();
 80007d6:	f000 f93f 	bl	8000a58 <MX_I2S3_Init>
	MX_SPI1_Init();
 80007da:	f000 f96d 	bl	8000ab8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80007de:	f008 fc67 	bl	80090b0 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80007e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <main+0xd0>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	481d      	ldr	r0, [pc, #116]	@ (800085c <main+0xd4>)
 80007e8:	f008 fcac 	bl	8009144 <osThreadNew>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000860 <main+0xd8>)
 80007f0:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */

	/* add events, ... */
	xTaskCreate(LEDTask, "LED Task", 128, NULL, 2, &TaskHandle_LEDTask);
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <main+0xdc>)
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	2302      	movs	r3, #2
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2300      	movs	r3, #0
 80007fc:	2280      	movs	r2, #128	@ 0x80
 80007fe:	491a      	ldr	r1, [pc, #104]	@ (8000868 <main+0xe0>)
 8000800:	481a      	ldr	r0, [pc, #104]	@ (800086c <main+0xe4>)
 8000802:	f009 fd7d 	bl	800a300 <xTaskCreate>
	xTaskCreate(USBTask, "USB Task", 128, NULL, 2, NULL);
 8000806:	2300      	movs	r3, #0
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	2302      	movs	r3, #2
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2300      	movs	r3, #0
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	4917      	ldr	r1, [pc, #92]	@ (8000870 <main+0xe8>)
 8000814:	4817      	ldr	r0, [pc, #92]	@ (8000874 <main+0xec>)
 8000816:	f009 fd73 	bl	800a300 <xTaskCreate>
	xTaskCreate(beeperTask, "beeper Task", 128, NULL, 2,
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <main+0xf0>)
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	2302      	movs	r3, #2
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2300      	movs	r3, #0
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	4915      	ldr	r1, [pc, #84]	@ (800087c <main+0xf4>)
 8000828:	4815      	ldr	r0, [pc, #84]	@ (8000880 <main+0xf8>)
 800082a:	f009 fd69 	bl	800a300 <xTaskCreate>
			&TaskHandle_beeperTask);
	xTaskCreate(DC_MotorTask, "DC Motor Task", 128, NULL, 2,
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <main+0xfc>)
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	2302      	movs	r3, #2
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2300      	movs	r3, #0
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	4913      	ldr	r1, [pc, #76]	@ (8000888 <main+0x100>)
 800083c:	4813      	ldr	r0, [pc, #76]	@ (800088c <main+0x104>)
 800083e:	f009 fd5f 	bl	800a300 <xTaskCreate>
			&TaskHandle_DC_MotorTask);
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000842:	f008 fc59 	bl	80090f8 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000846:	bf00      	nop
 8000848:	e7fd      	b.n	8000846 <main+0xbe>
 800084a:	bf00      	nop
 800084c:	200001e8 	.word	0x200001e8
 8000850:	200001ec 	.word	0x200001ec
 8000854:	200001f0 	.word	0x200001f0
 8000858:	0800cc44 	.word	0x0800cc44
 800085c:	08000d09 	.word	0x08000d09
 8000860:	200001d8 	.word	0x200001d8
 8000864:	200001dc 	.word	0x200001dc
 8000868:	0800cbe8 	.word	0x0800cbe8
 800086c:	080004d1 	.word	0x080004d1
 8000870:	0800cbf4 	.word	0x0800cbf4
 8000874:	080006f1 	.word	0x080006f1
 8000878:	200001e4 	.word	0x200001e4
 800087c:	0800cc00 	.word	0x0800cc00
 8000880:	080006a5 	.word	0x080006a5
 8000884:	200001e0 	.word	0x200001e0
 8000888:	0800cc0c 	.word	0x0800cc0c
 800088c:	08000559 	.word	0x08000559

08000890 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	@ 0x50
 8000894:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	2230      	movs	r2, #48	@ 0x30
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f00c f894 	bl	800c9cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <SystemClock_Config+0xc8>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	4a26      	ldr	r2, [pc, #152]	@ (8000958 <SystemClock_Config+0xc8>)
 80008be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c4:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <SystemClock_Config+0xc8>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	4b21      	ldr	r3, [pc, #132]	@ (800095c <SystemClock_Config+0xcc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a20      	ldr	r2, [pc, #128]	@ (800095c <SystemClock_Config+0xcc>)
 80008da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b1e      	ldr	r3, [pc, #120]	@ (800095c <SystemClock_Config+0xcc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000904:	23a8      	movs	r3, #168	@ 0xa8
 8000906:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000908:	2304      	movs	r3, #4
 800090a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800090c:	2307      	movs	r3, #7
 800090e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	4618      	mov	r0, r3
 8000916:	f003 fed9 	bl	80046cc <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x94>
		Error_Handler();
 8000920:	f000 fa0e 	bl	8000d40 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000924:	230f      	movs	r3, #15
 8000926:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000928:	2302      	movs	r3, #2
 800092a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000934:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2102      	movs	r1, #2
 8000940:	4618      	mov	r0, r3
 8000942:	f004 f93b 	bl	8004bbc <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xc0>
		Error_Handler();
 800094c:	f000 f9f8 	bl	8000d40 <Error_Handler>
	}
}
 8000950:	bf00      	nop
 8000952:	3750      	adds	r7, #80	@ 0x50
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000966:	463b      	mov	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000976:	2301      	movs	r3, #1
 8000978:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800097a:	23c8      	movs	r3, #200	@ 0xc8
 800097c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800097e:	2305      	movs	r3, #5
 8000980:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000986:	463b      	mov	r3, r7
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fb55 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <PeriphCommonClock_Config+0x38>
		Error_Handler();
 8000994:	f000 f9d4 	bl	8000d40 <Error_Handler>
	}
}
 8000998:	bf00      	nop
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	@ (80009f4 <MX_I2C1_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009ac:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <MX_I2C1_Init+0x58>)
 80009ae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009de:	f003 f891 	bl	8003b04 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
		Error_Handler();
 80009e8:	f000 f9aa 	bl	8000d40 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000009c 	.word	0x2000009c
 80009f4:	40005400 	.word	0x40005400
 80009f8:	000186a0 	.word	0x000186a0

080009fc <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_I2S2_Init+0x50>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <MX_I2S2_Init+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_I2S2_Init+0x50>)
 8000a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a0c:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_I2S2_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <MX_I2S2_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_I2S2_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <MX_I2S2_Init+0x50>)
 8000a22:	4a0c      	ldr	r2, [pc, #48]	@ (8000a54 <MX_I2S2_Init+0x58>)
 8000a24:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_I2S2_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <MX_I2S2_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_I2S2_Init+0x50>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8000a38:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_I2S2_Init+0x50>)
 8000a3a:	f003 f9a7 	bl	8003d8c <HAL_I2S_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2S2_Init+0x4c>
		Error_Handler();
 8000a44:	f000 f97c 	bl	8000d40 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000f0 	.word	0x200000f0
 8000a50:	40003800 	.word	0x40003800
 8000a54:	00017700 	.word	0x00017700

08000a58 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <MX_I2S3_Init+0x54>)
 8000a5e:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <MX_I2S3_Init+0x58>)
 8000a60:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_I2S3_Init+0x54>)
 8000a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a68:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <MX_I2S3_Init+0x54>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_I2S3_Init+0x54>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <MX_I2S3_Init+0x54>)
 8000a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a7c:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_I2S3_Init+0x54>)
 8000a80:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a82:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_I2S3_Init+0x54>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_I2S3_Init+0x54>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_I2S3_Init+0x54>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_I2S3_Init+0x54>)
 8000a98:	f003 f978 	bl	8003d8c <HAL_I2S_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2S3_Init+0x4e>
		Error_Handler();
 8000aa2:	f000 f94d 	bl	8000d40 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000138 	.word	0x20000138
 8000ab0:	40003c00 	.word	0x40003c00
 8000ab4:	00017700 	.word	0x00017700

08000ab8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000abc:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000abe:	4a18      	ldr	r2, [pc, #96]	@ (8000b20 <MX_SPI1_Init+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ae8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000b04:	220a      	movs	r2, #10
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000b08:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000b0a:	f004 fbe7 	bl	80052dc <HAL_SPI_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000b14:	f000 f914 	bl	8000d40 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000180 	.word	0x20000180
 8000b20:	40013000 	.word	0x40013000

08000b24 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	@ 0x30
 8000b28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a6c      	ldr	r2, [pc, #432]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4b66      	ldr	r3, [pc, #408]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a65      	ldr	r2, [pc, #404]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b63      	ldr	r3, [pc, #396]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b5f      	ldr	r3, [pc, #380]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a5e      	ldr	r2, [pc, #376]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b5c      	ldr	r3, [pc, #368]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b58      	ldr	r3, [pc, #352]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a57      	ldr	r2, [pc, #348]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b55      	ldr	r3, [pc, #340]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b51      	ldr	r3, [pc, #324]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a50      	ldr	r2, [pc, #320]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b4e      	ldr	r3, [pc, #312]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a49      	ldr	r2, [pc, #292]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b47      	ldr	r3, [pc, #284]	@ (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2108      	movs	r1, #8
 8000be6:	4844      	ldr	r0, [pc, #272]	@ (8000cf8 <MX_GPIO_Init+0x1d4>)
 8000be8:	f000 fe24 	bl	8001834 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4842      	ldr	r0, [pc, #264]	@ (8000cfc <MX_GPIO_Init+0x1d8>)
 8000bf2:	f000 fe1f 	bl	8001834 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2106      	movs	r1, #6
 8000bfa:	4841      	ldr	r0, [pc, #260]	@ (8000d00 <MX_GPIO_Init+0x1dc>)
 8000bfc:	f000 fe1a 	bl	8001834 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2130      	movs	r1, #48	@ 0x30
 8000c04:	483d      	ldr	r0, [pc, #244]	@ (8000cfc <MX_GPIO_Init+0x1d8>)
 8000c06:	f000 fe15 	bl	8001834 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c10:	483c      	ldr	r0, [pc, #240]	@ (8000d04 <MX_GPIO_Init+0x1e0>)
 8000c12:	f000 fe0f 	bl	8001834 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : DATA_Ready_Pin */
	GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000c16:	2304      	movs	r3, #4
 8000c18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4833      	ldr	r0, [pc, #204]	@ (8000cf8 <MX_GPIO_Init+0x1d4>)
 8000c2a:	f000 fc7f 	bl	800152c <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	482c      	ldr	r0, [pc, #176]	@ (8000cf8 <MX_GPIO_Init+0x1d4>)
 8000c46:	f000 fc71 	bl	800152c <HAL_GPIO_Init>

	/*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = INT1_Pin | INT2_Pin | MEMS_INT2_Pin;
 8000c4a:	2332      	movs	r3, #50	@ 0x32
 8000c4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c4e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c52:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4826      	ldr	r0, [pc, #152]	@ (8000cf8 <MX_GPIO_Init+0x1d4>)
 8000c60:	f000 fc64 	bl	800152c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC4 PC5 */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | GPIO_PIN_4 | GPIO_PIN_5;
 8000c64:	2331      	movs	r3, #49	@ 0x31
 8000c66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4820      	ldr	r0, [pc, #128]	@ (8000cfc <MX_GPIO_Init+0x1d8>)
 8000c7c:	f000 fc56 	bl	800152c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c84:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c88:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	481a      	ldr	r0, [pc, #104]	@ (8000d00 <MX_GPIO_Init+0x1dc>)
 8000c96:	f000 fc49 	bl	800152c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2;
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4813      	ldr	r0, [pc, #76]	@ (8000d00 <MX_GPIO_Init+0x1dc>)
 8000cb2:	f000 fc3b 	bl	800152c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000cb6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000cba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <MX_GPIO_Init+0x1e0>)
 8000cd0:	f000 fc2c 	bl	800152c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4807      	ldr	r0, [pc, #28]	@ (8000d04 <MX_GPIO_Init+0x1e0>)
 8000ce8:	f000 fc20 	bl	800152c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cec:	bf00      	nop
 8000cee:	3730      	adds	r7, #48	@ 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40020c00 	.word	0x40020c00

08000d08 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8000d10:	f00b fa9a 	bl	800c248 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f008 faa7 	bl	8009268 <osDelay>
 8000d1a:	e7fb      	b.n	8000d14 <StartDefaultTask+0xc>

08000d1c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d2e:	f000 fad7 	bl	80012e0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40000800 	.word	0x40000800

08000d40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a11      	ldr	r2, [pc, #68]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	f06f 0001 	mvn.w	r0, #1
 8000d92:	f000 fba1 	bl	80014d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	@ (8000e28 <HAL_I2C_MspInit+0x84>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12c      	bne.n	8000e20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000de2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de8:	2312      	movs	r3, #18
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df4:	2304      	movs	r3, #4
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <HAL_I2C_MspInit+0x8c>)
 8000e00:	f000 fb94 	bl	800152c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	@ 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400

08000e34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	@ 0x38
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a59      	ldr	r2, [pc, #356]	@ (8000fb8 <HAL_I2S_MspInit+0x184>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d15b      	bne.n	8000f0e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
 8000e5a:	4b58      	ldr	r3, [pc, #352]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	4a57      	ldr	r2, [pc, #348]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e66:	4b55      	ldr	r3, [pc, #340]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6e:	623b      	str	r3, [r7, #32]
 8000e70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	4b51      	ldr	r3, [pc, #324]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a50      	ldr	r2, [pc, #320]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b4e      	ldr	r3, [pc, #312]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	4b4a      	ldr	r3, [pc, #296]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a49      	ldr	r2, [pc, #292]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b47      	ldr	r3, [pc, #284]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	483e      	ldr	r0, [pc, #248]	@ (8000fc0 <HAL_I2S_MspInit+0x18c>)
 8000ec6:	f000 fb31 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eda:	2305      	movs	r3, #5
 8000edc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4836      	ldr	r0, [pc, #216]	@ (8000fc0 <HAL_I2S_MspInit+0x18c>)
 8000ee6:	f000 fb21 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000eea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efc:	2305      	movs	r3, #5
 8000efe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	482f      	ldr	r0, [pc, #188]	@ (8000fc4 <HAL_I2S_MspInit+0x190>)
 8000f08:	f000 fb10 	bl	800152c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f0c:	e04f      	b.n	8000fae <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc8 <HAL_I2S_MspInit+0x194>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d14a      	bne.n	8000fae <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	4b27      	ldr	r3, [pc, #156]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	4a26      	ldr	r2, [pc, #152]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f28:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	4b20      	ldr	r3, [pc, #128]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f44:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f58:	4a18      	ldr	r2, [pc, #96]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <HAL_I2S_MspInit+0x198>)
 8000f88:	f000 fad0 	bl	800152c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f8c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <HAL_I2S_MspInit+0x18c>)
 8000faa:	f000 fabf 	bl	800152c <HAL_GPIO_Init>
}
 8000fae:	bf00      	nop
 8000fb0:	3738      	adds	r7, #56	@ 0x38
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40003800 	.word	0x40003800
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40003c00 	.word	0x40003c00
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a19      	ldr	r2, [pc, #100]	@ (8001054 <HAL_SPI_MspInit+0x84>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12b      	bne.n	800104a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_SPI_MspInit+0x88>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	4a17      	ldr	r2, [pc, #92]	@ (8001058 <HAL_SPI_MspInit+0x88>)
 8000ffc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001000:	6453      	str	r3, [r2, #68]	@ 0x44
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HAL_SPI_MspInit+0x88>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <HAL_SPI_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a10      	ldr	r2, [pc, #64]	@ (8001058 <HAL_SPI_MspInit+0x88>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_SPI_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800102a:	23e0      	movs	r3, #224	@ 0xe0
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103a:	2305      	movs	r3, #5
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	@ (800105c <HAL_SPI_MspInit+0x8c>)
 8001046:	f000 fa71 	bl	800152c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	@ 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40013000 	.word	0x40013000
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000

08001060 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	@ 0x38
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <HAL_InitTick+0xe4>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	4a32      	ldr	r2, [pc, #200]	@ (8001144 <HAL_InitTick+0xe4>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001080:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <HAL_InitTick+0xe4>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800108c:	f107 0210 	add.w	r2, r7, #16
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f003 ff9c 	bl	8004fd4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d103      	bne.n	80010ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010a6:	f003 ff81 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80010aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80010ac:	e004      	b.n	80010b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010ae:	f003 ff7d 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80010b2:	4603      	mov	r3, r0
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ba:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <HAL_InitTick+0xe8>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	0c9b      	lsrs	r3, r3, #18
 80010c2:	3b01      	subs	r3, #1
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <HAL_InitTick+0xec>)
 80010c8:	4a21      	ldr	r2, [pc, #132]	@ (8001150 <HAL_InitTick+0xf0>)
 80010ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <HAL_InitTick+0xec>)
 80010ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010d2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80010d4:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <HAL_InitTick+0xec>)
 80010d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80010da:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <HAL_InitTick+0xec>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <HAL_InitTick+0xec>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <HAL_InitTick+0xec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80010ec:	4817      	ldr	r0, [pc, #92]	@ (800114c <HAL_InitTick+0xec>)
 80010ee:	f004 f97e 	bl	80053ee <HAL_TIM_Base_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d11b      	bne.n	8001138 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001100:	4812      	ldr	r0, [pc, #72]	@ (800114c <HAL_InitTick+0xec>)
 8001102:	f004 f9cd 	bl	80054a0 <HAL_TIM_Base_Start_IT>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800110c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001110:	2b00      	cmp	r3, #0
 8001112:	d111      	bne.n	8001138 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001114:	201e      	movs	r0, #30
 8001116:	f000 f9fb 	bl	8001510 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d808      	bhi.n	8001132 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	201e      	movs	r0, #30
 8001126:	f000 f9d7 	bl	80014d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <HAL_InitTick+0xf4>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e002      	b.n	8001138 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001138:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800113c:	4618      	mov	r0, r3
 800113e:	3738      	adds	r7, #56	@ 0x38
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	431bde83 	.word	0x431bde83
 800114c:	200001fc 	.word	0x200001fc
 8001150:	40000800 	.word	0x40000800
 8001154:	20000004 	.word	0x20000004

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <NMI_Handler+0x4>

08001160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <MemManage_Handler+0x4>

08001170 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <UsageFault_Handler+0x4>

08001180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <TIM4_IRQHandler+0x10>)
 8001196:	f004 f9e5 	bl	8005564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001fc 	.word	0x200001fc

080011a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <OTG_FS_IRQHandler+0x10>)
 80011aa:	f000 fe57 	bl	8001e5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20005040 	.word	0x20005040

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f00b fc5e 	bl	800caa8 <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20020000 	.word	0x20020000
 8001218:	00000400 	.word	0x00000400
 800121c:	20000244 	.word	0x20000244
 8001220:	20005568 	.word	0x20005568

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001280 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800124c:	f7ff ffea 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	@ (8001284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	@ (8001288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	@ (8001294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f00b fc1d 	bl	800cab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff fa85 	bl	8000788 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800128c:	0800cc90 	.word	0x0800cc90
  ldr r2, =_sbss
 8001290:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001294:	20005568 	.word	0x20005568

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <HAL_Init+0x40>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_Init+0x40>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_Init+0x40>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f8fc 	bl	80014c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	200f      	movs	r0, #15
 80012cc:	f7ff fec8 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fd3c 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000008 	.word	0x20000008
 8001304:	20000248 	.word	0x20000248

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000248 	.word	0x20000248

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	@ (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	@ (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	@ (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff4c 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ea:	f7ff ff61 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 80014ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	68b9      	ldr	r1, [r7, #8]
 80014f4:	6978      	ldr	r0, [r7, #20]
 80014f6:	f7ff ffb1 	bl	800145c <NVIC_EncodePriority>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff80 	bl	8001408 <__NVIC_SetPriority>
}
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff54 	bl	80013cc <__NVIC_EnableIRQ>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	@ 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e159      	b.n	80017fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 8148 	bne.w	80017f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d005      	beq.n	800157e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157a:	2b02      	cmp	r3, #2
 800157c:	d130      	bne.n	80015e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 0201 	and.w	r2, r3, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d017      	beq.n	800161c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d123      	bne.n	8001670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80a2 	beq.w	80017f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b57      	ldr	r3, [pc, #348]	@ (8001814 <HAL_GPIO_Init+0x2e8>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	4a56      	ldr	r2, [pc, #344]	@ (8001814 <HAL_GPIO_Init+0x2e8>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c2:	4b54      	ldr	r3, [pc, #336]	@ (8001814 <HAL_GPIO_Init+0x2e8>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ce:	4a52      	ldr	r2, [pc, #328]	@ (8001818 <HAL_GPIO_Init+0x2ec>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a49      	ldr	r2, [pc, #292]	@ (800181c <HAL_GPIO_Init+0x2f0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d019      	beq.n	800172e <HAL_GPIO_Init+0x202>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a48      	ldr	r2, [pc, #288]	@ (8001820 <HAL_GPIO_Init+0x2f4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0x1fe>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a47      	ldr	r2, [pc, #284]	@ (8001824 <HAL_GPIO_Init+0x2f8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00d      	beq.n	8001726 <HAL_GPIO_Init+0x1fa>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a46      	ldr	r2, [pc, #280]	@ (8001828 <HAL_GPIO_Init+0x2fc>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d007      	beq.n	8001722 <HAL_GPIO_Init+0x1f6>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a45      	ldr	r2, [pc, #276]	@ (800182c <HAL_GPIO_Init+0x300>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_GPIO_Init+0x1f2>
 800171a:	2304      	movs	r3, #4
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x204>
 800171e:	2307      	movs	r3, #7
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x204>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x204>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x204>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x204>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4935      	ldr	r1, [pc, #212]	@ (8001818 <HAL_GPIO_Init+0x2ec>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b38      	ldr	r3, [pc, #224]	@ (8001830 <HAL_GPIO_Init+0x304>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a2f      	ldr	r2, [pc, #188]	@ (8001830 <HAL_GPIO_Init+0x304>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b2d      	ldr	r3, [pc, #180]	@ (8001830 <HAL_GPIO_Init+0x304>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a24      	ldr	r2, [pc, #144]	@ (8001830 <HAL_GPIO_Init+0x304>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a2:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <HAL_GPIO_Init+0x304>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001830 <HAL_GPIO_Init+0x304>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <HAL_GPIO_Init+0x304>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001830 <HAL_GPIO_Init+0x304>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f aea2 	bls.w	8001548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40013c00 	.word	0x40013c00

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001850:	e003      	b.n	800185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001878:	887a      	ldrh	r2, [r7, #2]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4013      	ands	r3, r2
 800187e:	041a      	lsls	r2, r3, #16
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43d9      	mvns	r1, r3
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	400b      	ands	r3, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af02      	add	r7, sp, #8
 80018a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e059      	b.n	8001960 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f00a fd12 	bl	800c2f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2203      	movs	r2, #3
 80018d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018da:	d102      	bne.n	80018e2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 f869 	bl	80059be <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7c1a      	ldrb	r2, [r3, #16]
 80018f4:	f88d 2000 	strb.w	r2, [sp]
 80018f8:	3304      	adds	r3, #4
 80018fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018fc:	f003 ffea 	bl	80058d4 <USB_CoreInit>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e026      	b.n	8001960 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2101      	movs	r1, #1
 8001918:	4618      	mov	r0, r3
 800191a:	f004 f861 	bl	80059e0 <USB_SetCurrentMode>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e017      	b.n	8001960 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7c1a      	ldrb	r2, [r3, #16]
 8001938:	f88d 2000 	strb.w	r2, [sp]
 800193c:	3304      	adds	r3, #4
 800193e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001940:	f004 fa04 	bl	8005d4c <USB_HostInit>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2202      	movs	r2, #2
 800194e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e004      	b.n	8001960 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b08b      	sub	sp, #44	@ 0x2c
 800196c:	af04      	add	r7, sp, #16
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	70fb      	strb	r3, [r7, #3]
 800197a:	460b      	mov	r3, r1
 800197c:	70bb      	strb	r3, [r7, #2]
 800197e:	4613      	mov	r3, r2
 8001980:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001982:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001984:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_HCD_HC_Init+0x2c>
 8001990:	2302      	movs	r3, #2
 8001992:	e09d      	b.n	8001ad0 <HAL_HCD_HC_Init+0x168>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	3319      	adds	r3, #25
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3314      	adds	r3, #20
 80019c0:	787a      	ldrb	r2, [r7, #1]
 80019c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3315      	adds	r3, #21
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3326      	adds	r3, #38	@ 0x26
 80019e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80019ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	78bb      	ldrb	r3, [r7, #2]
 80019f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019f6:	b2d8      	uxtb	r0, r3
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	3316      	adds	r3, #22
 8001a06:	4602      	mov	r2, r0
 8001a08:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fbc8 	bl	80021a4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001a14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da0a      	bge.n	8001a32 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3317      	adds	r3, #23
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e009      	b.n	8001a46 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	3317      	adds	r3, #23
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 facc 	bl	8005fe8 <USB_GetHostSpeed>
 8001a50:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001a52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d10b      	bne.n	8001a72 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001a5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d107      	bne.n	8001a72 <HAL_HCD_HC_Init+0x10a>
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d104      	bne.n	8001a72 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2bbc      	cmp	r3, #188	@ 0xbc
 8001a6c:	d901      	bls.n	8001a72 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001a6e:	23bc      	movs	r3, #188	@ 0xbc
 8001a70:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3318      	adds	r3, #24
 8001a82:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	b298      	uxth	r0, r3
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3328      	adds	r3, #40	@ 0x28
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	787c      	ldrb	r4, [r7, #1]
 8001aaa:	78ba      	ldrb	r2, [r7, #2]
 8001aac:	78f9      	ldrb	r1, [r7, #3]
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4623      	mov	r3, r4
 8001abe:	f004 fabb 	bl	8006038 <USB_HC_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}

08001ad8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_HCD_HC_Halt+0x1e>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e00f      	b.n	8001b16 <HAL_HCD_HC_Halt+0x3e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	78fa      	ldrb	r2, [r7, #3]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 fe01 	bl	800670e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	70fb      	strb	r3, [r7, #3]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70bb      	strb	r3, [r7, #2]
 8001b36:	4613      	mov	r3, r2
 8001b38:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b3a:	78fa      	ldrb	r2, [r7, #3]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3317      	adds	r3, #23
 8001b4a:	78ba      	ldrb	r2, [r7, #2]
 8001b4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3326      	adds	r3, #38	@ 0x26
 8001b5e:	787a      	ldrb	r2, [r7, #1]
 8001b60:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b62:	7c3b      	ldrb	r3, [r7, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d114      	bne.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	332a      	adds	r3, #42	@ 0x2a
 8001b78:	2203      	movs	r2, #3
 8001b7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	3319      	adds	r3, #25
 8001b8c:	7f3a      	ldrb	r2, [r7, #28]
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e009      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b92:	78fa      	ldrb	r2, [r7, #3]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	332a      	adds	r3, #42	@ 0x2a
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ba6:	787b      	ldrb	r3, [r7, #1]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	f200 8102 	bhi.w	8001db2 <HAL_HCD_HC_SubmitRequest+0x292>
 8001bae:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001bc5 	.word	0x08001bc5
 8001bb8:	08001d9d 	.word	0x08001d9d
 8001bbc:	08001c89 	.word	0x08001c89
 8001bc0:	08001d13 	.word	0x08001d13
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001bc4:	7c3b      	ldrb	r3, [r7, #16]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	f040 80f5 	bne.w	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001bcc:	78bb      	ldrb	r3, [r7, #2]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d12d      	bne.n	8001c2e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001bd2:	8b3b      	ldrh	r3, [r7, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	333d      	adds	r3, #61	@ 0x3d
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	333d      	adds	r3, #61	@ 0x3d
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	332a      	adds	r3, #42	@ 0x2a
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001c16:	e0ce      	b.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	332a      	adds	r3, #42	@ 0x2a
 8001c28:	2202      	movs	r2, #2
 8001c2a:	701a      	strb	r2, [r3, #0]
      break;
 8001c2c:	e0c3      	b.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	331a      	adds	r3, #26
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	f040 80b8 	bne.w	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	333c      	adds	r3, #60	@ 0x3c
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10a      	bne.n	8001c72 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	332a      	adds	r3, #42	@ 0x2a
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
      break;
 8001c70:	e0a1      	b.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	332a      	adds	r3, #42	@ 0x2a
 8001c82:	2202      	movs	r2, #2
 8001c84:	701a      	strb	r2, [r3, #0]
      break;
 8001c86:	e096      	b.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c88:	78bb      	ldrb	r3, [r7, #2]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d120      	bne.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	333d      	adds	r3, #61	@ 0x3d
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10a      	bne.n	8001cba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	332a      	adds	r3, #42	@ 0x2a
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cb8:	e07e      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	332a      	adds	r3, #42	@ 0x2a
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
      break;
 8001cce:	e073      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	333c      	adds	r3, #60	@ 0x3c
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10a      	bne.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	332a      	adds	r3, #42	@ 0x2a
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
      break;
 8001cfa:	e05d      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	332a      	adds	r3, #42	@ 0x2a
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	701a      	strb	r2, [r3, #0]
      break;
 8001d10:	e052      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d12:	78bb      	ldrb	r3, [r7, #2]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d120      	bne.n	8001d5a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	333d      	adds	r3, #61	@ 0x3d
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10a      	bne.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	332a      	adds	r3, #42	@ 0x2a
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d42:	e039      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	332a      	adds	r3, #42	@ 0x2a
 8001d54:	2202      	movs	r2, #2
 8001d56:	701a      	strb	r2, [r3, #0]
      break;
 8001d58:	e02e      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	333c      	adds	r3, #60	@ 0x3c
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	332a      	adds	r3, #42	@ 0x2a
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
      break;
 8001d84:	e018      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	332a      	adds	r3, #42	@ 0x2a
 8001d96:	2202      	movs	r2, #2
 8001d98:	701a      	strb	r2, [r3, #0]
      break;
 8001d9a:	e00d      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	332a      	adds	r3, #42	@ 0x2a
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
      break;
 8001db0:	e002      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001db2:	bf00      	nop
 8001db4:	e000      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001db6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	332c      	adds	r3, #44	@ 0x2c
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	8b39      	ldrh	r1, [r7, #24]
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4403      	add	r3, r0
 8001ddc:	3334      	adds	r3, #52	@ 0x34
 8001dde:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	334c      	adds	r3, #76	@ 0x4c
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	3338      	adds	r3, #56	@ 0x38
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	3315      	adds	r3, #21
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	334d      	adds	r3, #77	@ 0x4d
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	4613      	mov	r3, r2
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	3310      	adds	r3, #16
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	1d19      	adds	r1, r3, #4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	799b      	ldrb	r3, [r3, #6]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f004 fa0a 	bl	8006264 <USB_HC_StartXfer>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop

08001e5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 ff2a 	bl	8005ccc <USB_GetMode>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	f040 80fb 	bne.w	8002076 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 feed 	bl	8005c64 <USB_ReadInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80f1 	beq.w	8002074 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 fee4 	bl	8005c64 <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ea6:	d104      	bne.n	8001eb2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001eb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 fed4 	bl	8005c64 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ec6:	d104      	bne.n	8001ed2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fec4 	bl	8005c64 <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ee2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ee6:	d104      	bne.n	8001ef2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ef0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 feb4 	bl	8005c64 <USB_ReadInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d103      	bne.n	8001f0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 fea6 	bl	8005c64 <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f22:	d120      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d113      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f3e:	2110      	movs	r1, #16
 8001f40:	6938      	ldr	r0, [r7, #16]
 8001f42:	f003 fd99 	bl	8005a78 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f46:	6938      	ldr	r0, [r7, #16]
 8001f48:	f003 fdc8 	bl	8005adc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7a5b      	ldrb	r3, [r3, #9]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d105      	bne.n	8001f60 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 ffa4 	bl	8005ea8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f00a fa43 	bl	800c3ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fe7a 	bl	8005c64 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f7a:	d102      	bne.n	8001f82 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f001 fd4d 	bl	8003a1c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fe6c 	bl	8005c64 <USB_ReadInterrupts>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d106      	bne.n	8001fa4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f00a fa0c 	bl	800c3b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 fe5b 	bl	8005c64 <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fb8:	d139      	bne.n	800202e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 fb94 	bl	80066ec <USB_HC_ReadInterrupt>
 8001fc4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e025      	b.n	8002018 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d018      	beq.n	8002012 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ff6:	d106      	bne.n	8002006 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f905 	bl	800220e <HCD_HC_IN_IRQHandler>
 8002004:	e005      	b.n	8002012 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 ff67 	bl	8002ee0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	795b      	ldrb	r3, [r3, #5]
 800201c:	461a      	mov	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	4293      	cmp	r3, r2
 8002022:	d3d3      	bcc.n	8001fcc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800202c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f003 fe16 	bl	8005c64 <USB_ReadInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b10      	cmp	r3, #16
 8002040:	d101      	bne.n	8002046 <HAL_HCD_IRQHandler+0x1ea>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_HCD_IRQHandler+0x1ec>
 8002046:	2300      	movs	r3, #0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d014      	beq.n	8002076 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0210 	bic.w	r2, r2, #16
 800205a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f001 fbfe 	bl	800385e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0210 	orr.w	r2, r2, #16
 8002070:	619a      	str	r2, [r3, #24]
 8002072:	e000      	b.n	8002076 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002074:	bf00      	nop
    }
  }
}
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_HCD_Start+0x16>
 800208e:	2302      	movs	r3, #2
 8002090:	e013      	b.n	80020ba <HAL_HCD_Start+0x3e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 ff68 	bl	8005f76 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fc76 	bl	800599c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_HCD_Stop+0x16>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e00d      	b.n	80020f4 <HAL_HCD_Stop+0x32>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f004 fc32 	bl	800694e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f003 ff0a 	bl	8005f22 <USB_ResetPort>
 800210e:	4603      	mov	r3, r0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	334c      	adds	r3, #76	@ 0x4c
 8002134:	781b      	ldrb	r3, [r3, #0]
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	3338      	adds	r3, #56	@ 0x38
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 ff4c 	bl	8006016 <USB_GetCurrentFrame>
 800217e:	4603      	mov	r3, r0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f003 ff27 	bl	8005fe8 <USB_GetHostSpeed>
 800219a:	4603      	mov	r3, r0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	331a      	adds	r3, #26
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	331b      	adds	r3, #27
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3325      	adds	r3, #37	@ 0x25
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	3324      	adds	r3, #36	@ 0x24
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f003 fd2c 	bl	8005c8a <USB_ReadChInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b04      	cmp	r3, #4
 800223a:	d11a      	bne.n	8002272 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002248:	461a      	mov	r2, r3
 800224a:	2304      	movs	r3, #4
 800224c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	334d      	adds	r3, #77	@ 0x4d
 800225e:	2207      	movs	r2, #7
 8002260:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f004 fa4f 	bl	800670e <USB_HC_Halt>
 8002270:	e09e      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f003 fd05 	bl	8005c8a <USB_ReadChInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800228a:	d11b      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800229e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	334d      	adds	r3, #77	@ 0x4d
 80022b0:	2208      	movs	r2, #8
 80022b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 fa26 	bl	800670e <USB_HC_Halt>
 80022c2:	e075      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fcdc 	bl	8005c8a <USB_ReadChInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d11a      	bne.n	8002312 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	2308      	movs	r3, #8
 80022ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	334d      	adds	r3, #77	@ 0x4d
 80022fe:	2206      	movs	r2, #6
 8002300:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f004 f9ff 	bl	800670e <USB_HC_Halt>
 8002310:	e04e      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fcb5 	bl	8005c8a <USB_ReadChInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232a:	d11b      	bne.n	8002364 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002338:	461a      	mov	r2, r3
 800233a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800233e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	334d      	adds	r3, #77	@ 0x4d
 8002350:	2209      	movs	r2, #9
 8002352:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f004 f9d6 	bl	800670e <USB_HC_Halt>
 8002362:	e025      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f003 fc8c 	bl	8005c8a <USB_ReadChInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002378:	2b80      	cmp	r3, #128	@ 0x80
 800237a:	d119      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002388:	461a      	mov	r2, r3
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	334d      	adds	r3, #77	@ 0x4d
 800239e:	2207      	movs	r2, #7
 80023a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 f9af 	bl	800670e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 fc66 	bl	8005c8a <USB_ReadChInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c8:	d112      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 f99b 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e4:	461a      	mov	r2, r3
 80023e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023ea:	6093      	str	r3, [r2, #8]
 80023ec:	f000 bd75 	b.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 fc46 	bl	8005c8a <USB_ReadChInterrupts>
 80023fe:	4603      	mov	r3, r0
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	f040 8128 	bne.w	800265a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002416:	461a      	mov	r2, r3
 8002418:	2320      	movs	r3, #32
 800241a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	331b      	adds	r3, #27
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d119      	bne.n	8002466 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	331b      	adds	r3, #27
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	0151      	lsls	r1, r2, #5
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	440a      	add	r2, r1
 800245c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002464:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	799b      	ldrb	r3, [r3, #6]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01b      	beq.n	80024a6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3330      	adds	r3, #48	@ 0x30
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	1ac9      	subs	r1, r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4403      	add	r3, r0
 80024a2:	3338      	adds	r3, #56	@ 0x38
 80024a4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	334d      	adds	r3, #77	@ 0x4d
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3344      	adds	r3, #68	@ 0x44
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024da:	461a      	mov	r2, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3326      	adds	r3, #38	@ 0x26
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3326      	adds	r3, #38	@ 0x26
 8002506:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002508:	2b02      	cmp	r3, #2
 800250a:	d110      	bne.n	800252e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f004 f8fa 	bl	800670e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002526:	461a      	mov	r2, r3
 8002528:	2310      	movs	r3, #16
 800252a:	6093      	str	r3, [r2, #8]
 800252c:	e03d      	b.n	80025aa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3326      	adds	r3, #38	@ 0x26
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d00a      	beq.n	800255a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3326      	adds	r3, #38	@ 0x26
 8002554:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002556:	2b01      	cmp	r3, #1
 8002558:	d127      	bne.n	80025aa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	0151      	lsls	r1, r2, #5
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	440a      	add	r2, r1
 8002570:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002574:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002578:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	334c      	adds	r3, #76	@ 0x4c
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	334c      	adds	r3, #76	@ 0x4c
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f009 ff2f 	bl	800c408 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	799b      	ldrb	r3, [r3, #6]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d13b      	bne.n	800262a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3338      	adds	r3, #56	@ 0x38
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4403      	add	r3, r0
 80025d2:	3328      	adds	r3, #40	@ 0x28
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	440b      	add	r3, r1
 80025d8:	1e59      	subs	r1, r3, #1
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4403      	add	r3, r0
 80025e8:	3328      	adds	r3, #40	@ 0x28
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8470 	beq.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	333c      	adds	r3, #60	@ 0x3c
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2d8      	uxtb	r0, r3
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	333c      	adds	r3, #60	@ 0x3c
 8002622:	4602      	mov	r2, r0
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	f000 bc58 	b.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	333c      	adds	r3, #60	@ 0x3c
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	f083 0301 	eor.w	r3, r3, #1
 8002642:	b2d8      	uxtb	r0, r3
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	333c      	adds	r3, #60	@ 0x3c
 8002652:	4602      	mov	r2, r0
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	f000 bc40 	b.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f003 fb11 	bl	8005c8a <USB_ReadChInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b20      	cmp	r3, #32
 8002670:	d131      	bne.n	80026d6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	2320      	movs	r3, #32
 8002682:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	331a      	adds	r3, #26
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	f040 841f 	bne.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	331b      	adds	r3, #27
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	334d      	adds	r3, #77	@ 0x4d
 80026c0:	2203      	movs	r2, #3
 80026c2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 f81e 	bl	800670e <USB_HC_Halt>
 80026d2:	f000 bc02 	b.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fad3 	bl	8005c8a <USB_ReadChInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	f040 8305 	bne.w	8002cfa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026fc:	461a      	mov	r2, r3
 80026fe:	2302      	movs	r3, #2
 8002700:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	334d      	adds	r3, #77	@ 0x4d
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d114      	bne.n	8002742 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	334d      	adds	r3, #77	@ 0x4d
 8002728:	2202      	movs	r2, #2
 800272a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334c      	adds	r3, #76	@ 0x4c
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e2cc      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	334d      	adds	r3, #77	@ 0x4d
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b06      	cmp	r3, #6
 8002756:	d114      	bne.n	8002782 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	334d      	adds	r3, #77	@ 0x4d
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	334c      	adds	r3, #76	@ 0x4c
 800277c:	2205      	movs	r2, #5
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e2ac      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	334d      	adds	r3, #77	@ 0x4d
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b07      	cmp	r3, #7
 8002796:	d00b      	beq.n	80027b0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	334d      	adds	r3, #77	@ 0x4d
 80027a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027aa:	2b09      	cmp	r3, #9
 80027ac:	f040 80a6 	bne.w	80028fc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	334d      	adds	r3, #77	@ 0x4d
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3344      	adds	r3, #68	@ 0x44
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4403      	add	r3, r0
 80027e4:	3344      	adds	r3, #68	@ 0x44
 80027e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3344      	adds	r3, #68	@ 0x44
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d943      	bls.n	8002886 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3344      	adds	r3, #68	@ 0x44
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	331a      	adds	r3, #26
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d123      	bne.n	8002870 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	331b      	adds	r3, #27
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	331c      	adds	r3, #28
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	0151      	lsls	r1, r2, #5
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	440a      	add	r2, r1
 8002866:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800286a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800286e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	334c      	adds	r3, #76	@ 0x4c
 8002880:	2204      	movs	r2, #4
 8002882:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002884:	e229      	b.n	8002cda <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	334c      	adds	r3, #76	@ 0x4c
 8002896:	2202      	movs	r2, #2
 8002898:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3326      	adds	r3, #38	@ 0x26
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	3326      	adds	r3, #38	@ 0x26
 80028c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	f040 8209 	bne.w	8002cda <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f4:	461a      	mov	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028fa:	e1ee      	b.n	8002cda <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	334d      	adds	r3, #77	@ 0x4d
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b05      	cmp	r3, #5
 8002910:	f040 80c8 	bne.w	8002aa4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	331b      	adds	r3, #27
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	f040 81ce 	bne.w	8002cdc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3326      	adds	r3, #38	@ 0x26
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d16b      	bne.n	8002a2e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3348      	adds	r3, #72	@ 0x48
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	1c59      	adds	r1, r3, #1
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4403      	add	r3, r0
 8002976:	3348      	adds	r3, #72	@ 0x48
 8002978:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3348      	adds	r3, #72	@ 0x48
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d943      	bls.n	8002a18 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3348      	adds	r3, #72	@ 0x48
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	331b      	adds	r3, #27
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3344      	adds	r3, #68	@ 0x44
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d809      	bhi.n	80029e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	331c      	adds	r3, #28
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	0151      	lsls	r1, r2, #5
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	440a      	add	r2, r1
 80029f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a00:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	334c      	adds	r3, #76	@ 0x4c
 8002a12:	2204      	movs	r2, #4
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e014      	b.n	8002a42 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	334c      	adds	r3, #76	@ 0x4c
 8002a28:	2202      	movs	r2, #2
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e009      	b.n	8002a42 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	334c      	adds	r3, #76	@ 0x4c
 8002a3e:	2202      	movs	r2, #2
 8002a40:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3326      	adds	r3, #38	@ 0x26
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	3326      	adds	r3, #38	@ 0x26
 8002a68:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	f040 8136 	bne.w	8002cdc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a86:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a8e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e11b      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	334d      	adds	r3, #77	@ 0x4d
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	f040 8081 	bne.w	8002bbe <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	334d      	adds	r3, #77	@ 0x4d
 8002acc:	2202      	movs	r2, #2
 8002ace:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	331b      	adds	r3, #27
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	f040 80fa 	bne.w	8002cdc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	334c      	adds	r3, #76	@ 0x4c
 8002af8:	2202      	movs	r2, #2
 8002afa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	0151      	lsls	r1, r2, #5
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	440a      	add	r2, r1
 8002b12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	0151      	lsls	r1, r2, #5
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	440a      	add	r2, r1
 8002b32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b3a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	0151      	lsls	r1, r2, #5
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	440a      	add	r2, r1
 8002b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b56:	f023 0320 	bic.w	r3, r3, #32
 8002b5a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3326      	adds	r3, #38	@ 0x26
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3326      	adds	r3, #38	@ 0x26
 8002b82:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	f040 80a9 	bne.w	8002cdc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ba0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ba8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	e08e      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	334d      	adds	r3, #77	@ 0x4d
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d143      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	334d      	adds	r3, #77	@ 0x4d
 8002be4:	2202      	movs	r2, #2
 8002be6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	334c      	adds	r3, #76	@ 0x4c
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3326      	adds	r3, #38	@ 0x26
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	3326      	adds	r3, #38	@ 0x26
 8002c22:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d159      	bne.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c3e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c46:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c54:	461a      	mov	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e03f      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	334d      	adds	r3, #77	@ 0x4d
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d126      	bne.n	8002cc0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	334d      	adds	r3, #77	@ 0x4d
 8002c82:	2202      	movs	r2, #2
 8002c84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3344      	adds	r3, #68	@ 0x44
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	1c59      	adds	r1, r3, #1
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4403      	add	r3, r0
 8002ca6:	3344      	adds	r3, #68	@ 0x44
 8002ca8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	334c      	adds	r3, #76	@ 0x4c
 8002cba:	2204      	movs	r2, #4
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e00d      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	334d      	adds	r3, #77	@ 0x4d
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	f000 8100 	beq.w	8002ed8 <HCD_HC_IN_IRQHandler+0xcca>
 8002cd8:	e000      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cda:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	334c      	adds	r3, #76	@ 0x4c
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f009 fb88 	bl	800c408 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cf8:	e0ef      	b.n	8002eda <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 ffc1 	bl	8005c8a <USB_ReadChInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0e:	2b40      	cmp	r3, #64	@ 0x40
 8002d10:	d12f      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2340      	movs	r3, #64	@ 0x40
 8002d22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	334d      	adds	r3, #77	@ 0x4d
 8002d34:	2205      	movs	r2, #5
 8002d36:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	331a      	adds	r3, #26
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3344      	adds	r3, #68	@ 0x44
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 fccf 	bl	800670e <USB_HC_Halt>
 8002d70:	e0b3      	b.n	8002eda <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 ff85 	bl	8005c8a <USB_ReadChInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	f040 80a7 	bne.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3326      	adds	r3, #38	@ 0x26
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d11b      	bne.n	8002dda <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	3344      	adds	r3, #68	@ 0x44
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	334d      	adds	r3, #77	@ 0x4d
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fc9b 	bl	800670e <USB_HC_Halt>
 8002dd8:	e03f      	b.n	8002e5a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3326      	adds	r3, #38	@ 0x26
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3326      	adds	r3, #38	@ 0x26
 8002e00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d129      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3344      	adds	r3, #68	@ 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	799b      	ldrb	r3, [r3, #6]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HCD_HC_IN_IRQHandler+0xc2a>
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	331b      	adds	r3, #27
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d110      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	334d      	adds	r3, #77	@ 0x4d
 8002e48:	2204      	movs	r2, #4
 8002e4a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f003 fc5a 	bl	800670e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	331b      	adds	r3, #27
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d129      	bne.n	8002ec4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	331b      	adds	r3, #27
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	0151      	lsls	r1, r2, #5
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	440a      	add	r2, r1
 8002e9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	0151      	lsls	r1, r2, #5
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	440a      	add	r2, r1
 8002eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ebe:	f043 0320 	orr.w	r3, r3, #32
 8002ec2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	6093      	str	r3, [r2, #8]
 8002ed6:	e000      	b.n	8002eda <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002ed8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f002 fec3 	bl	8005c8a <USB_ReadChInterrupts>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d11b      	bne.n	8002f46 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	334d      	adds	r3, #77	@ 0x4d
 8002f30:	2207      	movs	r2, #7
 8002f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fbe6 	bl	800670e <USB_HC_Halt>
 8002f42:	f000 bc89 	b.w	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f002 fe9b 	bl	8005c8a <USB_ReadChInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	f040 8082 	bne.w	8003064 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2320      	movs	r3, #32
 8002f70:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3319      	adds	r3, #25
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d124      	bne.n	8002fd2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3319      	adds	r3, #25
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	334c      	adds	r3, #76	@ 0x4c
 8002fac:	2202      	movs	r2, #2
 8002fae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	334d      	adds	r3, #77	@ 0x4d
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fb9e 	bl	800670e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	331a      	adds	r3, #26
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f040 8437 	bne.w	8003858 <HCD_HC_OUT_IRQHandler+0x978>
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	331b      	adds	r3, #27
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 842b 	bne.w	8003858 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3326      	adds	r3, #38	@ 0x26
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d009      	beq.n	800302c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	331b      	adds	r3, #27
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	334d      	adds	r3, #77	@ 0x4d
 800303c:	2203      	movs	r2, #3
 800303e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f003 fb60 	bl	800670e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3344      	adds	r3, #68	@ 0x44
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e3f9      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fe0c 	bl	8005c8a <USB_ReadChInterrupts>
 8003072:	4603      	mov	r3, r0
 8003074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800307c:	d111      	bne.n	80030a2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800308a:	461a      	mov	r2, r3
 800308c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003090:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f003 fb37 	bl	800670e <USB_HC_Halt>
 80030a0:	e3da      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 fded 	bl	8005c8a <USB_ReadChInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d168      	bne.n	800318c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3344      	adds	r3, #68	@ 0x44
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 fdd7 	bl	8005c8a <USB_ReadChInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e2:	2b40      	cmp	r3, #64	@ 0x40
 80030e4:	d112      	bne.n	800310c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	3319      	adds	r3, #25
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003106:	461a      	mov	r2, r3
 8003108:	2340      	movs	r3, #64	@ 0x40
 800310a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	331b      	adds	r3, #27
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d019      	beq.n	8003156 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	331b      	adds	r3, #27
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	0151      	lsls	r1, r2, #5
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	440a      	add	r2, r1
 800314c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003154:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003162:	461a      	mov	r2, r3
 8003164:	2301      	movs	r3, #1
 8003166:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334d      	adds	r3, #77	@ 0x4d
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f003 fac2 	bl	800670e <USB_HC_Halt>
 800318a:	e365      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f002 fd78 	bl	8005c8a <USB_ReadChInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d139      	bne.n	8003218 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	334d      	adds	r3, #77	@ 0x4d
 80031b4:	2205      	movs	r2, #5
 80031b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	331a      	adds	r3, #26
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3319      	adds	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3344      	adds	r3, #68	@ 0x44
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 fa85 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003210:	461a      	mov	r2, r3
 8003212:	2340      	movs	r3, #64	@ 0x40
 8003214:	6093      	str	r3, [r2, #8]
 8003216:	e31f      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f002 fd32 	bl	8005c8a <USB_ReadChInterrupts>
 8003226:	4603      	mov	r3, r0
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b08      	cmp	r3, #8
 800322e:	d11a      	bne.n	8003266 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	2308      	movs	r3, #8
 8003240:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	@ 0x4d
 8003252:	2206      	movs	r2, #6
 8003254:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fa55 	bl	800670e <USB_HC_Halt>
 8003264:	e2f8      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f002 fd0b 	bl	8005c8a <USB_ReadChInterrupts>
 8003274:	4603      	mov	r3, r0
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b10      	cmp	r3, #16
 800327c:	d144      	bne.n	8003308 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	3344      	adds	r3, #68	@ 0x44
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	334d      	adds	r3, #77	@ 0x4d
 80032a2:	2204      	movs	r2, #4
 80032a4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3319      	adds	r3, #25
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d114      	bne.n	80032e6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3318      	adds	r3, #24
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3319      	adds	r3, #25
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 fa0d 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003300:	461a      	mov	r2, r3
 8003302:	2310      	movs	r3, #16
 8003304:	6093      	str	r3, [r2, #8]
 8003306:	e2a7      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f002 fcba 	bl	8005c8a <USB_ReadChInterrupts>
 8003316:	4603      	mov	r3, r0
 8003318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331c:	2b80      	cmp	r3, #128	@ 0x80
 800331e:	f040 8083 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	799b      	ldrb	r3, [r3, #6]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d111      	bne.n	800334e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	334d      	adds	r3, #77	@ 0x4d
 800333a:	2207      	movs	r2, #7
 800333c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f003 f9e1 	bl	800670e <USB_HC_Halt>
 800334c:	e062      	b.n	8003414 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3344      	adds	r3, #68	@ 0x44
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1c59      	adds	r1, r3, #1
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4403      	add	r3, r0
 800336e:	3344      	adds	r3, #68	@ 0x44
 8003370:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3344      	adds	r3, #68	@ 0x44
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d922      	bls.n	80033ce <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3344      	adds	r3, #68	@ 0x44
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334c      	adds	r3, #76	@ 0x4c
 80033ac:	2204      	movs	r2, #4
 80033ae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	334c      	adds	r3, #76	@ 0x4c
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f009 f81e 	bl	800c408 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033cc:	e022      	b.n	8003414 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334c      	adds	r3, #76	@ 0x4c
 80033de:	2202      	movs	r2, #2
 80033e0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033f8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003400:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	6093      	str	r3, [r2, #8]
 8003426:	e217      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f002 fc2a 	bl	8005c8a <USB_ReadChInterrupts>
 8003436:	4603      	mov	r3, r0
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003440:	d11b      	bne.n	800347a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	334d      	adds	r3, #77	@ 0x4d
 8003452:	2209      	movs	r2, #9
 8003454:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f003 f955 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003470:	461a      	mov	r2, r3
 8003472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003476:	6093      	str	r3, [r2, #8]
 8003478:	e1ee      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f002 fc01 	bl	8005c8a <USB_ReadChInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	f040 81df 	bne.w	8003852 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a0:	461a      	mov	r2, r3
 80034a2:	2302      	movs	r3, #2
 80034a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	334d      	adds	r3, #77	@ 0x4d
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f040 8093 	bne.w	80035e4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334d      	adds	r3, #77	@ 0x4d
 80034ce:	2202      	movs	r2, #2
 80034d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	334c      	adds	r3, #76	@ 0x4c
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3326      	adds	r3, #38	@ 0x26
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d00b      	beq.n	8003514 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3326      	adds	r3, #38	@ 0x26
 800350c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800350e:	2b03      	cmp	r3, #3
 8003510:	f040 8190 	bne.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	799b      	ldrb	r3, [r3, #6]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d115      	bne.n	8003548 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	333d      	adds	r3, #61	@ 0x3d
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	f083 0301 	eor.w	r3, r3, #1
 8003534:	b2d8      	uxtb	r0, r3
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	333d      	adds	r3, #61	@ 0x3d
 8003544:	4602      	mov	r2, r0
 8003546:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	799b      	ldrb	r3, [r3, #6]
 800354c:	2b01      	cmp	r3, #1
 800354e:	f040 8171 	bne.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3334      	adds	r3, #52	@ 0x34
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8165 	beq.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3334      	adds	r3, #52	@ 0x34
 800357a:	6819      	ldr	r1, [r3, #0]
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4403      	add	r3, r0
 800358a:	3328      	adds	r3, #40	@ 0x28
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	440b      	add	r3, r1
 8003590:	1e59      	subs	r1, r3, #1
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4403      	add	r3, r0
 80035a0:	3328      	adds	r3, #40	@ 0x28
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 813f 	beq.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	333d      	adds	r3, #61	@ 0x3d
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	f083 0301 	eor.w	r3, r3, #1
 80035ce:	b2d8      	uxtb	r0, r3
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	333d      	adds	r3, #61	@ 0x3d
 80035de:	4602      	mov	r2, r0
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e127      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334d      	adds	r3, #77	@ 0x4d
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d120      	bne.n	800363c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334d      	adds	r3, #77	@ 0x4d
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	331b      	adds	r3, #27
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	f040 8107 	bne.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	334c      	adds	r3, #76	@ 0x4c
 8003636:	2202      	movs	r2, #2
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e0fb      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	334d      	adds	r3, #77	@ 0x4d
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b04      	cmp	r3, #4
 8003650:	d13a      	bne.n	80036c8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	334d      	adds	r3, #77	@ 0x4d
 8003662:	2202      	movs	r2, #2
 8003664:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	334c      	adds	r3, #76	@ 0x4c
 8003676:	2202      	movs	r2, #2
 8003678:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	331b      	adds	r3, #27
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	f040 80d1 	bne.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	331b      	adds	r3, #27
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	0151      	lsls	r1, r2, #5
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	440a      	add	r2, r1
 80036bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c4:	6053      	str	r3, [r2, #4]
 80036c6:	e0b5      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	334d      	adds	r3, #77	@ 0x4d
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b05      	cmp	r3, #5
 80036dc:	d114      	bne.n	8003708 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	334d      	adds	r3, #77	@ 0x4d
 80036ee:	2202      	movs	r2, #2
 80036f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334c      	adds	r3, #76	@ 0x4c
 8003702:	2202      	movs	r2, #2
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e095      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	334d      	adds	r3, #77	@ 0x4d
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b06      	cmp	r3, #6
 800371c:	d114      	bne.n	8003748 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	334d      	adds	r3, #77	@ 0x4d
 800372e:	2202      	movs	r2, #2
 8003730:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	334c      	adds	r3, #76	@ 0x4c
 8003742:	2205      	movs	r2, #5
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	e075      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	334d      	adds	r3, #77	@ 0x4d
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b07      	cmp	r3, #7
 800375c:	d00a      	beq.n	8003774 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	334d      	adds	r3, #77	@ 0x4d
 800376e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003770:	2b09      	cmp	r3, #9
 8003772:	d170      	bne.n	8003856 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	334d      	adds	r3, #77	@ 0x4d
 8003784:	2202      	movs	r2, #2
 8003786:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3344      	adds	r3, #68	@ 0x44
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4403      	add	r3, r0
 80037a8:	3344      	adds	r3, #68	@ 0x44
 80037aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	3344      	adds	r3, #68	@ 0x44
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d914      	bls.n	80037ec <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3344      	adds	r3, #68	@ 0x44
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	334c      	adds	r3, #76	@ 0x4c
 80037e6:	2204      	movs	r2, #4
 80037e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037ea:	e022      	b.n	8003832 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	334c      	adds	r3, #76	@ 0x4c
 80037fc:	2202      	movs	r2, #2
 80037fe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003816:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800381e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382c:	461a      	mov	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003832:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	334c      	adds	r3, #76	@ 0x4c
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f008 fddc 	bl	800c408 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003850:	e002      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003856:	bf00      	nop
  }
}
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b08a      	sub	sp, #40	@ 0x28
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	0c5b      	lsrs	r3, r3, #17
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003892:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d004      	beq.n	80038a4 <HCD_RXQLVL_IRQHandler+0x46>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b05      	cmp	r3, #5
 800389e:	f000 80b6 	beq.w	8003a0e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038a2:	e0b7      	b.n	8003a14 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80b3 	beq.w	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	332c      	adds	r3, #44	@ 0x2c
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80a7 	beq.w	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3338      	adds	r3, #56	@ 0x38
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	18d1      	adds	r1, r2, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4403      	add	r3, r0
 80038e8:	3334      	adds	r3, #52	@ 0x34
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4299      	cmp	r1, r3
 80038ee:	f200 8083 	bhi.w	80039f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	332c      	adds	r3, #44	@ 0x2c
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	b292      	uxth	r2, r2
 800390c:	4619      	mov	r1, r3
 800390e:	f002 f951 	bl	8005bb4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	332c      	adds	r3, #44	@ 0x2c
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	18d1      	adds	r1, r2, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4403      	add	r3, r0
 8003936:	332c      	adds	r3, #44	@ 0x2c
 8003938:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	3338      	adds	r3, #56	@ 0x38
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	18d1      	adds	r1, r2, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4403      	add	r3, r0
 800395e:	3338      	adds	r3, #56	@ 0x38
 8003960:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	4413      	add	r3, r2
 800396a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	0cdb      	lsrs	r3, r3, #19
 8003972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003976:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3328      	adds	r3, #40	@ 0x28
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4293      	cmp	r3, r2
 8003990:	d13f      	bne.n	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d03c      	beq.n	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	333c      	adds	r3, #60	@ 0x3c
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f083 0301 	eor.w	r3, r3, #1
 80039e0:	b2d8      	uxtb	r0, r3
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	333c      	adds	r3, #60	@ 0x3c
 80039f2:	4602      	mov	r2, r0
 80039f4:	701a      	strb	r2, [r3, #0]
      break;
 80039f6:	e00c      	b.n	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	334c      	adds	r3, #76	@ 0x4c
 8003a08:	2204      	movs	r2, #4
 8003a0a:	701a      	strb	r2, [r3, #0]
      break;
 8003a0c:	e001      	b.n	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e000      	b.n	8003a14 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003a12:	bf00      	nop
  }
}
 8003a14:	bf00      	nop
 8003a16:	3728      	adds	r7, #40	@ 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003a48:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d10b      	bne.n	8003a6c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f008 fcb6 	bl	800c3d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d132      	bne.n	8003adc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f043 0308 	orr.w	r3, r3, #8
 8003a7c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d126      	bne.n	8003ad6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7a5b      	ldrb	r3, [r3, #9]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d113      	bne.n	8003ab8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003a96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a9a:	d106      	bne.n	8003aaa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f002 fa00 	bl	8005ea8 <USB_InitFSLSPClkSel>
 8003aa8:	e011      	b.n	8003ace <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f002 f9f9 	bl	8005ea8 <USB_InitFSLSPClkSel>
 8003ab6:	e00a      	b.n	8003ace <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	79db      	ldrb	r3, [r3, #7]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d106      	bne.n	8003ace <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003acc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f008 fcac 	bl	800c42c <HAL_HCD_PortEnabled_Callback>
 8003ad4:	e002      	b.n	8003adc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f008 fcb6 	bl	800c448 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d103      	bne.n	8003aee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f043 0320 	orr.w	r3, r3, #32
 8003aec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003af4:	461a      	mov	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6013      	str	r3, [r2, #0]
}
 8003afa:	bf00      	nop
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e12b      	b.n	8003d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd f93a 	bl	8000da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	@ 0x24
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b68:	f001 fa20 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8003b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4a81      	ldr	r2, [pc, #516]	@ (8003d78 <HAL_I2C_Init+0x274>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d807      	bhi.n	8003b88 <HAL_I2C_Init+0x84>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a80      	ldr	r2, [pc, #512]	@ (8003d7c <HAL_I2C_Init+0x278>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	bf94      	ite	ls
 8003b80:	2301      	movls	r3, #1
 8003b82:	2300      	movhi	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e006      	b.n	8003b96 <HAL_I2C_Init+0x92>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a7d      	ldr	r2, [pc, #500]	@ (8003d80 <HAL_I2C_Init+0x27c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	bf94      	ite	ls
 8003b90:	2301      	movls	r3, #1
 8003b92:	2300      	movhi	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e0e7      	b.n	8003d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a78      	ldr	r2, [pc, #480]	@ (8003d84 <HAL_I2C_Init+0x280>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	0c9b      	lsrs	r3, r3, #18
 8003ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8003d78 <HAL_I2C_Init+0x274>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d802      	bhi.n	8003bd8 <HAL_I2C_Init+0xd4>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	e009      	b.n	8003bec <HAL_I2C_Init+0xe8>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	4a69      	ldr	r2, [pc, #420]	@ (8003d88 <HAL_I2C_Init+0x284>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	099b      	lsrs	r3, r3, #6
 8003bea:	3301      	adds	r3, #1
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	495c      	ldr	r1, [pc, #368]	@ (8003d78 <HAL_I2C_Init+0x274>)
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	d819      	bhi.n	8003c40 <HAL_I2C_Init+0x13c>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e59      	subs	r1, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c1a:	1c59      	adds	r1, r3, #1
 8003c1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c20:	400b      	ands	r3, r1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_I2C_Init+0x138>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1e59      	subs	r1, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c34:	3301      	adds	r3, #1
 8003c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3a:	e051      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	e04f      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d111      	bne.n	8003c6c <HAL_I2C_Init+0x168>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	440b      	add	r3, r1
 8003c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e012      	b.n	8003c92 <HAL_I2C_Init+0x18e>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e58      	subs	r0, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	0099      	lsls	r1, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Init+0x196>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e022      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_I2C_Init+0x1bc>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1e58      	subs	r0, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	440b      	add	r3, r1
 8003cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cbe:	e00f      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1e58      	subs	r0, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	0099      	lsls	r1, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	6809      	ldr	r1, [r1, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6911      	ldr	r1, [r2, #16]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68d2      	ldr	r2, [r2, #12]
 8003d1a:	4311      	orrs	r1, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	000186a0 	.word	0x000186a0
 8003d7c:	001e847f 	.word	0x001e847f
 8003d80:	003d08ff 	.word	0x003d08ff
 8003d84:	431bde83 	.word	0x431bde83
 8003d88:	10624dd3 	.word	0x10624dd3

08003d8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e128      	b.n	8003ff0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a90      	ldr	r2, [pc, #576]	@ (8003ff8 <HAL_I2S_Init+0x26c>)
 8003db6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fd f83b 	bl	8000e34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003dd4:	f023 030f 	bic.w	r3, r3, #15
 8003dd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2202      	movs	r2, #2
 8003de0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d060      	beq.n	8003eac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003df2:	2310      	movs	r3, #16
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e001      	b.n	8003dfc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d802      	bhi.n	8003e0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f001 fa04 	bl	8005218 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e1a:	d125      	bne.n	8003e68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d010      	beq.n	8003e46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	461a      	mov	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	3305      	adds	r3, #5
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	e01f      	b.n	8003e86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	3305      	adds	r3, #5
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	e00e      	b.n	8003e86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	461a      	mov	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	3305      	adds	r3, #5
 8003e84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4a5c      	ldr	r2, [pc, #368]	@ (8003ffc <HAL_I2S_Init+0x270>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	08db      	lsrs	r3, r3, #3
 8003e90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	e003      	b.n	8003eb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003eac:	2302      	movs	r3, #2
 8003eae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d902      	bls.n	8003ec0 <HAL_I2S_Init+0x134>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2bff      	cmp	r3, #255	@ 0xff
 8003ebe:	d907      	bls.n	8003ed0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec4:	f043 0210 	orr.w	r2, r3, #16
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e08f      	b.n	8003ff0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	ea42 0103 	orr.w	r1, r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003eee:	f023 030f 	bic.w	r3, r3, #15
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6851      	ldr	r1, [r2, #4]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6892      	ldr	r2, [r2, #8]
 8003efa:	4311      	orrs	r1, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68d2      	ldr	r2, [r2, #12]
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6992      	ldr	r2, [r2, #24]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d161      	bne.n	8003fe0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a38      	ldr	r2, [pc, #224]	@ (8004000 <HAL_I2S_Init+0x274>)
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a37      	ldr	r2, [pc, #220]	@ (8004004 <HAL_I2S_Init+0x278>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_I2S_Init+0x1a4>
 8003f2c:	4b36      	ldr	r3, [pc, #216]	@ (8004008 <HAL_I2S_Init+0x27c>)
 8003f2e:	e001      	b.n	8003f34 <HAL_I2S_Init+0x1a8>
 8003f30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	4932      	ldr	r1, [pc, #200]	@ (8004004 <HAL_I2S_Init+0x278>)
 8003f3c:	428a      	cmp	r2, r1
 8003f3e:	d101      	bne.n	8003f44 <HAL_I2S_Init+0x1b8>
 8003f40:	4a31      	ldr	r2, [pc, #196]	@ (8004008 <HAL_I2S_Init+0x27c>)
 8003f42:	e001      	b.n	8003f48 <HAL_I2S_Init+0x1bc>
 8003f44:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003f48:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f4c:	f023 030f 	bic.w	r3, r3, #15
 8003f50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2b      	ldr	r2, [pc, #172]	@ (8004004 <HAL_I2S_Init+0x278>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_I2S_Init+0x1d4>
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004008 <HAL_I2S_Init+0x27c>)
 8003f5e:	e001      	b.n	8003f64 <HAL_I2S_Init+0x1d8>
 8003f60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f64:	2202      	movs	r2, #2
 8003f66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a25      	ldr	r2, [pc, #148]	@ (8004004 <HAL_I2S_Init+0x278>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <HAL_I2S_Init+0x1ea>
 8003f72:	4b25      	ldr	r3, [pc, #148]	@ (8004008 <HAL_I2S_Init+0x27c>)
 8003f74:	e001      	b.n	8003f7a <HAL_I2S_Init+0x1ee>
 8003f76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f86:	d003      	beq.n	8003f90 <HAL_I2S_Init+0x204>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d103      	bne.n	8003f98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	e001      	b.n	8003f9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	897b      	ldrh	r3, [r7, #10]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fc8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a0d      	ldr	r2, [pc, #52]	@ (8004004 <HAL_I2S_Init+0x278>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_I2S_Init+0x24c>
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <HAL_I2S_Init+0x27c>)
 8003fd6:	e001      	b.n	8003fdc <HAL_I2S_Init+0x250>
 8003fd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fdc:	897a      	ldrh	r2, [r7, #10]
 8003fde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	08004103 	.word	0x08004103
 8003ffc:	cccccccd 	.word	0xcccccccd
 8004000:	08004219 	.word	0x08004219
 8004004:	40003800 	.word	0x40003800
 8004008:	40003400 	.word	0x40003400

0800400c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10e      	bne.n	800409c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800408c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffb8 	bl	800400c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	b292      	uxth	r2, r2
 80040b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10e      	bne.n	80040fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff93 	bl	8004020 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b04      	cmp	r3, #4
 800411c:	d13a      	bne.n	8004194 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d109      	bne.n	800413c <I2S_IRQHandler+0x3a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	d102      	bne.n	800413c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ffb4 	bl	80040a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004142:	2b40      	cmp	r3, #64	@ 0x40
 8004144:	d126      	bne.n	8004194 <I2S_IRQHandler+0x92>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b20      	cmp	r3, #32
 8004152:	d11f      	bne.n	8004194 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004162:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	f043 0202 	orr.w	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ff50 	bl	8004034 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b03      	cmp	r3, #3
 800419e:	d136      	bne.n	800420e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d109      	bne.n	80041be <I2S_IRQHandler+0xbc>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b80      	cmp	r3, #128	@ 0x80
 80041b6:	d102      	bne.n	80041be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ff45 	bl	8004048 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d122      	bne.n	800420e <I2S_IRQHandler+0x10c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d11b      	bne.n	800420e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff13 	bl	8004034 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800420e:	bf00      	nop
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a92      	ldr	r2, [pc, #584]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d101      	bne.n	8004236 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004232:	4b92      	ldr	r3, [pc, #584]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004234:	e001      	b.n	800423a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004236:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a8b      	ldr	r2, [pc, #556]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004250:	4b8a      	ldr	r3, [pc, #552]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004252:	e001      	b.n	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004254:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004264:	d004      	beq.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 8099 	bne.w	80043a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b02      	cmp	r3, #2
 8004278:	d107      	bne.n	800428a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f925 	bl	80044d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d107      	bne.n	80042a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f9c8 	bl	8004634 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042aa:	2b40      	cmp	r3, #64	@ 0x40
 80042ac:	d13a      	bne.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d035      	beq.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042c2:	4b6e      	ldr	r3, [pc, #440]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042c4:	e001      	b.n	80042ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4969      	ldr	r1, [pc, #420]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042d2:	428b      	cmp	r3, r1
 80042d4:	d101      	bne.n	80042da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042d6:	4b69      	ldr	r3, [pc, #420]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042d8:	e001      	b.n	80042de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	f043 0202 	orr.w	r2, r3, #2
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff fe88 	bl	8004034 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b08      	cmp	r3, #8
 800432c:	f040 80c3 	bne.w	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80bd 	beq.w	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800434a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a49      	ldr	r2, [pc, #292]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004356:	4b49      	ldr	r3, [pc, #292]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004358:	e001      	b.n	800435e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800435a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4944      	ldr	r1, [pc, #272]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004366:	428b      	cmp	r3, r1
 8004368:	d101      	bne.n	800436e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800436a:	4b44      	ldr	r3, [pc, #272]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800436c:	e001      	b.n	8004372 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800436e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004372:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004376:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004378:	2300      	movs	r3, #0
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fe4a 	bl	8004034 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043a0:	e089      	b.n	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d107      	bne.n	80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f8be 	bl	8004538 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d107      	bne.n	80043d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f8fd 	bl	80045d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043dc:	2b40      	cmp	r3, #64	@ 0x40
 80043de:	d12f      	bne.n	8004440 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d02a      	beq.n	8004440 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d101      	bne.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004404:	4b1d      	ldr	r3, [pc, #116]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004406:	e001      	b.n	800440c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004408:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4919      	ldr	r1, [pc, #100]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004414:	428b      	cmp	r3, r1
 8004416:	d101      	bne.n	800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004418:	4b18      	ldr	r3, [pc, #96]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800441a:	e001      	b.n	8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800441c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004420:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004424:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004432:	f043 0202 	orr.w	r2, r3, #2
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fdfa 	bl	8004034 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b08      	cmp	r3, #8
 8004448:	d136      	bne.n	80044b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d031      	beq.n	80044b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a07      	ldr	r2, [pc, #28]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800445e:	4b07      	ldr	r3, [pc, #28]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004460:	e001      	b.n	8004466 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004462:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4902      	ldr	r1, [pc, #8]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800446e:	428b      	cmp	r3, r1
 8004470:	d106      	bne.n	8004480 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004472:	4b02      	ldr	r3, [pc, #8]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004474:	e006      	b.n	8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004476:	bf00      	nop
 8004478:	40003800 	.word	0x40003800
 800447c:	40003400 	.word	0x40003400
 8004480:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004484:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004488:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004498:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fdc0 	bl	8004034 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044b4:	e000      	b.n	80044b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044b6:	bf00      	nop
}
 80044b8:	bf00      	nop
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	1c99      	adds	r1, r3, #2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80044e6:	881a      	ldrh	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d113      	bne.n	800452e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004514:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffc9 	bl	80044c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	1c99      	adds	r1, r3, #2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6251      	str	r1, [r2, #36]	@ 0x24
 800454a:	8819      	ldrh	r1, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <I2SEx_TxISR_I2SExt+0x22>
 8004556:	4b1d      	ldr	r3, [pc, #116]	@ (80045cc <I2SEx_TxISR_I2SExt+0x94>)
 8004558:	e001      	b.n	800455e <I2SEx_TxISR_I2SExt+0x26>
 800455a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800455e:	460a      	mov	r2, r1
 8004560:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d121      	bne.n	80045be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a12      	ldr	r2, [pc, #72]	@ (80045c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <I2SEx_TxISR_I2SExt+0x50>
 8004584:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <I2SEx_TxISR_I2SExt+0x94>)
 8004586:	e001      	b.n	800458c <I2SEx_TxISR_I2SExt+0x54>
 8004588:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	490d      	ldr	r1, [pc, #52]	@ (80045c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004594:	428b      	cmp	r3, r1
 8004596:	d101      	bne.n	800459c <I2SEx_TxISR_I2SExt+0x64>
 8004598:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <I2SEx_TxISR_I2SExt+0x94>)
 800459a:	e001      	b.n	80045a0 <I2SEx_TxISR_I2SExt+0x68>
 800459c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff81 	bl	80044c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40003800 	.word	0x40003800
 80045cc:	40003400 	.word	0x40003400

080045d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68d8      	ldr	r0, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	1c99      	adds	r1, r3, #2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80045e8:	b282      	uxth	r2, r0
 80045ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d113      	bne.n	800462c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004612:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff ff4a 	bl	80044c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a20      	ldr	r2, [pc, #128]	@ (80046c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <I2SEx_RxISR_I2SExt+0x16>
 8004646:	4b20      	ldr	r3, [pc, #128]	@ (80046c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004648:	e001      	b.n	800464e <I2SEx_RxISR_I2SExt+0x1a>
 800464a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800464e:	68d8      	ldr	r0, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	1c99      	adds	r1, r3, #2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800465a:	b282      	uxth	r2, r0
 800465c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d121      	bne.n	80046ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a12      	ldr	r2, [pc, #72]	@ (80046c4 <I2SEx_RxISR_I2SExt+0x90>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d101      	bne.n	8004684 <I2SEx_RxISR_I2SExt+0x50>
 8004680:	4b11      	ldr	r3, [pc, #68]	@ (80046c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004682:	e001      	b.n	8004688 <I2SEx_RxISR_I2SExt+0x54>
 8004684:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	490d      	ldr	r1, [pc, #52]	@ (80046c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004690:	428b      	cmp	r3, r1
 8004692:	d101      	bne.n	8004698 <I2SEx_RxISR_I2SExt+0x64>
 8004694:	4b0c      	ldr	r3, [pc, #48]	@ (80046c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004696:	e001      	b.n	800469c <I2SEx_RxISR_I2SExt+0x68>
 8004698:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800469c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff03 	bl	80044c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40003800 	.word	0x40003800
 80046c8:	40003400 	.word	0x40003400

080046cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e267      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d075      	beq.n	80047d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ea:	4b88      	ldr	r3, [pc, #544]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d00c      	beq.n	8004710 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f6:	4b85      	ldr	r3, [pc, #532]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d112      	bne.n	8004728 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004702:	4b82      	ldr	r3, [pc, #520]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800470e:	d10b      	bne.n	8004728 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004710:	4b7e      	ldr	r3, [pc, #504]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d05b      	beq.n	80047d4 <HAL_RCC_OscConfig+0x108>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d157      	bne.n	80047d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e242      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004730:	d106      	bne.n	8004740 <HAL_RCC_OscConfig+0x74>
 8004732:	4b76      	ldr	r3, [pc, #472]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a75      	ldr	r2, [pc, #468]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e01d      	b.n	800477c <HAL_RCC_OscConfig+0xb0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x98>
 800474a:	4b70      	ldr	r3, [pc, #448]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6f      	ldr	r2, [pc, #444]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b6d      	ldr	r3, [pc, #436]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6c      	ldr	r2, [pc, #432]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e00b      	b.n	800477c <HAL_RCC_OscConfig+0xb0>
 8004764:	4b69      	ldr	r3, [pc, #420]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a68      	ldr	r2, [pc, #416]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800476a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b66      	ldr	r3, [pc, #408]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a65      	ldr	r2, [pc, #404]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800477a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fc fdc0 	bl	8001308 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fc fdbc 	bl	8001308 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	@ 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e207      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b5b      	ldr	r3, [pc, #364]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0xc0>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fc fdac 	bl	8001308 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fc fda8 	bl	8001308 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	@ 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e1f3      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c6:	4b51      	ldr	r3, [pc, #324]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0xe8>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d063      	beq.n	80048aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047e2:	4b4a      	ldr	r3, [pc, #296]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b47      	ldr	r3, [pc, #284]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d11c      	bne.n	8004834 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fa:	4b44      	ldr	r3, [pc, #272]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d116      	bne.n	8004834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	4b41      	ldr	r3, [pc, #260]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCC_OscConfig+0x152>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1c7      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481e:	4b3b      	ldr	r3, [pc, #236]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4937      	ldr	r1, [pc, #220]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	e03a      	b.n	80048aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483c:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <HAL_RCC_OscConfig+0x244>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fc fd61 	bl	8001308 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484a:	f7fc fd5d 	bl	8001308 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e1a8      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485c:	4b2b      	ldr	r3, [pc, #172]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004868:	4b28      	ldr	r3, [pc, #160]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4925      	ldr	r1, [pc, #148]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]
 800487c:	e015      	b.n	80048aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487e:	4b24      	ldr	r3, [pc, #144]	@ (8004910 <HAL_RCC_OscConfig+0x244>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fc fd40 	bl	8001308 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488c:	f7fc fd3c 	bl	8001308 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e187      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489e:	4b1b      	ldr	r3, [pc, #108]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d036      	beq.n	8004924 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d016      	beq.n	80048ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048be:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <HAL_RCC_OscConfig+0x248>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fc fd20 	bl	8001308 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fc fd1c 	bl	8001308 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e167      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048de:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80048e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x200>
 80048ea:	e01b      	b.n	8004924 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ec:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <HAL_RCC_OscConfig+0x248>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fc fd09 	bl	8001308 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f8:	e00e      	b.n	8004918 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fa:	f7fc fd05 	bl	8001308 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d907      	bls.n	8004918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e150      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
 800490c:	40023800 	.word	0x40023800
 8004910:	42470000 	.word	0x42470000
 8004914:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	4b88      	ldr	r3, [pc, #544]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 800491a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ea      	bne.n	80048fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8097 	beq.w	8004a60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004936:	4b81      	ldr	r3, [pc, #516]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	4b7d      	ldr	r3, [pc, #500]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 800494c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004950:	6413      	str	r3, [r2, #64]	@ 0x40
 8004952:	4b7a      	ldr	r3, [pc, #488]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004962:	4b77      	ldr	r3, [pc, #476]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d118      	bne.n	80049a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496e:	4b74      	ldr	r3, [pc, #464]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a73      	ldr	r2, [pc, #460]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497a:	f7fc fcc5 	bl	8001308 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004982:	f7fc fcc1 	bl	8001308 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e10c      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	4b6a      	ldr	r3, [pc, #424]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d106      	bne.n	80049b6 <HAL_RCC_OscConfig+0x2ea>
 80049a8:	4b64      	ldr	r3, [pc, #400]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ac:	4a63      	ldr	r2, [pc, #396]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b4:	e01c      	b.n	80049f0 <HAL_RCC_OscConfig+0x324>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x30c>
 80049be:	4b5f      	ldr	r3, [pc, #380]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049c4:	f043 0304 	orr.w	r3, r3, #4
 80049c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ca:	4b5c      	ldr	r3, [pc, #368]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ce:	4a5b      	ldr	r2, [pc, #364]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_OscConfig+0x324>
 80049d8:	4b58      	ldr	r3, [pc, #352]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049dc:	4a57      	ldr	r2, [pc, #348]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e4:	4b55      	ldr	r3, [pc, #340]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	4a54      	ldr	r2, [pc, #336]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049ea:	f023 0304 	bic.w	r3, r3, #4
 80049ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fc fc86 	bl	8001308 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fc fc82 	bl	8001308 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e0cb      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a16:	4b49      	ldr	r3, [pc, #292]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ee      	beq.n	8004a00 <HAL_RCC_OscConfig+0x334>
 8004a22:	e014      	b.n	8004a4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a24:	f7fc fc70 	bl	8001308 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2c:	f7fc fc6c 	bl	8001308 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0b5      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a42:	4b3e      	ldr	r3, [pc, #248]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1ee      	bne.n	8004a2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a54:	4b39      	ldr	r3, [pc, #228]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	4a38      	ldr	r2, [pc, #224]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 80a1 	beq.w	8004bac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a6a:	4b34      	ldr	r3, [pc, #208]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d05c      	beq.n	8004b30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d141      	bne.n	8004b02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7e:	4b31      	ldr	r3, [pc, #196]	@ (8004b44 <HAL_RCC_OscConfig+0x478>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a84:	f7fc fc40 	bl	8001308 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8c:	f7fc fc3c 	bl	8001308 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e087      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9e:	4b27      	ldr	r3, [pc, #156]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69da      	ldr	r2, [r3, #28]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	019b      	lsls	r3, r3, #6
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	041b      	lsls	r3, r3, #16
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	491b      	ldr	r1, [pc, #108]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b44 <HAL_RCC_OscConfig+0x478>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fc fc15 	bl	8001308 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fc fc11 	bl	8001308 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e05c      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af4:	4b11      	ldr	r3, [pc, #68]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x416>
 8004b00:	e054      	b.n	8004bac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b02:	4b10      	ldr	r3, [pc, #64]	@ (8004b44 <HAL_RCC_OscConfig+0x478>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fc fbfe 	bl	8001308 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fc fbfa 	bl	8001308 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e045      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x444>
 8004b2e:	e03d      	b.n	8004bac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e038      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	40007000 	.word	0x40007000
 8004b44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b48:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <HAL_RCC_OscConfig+0x4ec>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d028      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d121      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d11a      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b78:	4013      	ands	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d111      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	3b01      	subs	r3, #1
 8004b92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800

08004bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0cc      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b68      	ldr	r3, [pc, #416]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d90c      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b65      	ldr	r3, [pc, #404]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b63      	ldr	r3, [pc, #396]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0b8      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c10:	4b59      	ldr	r3, [pc, #356]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4a58      	ldr	r2, [pc, #352]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c28:	4b53      	ldr	r3, [pc, #332]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c34:	4b50      	ldr	r3, [pc, #320]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	494d      	ldr	r1, [pc, #308]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d044      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b47      	ldr	r3, [pc, #284]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d119      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d003      	beq.n	8004c7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e06f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e067      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9a:	4b37      	ldr	r3, [pc, #220]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f023 0203 	bic.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4934      	ldr	r1, [pc, #208]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cac:	f7fc fb2c 	bl	8001308 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	e00a      	b.n	8004cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb4:	f7fc fb28 	bl	8001308 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e04f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 020c 	and.w	r2, r3, #12
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d1eb      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b25      	ldr	r3, [pc, #148]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d20c      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b22      	ldr	r3, [pc, #136]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e032      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d10:	4b19      	ldr	r3, [pc, #100]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4916      	ldr	r1, [pc, #88]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d2e:	4b12      	ldr	r3, [pc, #72]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	490e      	ldr	r1, [pc, #56]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d42:	f000 f821 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d46:	4602      	mov	r2, r0
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	490a      	ldr	r1, [pc, #40]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	5ccb      	ldrb	r3, [r1, r3]
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	4a09      	ldr	r2, [pc, #36]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d5e:	4b09      	ldr	r3, [pc, #36]	@ (8004d84 <HAL_RCC_ClockConfig+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fc f97c 	bl	8001060 <HAL_InitTick>

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023c00 	.word	0x40023c00
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0800cc68 	.word	0x0800cc68
 8004d80:	20000000 	.word	0x20000000
 8004d84:	20000004 	.word	0x20000004

08004d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b094      	sub	sp, #80	@ 0x50
 8004d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004da0:	4b79      	ldr	r3, [pc, #484]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d00d      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	f200 80e1 	bhi.w	8004f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x34>
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dba:	e0db      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b73      	ldr	r3, [pc, #460]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dc0:	e0db      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dc2:	4b73      	ldr	r3, [pc, #460]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dc6:	e0d8      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d063      	beq.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dde:	4b6a      	ldr	r3, [pc, #424]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	2200      	movs	r2, #0
 8004de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004de8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004df2:	2300      	movs	r3, #0
 8004df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	f04f 0000 	mov.w	r0, #0
 8004e02:	f04f 0100 	mov.w	r1, #0
 8004e06:	0159      	lsls	r1, r3, #5
 8004e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e0c:	0150      	lsls	r0, r2, #5
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4621      	mov	r1, r4
 8004e14:	1a51      	subs	r1, r2, r1
 8004e16:	6139      	str	r1, [r7, #16]
 8004e18:	4629      	mov	r1, r5
 8004e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	018b      	lsls	r3, r1, #6
 8004e30:	4651      	mov	r1, sl
 8004e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e36:	4651      	mov	r1, sl
 8004e38:	018a      	lsls	r2, r1, #6
 8004e3a:	4651      	mov	r1, sl
 8004e3c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e40:	4659      	mov	r1, fp
 8004e42:	eb63 0901 	sbc.w	r9, r3, r1
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e5a:	4690      	mov	r8, r2
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	eb18 0303 	adds.w	r3, r8, r3
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	462b      	mov	r3, r5
 8004e68:	eb49 0303 	adc.w	r3, r9, r3
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	024b      	lsls	r3, r1, #9
 8004e7e:	4621      	mov	r1, r4
 8004e80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e84:	4621      	mov	r1, r4
 8004e86:	024a      	lsls	r2, r1, #9
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e8e:	2200      	movs	r2, #0
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e98:	f7fb f9a2 	bl	80001e0 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea4:	e058      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea6:	4b38      	ldr	r3, [pc, #224]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	2200      	movs	r2, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	f04f 0100 	mov.w	r1, #0
 8004ecc:	0159      	lsls	r1, r3, #5
 8004ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ed2:	0150      	lsls	r0, r2, #5
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4641      	mov	r1, r8
 8004eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ede:	4649      	mov	r1, r9
 8004ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8004efc:	eb63 050b 	sbc.w	r5, r3, fp
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	00eb      	lsls	r3, r5, #3
 8004f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f0e:	00e2      	lsls	r2, r4, #3
 8004f10:	4614      	mov	r4, r2
 8004f12:	461d      	mov	r5, r3
 8004f14:	4643      	mov	r3, r8
 8004f16:	18e3      	adds	r3, r4, r3
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	eb45 0303 	adc.w	r3, r5, r3
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f2e:	4629      	mov	r1, r5
 8004f30:	028b      	lsls	r3, r1, #10
 8004f32:	4621      	mov	r1, r4
 8004f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f38:	4621      	mov	r1, r4
 8004f3a:	028a      	lsls	r2, r1, #10
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f42:	2200      	movs	r2, #0
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	61fa      	str	r2, [r7, #28]
 8004f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f4c:	f7fb f948 	bl	80001e0 <__aeabi_uldivmod>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4613      	mov	r3, r2
 8004f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	3301      	adds	r3, #1
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f72:	e002      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f74:	4b05      	ldr	r3, [pc, #20]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3750      	adds	r7, #80	@ 0x50
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	007a1200 	.word	0x007a1200

08004f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f98:	4b03      	ldr	r3, [pc, #12]	@ (8004fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000000 	.word	0x20000000

08004fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fb0:	f7ff fff0 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	0a9b      	lsrs	r3, r3, #10
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	4903      	ldr	r1, [pc, #12]	@ (8004fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc2:	5ccb      	ldrb	r3, [r1, r3]
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	0800cc78 	.word	0x0800cc78

08004fd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	220f      	movs	r2, #15
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fe4:	4b12      	ldr	r3, [pc, #72]	@ (8005030 <HAL_RCC_GetClockConfig+0x5c>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0203 	and.w	r2, r3, #3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <HAL_RCC_GetClockConfig+0x5c>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <HAL_RCC_GetClockConfig+0x5c>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005008:	4b09      	ldr	r3, [pc, #36]	@ (8005030 <HAL_RCC_GetClockConfig+0x5c>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	08db      	lsrs	r3, r3, #3
 800500e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005016:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <HAL_RCC_GetClockConfig+0x60>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0207 	and.w	r2, r3, #7
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40023800 	.word	0x40023800
 8005034:	40023c00 	.word	0x40023c00

08005038 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800505c:	2b00      	cmp	r3, #0
 800505e:	d038      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005060:	4b68      	ldr	r3, [pc, #416]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005066:	f7fc f94f 	bl	8001308 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800506e:	f7fc f94b 	bl	8001308 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e0bd      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005080:	4b61      	ldr	r3, [pc, #388]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f0      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	071b      	lsls	r3, r3, #28
 800509e:	495a      	ldr	r1, [pc, #360]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050a6:	4b57      	ldr	r3, [pc, #348]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ac:	f7fc f92c 	bl	8001308 <HAL_GetTick>
 80050b0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050b4:	f7fc f928 	bl	8001308 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e09a      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050c6:	4b50      	ldr	r3, [pc, #320]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 8083 	beq.w	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	4b48      	ldr	r3, [pc, #288]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e8:	4a47      	ldr	r2, [pc, #284]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80050f0:	4b45      	ldr	r3, [pc, #276]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050fc:	4b43      	ldr	r3, [pc, #268]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a42      	ldr	r2, [pc, #264]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005106:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005108:	f7fc f8fe 	bl	8001308 <HAL_GetTick>
 800510c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005110:	f7fc f8fa 	bl	8001308 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e06c      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005122:	4b3a      	ldr	r3, [pc, #232]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800512e:	4b36      	ldr	r3, [pc, #216]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005136:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d02f      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	429a      	cmp	r2, r3
 800514a:	d028      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800514c:	4b2e      	ldr	r3, [pc, #184]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005154:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005156:	4b2e      	ldr	r3, [pc, #184]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800515c:	4b2c      	ldr	r3, [pc, #176]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005162:	4a29      	ldr	r2, [pc, #164]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005168:	4b27      	ldr	r3, [pc, #156]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d114      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005174:	f7fc f8c8 	bl	8001308 <HAL_GetTick>
 8005178:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	e00a      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7fc f8c4 	bl	8001308 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e034      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005192:	4b1d      	ldr	r3, [pc, #116]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ee      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051aa:	d10d      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80051ac:	4b16      	ldr	r3, [pc, #88]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80051bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c0:	4911      	ldr	r1, [pc, #68]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
 80051c6:	e005      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80051c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80051d2:	6093      	str	r3, [r2, #8]
 80051d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e0:	4909      	ldr	r1, [pc, #36]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	7d1a      	ldrb	r2, [r3, #20]
 80051f6:	4b07      	ldr	r3, [pc, #28]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80051f8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	42470068 	.word	0x42470068
 8005208:	40023800 	.word	0x40023800
 800520c:	40007000 	.word	0x40007000
 8005210:	42470e40 	.word	0x42470e40
 8005214:	424711e0 	.word	0x424711e0

08005218 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d141      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005236:	4b25      	ldr	r3, [pc, #148]	@ (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d006      	beq.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800524c:	d131      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800524e:	4b20      	ldr	r3, [pc, #128]	@ (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005250:	617b      	str	r3, [r7, #20]
          break;
 8005252:	e031      	b.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005254:	4b1d      	ldr	r3, [pc, #116]	@ (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800525c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005260:	d109      	bne.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005262:	4b1a      	ldr	r3, [pc, #104]	@ (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005268:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800526c:	4a19      	ldr	r2, [pc, #100]	@ (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	e008      	b.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005276:	4b15      	ldr	r3, [pc, #84]	@ (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800527c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005280:	4a15      	ldr	r2, [pc, #84]	@ (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005282:	fbb2 f3f3 	udiv	r3, r2, r3
 8005286:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005288:	4b10      	ldr	r3, [pc, #64]	@ (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800528a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800528e:	099b      	lsrs	r3, r3, #6
 8005290:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	fb02 f303 	mul.w	r3, r2, r3
 800529a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800529c:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800529e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052a2:	0f1b      	lsrs	r3, r3, #28
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ae:	617b      	str	r3, [r7, #20]
          break;
 80052b0:	e002      	b.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
          break;
 80052b6:	bf00      	nop
        }
      }
      break;
 80052b8:	e000      	b.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80052ba:	bf00      	nop
    }
  }
  return frequency;
 80052bc:	697b      	ldr	r3, [r7, #20]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40023800 	.word	0x40023800
 80052d0:	00bb8000 	.word	0x00bb8000
 80052d4:	007a1200 	.word	0x007a1200
 80052d8:	00f42400 	.word	0x00f42400

080052dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e07b      	b.n	80053e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d108      	bne.n	8005308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052fe:	d009      	beq.n	8005314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	61da      	str	r2, [r3, #28]
 8005306:	e005      	b.n	8005314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fb fe4e 	bl	8000fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800534a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005398:	ea42 0103 	orr.w	r1, r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	f003 0104 	and.w	r1, r3, #4
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	f003 0210 	and.w	r2, r3, #16
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e041      	b.n	8005484 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f839 	bl	800548c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 f9b1 	bl	8005794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d001      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e044      	b.n	8005542 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005550 <HAL_TIM_Base_Start_IT+0xb0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d018      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x6c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e2:	d013      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x6c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005554 <HAL_TIM_Base_Start_IT+0xb4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00e      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x6c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a19      	ldr	r2, [pc, #100]	@ (8005558 <HAL_TIM_Base_Start_IT+0xb8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d009      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x6c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a17      	ldr	r2, [pc, #92]	@ (800555c <HAL_TIM_Base_Start_IT+0xbc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x6c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a16      	ldr	r2, [pc, #88]	@ (8005560 <HAL_TIM_Base_Start_IT+0xc0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d111      	bne.n	8005530 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b06      	cmp	r3, #6
 800551c:	d010      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	e007      	b.n	8005540 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40010000 	.word	0x40010000
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40014000 	.word	0x40014000

08005564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d020      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01b      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0202 	mvn.w	r2, #2
 8005598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f8d2 	bl	8005758 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8c4 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f8d5 	bl	800576c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d020      	beq.n	8005614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01b      	beq.n	8005614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0204 	mvn.w	r2, #4
 80055e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f8ac 	bl	8005758 <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f89e 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f8af 	bl	800576c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d020      	beq.n	8005660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01b      	beq.n	8005660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0208 	mvn.w	r2, #8
 8005630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2204      	movs	r2, #4
 8005636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f886 	bl	8005758 <HAL_TIM_IC_CaptureCallback>
 800564c:	e005      	b.n	800565a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f878 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f889 	bl	800576c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b00      	cmp	r3, #0
 8005668:	d020      	beq.n	80056ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01b      	beq.n	80056ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0210 	mvn.w	r2, #16
 800567c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2208      	movs	r2, #8
 8005682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f860 	bl	8005758 <HAL_TIM_IC_CaptureCallback>
 8005698:	e005      	b.n	80056a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f852 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f863 	bl	800576c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0201 	mvn.w	r2, #1
 80056c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fb fb26 	bl	8000d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00c      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d007      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f8e6 	bl	80058c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00c      	beq.n	8005718 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f834 	bl	8005780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00c      	beq.n	800573c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0220 	mvn.w	r2, #32
 8005734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f8b8 	bl	80058ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a3a      	ldr	r2, [pc, #232]	@ (8005890 <TIM_Base_SetConfig+0xfc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00f      	beq.n	80057cc <TIM_Base_SetConfig+0x38>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b2:	d00b      	beq.n	80057cc <TIM_Base_SetConfig+0x38>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a37      	ldr	r2, [pc, #220]	@ (8005894 <TIM_Base_SetConfig+0x100>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d007      	beq.n	80057cc <TIM_Base_SetConfig+0x38>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a36      	ldr	r2, [pc, #216]	@ (8005898 <TIM_Base_SetConfig+0x104>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_Base_SetConfig+0x38>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a35      	ldr	r2, [pc, #212]	@ (800589c <TIM_Base_SetConfig+0x108>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d108      	bne.n	80057de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005890 <TIM_Base_SetConfig+0xfc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01b      	beq.n	800581e <TIM_Base_SetConfig+0x8a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ec:	d017      	beq.n	800581e <TIM_Base_SetConfig+0x8a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a28      	ldr	r2, [pc, #160]	@ (8005894 <TIM_Base_SetConfig+0x100>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <TIM_Base_SetConfig+0x8a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a27      	ldr	r2, [pc, #156]	@ (8005898 <TIM_Base_SetConfig+0x104>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00f      	beq.n	800581e <TIM_Base_SetConfig+0x8a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a26      	ldr	r2, [pc, #152]	@ (800589c <TIM_Base_SetConfig+0x108>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_Base_SetConfig+0x8a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a25      	ldr	r2, [pc, #148]	@ (80058a0 <TIM_Base_SetConfig+0x10c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <TIM_Base_SetConfig+0x8a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a24      	ldr	r2, [pc, #144]	@ (80058a4 <TIM_Base_SetConfig+0x110>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_Base_SetConfig+0x8a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a23      	ldr	r2, [pc, #140]	@ (80058a8 <TIM_Base_SetConfig+0x114>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d108      	bne.n	8005830 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a0e      	ldr	r2, [pc, #56]	@ (8005890 <TIM_Base_SetConfig+0xfc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d103      	bne.n	8005864 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b01      	cmp	r3, #1
 8005874:	d105      	bne.n	8005882 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	611a      	str	r2, [r3, #16]
  }
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40014400 	.word	0x40014400
 80058a8:	40014800 	.word	0x40014800

080058ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058d4:	b084      	sub	sp, #16
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	f107 001c 	add.w	r0, r7, #28
 80058e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d123      	bne.n	8005936 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005916:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800591a:	2b01      	cmp	r3, #1
 800591c:	d105      	bne.n	800592a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f9dc 	bl	8005ce8 <USB_CoreReset>
 8005930:	4603      	mov	r3, r0
 8005932:	73fb      	strb	r3, [r7, #15]
 8005934:	e01b      	b.n	800596e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f9d0 	bl	8005ce8 <USB_CoreReset>
 8005948:	4603      	mov	r3, r0
 800594a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800594c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005958:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005960:	e005      	b.n	800596e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005966:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800596e:	7fbb      	ldrb	r3, [r7, #30]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d10b      	bne.n	800598c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f043 0206 	orr.w	r2, r3, #6
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005998:	b004      	add	sp, #16
 800599a:	4770      	bx	lr

0800599c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f043 0201 	orr.w	r2, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f023 0201 	bic.w	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d115      	bne.n	8005a2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a0e:	200a      	movs	r0, #10
 8005a10:	f7fb fc86 	bl	8001320 <HAL_Delay>
      ms += 10U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	330a      	adds	r3, #10
 8005a18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f956 	bl	8005ccc <USB_GetMode>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d01e      	beq.n	8005a64 <USB_SetCurrentMode+0x84>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a2a:	d9f0      	bls.n	8005a0e <USB_SetCurrentMode+0x2e>
 8005a2c:	e01a      	b.n	8005a64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d115      	bne.n	8005a60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a40:	200a      	movs	r0, #10
 8005a42:	f7fb fc6d 	bl	8001320 <HAL_Delay>
      ms += 10U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	330a      	adds	r3, #10
 8005a4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f93d 	bl	8005ccc <USB_GetMode>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <USB_SetCurrentMode+0x84>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a5c:	d9f0      	bls.n	8005a40 <USB_SetCurrentMode+0x60>
 8005a5e:	e001      	b.n	8005a64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e005      	b.n	8005a70 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a68:	d101      	bne.n	8005a6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a92:	d901      	bls.n	8005a98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e01b      	b.n	8005ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	daf2      	bge.n	8005a86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	019b      	lsls	r3, r3, #6
 8005aa8:	f043 0220 	orr.w	r2, r3, #32
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005abc:	d901      	bls.n	8005ac2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e006      	b.n	8005ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d0f0      	beq.n	8005ab0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005af4:	d901      	bls.n	8005afa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e018      	b.n	8005b2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	daf2      	bge.n	8005ae8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2210      	movs	r2, #16
 8005b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b18:	d901      	bls.n	8005b1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e006      	b.n	8005b2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b10      	cmp	r3, #16
 8005b28:	d0f0      	beq.n	8005b0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b089      	sub	sp, #36	@ 0x24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	4611      	mov	r1, r2
 8005b44:	461a      	mov	r2, r3
 8005b46:	460b      	mov	r3, r1
 8005b48:	71fb      	strb	r3, [r7, #7]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d123      	bne.n	8005ba6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b5e:	88bb      	ldrh	r3, [r7, #4]
 8005b60:	3303      	adds	r3, #3
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	e018      	b.n	8005b9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	031a      	lsls	r2, r3, #12
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b78:	461a      	mov	r2, r3
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	3301      	adds	r3, #1
 8005b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	3301      	adds	r3, #1
 8005b96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d3e2      	bcc.n	8005b6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3724      	adds	r7, #36	@ 0x24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b08b      	sub	sp, #44	@ 0x2c
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	f003 0303 	and.w	r3, r3, #3
 8005bd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bda:	2300      	movs	r3, #0
 8005bdc:	623b      	str	r3, [r7, #32]
 8005bde:	e014      	b.n	8005c0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	3301      	adds	r3, #1
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	3301      	adds	r3, #1
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	3301      	adds	r3, #1
 8005c08:	623b      	str	r3, [r7, #32]
 8005c0a:	6a3a      	ldr	r2, [r7, #32]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d3e6      	bcc.n	8005be0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c12:	8bfb      	ldrh	r3, [r7, #30]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01e      	beq.n	8005c56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c22:	461a      	mov	r2, r3
 8005c24:	f107 0310 	add.w	r3, r7, #16
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	701a      	strb	r2, [r3, #0]
      i++;
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	3301      	adds	r3, #1
 8005c42:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	3301      	adds	r3, #1
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c4a:	8bfb      	ldrh	r3, [r7, #30]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c50:	8bfb      	ldrh	r3, [r7, #30]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1ea      	bne.n	8005c2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	372c      	adds	r7, #44	@ 0x2c
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d00:	d901      	bls.n	8005d06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e01b      	b.n	8005d3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	daf2      	bge.n	8005cf4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f043 0201 	orr.w	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d2a:	d901      	bls.n	8005d30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e006      	b.n	8005d3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d0f0      	beq.n	8005d1e <USB_CoreReset+0x36>

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d119      	bne.n	8005dd6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005da2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d10a      	bne.n	8005dc0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005db8:	f043 0304 	orr.w	r3, r3, #4
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e014      	b.n	8005dea <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dce:	f023 0304 	bic.w	r3, r3, #4
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e009      	b.n	8005dea <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005de4:	f023 0304 	bic.w	r3, r3, #4
 8005de8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dea:	2110      	movs	r1, #16
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff fe43 	bl	8005a78 <USB_FlushTxFifo>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff fe6d 	bl	8005adc <USB_FlushRxFifo>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e015      	b.n	8005e3e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e32:	461a      	mov	r2, r3
 8005e34:	2300      	movs	r3, #0
 8005e36:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e42:	461a      	mov	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d3e3      	bcc.n	8005e12 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f04f 32ff 	mov.w	r2, #4294967295
 8005e56:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2280      	movs	r2, #128	@ 0x80
 8005e5c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a0e      	ldr	r2, [pc, #56]	@ (8005e9c <USB_HostInit+0x150>)
 8005e62:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a0e      	ldr	r2, [pc, #56]	@ (8005ea0 <USB_HostInit+0x154>)
 8005e68:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f043 0210 	orr.w	r2, r3, #16
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	4b07      	ldr	r3, [pc, #28]	@ (8005ea4 <USB_HostInit+0x158>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e98:	b004      	add	sp, #16
 8005e9a:	4770      	bx	lr
 8005e9c:	00600080 	.word	0x00600080
 8005ea0:	004000e0 	.word	0x004000e0
 8005ea4:	a3200008 	.word	0xa3200008

08005ea8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	68f9      	ldr	r1, [r7, #12]
 8005edc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d107      	bne.n	8005efa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005ef6:	6053      	str	r3, [r2, #4]
 8005ef8:	e00c      	b.n	8005f14 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d107      	bne.n	8005f10 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f06:	461a      	mov	r2, r3
 8005f08:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005f0c:	6053      	str	r3, [r2, #4]
 8005f0e:	e001      	b.n	8005f14 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f42:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f50:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f52:	2064      	movs	r0, #100	@ 0x64
 8005f54:	f7fb f9e4 	bl	8001320 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f64:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f66:	200a      	movs	r0, #10
 8005f68:	f7fb f9da 	bl	8001320 <HAL_Delay>

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f9a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <USB_DriveVbus+0x44>
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d106      	bne.n	8005fba <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005fb8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc4:	d109      	bne.n	8005fda <USB_DriveVbus+0x64>
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fd8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	0c5b      	lsrs	r3, r3, #17
 8006006:	f003 0303 	and.w	r3, r3, #3
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	b29b      	uxth	r3, r3
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	4608      	mov	r0, r1
 8006042:	4611      	mov	r1, r2
 8006044:	461a      	mov	r2, r3
 8006046:	4603      	mov	r3, r0
 8006048:	70fb      	strb	r3, [r7, #3]
 800604a:	460b      	mov	r3, r1
 800604c:	70bb      	strb	r3, [r7, #2]
 800604e:	4613      	mov	r3, r2
 8006050:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4413      	add	r3, r2
 8006062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006066:	461a      	mov	r2, r3
 8006068:	f04f 33ff 	mov.w	r3, #4294967295
 800606c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800606e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006072:	2b03      	cmp	r3, #3
 8006074:	d867      	bhi.n	8006146 <USB_HC_Init+0x10e>
 8006076:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <USB_HC_Init+0x44>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	0800608d 	.word	0x0800608d
 8006080:	08006109 	.word	0x08006109
 8006084:	0800608d 	.word	0x0800608d
 8006088:	080060cb 	.word	0x080060cb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006098:	461a      	mov	r2, r3
 800609a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800609e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80060a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	da51      	bge.n	800614c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80060c8:	e040      	b.n	800614c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d6:	461a      	mov	r2, r3
 80060d8:	f240 639d 	movw	r3, #1693	@ 0x69d
 80060dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	da34      	bge.n	8006150 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	78fa      	ldrb	r2, [r7, #3]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006104:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006106:	e023      	b.n	8006150 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	4413      	add	r3, r2
 8006110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006114:	461a      	mov	r2, r3
 8006116:	f240 2325 	movw	r3, #549	@ 0x225
 800611a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800611c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006120:	2b00      	cmp	r3, #0
 8006122:	da17      	bge.n	8006154 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	78fa      	ldrb	r2, [r7, #3]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	440a      	add	r2, r1
 800613a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800613e:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006142:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006144:	e006      	b.n	8006154 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	77fb      	strb	r3, [r7, #31]
      break;
 800614a:	e004      	b.n	8006156 <USB_HC_Init+0x11e>
      break;
 800614c:	bf00      	nop
 800614e:	e002      	b.n	8006156 <USB_HC_Init+0x11e>
      break;
 8006150:	bf00      	nop
 8006152:	e000      	b.n	8006156 <USB_HC_Init+0x11e>
      break;
 8006154:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006162:	461a      	mov	r2, r3
 8006164:	2300      	movs	r3, #0
 8006166:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	78fa      	ldrb	r2, [r7, #3]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	440a      	add	r2, r1
 800617e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006182:	f043 0302 	orr.w	r3, r3, #2
 8006186:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800618e:	699a      	ldr	r2, [r3, #24]
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	2101      	movs	r1, #1
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	6939      	ldr	r1, [r7, #16]
 800619e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061a2:	4313      	orrs	r3, r2
 80061a4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80061b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	da03      	bge.n	80061c2 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80061ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	e001      	b.n	80061c6 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff ff0e 	bl	8005fe8 <USB_GetHostSpeed>
 80061cc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80061ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d106      	bne.n	80061e4 <USB_HC_Init+0x1ac>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d003      	beq.n	80061e4 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80061dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e001      	b.n	80061e8 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061e8:	787b      	ldrb	r3, [r7, #1]
 80061ea:	059b      	lsls	r3, r3, #22
 80061ec:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061f0:	78bb      	ldrb	r3, [r7, #2]
 80061f2:	02db      	lsls	r3, r3, #11
 80061f4:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061f8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061fe:	049b      	lsls	r3, r3, #18
 8006200:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006204:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006206:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006208:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800620c:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	431a      	orrs	r2, r3
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006216:	78fa      	ldrb	r2, [r7, #3]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	440a      	add	r2, r1
 800621e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006226:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006228:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800622c:	2b03      	cmp	r3, #3
 800622e:	d003      	beq.n	8006238 <USB_HC_Init+0x200>
 8006230:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006234:	2b01      	cmp	r3, #1
 8006236:	d10f      	bne.n	8006258 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	4413      	add	r3, r2
 8006240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	78fa      	ldrb	r2, [r7, #3]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	440a      	add	r2, r1
 800624e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006252:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006256:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006258:	7ffb      	ldrb	r3, [r7, #31]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop

08006264 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08c      	sub	sp, #48	@ 0x30
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	4613      	mov	r3, r2
 8006270:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800627c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006280:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	799b      	ldrb	r3, [r3, #6]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d158      	bne.n	800633c <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800628a:	2301      	movs	r3, #1
 800628c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	78db      	ldrb	r3, [r3, #3]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006296:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	8a92      	ldrh	r2, [r2, #20]
 800629c:	fb03 f202 	mul.w	r2, r3, r2
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	61da      	str	r2, [r3, #28]
 80062a4:	e079      	b.n	800639a <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	7c9b      	ldrb	r3, [r3, #18]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d130      	bne.n	8006310 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	2bbc      	cmp	r3, #188	@ 0xbc
 80062b4:	d918      	bls.n	80062e8 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	8a9b      	ldrh	r3, [r3, #20]
 80062ba:	461a      	mov	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d003      	beq.n	80062d8 <USB_HC_StartXfer+0x74>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d103      	bne.n	80062e0 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2202      	movs	r2, #2
 80062dc:	60da      	str	r2, [r3, #12]
 80062de:	e05c      	b.n	800639a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2201      	movs	r2, #1
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	e058      	b.n	800639a <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6a1a      	ldr	r2, [r3, #32]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d007      	beq.n	8006308 <USB_HC_StartXfer+0xa4>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d003      	beq.n	8006308 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2204      	movs	r2, #4
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	e048      	b.n	800639a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2203      	movs	r2, #3
 800630c:	60da      	str	r2, [r3, #12]
 800630e:	e044      	b.n	800639a <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10d      	bne.n	8006332 <USB_HC_StartXfer+0xce>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	8a92      	ldrh	r2, [r2, #20]
 800631e:	4293      	cmp	r3, r2
 8006320:	d907      	bls.n	8006332 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006322:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	8a92      	ldrh	r2, [r2, #20]
 8006328:	fb03 f202 	mul.w	r2, r3, r2
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	61da      	str	r2, [r3, #28]
 8006330:	e033      	b.n	800639a <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	61da      	str	r2, [r3, #28]
 800633a:	e02e      	b.n	800639a <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d018      	beq.n	8006376 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	8a92      	ldrh	r2, [r2, #20]
 800634c:	4413      	add	r3, r2
 800634e:	3b01      	subs	r3, #1
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	8a92      	ldrh	r2, [r2, #20]
 8006354:	fbb3 f3f2 	udiv	r3, r3, r2
 8006358:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800635a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800635c:	8b7b      	ldrh	r3, [r7, #26]
 800635e:	429a      	cmp	r2, r3
 8006360:	d90b      	bls.n	800637a <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8006362:	8b7b      	ldrh	r3, [r7, #26]
 8006364:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006366:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	8a92      	ldrh	r2, [r2, #20]
 800636c:	fb03 f202 	mul.w	r2, r3, r2
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	61da      	str	r2, [r3, #28]
 8006374:	e001      	b.n	800637a <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8006376:	2301      	movs	r3, #1
 8006378:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	78db      	ldrb	r3, [r3, #3]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006382:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	8a92      	ldrh	r2, [r2, #20]
 8006388:	fb03 f202 	mul.w	r2, r3, r2
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	61da      	str	r2, [r3, #28]
 8006390:	e003      	b.n	800639a <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063a4:	04d9      	lsls	r1, r3, #19
 80063a6:	4ba4      	ldr	r3, [pc, #656]	@ (8006638 <USB_HC_StartXfer+0x3d4>)
 80063a8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063aa:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	7d9b      	ldrb	r3, [r3, #22]
 80063b0:	075b      	lsls	r3, r3, #29
 80063b2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063b6:	69f9      	ldr	r1, [r7, #28]
 80063b8:	0148      	lsls	r0, r1, #5
 80063ba:	6a39      	ldr	r1, [r7, #32]
 80063bc:	4401      	add	r1, r0
 80063be:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063c2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063c4:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6999      	ldr	r1, [r3, #24]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063dc:	460a      	mov	r2, r1
 80063de:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	6a3a      	ldr	r2, [r7, #32]
 800640c:	440a      	add	r2, r1
 800640e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006412:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006416:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	7e7b      	ldrb	r3, [r7, #25]
 8006428:	075b      	lsls	r3, r3, #29
 800642a:	69f9      	ldr	r1, [r7, #28]
 800642c:	0148      	lsls	r0, r1, #5
 800642e:	6a39      	ldr	r1, [r7, #32]
 8006430:	4401      	add	r1, r0
 8006432:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006436:	4313      	orrs	r3, r2
 8006438:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	799b      	ldrb	r3, [r3, #6]
 800643e:	2b01      	cmp	r3, #1
 8006440:	f040 80c4 	bne.w	80065cc <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	7c5b      	ldrb	r3, [r3, #17]
 8006448:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800644e:	4313      	orrs	r3, r2
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	6a3a      	ldr	r2, [r7, #32]
 8006456:	440a      	add	r2, r1
 8006458:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800645c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006460:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	4413      	add	r3, r2
 800646a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	6a3a      	ldr	r2, [r7, #32]
 8006476:	440a      	add	r2, r1
 8006478:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800647c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006480:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	79db      	ldrb	r3, [r3, #7]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d123      	bne.n	80064d2 <USB_HC_StartXfer+0x26e>
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	78db      	ldrb	r3, [r3, #3]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d11f      	bne.n	80064d2 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	4413      	add	r3, r2
 800649a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	0151      	lsls	r1, r2, #5
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	440a      	add	r2, r1
 80064a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b0:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d0:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	7c9b      	ldrb	r3, [r3, #18]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d003      	beq.n	80064e2 <USB_HC_StartXfer+0x27e>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	7c9b      	ldrb	r3, [r3, #18]
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d117      	bne.n	8006512 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d113      	bne.n	8006512 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	78db      	ldrb	r3, [r3, #3]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d10f      	bne.n	8006512 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	440a      	add	r2, r1
 8006508:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800650c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006510:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	7c9b      	ldrb	r3, [r3, #18]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d163      	bne.n	80065e2 <USB_HC_StartXfer+0x37e>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	78db      	ldrb	r3, [r3, #3]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d15f      	bne.n	80065e2 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	3b01      	subs	r3, #1
 8006528:	2b03      	cmp	r3, #3
 800652a:	d859      	bhi.n	80065e0 <USB_HC_StartXfer+0x37c>
 800652c:	a201      	add	r2, pc, #4	@ (adr r2, 8006534 <USB_HC_StartXfer+0x2d0>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006545 	.word	0x08006545
 8006538:	08006567 	.word	0x08006567
 800653c:	08006589 	.word	0x08006589
 8006540:	080065ab 	.word	0x080065ab
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	440a      	add	r2, r1
 800655a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800655e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006562:	6053      	str	r3, [r2, #4]
          break;
 8006564:	e03d      	b.n	80065e2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	6a3a      	ldr	r2, [r7, #32]
 800657a:	440a      	add	r2, r1
 800657c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006580:	f043 030e 	orr.w	r3, r3, #14
 8006584:	6053      	str	r3, [r2, #4]
          break;
 8006586:	e02c      	b.n	80065e2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	4413      	add	r3, r2
 8006590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	6a3a      	ldr	r2, [r7, #32]
 800659c:	440a      	add	r2, r1
 800659e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065a6:	6053      	str	r3, [r2, #4]
          break;
 80065a8:	e01b      	b.n	80065e2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	6a3a      	ldr	r2, [r7, #32]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065c8:	6053      	str	r3, [r2, #4]
          break;
 80065ca:	e00a      	b.n	80065e2 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d8:	461a      	mov	r2, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	6053      	str	r3, [r2, #4]
 80065de:	e000      	b.n	80065e2 <USB_HC_StartXfer+0x37e>
          break;
 80065e0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065f8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	78db      	ldrb	r3, [r3, #3]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d004      	beq.n	800660c <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	e003      	b.n	8006614 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006612:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800661a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006628:	461a      	mov	r2, r3
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	e055      	b.n	80066e4 <USB_HC_StartXfer+0x480>
 8006638:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	78db      	ldrb	r3, [r3, #3]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d14e      	bne.n	80066e2 <USB_HC_StartXfer+0x47e>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d04a      	beq.n	80066e2 <USB_HC_StartXfer+0x47e>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	79db      	ldrb	r3, [r3, #7]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d146      	bne.n	80066e2 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	7c9b      	ldrb	r3, [r3, #18]
 8006658:	2b03      	cmp	r3, #3
 800665a:	d831      	bhi.n	80066c0 <USB_HC_StartXfer+0x45c>
 800665c:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <USB_HC_StartXfer+0x400>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006675 	.word	0x08006675
 8006668:	08006699 	.word	0x08006699
 800666c:	08006675 	.word	0x08006675
 8006670:	08006699 	.word	0x08006699
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	3303      	adds	r3, #3
 800667a:	089b      	lsrs	r3, r3, #2
 800667c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800667e:	8afa      	ldrh	r2, [r7, #22]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006684:	b29b      	uxth	r3, r3
 8006686:	429a      	cmp	r2, r3
 8006688:	d91c      	bls.n	80066c4 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f043 0220 	orr.w	r2, r3, #32
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	619a      	str	r2, [r3, #24]
        }
        break;
 8006696:	e015      	b.n	80066c4 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	3303      	adds	r3, #3
 800669e:	089b      	lsrs	r3, r3, #2
 80066a0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80066a2:	8afa      	ldrh	r2, [r7, #22]
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d90a      	bls.n	80066c8 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80066be:	e003      	b.n	80066c8 <USB_HC_StartXfer+0x464>

      default:
        break;
 80066c0:	bf00      	nop
 80066c2:	e002      	b.n	80066ca <USB_HC_StartXfer+0x466>
        break;
 80066c4:	bf00      	nop
 80066c6:	e000      	b.n	80066ca <USB_HC_StartXfer+0x466>
        break;
 80066c8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6999      	ldr	r1, [r3, #24]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	785a      	ldrb	r2, [r3, #1]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2000      	movs	r0, #0
 80066da:	9000      	str	r0, [sp, #0]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fa2b 	bl	8005b38 <USB_WritePacket>
  }

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3728      	adds	r7, #40	@ 0x28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	b29b      	uxth	r3, r3
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800670e:	b480      	push	{r7}
 8006710:	b089      	sub	sp, #36	@ 0x24
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	0c9b      	lsrs	r3, r3, #18
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	4413      	add	r3, r2
 8006744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	0fdb      	lsrs	r3, r3, #31
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	0fdb      	lsrs	r3, r3, #31
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b20      	cmp	r3, #32
 8006772:	d10d      	bne.n	8006790 <USB_HC_Halt+0x82>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10a      	bne.n	8006790 <USB_HC_Halt+0x82>
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d002      	beq.n	800678c <USB_HC_Halt+0x7e>
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b03      	cmp	r3, #3
 800678a:	d101      	bne.n	8006790 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e0d8      	b.n	8006942 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <USB_HC_Halt+0x8e>
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d173      	bne.n	8006884 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d14a      	bne.n	800685e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d133      	bne.n	800683c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067f2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	440a      	add	r2, r1
 800680a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800680e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006812:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	3301      	adds	r3, #1
 8006818:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006820:	d82e      	bhi.n	8006880 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006838:	d0ec      	beq.n	8006814 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800683a:	e081      	b.n	8006940 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	4413      	add	r3, r2
 8006844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	0151      	lsls	r1, r2, #5
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	440a      	add	r2, r1
 8006852:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800685a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800685c:	e070      	b.n	8006940 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	0151      	lsls	r1, r2, #5
 8006870:	69fa      	ldr	r2, [r7, #28]
 8006872:	440a      	add	r2, r1
 8006874:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006878:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800687c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800687e:	e05f      	b.n	8006940 <USB_HC_Halt+0x232>
            break;
 8006880:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006882:	e05d      	b.n	8006940 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	440a      	add	r2, r1
 800689a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800689e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d133      	bne.n	800691c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	3301      	adds	r3, #1
 80068f8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006900:	d81d      	bhi.n	800693e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006918:	d0ec      	beq.n	80068f4 <USB_HC_Halt+0x1e6>
 800691a:	e011      	b.n	8006940 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	440a      	add	r2, r1
 8006932:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006936:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	e000      	b.n	8006940 <USB_HC_Halt+0x232>
          break;
 800693e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3724      	adds	r7, #36	@ 0x24
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b088      	sub	sp, #32
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff f82b 	bl	80059be <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006968:	2110      	movs	r1, #16
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff f884 	bl	8005a78 <USB_FlushTxFifo>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff f8ae 	bl	8005adc <USB_FlushRxFifo>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800698a:	2300      	movs	r3, #0
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e01f      	b.n	80069d0 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4413      	add	r3, r2
 8006998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069a6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069ae:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069b6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c4:	461a      	mov	r2, r3
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	3301      	adds	r3, #1
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b0f      	cmp	r3, #15
 80069d4:	d9dc      	bls.n	8006990 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069d6:	2300      	movs	r3, #0
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	e034      	b.n	8006a46 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069f2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069fa:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a02:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a10:	461a      	mov	r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a22:	d80c      	bhi.n	8006a3e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a3a:	d0ec      	beq.n	8006a16 <USB_StopHost+0xc8>
 8006a3c:	e000      	b.n	8006a40 <USB_StopHost+0xf2>
        break;
 8006a3e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	3301      	adds	r3, #1
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b0f      	cmp	r3, #15
 8006a4a:	d9c7      	bls.n	80069dc <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a52:	461a      	mov	r2, r3
 8006a54:	f04f 33ff 	mov.w	r3, #4294967295
 8006a58:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a60:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fe ff9a 	bl	800599c <USB_EnableGlobalInt>

  return ret;
 8006a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a72:	b590      	push	{r4, r7, lr}
 8006a74:	b089      	sub	sp, #36	@ 0x24
 8006a76:	af04      	add	r7, sp, #16
 8006a78:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	2102      	movs	r1, #2
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fcd2 	bl	800742a <USBH_FindInterface>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	2bff      	cmp	r3, #255	@ 0xff
 8006a8e:	d002      	beq.n	8006a96 <USBH_CDC_InterfaceInit+0x24>
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d901      	bls.n	8006a9a <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a96:	2302      	movs	r3, #2
 8006a98:	e13d      	b.n	8006d16 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fca7 	bl	80073f2 <USBH_SelectInterface>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e131      	b.n	8006d16 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006ab8:	2050      	movs	r0, #80	@ 0x50
 8006aba:	f005 fec9 	bl	800c850 <malloc>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e11f      	b.n	8006d16 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006ad6:	2250      	movs	r2, #80	@ 0x50
 8006ad8:	2100      	movs	r1, #0
 8006ada:	68b8      	ldr	r0, [r7, #8]
 8006adc:	f005 ff76 	bl	800c9cc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	211a      	movs	r1, #26
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	b25b      	sxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da15      	bge.n	8006b24 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	211a      	movs	r1, #26
 8006afe:	fb01 f303 	mul.w	r3, r1, r3
 8006b02:	4413      	add	r3, r2
 8006b04:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	211a      	movs	r1, #26
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006b1e:	881a      	ldrh	r2, [r3, #0]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f002 fa19 	bl	8008f62 <USBH_AllocPipe>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	7819      	ldrb	r1, [r3, #0]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	7858      	ldrb	r0, [r3, #1]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	8952      	ldrh	r2, [r2, #10]
 8006b50:	9202      	str	r2, [sp, #8]
 8006b52:	2203      	movs	r2, #3
 8006b54:	9201      	str	r2, [sp, #4]
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	4623      	mov	r3, r4
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f002 f9d1 	bl	8008f04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f005 fdea 	bl	800c744 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b70:	2300      	movs	r3, #0
 8006b72:	2200      	movs	r2, #0
 8006b74:	210a      	movs	r1, #10
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fc57 	bl	800742a <USBH_FindInterface>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	2bff      	cmp	r3, #255	@ 0xff
 8006b84:	d002      	beq.n	8006b8c <USBH_CDC_InterfaceInit+0x11a>
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d901      	bls.n	8006b90 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e0c2      	b.n	8006d16 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	211a      	movs	r1, #26
 8006b96:	fb01 f303 	mul.w	r3, r1, r3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b25b      	sxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da16      	bge.n	8006bd6 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	211a      	movs	r1, #26
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006bb8:	781a      	ldrb	r2, [r3, #0]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	211a      	movs	r1, #26
 8006bc4:	fb01 f303 	mul.w	r3, r1, r3
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006bce:	881a      	ldrh	r2, [r3, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	835a      	strh	r2, [r3, #26]
 8006bd4:	e015      	b.n	8006c02 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	211a      	movs	r1, #26
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	4413      	add	r3, r2
 8006be2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006be6:	781a      	ldrb	r2, [r3, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	211a      	movs	r1, #26
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006bfc:	881a      	ldrh	r2, [r3, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	211a      	movs	r1, #26
 8006c08:	fb01 f303 	mul.w	r3, r1, r3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	b25b      	sxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da16      	bge.n	8006c48 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	211a      	movs	r1, #26
 8006c20:	fb01 f303 	mul.w	r3, r1, r3
 8006c24:	4413      	add	r3, r2
 8006c26:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006c2a:	781a      	ldrb	r2, [r3, #0]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	211a      	movs	r1, #26
 8006c36:	fb01 f303 	mul.w	r3, r1, r3
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006c40:	881a      	ldrh	r2, [r3, #0]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	835a      	strh	r2, [r3, #26]
 8006c46:	e015      	b.n	8006c74 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	211a      	movs	r1, #26
 8006c4e:	fb01 f303 	mul.w	r3, r1, r3
 8006c52:	4413      	add	r3, r2
 8006c54:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006c58:	781a      	ldrb	r2, [r3, #0]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	211a      	movs	r1, #26
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006c6e:	881a      	ldrh	r2, [r3, #0]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	7b9b      	ldrb	r3, [r3, #14]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f002 f971 	bl	8008f62 <USBH_AllocPipe>
 8006c80:	4603      	mov	r3, r0
 8006c82:	461a      	mov	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	7bdb      	ldrb	r3, [r3, #15]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f002 f967 	bl	8008f62 <USBH_AllocPipe>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	7b59      	ldrb	r1, [r3, #13]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	7b98      	ldrb	r0, [r3, #14]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	8b12      	ldrh	r2, [r2, #24]
 8006cb4:	9202      	str	r2, [sp, #8]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	9201      	str	r2, [sp, #4]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4623      	mov	r3, r4
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f002 f91f 	bl	8008f04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	7b19      	ldrb	r1, [r3, #12]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	7bd8      	ldrb	r0, [r3, #15]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	8b52      	ldrh	r2, [r2, #26]
 8006cde:	9202      	str	r2, [sp, #8]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	9201      	str	r2, [sp, #4]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	4623      	mov	r3, r4
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f002 f90a 	bl	8008f04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	7b5b      	ldrb	r3, [r3, #13]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f005 fd1f 	bl	800c744 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	7b1b      	ldrb	r3, [r3, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f005 fd18 	bl	800c744 <USBH_LL_SetToggle>

  return USBH_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd90      	pop	{r4, r7, pc}

08006d1e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f002 f8ff 	bl	8008f42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f002 f92a 	bl	8008fa4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	7b1b      	ldrb	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00e      	beq.n	8006d7c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	7b1b      	ldrb	r3, [r3, #12]
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f002 f8ec 	bl	8008f42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	7b1b      	ldrb	r3, [r3, #12]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f002 f917 	bl	8008fa4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	7b5b      	ldrb	r3, [r3, #13]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00e      	beq.n	8006da2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	7b5b      	ldrb	r3, [r3, #13]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f002 f8d9 	bl	8008f42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	7b5b      	ldrb	r3, [r3, #13]
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f002 f904 	bl	8008fa4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f005 fd52 	bl	800c860 <free>
    phost->pActiveClass->pData = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3340      	adds	r3, #64	@ 0x40
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8b2 	bl	8006f52 <GetLineCoding>
 8006dee:	4603      	mov	r3, r0
 8006df0:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d105      	bne.n	8006e04 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dfe:	2102      	movs	r1, #2
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006e04:	7afb      	ldrb	r3, [r7, #11]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d877      	bhi.n	8006f24 <USBH_CDC_Process+0x114>
 8006e34:	a201      	add	r2, pc, #4	@ (adr r2, 8006e3c <USBH_CDC_Process+0x2c>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e51 	.word	0x08006e51
 8006e40:	08006e57 	.word	0x08006e57
 8006e44:	08006e87 	.word	0x08006e87
 8006e48:	08006efb 	.word	0x08006efb
 8006e4c:	08006f09 	.word	0x08006f09
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]
      break;
 8006e54:	e06d      	b.n	8006f32 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f897 	bl	8006f90 <SetLineCoding>
 8006e62:	4603      	mov	r3, r0
 8006e64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d104      	bne.n	8006e76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e74:	e058      	b.n	8006f28 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d055      	beq.n	8006f28 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006e84:	e050      	b.n	8006f28 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	3340      	adds	r3, #64	@ 0x40
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f860 	bl	8006f52 <GetLineCoding>
 8006e92:	4603      	mov	r3, r0
 8006e94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d126      	bne.n	8006eea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eae:	791b      	ldrb	r3, [r3, #4]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d13b      	bne.n	8006f2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ebe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d133      	bne.n	8006f2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ece:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d12b      	bne.n	8006f2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006edc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d124      	bne.n	8006f2c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f982 	bl	80071ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ee8:	e020      	b.n	8006f2c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d01d      	beq.n	8006f2c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2204      	movs	r2, #4
 8006ef4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006ef8:	e018      	b.n	8006f2c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f867 	bl	8006fce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f8f6 	bl	80070f2 <CDC_ProcessReception>
      break;
 8006f06:	e014      	b.n	8006f32 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006f08:	2100      	movs	r1, #0
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 f984 	bl	8008218 <USBH_ClrFeature>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006f22:	e005      	b.n	8006f30 <USBH_CDC_Process+0x120>

    default:
      break;
 8006f24:	bf00      	nop
 8006f26:	e004      	b.n	8006f32 <USBH_CDC_Process+0x122>
      break;
 8006f28:	bf00      	nop
 8006f2a:	e002      	b.n	8006f32 <USBH_CDC_Process+0x122>
      break;
 8006f2c:	bf00      	nop
 8006f2e:	e000      	b.n	8006f32 <USBH_CDC_Process+0x122>
      break;
 8006f30:	bf00      	nop

  }

  return status;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b082      	sub	sp, #8
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	22a1      	movs	r2, #161	@ 0xa1
 8006f60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2221      	movs	r2, #33	@ 0x21
 8006f66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2207      	movs	r2, #7
 8006f78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2207      	movs	r2, #7
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 fc7e 	bl	8008882 <USBH_CtlReq>
 8006f86:	4603      	mov	r3, r0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2221      	movs	r2, #33	@ 0x21
 8006f9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2207      	movs	r2, #7
 8006fb6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2207      	movs	r2, #7
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fc5f 	bl	8008882 <USBH_CtlReq>
 8006fc4:	4603      	mov	r3, r0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b086      	sub	sp, #24
 8006fd2:	af02      	add	r7, sp, #8
 8006fd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d002      	beq.n	8006ff4 <CDC_ProcessTransmission+0x26>
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d023      	beq.n	800703a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006ff2:	e07a      	b.n	80070ea <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	8b12      	ldrh	r2, [r2, #24]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d90b      	bls.n	8007018 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	69d9      	ldr	r1, [r3, #28]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8b1a      	ldrh	r2, [r3, #24]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	7b5b      	ldrb	r3, [r3, #13]
 800700c:	2001      	movs	r0, #1
 800700e:	9000      	str	r0, [sp, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 ff34 	bl	8008e7e <USBH_BulkSendData>
 8007016:	e00b      	b.n	8007030 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	7b5b      	ldrb	r3, [r3, #13]
 8007026:	2001      	movs	r0, #1
 8007028:	9000      	str	r0, [sp, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 ff27 	bl	8008e7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007038:	e057      	b.n	80070ea <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	7b5b      	ldrb	r3, [r3, #13]
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f005 fb55 	bl	800c6f0 <USBH_LL_GetURBState>
 8007046:	4603      	mov	r3, r0
 8007048:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d136      	bne.n	80070be <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	8b12      	ldrh	r2, [r2, #24]
 8007058:	4293      	cmp	r3, r2
 800705a:	d90e      	bls.n	800707a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	8b12      	ldrh	r2, [r2, #24]
 8007064:	1a9a      	subs	r2, r3, r2
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	8b12      	ldrh	r2, [r2, #24]
 8007072:	441a      	add	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	61da      	str	r2, [r3, #28]
 8007078:	e002      	b.n	8007080 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007084:	2b00      	cmp	r3, #0
 8007086:	d004      	beq.n	8007092 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8007090:	e006      	b.n	80070a0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f892 	bl	80071c4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2204      	movs	r2, #4
 80070a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80070b4:	2300      	movs	r3, #0
 80070b6:	2200      	movs	r2, #0
 80070b8:	f002 f964 	bl	8009384 <osMessageQueuePut>
      break;
 80070bc:	e014      	b.n	80070e8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d111      	bne.n	80070e8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2204      	movs	r2, #4
 80070d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80070e0:	2300      	movs	r3, #0
 80070e2:	2200      	movs	r2, #0
 80070e4:	f002 f94e 	bl	8009384 <osMessageQueuePut>
      break;
 80070e8:	bf00      	nop
  }
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007104:	2300      	movs	r3, #0
 8007106:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800710e:	2b03      	cmp	r3, #3
 8007110:	d002      	beq.n	8007118 <CDC_ProcessReception+0x26>
 8007112:	2b04      	cmp	r3, #4
 8007114:	d00e      	beq.n	8007134 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007116:	e051      	b.n	80071bc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	6a19      	ldr	r1, [r3, #32]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	8b5a      	ldrh	r2, [r3, #26]
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	7b1b      	ldrb	r3, [r3, #12]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 fecf 	bl	8008ec8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2204      	movs	r2, #4
 800712e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007132:	e043      	b.n	80071bc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	7b1b      	ldrb	r3, [r3, #12]
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f005 fad8 	bl	800c6f0 <USBH_LL_GetURBState>
 8007140:	4603      	mov	r3, r0
 8007142:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007144:	7cfb      	ldrb	r3, [r7, #19]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d137      	bne.n	80071ba <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	7b1b      	ldrb	r3, [r3, #12]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f005 fa3b 	bl	800c5cc <USBH_LL_GetLastXferSize>
 8007156:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	429a      	cmp	r2, r3
 8007160:	d016      	beq.n	8007190 <CDC_ProcessReception+0x9e>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	8b5b      	ldrh	r3, [r3, #26]
 8007166:	461a      	mov	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4293      	cmp	r3, r2
 800716c:	d110      	bne.n	8007190 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1ad2      	subs	r2, r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	6a1a      	ldr	r2, [r3, #32]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	441a      	add	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2203      	movs	r2, #3
 800718a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800718e:	e006      	b.n	800719e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f81d 	bl	80071d8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2204      	movs	r2, #4
 80071a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80071b2:	2300      	movs	r3, #0
 80071b4:	2200      	movs	r2, #0
 80071b6:	f002 f8e5 	bl	8009384 <osMessageQueuePut>
      break;
 80071ba:	bf00      	nop
  }
}
 80071bc:	bf00      	nop
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	4613      	mov	r3, r2
 800720c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007214:	2302      	movs	r3, #2
 8007216:	e044      	b.n	80072a2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	79fa      	ldrb	r2, [r7, #7]
 800721c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 f841 	bl	80072b8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007264:	2200      	movs	r2, #0
 8007266:	2104      	movs	r1, #4
 8007268:	2010      	movs	r0, #16
 800726a:	f002 f818 	bl	800929e <osMessageQueueNew>
 800726e:	4602      	mov	r2, r0
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <USBH_Init+0xac>)
 8007278:	4a0d      	ldr	r2, [pc, #52]	@ (80072b0 <USBH_Init+0xb0>)
 800727a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800727c:	4b0b      	ldr	r3, [pc, #44]	@ (80072ac <USBH_Init+0xac>)
 800727e:	2280      	movs	r2, #128	@ 0x80
 8007280:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007282:	4b0a      	ldr	r3, [pc, #40]	@ (80072ac <USBH_Init+0xac>)
 8007284:	2218      	movs	r2, #24
 8007286:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007288:	4a08      	ldr	r2, [pc, #32]	@ (80072ac <USBH_Init+0xac>)
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	4809      	ldr	r0, [pc, #36]	@ (80072b4 <USBH_Init+0xb4>)
 800728e:	f001 ff59 	bl	8009144 <osThreadNew>
 8007292:	4602      	mov	r2, r0
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f005 f8e2 	bl	800c464 <USBH_LL_Init>

  return USBH_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	2000024c 	.word	0x2000024c
 80072b0:	0800cc20 	.word	0x0800cc20
 80072b4:	08007f69 	.word	0x08007f69

080072b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e009      	b.n	80072de <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	33e0      	adds	r3, #224	@ 0xe0
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	2200      	movs	r2, #0
 80072d6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b0f      	cmp	r3, #15
 80072e2:	d9f2      	bls.n	80072ca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	e009      	b.n	80072fe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3301      	adds	r3, #1
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007304:	d3f1      	bcc.n	80072ea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2240      	movs	r2, #64	@ 0x40
 800732a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	331c      	adds	r3, #28
 8007356:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800735a:	2100      	movs	r1, #0
 800735c:	4618      	mov	r0, r3
 800735e:	f005 fb35 	bl	800c9cc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f005 fb2c 	bl	800c9cc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800737a:	2212      	movs	r2, #18
 800737c:	2100      	movs	r1, #0
 800737e:	4618      	mov	r0, r3
 8007380:	f005 fb24 	bl	800c9cc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800738a:	223e      	movs	r2, #62	@ 0x3e
 800738c:	2100      	movs	r1, #0
 800738e:	4618      	mov	r0, r3
 8007390:	f005 fb1c 	bl	800c9cc <memset>

  return USBH_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800739e:	b480      	push	{r7}
 80073a0:	b085      	sub	sp, #20
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d016      	beq.n	80073e0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10e      	bne.n	80073da <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80073c2:	1c59      	adds	r1, r3, #1
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	33de      	adds	r3, #222	@ 0xde
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
 80073d8:	e004      	b.n	80073e4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073da:	2302      	movs	r3, #2
 80073dc:	73fb      	strb	r3, [r7, #15]
 80073de:	e001      	b.n	80073e4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073e0:	2302      	movs	r3, #2
 80073e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	429a      	cmp	r2, r3
 800740c:	d204      	bcs.n	8007418 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	78fa      	ldrb	r2, [r7, #3]
 8007412:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007416:	e001      	b.n	800741c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007418:	2302      	movs	r3, #2
 800741a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800742a:	b480      	push	{r7}
 800742c:	b087      	sub	sp, #28
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	4608      	mov	r0, r1
 8007434:	4611      	mov	r1, r2
 8007436:	461a      	mov	r2, r3
 8007438:	4603      	mov	r3, r0
 800743a:	70fb      	strb	r3, [r7, #3]
 800743c:	460b      	mov	r3, r1
 800743e:	70bb      	strb	r3, [r7, #2]
 8007440:	4613      	mov	r3, r2
 8007442:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007448:	2300      	movs	r3, #0
 800744a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007452:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007454:	e025      	b.n	80074a2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	221a      	movs	r2, #26
 800745a:	fb02 f303 	mul.w	r3, r2, r3
 800745e:	3308      	adds	r3, #8
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	3302      	adds	r3, #2
 8007466:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	795b      	ldrb	r3, [r3, #5]
 800746c:	78fa      	ldrb	r2, [r7, #3]
 800746e:	429a      	cmp	r2, r3
 8007470:	d002      	beq.n	8007478 <USBH_FindInterface+0x4e>
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	2bff      	cmp	r3, #255	@ 0xff
 8007476:	d111      	bne.n	800749c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800747c:	78ba      	ldrb	r2, [r7, #2]
 800747e:	429a      	cmp	r2, r3
 8007480:	d002      	beq.n	8007488 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007482:	78bb      	ldrb	r3, [r7, #2]
 8007484:	2bff      	cmp	r3, #255	@ 0xff
 8007486:	d109      	bne.n	800749c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800748c:	787a      	ldrb	r2, [r7, #1]
 800748e:	429a      	cmp	r2, r3
 8007490:	d002      	beq.n	8007498 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007492:	787b      	ldrb	r3, [r7, #1]
 8007494:	2bff      	cmp	r3, #255	@ 0xff
 8007496:	d101      	bne.n	800749c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	e006      	b.n	80074aa <USBH_FindInterface+0x80>
    }
    if_ix++;
 800749c:	7dfb      	ldrb	r3, [r7, #23]
 800749e:	3301      	adds	r3, #1
 80074a0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d9d6      	bls.n	8007456 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80074a8:	23ff      	movs	r3, #255	@ 0xff
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f005 f80c 	bl	800c4dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80074c4:	2101      	movs	r1, #1
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f005 f925 	bl	800c716 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af04      	add	r7, sp, #16
 80074de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074e0:	2302      	movs	r3, #2
 80074e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d102      	bne.n	80074fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2203      	movs	r2, #3
 80074f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b0b      	cmp	r3, #11
 8007502:	f200 8244 	bhi.w	800798e <USBH_Process+0x4b6>
 8007506:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <USBH_Process+0x34>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	0800753d 	.word	0x0800753d
 8007510:	0800758b 	.word	0x0800758b
 8007514:	0800760f 	.word	0x0800760f
 8007518:	0800790d 	.word	0x0800790d
 800751c:	0800798f 	.word	0x0800798f
 8007520:	080076cb 	.word	0x080076cb
 8007524:	08007897 	.word	0x08007897
 8007528:	0800771d 	.word	0x0800771d
 800752c:	08007759 	.word	0x08007759
 8007530:	08007791 	.word	0x08007791
 8007534:	080077ef 	.word	0x080077ef
 8007538:	080078f5 	.word	0x080078f5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 8224 	beq.w	8007992 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007550:	20c8      	movs	r0, #200	@ 0xc8
 8007552:	f005 f92a 	bl	800c7aa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f005 f81d 	bl	800c596 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007580:	2300      	movs	r3, #0
 8007582:	2200      	movs	r2, #0
 8007584:	f001 fefe 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007588:	e203      	b.n	8007992 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007590:	2b01      	cmp	r3, #1
 8007592:	d107      	bne.n	80075a4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	e025      	b.n	80075f0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80075aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075ae:	d914      	bls.n	80075da <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80075b6:	3301      	adds	r3, #1
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d903      	bls.n	80075d2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	220d      	movs	r2, #13
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	e00e      	b.n	80075f0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
 80075d8:	e00a      	b.n	80075f0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80075e0:	f103 020a 	add.w	r2, r3, #10
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80075ea:	200a      	movs	r0, #10
 80075ec:	f005 f8dd 	bl	800c7aa <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007604:	2300      	movs	r3, #0
 8007606:	2200      	movs	r2, #0
 8007608:	f001 febc 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      break;
 800760c:	e1c8      	b.n	80079a0 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800761e:	2104      	movs	r1, #4
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007624:	2064      	movs	r0, #100	@ 0x64
 8007626:	f005 f8c0 	bl	800c7aa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f004 ff8c 	bl	800c548 <USBH_LL_GetSpeed>
 8007630:	4603      	mov	r3, r0
 8007632:	461a      	mov	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2205      	movs	r2, #5
 800763e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007640:	2100      	movs	r1, #0
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fc8d 	bl	8008f62 <USBH_AllocPipe>
 8007648:	4603      	mov	r3, r0
 800764a:	461a      	mov	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007650:	2180      	movs	r1, #128	@ 0x80
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f001 fc85 	bl	8008f62 <USBH_AllocPipe>
 8007658:	4603      	mov	r3, r0
 800765a:	461a      	mov	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	7919      	ldrb	r1, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007674:	9202      	str	r2, [sp, #8]
 8007676:	2200      	movs	r2, #0
 8007678:	9201      	str	r2, [sp, #4]
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	4603      	mov	r3, r0
 800767e:	2280      	movs	r2, #128	@ 0x80
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 fc3f 	bl	8008f04 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7959      	ldrb	r1, [r3, #5]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800769a:	9202      	str	r2, [sp, #8]
 800769c:	2200      	movs	r2, #0
 800769e:	9201      	str	r2, [sp, #4]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	4603      	mov	r3, r0
 80076a4:	2200      	movs	r2, #0
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 fc2c 	bl	8008f04 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80076c0:	2300      	movs	r3, #0
 80076c2:	2200      	movs	r2, #0
 80076c4:	f001 fe5e 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      break;
 80076c8:	e16a      	b.n	80079a0 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f96e 	bl	80079ac <USBH_HandleEnum>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f040 815c 	bne.w	8007996 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d103      	bne.n	80076f8 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2208      	movs	r2, #8
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	e002      	b.n	80076fe <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2207      	movs	r2, #7
 80076fc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2205      	movs	r2, #5
 8007702:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007712:	2300      	movs	r3, #0
 8007714:	2200      	movs	r2, #0
 8007716:	f001 fe35 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800771a:	e13c      	b.n	8007996 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8139 	beq.w	800799a <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800772e:	2101      	movs	r1, #1
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2208      	movs	r2, #8
 8007738:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2205      	movs	r2, #5
 800773e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800774e:	2300      	movs	r3, #0
 8007750:	2200      	movs	r2, #0
 8007752:	f001 fe17 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007756:	e120      	b.n	800799a <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fd12 	bl	800818a <USBH_SetCfg>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2209      	movs	r2, #9
 8007770:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007786:	2300      	movs	r3, #0
 8007788:	2200      	movs	r2, #0
 800778a:	f001 fdfb 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      break;
 800778e:	e107      	b.n	80079a0 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b00      	cmp	r3, #0
 800779c:	d015      	beq.n	80077ca <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800779e:	2101      	movs	r1, #1
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fd15 	bl	80081d0 <USBH_SetFeature>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d103      	bne.n	80077ba <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	220a      	movs	r2, #10
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	e00a      	b.n	80077d0 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d106      	bne.n	80077d0 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	220a      	movs	r2, #10
 80077c6:	701a      	strb	r2, [r3, #0]
 80077c8:	e002      	b.n	80077d0 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	220a      	movs	r2, #10
 80077ce:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077e4:	2300      	movs	r3, #0
 80077e6:	2200      	movs	r2, #0
 80077e8:	f001 fdcc 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      break;
 80077ec:	e0d8      	b.n	80079a0 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d03f      	beq.n	8007878 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
 8007804:	e016      	b.n	8007834 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007806:	7bfa      	ldrb	r2, [r7, #15]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	32de      	adds	r2, #222	@ 0xde
 800780c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007810:	791a      	ldrb	r2, [r3, #4]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007818:	429a      	cmp	r2, r3
 800781a:	d108      	bne.n	800782e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800781c:	7bfa      	ldrb	r2, [r7, #15]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32de      	adds	r2, #222	@ 0xde
 8007822:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800782c:	e005      	b.n	800783a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	3301      	adds	r3, #1
 8007832:	73fb      	strb	r3, [r7, #15]
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0e5      	beq.n	8007806 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d016      	beq.n	8007872 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d109      	bne.n	800786a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2206      	movs	r2, #6
 800785a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007862:	2103      	movs	r1, #3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
 8007868:	e006      	b.n	8007878 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	220d      	movs	r2, #13
 800786e:	701a      	strb	r2, [r3, #0]
 8007870:	e002      	b.n	8007878 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	220d      	movs	r2, #13
 8007876:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2205      	movs	r2, #5
 800787c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800788c:	2300      	movs	r3, #0
 800788e:	2200      	movs	r2, #0
 8007890:	f001 fd78 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      break;
 8007894:	e084      	b.n	80079a0 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800789c:	2b00      	cmp	r3, #0
 800789e:	d017      	beq.n	80078d0 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d103      	bne.n	80078c0 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	220b      	movs	r2, #11
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e00a      	b.n	80078d6 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d106      	bne.n	80078d6 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	220d      	movs	r2, #13
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	e002      	b.n	80078d6 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	220d      	movs	r2, #13
 80078d4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2205      	movs	r2, #5
 80078da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80078ea:	2300      	movs	r3, #0
 80078ec:	2200      	movs	r2, #0
 80078ee:	f001 fd49 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      break;
 80078f2:	e055      	b.n	80079a0 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d04f      	beq.n	800799e <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
      }
      break;
 800790a:	e048      	b.n	800799e <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff fccf 	bl	80072b8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d009      	beq.n	8007938 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007948:	2105      	movs	r1, #5
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b01      	cmp	r3, #1
 8007958:	d107      	bne.n	800796a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fda7 	bl	80074b6 <USBH_Start>
 8007968:	e002      	b.n	8007970 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f004 fdb6 	bl	800c4dc <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007984:	2300      	movs	r3, #0
 8007986:	2200      	movs	r2, #0
 8007988:	f001 fcfc 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      break;
 800798c:	e008      	b.n	80079a0 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800798e:	bf00      	nop
 8007990:	e006      	b.n	80079a0 <USBH_Process+0x4c8>
      break;
 8007992:	bf00      	nop
 8007994:	e004      	b.n	80079a0 <USBH_Process+0x4c8>
      break;
 8007996:	bf00      	nop
 8007998:	e002      	b.n	80079a0 <USBH_Process+0x4c8>
    break;
 800799a:	bf00      	nop
 800799c:	e000      	b.n	80079a0 <USBH_Process+0x4c8>
      break;
 800799e:	bf00      	nop
  }
  return USBH_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop

080079ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af04      	add	r7, sp, #16
 80079b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80079b4:	2301      	movs	r3, #1
 80079b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80079b8:	2301      	movs	r3, #1
 80079ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	2b07      	cmp	r3, #7
 80079c2:	f200 8204 	bhi.w	8007dce <USBH_HandleEnum+0x422>
 80079c6:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <USBH_HandleEnum+0x20>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	080079ed 	.word	0x080079ed
 80079d0:	08007aa7 	.word	0x08007aa7
 80079d4:	08007b11 	.word	0x08007b11
 80079d8:	08007b9b 	.word	0x08007b9b
 80079dc:	08007c05 	.word	0x08007c05
 80079e0:	08007c75 	.word	0x08007c75
 80079e4:	08007d11 	.word	0x08007d11
 80079e8:	08007d8f 	.word	0x08007d8f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079ec:	2108      	movs	r1, #8
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fae8 	bl	8007fc4 <USBH_Get_DevDesc>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d12e      	bne.n	8007a5c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	7919      	ldrb	r1, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a22:	9202      	str	r2, [sp, #8]
 8007a24:	2200      	movs	r2, #0
 8007a26:	9201      	str	r2, [sp, #4]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2280      	movs	r2, #128	@ 0x80
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 fa68 	bl	8008f04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	7959      	ldrb	r1, [r3, #5]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a48:	9202      	str	r2, [sp, #8]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	9201      	str	r2, [sp, #4]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	4603      	mov	r3, r0
 8007a52:	2200      	movs	r2, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fa55 	bl	8008f04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a5a:	e1ba      	b.n	8007dd2 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	f040 81b7 	bne.w	8007dd2 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d903      	bls.n	8007a86 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	220d      	movs	r2, #13
 8007a82:	701a      	strb	r2, [r3, #0]
      break;
 8007a84:	e1a5      	b.n	8007dd2 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	795b      	ldrb	r3, [r3, #5]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fa89 	bl	8008fa4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	791b      	ldrb	r3, [r3, #4]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 fa83 	bl	8008fa4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
      break;
 8007aa4:	e195      	b.n	8007dd2 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007aa6:	2112      	movs	r1, #18
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fa8b 	bl	8007fc4 <USBH_Get_DevDesc>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007abe:	e18a      	b.n	8007dd6 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	f040 8187 	bne.w	8007dd6 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ace:	3301      	adds	r3, #1
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d903      	bls.n	8007aea <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	220d      	movs	r2, #13
 8007ae6:	701a      	strb	r2, [r3, #0]
      break;
 8007ae8:	e175      	b.n	8007dd6 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	795b      	ldrb	r3, [r3, #5]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fa57 	bl	8008fa4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	791b      	ldrb	r3, [r3, #4]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 fa51 	bl	8008fa4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
      break;
 8007b0e:	e162      	b.n	8007dd6 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007b10:	2101      	movs	r1, #1
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fb15 	bl	8008142 <USBH_SetAddress>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d130      	bne.n	8007b84 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007b22:	2002      	movs	r0, #2
 8007b24:	f004 fe41 	bl	800c7aa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2203      	movs	r2, #3
 8007b34:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7919      	ldrb	r1, [r3, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b4a:	9202      	str	r2, [sp, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	9201      	str	r2, [sp, #4]
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	4603      	mov	r3, r0
 8007b54:	2280      	movs	r2, #128	@ 0x80
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 f9d4 	bl	8008f04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7959      	ldrb	r1, [r3, #5]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b70:	9202      	str	r2, [sp, #8]
 8007b72:	2200      	movs	r2, #0
 8007b74:	9201      	str	r2, [sp, #4]
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 f9c1 	bl	8008f04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b82:	e12a      	b.n	8007dda <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	f040 8127 	bne.w	8007dda <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	220d      	movs	r2, #13
 8007b90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	705a      	strb	r2, [r3, #1]
      break;
 8007b98:	e11f      	b.n	8007dda <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b9a:	2109      	movs	r1, #9
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fa3d 	bl	800801c <USBH_Get_CfgDesc>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2204      	movs	r2, #4
 8007bb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bb2:	e114      	b.n	8007dde <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	f040 8111 	bne.w	8007dde <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d903      	bls.n	8007bde <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	220d      	movs	r2, #13
 8007bda:	701a      	strb	r2, [r3, #0]
      break;
 8007bdc:	e0ff      	b.n	8007dde <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	795b      	ldrb	r3, [r3, #5]
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 f9dd 	bl	8008fa4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	791b      	ldrb	r3, [r3, #4]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 f9d7 	bl	8008fa4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
      break;
 8007c02:	e0ec      	b.n	8007dde <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fa05 	bl	800801c <USBH_Get_CfgDesc>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d103      	bne.n	8007c24 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2205      	movs	r2, #5
 8007c20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c22:	e0de      	b.n	8007de2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	f040 80db 	bne.w	8007de2 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c32:	3301      	adds	r3, #1
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d903      	bls.n	8007c4e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	220d      	movs	r2, #13
 8007c4a:	701a      	strb	r2, [r3, #0]
      break;
 8007c4c:	e0c9      	b.n	8007de2 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	795b      	ldrb	r3, [r3, #5]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 f9a5 	bl	8008fa4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	791b      	ldrb	r3, [r3, #4]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 f99f 	bl	8008fa4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
      break;
 8007c72:	e0b6      	b.n	8007de2 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d036      	beq.n	8007cec <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c8a:	23ff      	movs	r3, #255	@ 0xff
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f9ef 	bl	8008070 <USBH_Get_StringDesc>
 8007c92:	4603      	mov	r3, r0
 8007c94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d111      	bne.n	8007cc0 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2206      	movs	r2, #6
 8007ca0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2205      	movs	r2, #5
 8007ca6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f001 fb63 	bl	8009384 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cbe:	e092      	b.n	8007de6 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	f040 808f 	bne.w	8007de6 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2206      	movs	r2, #6
 8007ccc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2205      	movs	r2, #5
 8007cd2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f001 fb4d 	bl	8009384 <osMessageQueuePut>
      break;
 8007cea:	e07c      	b.n	8007de6 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2206      	movs	r2, #6
 8007cf0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2205      	movs	r2, #5
 8007cf6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007d06:	2300      	movs	r3, #0
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f001 fb3b 	bl	8009384 <osMessageQueuePut>
      break;
 8007d0e:	e06a      	b.n	8007de6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d027      	beq.n	8007d6a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d26:	23ff      	movs	r3, #255	@ 0xff
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f9a1 	bl	8008070 <USBH_Get_StringDesc>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d103      	bne.n	8007d40 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2207      	movs	r2, #7
 8007d3c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d3e:	e054      	b.n	8007dea <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d151      	bne.n	8007dea <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2207      	movs	r2, #7
 8007d4a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2205      	movs	r2, #5
 8007d50:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007d60:	2300      	movs	r3, #0
 8007d62:	2200      	movs	r2, #0
 8007d64:	f001 fb0e 	bl	8009384 <osMessageQueuePut>
      break;
 8007d68:	e03f      	b.n	8007dea <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2207      	movs	r2, #7
 8007d6e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2205      	movs	r2, #5
 8007d74:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007d84:	2300      	movs	r3, #0
 8007d86:	2200      	movs	r2, #0
 8007d88:	f001 fafc 	bl	8009384 <osMessageQueuePut>
      break;
 8007d8c:	e02d      	b.n	8007dea <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d017      	beq.n	8007dc8 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007da4:	23ff      	movs	r3, #255	@ 0xff
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f962 	bl	8008070 <USBH_Get_StringDesc>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d102      	bne.n	8007dbc <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007dba:	e018      	b.n	8007dee <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d115      	bne.n	8007dee <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc6:	e012      	b.n	8007dee <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
      break;
 8007dcc:	e00f      	b.n	8007dee <USBH_HandleEnum+0x442>

    default:
      break;
 8007dce:	bf00      	nop
 8007dd0:	e00e      	b.n	8007df0 <USBH_HandleEnum+0x444>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e00c      	b.n	8007df0 <USBH_HandleEnum+0x444>
      break;
 8007dd6:	bf00      	nop
 8007dd8:	e00a      	b.n	8007df0 <USBH_HandleEnum+0x444>
      break;
 8007dda:	bf00      	nop
 8007ddc:	e008      	b.n	8007df0 <USBH_HandleEnum+0x444>
      break;
 8007dde:	bf00      	nop
 8007de0:	e006      	b.n	8007df0 <USBH_HandleEnum+0x444>
      break;
 8007de2:	bf00      	nop
 8007de4:	e004      	b.n	8007df0 <USBH_HandleEnum+0x444>
      break;
 8007de6:	bf00      	nop
 8007de8:	e002      	b.n	8007df0 <USBH_HandleEnum+0x444>
      break;
 8007dea:	bf00      	nop
 8007dec:	e000      	b.n	8007df0 <USBH_HandleEnum+0x444>
      break;
 8007dee:	bf00      	nop
  }
  return Status;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop

08007dfc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f804 	bl	8007e3e <USBH_HandleSof>
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b0b      	cmp	r3, #11
 8007e4e:	d10a      	bne.n	8007e66 <USBH_HandleSof+0x28>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d005      	beq.n	8007e66 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	4798      	blx	r3
  }
}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b082      	sub	sp, #8
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e92:	2300      	movs	r3, #0
 8007e94:	2200      	movs	r2, #0
 8007e96:	f001 fa75 	bl	8009384 <osMessageQueuePut>
#endif
#endif

  return;
 8007e9a:	bf00      	nop
}
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007eb2:	bf00      	nop
}
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f001 fa45 	bl	8009384 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f004 faf4 	bl	800c512 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	791b      	ldrb	r3, [r3, #4]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 f837 	bl	8008fa4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	795b      	ldrb	r3, [r3, #5]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 f831 	bl	8008fa4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f56:	2300      	movs	r3, #0
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f001 fa13 	bl	8009384 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f80:	2200      	movs	r2, #0
 8007f82:	f001 fa5f 	bl	8009444 <osMessageQueueGet>
 8007f86:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1f0      	bne.n	8007f70 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff faa2 	bl	80074d8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007f94:	e7ec      	b.n	8007f70 <USBH_Process_OS+0x8>

08007f96 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f001 f9e5 	bl	8009384 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af02      	add	r7, sp, #8
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007fd0:	887b      	ldrh	r3, [r7, #2]
 8007fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fd6:	d901      	bls.n	8007fdc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e01b      	b.n	8008014 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007fe2:	887b      	ldrh	r3, [r7, #2]
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fec:	2100      	movs	r1, #0
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f872 	bl	80080d8 <USBH_GetDescriptor>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d109      	bne.n	8008012 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008004:	887a      	ldrh	r2, [r7, #2]
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f929 	bl	8008260 <USBH_ParseDevDesc>
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af02      	add	r7, sp, #8
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	331c      	adds	r3, #28
 800802c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800802e:	887b      	ldrh	r3, [r7, #2]
 8008030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008034:	d901      	bls.n	800803a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008036:	2303      	movs	r3, #3
 8008038:	e016      	b.n	8008068 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800803a:	887b      	ldrh	r3, [r7, #2]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008044:	2100      	movs	r1, #0
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f846 	bl	80080d8 <USBH_GetDescriptor>
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d107      	bne.n	8008066 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008056:	887b      	ldrh	r3, [r7, #2]
 8008058:	461a      	mov	r2, r3
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f9af 	bl	80083c0 <USBH_ParseCfgDesc>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af02      	add	r7, sp, #8
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	607a      	str	r2, [r7, #4]
 800807a:	461a      	mov	r2, r3
 800807c:	460b      	mov	r3, r1
 800807e:	72fb      	strb	r3, [r7, #11]
 8008080:	4613      	mov	r3, r2
 8008082:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008084:	893b      	ldrh	r3, [r7, #8]
 8008086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800808a:	d802      	bhi.n	8008092 <USBH_Get_StringDesc+0x22>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008092:	2303      	movs	r3, #3
 8008094:	e01c      	b.n	80080d0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008096:	7afb      	ldrb	r3, [r7, #11]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800809e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80080a6:	893b      	ldrh	r3, [r7, #8]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	460b      	mov	r3, r1
 80080ac:	2100      	movs	r1, #0
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 f812 	bl	80080d8 <USBH_GetDescriptor>
 80080b4:	4603      	mov	r3, r0
 80080b6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d107      	bne.n	80080ce <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080c4:	893a      	ldrh	r2, [r7, #8]
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fb8d 	bl	80087e8 <USBH_ParseStringDesc>
  }

  return status;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	607b      	str	r3, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	72fb      	strb	r3, [r7, #11]
 80080e6:	4613      	mov	r3, r2
 80080e8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	789b      	ldrb	r3, [r3, #2]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d11c      	bne.n	800812c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80080f2:	7afb      	ldrb	r3, [r7, #11]
 80080f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2206      	movs	r2, #6
 8008102:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	893a      	ldrh	r2, [r7, #8]
 8008108:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800810a:	893b      	ldrh	r3, [r7, #8]
 800810c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008110:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008114:	d104      	bne.n	8008120 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f240 4209 	movw	r2, #1033	@ 0x409
 800811c:	829a      	strh	r2, [r3, #20]
 800811e:	e002      	b.n	8008126 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8b3a      	ldrh	r2, [r7, #24]
 800812a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800812c:	8b3b      	ldrh	r3, [r7, #24]
 800812e:	461a      	mov	r2, r3
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 fba5 	bl	8008882 <USBH_CtlReq>
 8008138:	4603      	mov	r3, r0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	789b      	ldrb	r3, [r3, #2]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d10f      	bne.n	8008176 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2205      	movs	r2, #5
 8008160:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008162:	78fb      	ldrb	r3, [r7, #3]
 8008164:	b29a      	uxth	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008176:	2200      	movs	r2, #0
 8008178:	2100      	movs	r1, #0
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fb81 	bl	8008882 <USBH_CtlReq>
 8008180:	4603      	mov	r3, r0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	789b      	ldrb	r3, [r3, #2]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d10e      	bne.n	80081bc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2209      	movs	r2, #9
 80081a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	887a      	ldrh	r2, [r7, #2]
 80081ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081bc:	2200      	movs	r2, #0
 80081be:	2100      	movs	r1, #0
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fb5e 	bl	8008882 <USBH_CtlReq>
 80081c6:	4603      	mov	r3, r0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	789b      	ldrb	r3, [r3, #2]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d10f      	bne.n	8008204 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2203      	movs	r2, #3
 80081ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008204:	2200      	movs	r2, #0
 8008206:	2100      	movs	r1, #0
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fb3a 	bl	8008882 <USBH_CtlReq>
 800820e:	4603      	mov	r3, r0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	789b      	ldrb	r3, [r3, #2]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d10f      	bne.n	800824c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	b29a      	uxth	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800824c:	2200      	movs	r2, #0
 800824e:	2100      	movs	r1, #0
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fb16 	bl	8008882 <USBH_CtlReq>
 8008256:	4603      	mov	r3, r0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008274:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008280:	2302      	movs	r3, #2
 8008282:	e094      	b.n	80083ae <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	785a      	ldrb	r2, [r3, #1]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	3302      	adds	r3, #2
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	3303      	adds	r3, #3
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	4313      	orrs	r3, r2
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	791a      	ldrb	r2, [r3, #4]
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	795a      	ldrb	r2, [r3, #5]
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	799a      	ldrb	r2, [r3, #6]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	79da      	ldrb	r2, [r3, #7]
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d004      	beq.n	80082e2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d11b      	bne.n	800831a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	79db      	ldrb	r3, [r3, #7]
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	dc0f      	bgt.n	800830a <USBH_ParseDevDesc+0xaa>
 80082ea:	2b08      	cmp	r3, #8
 80082ec:	db0f      	blt.n	800830e <USBH_ParseDevDesc+0xae>
 80082ee:	3b08      	subs	r3, #8
 80082f0:	4a32      	ldr	r2, [pc, #200]	@ (80083bc <USBH_ParseDevDesc+0x15c>)
 80082f2:	fa22 f303 	lsr.w	r3, r2, r3
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	bf14      	ite	ne
 80082fe:	2301      	movne	r3, #1
 8008300:	2300      	moveq	r3, #0
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <USBH_ParseDevDesc+0xb6>
 8008308:	e001      	b.n	800830e <USBH_ParseDevDesc+0xae>
 800830a:	2b40      	cmp	r3, #64	@ 0x40
 800830c:	d003      	beq.n	8008316 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2208      	movs	r2, #8
 8008312:	71da      	strb	r2, [r3, #7]
        break;
 8008314:	e000      	b.n	8008318 <USBH_ParseDevDesc+0xb8>
        break;
 8008316:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008318:	e00e      	b.n	8008338 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008320:	2b02      	cmp	r3, #2
 8008322:	d107      	bne.n	8008334 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	79db      	ldrb	r3, [r3, #7]
 8008328:	2b08      	cmp	r3, #8
 800832a:	d005      	beq.n	8008338 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	2208      	movs	r2, #8
 8008330:	71da      	strb	r2, [r3, #7]
 8008332:	e001      	b.n	8008338 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008334:	2303      	movs	r3, #3
 8008336:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008338:	88fb      	ldrh	r3, [r7, #6]
 800833a:	2b08      	cmp	r3, #8
 800833c:	d936      	bls.n	80083ac <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	3308      	adds	r3, #8
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	3309      	adds	r3, #9
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	021b      	lsls	r3, r3, #8
 800834e:	b29b      	uxth	r3, r3
 8008350:	4313      	orrs	r3, r2
 8008352:	b29a      	uxth	r2, r3
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	330a      	adds	r3, #10
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	330b      	adds	r3, #11
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	021b      	lsls	r3, r3, #8
 8008368:	b29b      	uxth	r3, r3
 800836a:	4313      	orrs	r3, r2
 800836c:	b29a      	uxth	r2, r3
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	330c      	adds	r3, #12
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	330d      	adds	r3, #13
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	b29b      	uxth	r3, r3
 8008384:	4313      	orrs	r3, r2
 8008386:	b29a      	uxth	r2, r3
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	7b9a      	ldrb	r2, [r3, #14]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	7bda      	ldrb	r2, [r3, #15]
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	7c1a      	ldrb	r2, [r3, #16]
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	7c5a      	ldrb	r2, [r3, #17]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	01000101 	.word	0x01000101

080083c0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08c      	sub	sp, #48	@ 0x30
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	4613      	mov	r3, r2
 80083cc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80083d4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80083ee:	2302      	movs	r3, #2
 80083f0:	e0da      	b.n	80085a8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b09      	cmp	r3, #9
 80083fc:	d002      	beq.n	8008404 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	2209      	movs	r2, #9
 8008402:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	781a      	ldrb	r2, [r3, #0]
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	785a      	ldrb	r2, [r3, #1]
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	3302      	adds	r3, #2
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	3303      	adds	r3, #3
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	b29b      	uxth	r3, r3
 8008426:	4313      	orrs	r3, r2
 8008428:	b29b      	uxth	r3, r3
 800842a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800842e:	bf28      	it	cs
 8008430:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008434:	b29a      	uxth	r2, r3
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	791a      	ldrb	r2, [r3, #4]
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	795a      	ldrb	r2, [r3, #5]
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	799a      	ldrb	r2, [r3, #6]
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	79da      	ldrb	r2, [r3, #7]
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	7a1a      	ldrb	r2, [r3, #8]
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	2b09      	cmp	r3, #9
 8008466:	f240 809d 	bls.w	80085a4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800846a:	2309      	movs	r3, #9
 800846c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800846e:	2300      	movs	r3, #0
 8008470:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008472:	e081      	b.n	8008578 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008474:	f107 0316 	add.w	r3, r7, #22
 8008478:	4619      	mov	r1, r3
 800847a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800847c:	f000 f9e7 	bl	800884e <USBH_GetNextDesc>
 8008480:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	2b04      	cmp	r3, #4
 8008488:	d176      	bne.n	8008578 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800848a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	2b09      	cmp	r3, #9
 8008490:	d002      	beq.n	8008498 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008494:	2209      	movs	r2, #9
 8008496:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800849c:	221a      	movs	r2, #26
 800849e:	fb02 f303 	mul.w	r3, r2, r3
 80084a2:	3308      	adds	r3, #8
 80084a4:	6a3a      	ldr	r2, [r7, #32]
 80084a6:	4413      	add	r3, r2
 80084a8:	3302      	adds	r3, #2
 80084aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80084ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084ae:	69f8      	ldr	r0, [r7, #28]
 80084b0:	f000 f87e 	bl	80085b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084be:	e043      	b.n	8008548 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084c0:	f107 0316 	add.w	r3, r7, #22
 80084c4:	4619      	mov	r1, r3
 80084c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084c8:	f000 f9c1 	bl	800884e <USBH_GetNextDesc>
 80084cc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	d138      	bne.n	8008548 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	795b      	ldrb	r3, [r3, #5]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d113      	bne.n	8008506 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d003      	beq.n	80084ee <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	799b      	ldrb	r3, [r3, #6]
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d10b      	bne.n	8008506 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	79db      	ldrb	r3, [r3, #7]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <USBH_ParseCfgDesc+0x14e>
 80084f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	2b09      	cmp	r3, #9
 80084fc:	d007      	beq.n	800850e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80084fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008500:	2209      	movs	r2, #9
 8008502:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008504:	e003      	b.n	800850e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008508:	2207      	movs	r2, #7
 800850a:	701a      	strb	r2, [r3, #0]
 800850c:	e000      	b.n	8008510 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800850e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008514:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008518:	3201      	adds	r2, #1
 800851a:	00d2      	lsls	r2, r2, #3
 800851c:	211a      	movs	r1, #26
 800851e:	fb01 f303 	mul.w	r3, r1, r3
 8008522:	4413      	add	r3, r2
 8008524:	3308      	adds	r3, #8
 8008526:	6a3a      	ldr	r2, [r7, #32]
 8008528:	4413      	add	r3, r2
 800852a:	3304      	adds	r3, #4
 800852c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800852e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008530:	69b9      	ldr	r1, [r7, #24]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 f870 	bl	8008618 <USBH_ParseEPDesc>
 8008538:	4603      	mov	r3, r0
 800853a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800853e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008542:	3301      	adds	r3, #1
 8008544:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	791b      	ldrb	r3, [r3, #4]
 800854c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008550:	429a      	cmp	r2, r3
 8008552:	d204      	bcs.n	800855e <USBH_ParseCfgDesc+0x19e>
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	885a      	ldrh	r2, [r3, #2]
 8008558:	8afb      	ldrh	r3, [r7, #22]
 800855a:	429a      	cmp	r2, r3
 800855c:	d8b0      	bhi.n	80084c0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	791b      	ldrb	r3, [r3, #4]
 8008562:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008566:	429a      	cmp	r2, r3
 8008568:	d201      	bcs.n	800856e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800856a:	2303      	movs	r3, #3
 800856c:	e01c      	b.n	80085a8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800856e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008572:	3301      	adds	r3, #1
 8008574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800857c:	2b01      	cmp	r3, #1
 800857e:	d805      	bhi.n	800858c <USBH_ParseCfgDesc+0x1cc>
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	885a      	ldrh	r2, [r3, #2]
 8008584:	8afb      	ldrh	r3, [r7, #22]
 8008586:	429a      	cmp	r2, r3
 8008588:	f63f af74 	bhi.w	8008474 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	791b      	ldrb	r3, [r3, #4]
 8008590:	2b02      	cmp	r3, #2
 8008592:	bf28      	it	cs
 8008594:	2302      	movcs	r3, #2
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800859c:	429a      	cmp	r2, r3
 800859e:	d201      	bcs.n	80085a4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e001      	b.n	80085a8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80085a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3730      	adds	r7, #48	@ 0x30
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781a      	ldrb	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	785a      	ldrb	r2, [r3, #1]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	789a      	ldrb	r2, [r3, #2]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	78da      	ldrb	r2, [r3, #3]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	3304      	adds	r3, #4
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	bf28      	it	cs
 80085e4:	2302      	movcs	r3, #2
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	795a      	ldrb	r2, [r3, #5]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	799a      	ldrb	r2, [r3, #6]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	79da      	ldrb	r2, [r3, #7]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	7a1a      	ldrb	r2, [r3, #8]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	721a      	strb	r2, [r3, #8]
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	781a      	ldrb	r2, [r3, #0]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	785a      	ldrb	r2, [r3, #1]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	789a      	ldrb	r2, [r3, #2]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	78da      	ldrb	r2, [r3, #3]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3304      	adds	r3, #4
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3305      	adds	r3, #5
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	021b      	lsls	r3, r3, #8
 8008658:	b29b      	uxth	r3, r3
 800865a:	4313      	orrs	r3, r2
 800865c:	b29a      	uxth	r2, r3
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	799a      	ldrb	r2, [r3, #6]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	889b      	ldrh	r3, [r3, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d009      	beq.n	8008686 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800867a:	d804      	bhi.n	8008686 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008684:	d901      	bls.n	800868a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008686:	2303      	movs	r3, #3
 8008688:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008690:	2b00      	cmp	r3, #0
 8008692:	d136      	bne.n	8008702 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	78db      	ldrb	r3, [r3, #3]
 8008698:	f003 0303 	and.w	r3, r3, #3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d108      	bne.n	80086b2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	889b      	ldrh	r3, [r3, #4]
 80086a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086a8:	f240 8097 	bls.w	80087da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086ac:	2303      	movs	r3, #3
 80086ae:	75fb      	strb	r3, [r7, #23]
 80086b0:	e093      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	78db      	ldrb	r3, [r3, #3]
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d107      	bne.n	80086ce <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	889b      	ldrh	r3, [r3, #4]
 80086c2:	2b40      	cmp	r3, #64	@ 0x40
 80086c4:	f240 8089 	bls.w	80087da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086c8:	2303      	movs	r3, #3
 80086ca:	75fb      	strb	r3, [r7, #23]
 80086cc:	e085      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	78db      	ldrb	r3, [r3, #3]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d005      	beq.n	80086e6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	78db      	ldrb	r3, [r3, #3]
 80086de:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d10a      	bne.n	80086fc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	799b      	ldrb	r3, [r3, #6]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <USBH_ParseEPDesc+0xde>
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	799b      	ldrb	r3, [r3, #6]
 80086f2:	2b10      	cmp	r3, #16
 80086f4:	d970      	bls.n	80087d8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80086f6:	2303      	movs	r3, #3
 80086f8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086fa:	e06d      	b.n	80087d8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086fc:	2303      	movs	r3, #3
 80086fe:	75fb      	strb	r3, [r7, #23]
 8008700:	e06b      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008708:	2b01      	cmp	r3, #1
 800870a:	d13c      	bne.n	8008786 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	78db      	ldrb	r3, [r3, #3]
 8008710:	f003 0303 	and.w	r3, r3, #3
 8008714:	2b02      	cmp	r3, #2
 8008716:	d005      	beq.n	8008724 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	78db      	ldrb	r3, [r3, #3]
 800871c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	889b      	ldrh	r3, [r3, #4]
 8008728:	2b40      	cmp	r3, #64	@ 0x40
 800872a:	d956      	bls.n	80087da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800872c:	2303      	movs	r3, #3
 800872e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008730:	e053      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	78db      	ldrb	r3, [r3, #3]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b01      	cmp	r3, #1
 800873c:	d10e      	bne.n	800875c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	799b      	ldrb	r3, [r3, #6]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d007      	beq.n	8008756 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800874a:	2b10      	cmp	r3, #16
 800874c:	d803      	bhi.n	8008756 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008752:	2b40      	cmp	r3, #64	@ 0x40
 8008754:	d941      	bls.n	80087da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008756:	2303      	movs	r3, #3
 8008758:	75fb      	strb	r3, [r7, #23]
 800875a:	e03e      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	78db      	ldrb	r3, [r3, #3]
 8008760:	f003 0303 	and.w	r3, r3, #3
 8008764:	2b03      	cmp	r3, #3
 8008766:	d10b      	bne.n	8008780 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	799b      	ldrb	r3, [r3, #6]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <USBH_ParseEPDesc+0x162>
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	889b      	ldrh	r3, [r3, #4]
 8008774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008778:	d32f      	bcc.n	80087da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800877a:	2303      	movs	r3, #3
 800877c:	75fb      	strb	r3, [r7, #23]
 800877e:	e02c      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008780:	2303      	movs	r3, #3
 8008782:	75fb      	strb	r3, [r7, #23]
 8008784:	e029      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800878c:	2b02      	cmp	r3, #2
 800878e:	d120      	bne.n	80087d2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	78db      	ldrb	r3, [r3, #3]
 8008794:	f003 0303 	and.w	r3, r3, #3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	889b      	ldrh	r3, [r3, #4]
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d01a      	beq.n	80087da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087a4:	2303      	movs	r3, #3
 80087a6:	75fb      	strb	r3, [r7, #23]
 80087a8:	e017      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	78db      	ldrb	r3, [r3, #3]
 80087ae:	f003 0303 	and.w	r3, r3, #3
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d10a      	bne.n	80087cc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	799b      	ldrb	r3, [r3, #6]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <USBH_ParseEPDesc+0x1ae>
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	889b      	ldrh	r3, [r3, #4]
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d909      	bls.n	80087da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087c6:	2303      	movs	r3, #3
 80087c8:	75fb      	strb	r3, [r7, #23]
 80087ca:	e006      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087cc:	2303      	movs	r3, #3
 80087ce:	75fb      	strb	r3, [r7, #23]
 80087d0:	e003      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80087d2:	2303      	movs	r3, #3
 80087d4:	75fb      	strb	r3, [r7, #23]
 80087d6:	e000      	b.n	80087da <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087d8:	bf00      	nop
  }

  return status;
 80087da:	7dfb      	ldrb	r3, [r7, #23]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	4613      	mov	r3, r2
 80087f4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3301      	adds	r3, #1
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d120      	bne.n	8008842 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	1e9a      	subs	r2, r3, #2
 8008806:	88fb      	ldrh	r3, [r7, #6]
 8008808:	4293      	cmp	r3, r2
 800880a:	bf28      	it	cs
 800880c:	4613      	movcs	r3, r2
 800880e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3302      	adds	r3, #2
 8008814:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008816:	2300      	movs	r3, #0
 8008818:	82fb      	strh	r3, [r7, #22]
 800881a:	e00b      	b.n	8008834 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800881c:	8afb      	ldrh	r3, [r7, #22]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4413      	add	r3, r2
 8008822:	781a      	ldrb	r2, [r3, #0]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	3301      	adds	r3, #1
 800882c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800882e:	8afb      	ldrh	r3, [r7, #22]
 8008830:	3302      	adds	r3, #2
 8008832:	82fb      	strh	r3, [r7, #22]
 8008834:	8afa      	ldrh	r2, [r7, #22]
 8008836:	8abb      	ldrh	r3, [r7, #20]
 8008838:	429a      	cmp	r2, r3
 800883a:	d3ef      	bcc.n	800881c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
  }
}
 8008842:	bf00      	nop
 8008844:	371c      	adds	r7, #28
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800884e:	b480      	push	{r7}
 8008850:	b085      	sub	sp, #20
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	7812      	ldrb	r2, [r2, #0]
 8008860:	4413      	add	r3, r2
 8008862:	b29a      	uxth	r2, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008874:	68fb      	ldr	r3, [r7, #12]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b086      	sub	sp, #24
 8008886:	af00      	add	r7, sp, #0
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	4613      	mov	r3, r2
 800888e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008890:	2301      	movs	r3, #1
 8008892:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	789b      	ldrb	r3, [r3, #2]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d002      	beq.n	80088a2 <USBH_CtlReq+0x20>
 800889c:	2b02      	cmp	r3, #2
 800889e:	d01d      	beq.n	80088dc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80088a0:	e043      	b.n	800892a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	88fa      	ldrh	r2, [r7, #6]
 80088ac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2202      	movs	r2, #2
 80088b8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80088ba:	2301      	movs	r3, #1
 80088bc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2203      	movs	r2, #3
 80088c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80088d2:	2300      	movs	r3, #0
 80088d4:	2200      	movs	r2, #0
 80088d6:	f000 fd55 	bl	8009384 <osMessageQueuePut>
      break;
 80088da:	e026      	b.n	800892a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 f829 	bl	8008934 <USBH_HandleControl>
 80088e2:	4603      	mov	r3, r0
 80088e4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <USBH_CtlReq+0x70>
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	d106      	bne.n	8008900 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	761a      	strb	r2, [r3, #24]
 80088fe:	e005      	b.n	800890c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d102      	bne.n	800890c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2203      	movs	r2, #3
 8008910:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008920:	2300      	movs	r3, #0
 8008922:	2200      	movs	r2, #0
 8008924:	f000 fd2e 	bl	8009384 <osMessageQueuePut>
      break;
 8008928:	bf00      	nop
  }
  return status;
 800892a:	7dfb      	ldrb	r3, [r7, #23]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af02      	add	r7, sp, #8
 800893a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008940:	2300      	movs	r3, #0
 8008942:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	7e1b      	ldrb	r3, [r3, #24]
 8008948:	3b01      	subs	r3, #1
 800894a:	2b0a      	cmp	r3, #10
 800894c:	f200 8229 	bhi.w	8008da2 <USBH_HandleControl+0x46e>
 8008950:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <USBH_HandleControl+0x24>)
 8008952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008956:	bf00      	nop
 8008958:	08008985 	.word	0x08008985
 800895c:	0800899f 	.word	0x0800899f
 8008960:	08008a41 	.word	0x08008a41
 8008964:	08008a67 	.word	0x08008a67
 8008968:	08008af3 	.word	0x08008af3
 800896c:	08008b1d 	.word	0x08008b1d
 8008970:	08008bdf 	.word	0x08008bdf
 8008974:	08008c01 	.word	0x08008c01
 8008978:	08008c93 	.word	0x08008c93
 800897c:	08008cb9 	.word	0x08008cb9
 8008980:	08008d4b 	.word	0x08008d4b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f103 0110 	add.w	r1, r3, #16
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	795b      	ldrb	r3, [r3, #5]
 800898e:	461a      	mov	r2, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fa17 	bl	8008dc4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	761a      	strb	r2, [r3, #24]
      break;
 800899c:	e20c      	b.n	8008db8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	795b      	ldrb	r3, [r3, #5]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f003 fea3 	bl	800c6f0 <USBH_LL_GetURBState>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d12c      	bne.n	8008a0e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7c1b      	ldrb	r3, [r3, #16]
 80089b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	8adb      	ldrh	r3, [r3, #22]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80089c6:	7b7b      	ldrb	r3, [r7, #13]
 80089c8:	2b80      	cmp	r3, #128	@ 0x80
 80089ca:	d103      	bne.n	80089d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2203      	movs	r2, #3
 80089d0:	761a      	strb	r2, [r3, #24]
 80089d2:	e00d      	b.n	80089f0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2205      	movs	r2, #5
 80089d8:	761a      	strb	r2, [r3, #24]
 80089da:	e009      	b.n	80089f0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80089dc:	7b7b      	ldrb	r3, [r7, #13]
 80089de:	2b80      	cmp	r3, #128	@ 0x80
 80089e0:	d103      	bne.n	80089ea <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2209      	movs	r2, #9
 80089e6:	761a      	strb	r2, [r3, #24]
 80089e8:	e002      	b.n	80089f0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2207      	movs	r2, #7
 80089ee:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2203      	movs	r2, #3
 80089f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a04:	2300      	movs	r3, #0
 8008a06:	2200      	movs	r2, #0
 8008a08:	f000 fcbc 	bl	8009384 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a0c:	e1cb      	b.n	8008da6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b04      	cmp	r3, #4
 8008a12:	d003      	beq.n	8008a1c <USBH_HandleControl+0xe8>
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	f040 81c5 	bne.w	8008da6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	220b      	movs	r2, #11
 8008a20:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2203      	movs	r2, #3
 8008a26:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a36:	2300      	movs	r3, #0
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f000 fca3 	bl	8009384 <osMessageQueuePut>
      break;
 8008a3e:	e1b2      	b.n	8008da6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6899      	ldr	r1, [r3, #8]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	899a      	ldrh	r2, [r3, #12]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	791b      	ldrb	r3, [r3, #4]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f9f2 	bl	8008e42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2204      	movs	r2, #4
 8008a62:	761a      	strb	r2, [r3, #24]
      break;
 8008a64:	e1a8      	b.n	8008db8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	791b      	ldrb	r3, [r3, #4]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f003 fe3f 	bl	800c6f0 <USBH_LL_GetURBState>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d110      	bne.n	8008a9e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2209      	movs	r2, #9
 8008a80:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2203      	movs	r2, #3
 8008a86:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a96:	2300      	movs	r3, #0
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f000 fc73 	bl	8009384 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b05      	cmp	r3, #5
 8008aa2:	d110      	bne.n	8008ac6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2203      	movs	r2, #3
 8008aac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008abc:	2300      	movs	r3, #0
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f000 fc60 	bl	8009384 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ac4:	e171      	b.n	8008daa <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	f040 816e 	bne.w	8008daa <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	220b      	movs	r2, #11
 8008ad2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ae8:	2300      	movs	r3, #0
 8008aea:	2200      	movs	r2, #0
 8008aec:	f000 fc4a 	bl	8009384 <osMessageQueuePut>
      break;
 8008af0:	e15b      	b.n	8008daa <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6899      	ldr	r1, [r3, #8]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	899a      	ldrh	r2, [r3, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	795b      	ldrb	r3, [r3, #5]
 8008afe:	2001      	movs	r0, #1
 8008b00:	9000      	str	r0, [sp, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f978 	bl	8008df8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2206      	movs	r2, #6
 8008b18:	761a      	strb	r2, [r3, #24]
      break;
 8008b1a:	e14d      	b.n	8008db8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	795b      	ldrb	r3, [r3, #5]
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f003 fde4 	bl	800c6f0 <USBH_LL_GetURBState>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d111      	bne.n	8008b56 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2207      	movs	r2, #7
 8008b36:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2203      	movs	r2, #3
 8008b3c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f000 fc18 	bl	8009384 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b54:	e12b      	b.n	8008dae <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	2b05      	cmp	r3, #5
 8008b5a:	d113      	bne.n	8008b84 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	220c      	movs	r2, #12
 8008b60:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008b62:	2303      	movs	r3, #3
 8008b64:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2203      	movs	r2, #3
 8008b6a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f000 fc01 	bl	8009384 <osMessageQueuePut>
      break;
 8008b82:	e114      	b.n	8008dae <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d111      	bne.n	8008bae <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2203      	movs	r2, #3
 8008b94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f000 fbec 	bl	8009384 <osMessageQueuePut>
      break;
 8008bac:	e0ff      	b.n	8008dae <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	f040 80fc 	bne.w	8008dae <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	220b      	movs	r2, #11
 8008bba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2203      	movs	r2, #3
 8008bc4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f000 fbd4 	bl	8009384 <osMessageQueuePut>
      break;
 8008bdc:	e0e7      	b.n	8008dae <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	791b      	ldrb	r3, [r3, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	2100      	movs	r1, #0
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f92b 	bl	8008e42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2208      	movs	r2, #8
 8008bfc:	761a      	strb	r2, [r3, #24]

      break;
 8008bfe:	e0db      	b.n	8008db8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	791b      	ldrb	r3, [r3, #4]
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f003 fd72 	bl	800c6f0 <USBH_LL_GetURBState>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d113      	bne.n	8008c3e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	220d      	movs	r2, #13
 8008c1a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2203      	movs	r2, #3
 8008c24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c34:	2300      	movs	r3, #0
 8008c36:	2200      	movs	r2, #0
 8008c38:	f000 fba4 	bl	8009384 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c3c:	e0b9      	b.n	8008db2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d111      	bne.n	8008c68 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	220b      	movs	r2, #11
 8008c48:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2200      	movs	r2, #0
 8008c62:	f000 fb8f 	bl	8009384 <osMessageQueuePut>
      break;
 8008c66:	e0a4      	b.n	8008db2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	f040 80a1 	bne.w	8008db2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008c70:	2303      	movs	r3, #3
 8008c72:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2203      	movs	r2, #3
 8008c78:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c88:	2300      	movs	r3, #0
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f000 fb7a 	bl	8009384 <osMessageQueuePut>
      break;
 8008c90:	e08f      	b.n	8008db2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	795b      	ldrb	r3, [r3, #5]
 8008c96:	2201      	movs	r2, #1
 8008c98:	9200      	str	r2, [sp, #0]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f8aa 	bl	8008df8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	220a      	movs	r2, #10
 8008cb4:	761a      	strb	r2, [r3, #24]
      break;
 8008cb6:	e07f      	b.n	8008db8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	795b      	ldrb	r3, [r3, #5]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f003 fd16 	bl	800c6f0 <USBH_LL_GetURBState>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d113      	bne.n	8008cf6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	220d      	movs	r2, #13
 8008cd6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2203      	movs	r2, #3
 8008cdc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008cec:	2300      	movs	r3, #0
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f000 fb48 	bl	8009384 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cf4:	e05f      	b.n	8008db6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d111      	bne.n	8008d20 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2209      	movs	r2, #9
 8008d00:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2203      	movs	r2, #3
 8008d06:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d16:	2300      	movs	r3, #0
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f000 fb33 	bl	8009384 <osMessageQueuePut>
      break;
 8008d1e:	e04a      	b.n	8008db6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d147      	bne.n	8008db6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	220b      	movs	r2, #11
 8008d2a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2203      	movs	r2, #3
 8008d30:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d40:	2300      	movs	r3, #0
 8008d42:	2200      	movs	r2, #0
 8008d44:	f000 fb1e 	bl	8009384 <osMessageQueuePut>
      break;
 8008d48:	e035      	b.n	8008db6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	7e5b      	ldrb	r3, [r3, #25]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	765a      	strb	r2, [r3, #25]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	7e5b      	ldrb	r3, [r3, #25]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d806      	bhi.n	8008d6c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008d6a:	e025      	b.n	8008db8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d72:	2106      	movs	r1, #6
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	795b      	ldrb	r3, [r3, #5]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f90d 	bl	8008fa4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	791b      	ldrb	r3, [r3, #4]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f907 	bl	8008fa4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008da0:	e00a      	b.n	8008db8 <USBH_HandleControl+0x484>

    default:
      break;
 8008da2:	bf00      	nop
 8008da4:	e008      	b.n	8008db8 <USBH_HandleControl+0x484>
      break;
 8008da6:	bf00      	nop
 8008da8:	e006      	b.n	8008db8 <USBH_HandleControl+0x484>
      break;
 8008daa:	bf00      	nop
 8008dac:	e004      	b.n	8008db8 <USBH_HandleControl+0x484>
      break;
 8008dae:	bf00      	nop
 8008db0:	e002      	b.n	8008db8 <USBH_HandleControl+0x484>
      break;
 8008db2:	bf00      	nop
 8008db4:	e000      	b.n	8008db8 <USBH_HandleControl+0x484>
      break;
 8008db6:	bf00      	nop
  }

  return status;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop

08008dc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af04      	add	r7, sp, #16
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dd2:	79f9      	ldrb	r1, [r7, #7]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9303      	str	r3, [sp, #12]
 8008dd8:	2308      	movs	r3, #8
 8008dda:	9302      	str	r3, [sp, #8]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	2300      	movs	r3, #0
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	2300      	movs	r3, #0
 8008de6:	2200      	movs	r2, #0
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f003 fc50 	bl	800c68e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af04      	add	r7, sp, #16
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	4611      	mov	r1, r2
 8008e04:	461a      	mov	r2, r3
 8008e06:	460b      	mov	r3, r1
 8008e08:	80fb      	strh	r3, [r7, #6]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e1c:	7979      	ldrb	r1, [r7, #5]
 8008e1e:	7e3b      	ldrb	r3, [r7, #24]
 8008e20:	9303      	str	r3, [sp, #12]
 8008e22:	88fb      	ldrh	r3, [r7, #6]
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2200      	movs	r2, #0
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f003 fc2b 	bl	800c68e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b088      	sub	sp, #32
 8008e46:	af04      	add	r7, sp, #16
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	461a      	mov	r2, r3
 8008e50:	460b      	mov	r3, r1
 8008e52:	80fb      	strh	r3, [r7, #6]
 8008e54:	4613      	mov	r3, r2
 8008e56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e58:	7979      	ldrb	r1, [r7, #5]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9303      	str	r3, [sp, #12]
 8008e5e:	88fb      	ldrh	r3, [r7, #6]
 8008e60:	9302      	str	r3, [sp, #8]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	2301      	movs	r3, #1
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f003 fc0d 	bl	800c68e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e74:	2300      	movs	r3, #0

}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b088      	sub	sp, #32
 8008e82:	af04      	add	r7, sp, #16
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	80fb      	strh	r3, [r7, #6]
 8008e90:	4613      	mov	r3, r2
 8008e92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ea2:	7979      	ldrb	r1, [r7, #5]
 8008ea4:	7e3b      	ldrb	r3, [r7, #24]
 8008ea6:	9303      	str	r3, [sp, #12]
 8008ea8:	88fb      	ldrh	r3, [r7, #6]
 8008eaa:	9302      	str	r3, [sp, #8]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	9301      	str	r3, [sp, #4]
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f003 fbe8 	bl	800c68e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af04      	add	r7, sp, #16
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	80fb      	strh	r3, [r7, #6]
 8008eda:	4613      	mov	r3, r2
 8008edc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ede:	7979      	ldrb	r1, [r7, #5]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	9303      	str	r3, [sp, #12]
 8008ee4:	88fb      	ldrh	r3, [r7, #6]
 8008ee6:	9302      	str	r3, [sp, #8]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	9301      	str	r3, [sp, #4]
 8008eec:	2301      	movs	r3, #1
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f003 fbca 	bl	800c68e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af04      	add	r7, sp, #16
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	4611      	mov	r1, r2
 8008f10:	461a      	mov	r2, r3
 8008f12:	4603      	mov	r3, r0
 8008f14:	70fb      	strb	r3, [r7, #3]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70bb      	strb	r3, [r7, #2]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008f1e:	7878      	ldrb	r0, [r7, #1]
 8008f20:	78ba      	ldrb	r2, [r7, #2]
 8008f22:	78f9      	ldrb	r1, [r7, #3]
 8008f24:	8b3b      	ldrh	r3, [r7, #24]
 8008f26:	9302      	str	r3, [sp, #8]
 8008f28:	7d3b      	ldrb	r3, [r7, #20]
 8008f2a:	9301      	str	r3, [sp, #4]
 8008f2c:	7c3b      	ldrb	r3, [r7, #16]
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	4603      	mov	r3, r0
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f003 fb5d 	bl	800c5f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008f4e:	78fb      	ldrb	r3, [r7, #3]
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f003 fb7c 	bl	800c650 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f836 	bl	8008fe0 <USBH_GetFreePipe>
 8008f74:	4603      	mov	r3, r0
 8008f76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008f78:	89fb      	ldrh	r3, [r7, #14]
 8008f7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d00a      	beq.n	8008f98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008f82:	78fa      	ldrb	r2, [r7, #3]
 8008f84:	89fb      	ldrh	r3, [r7, #14]
 8008f86:	f003 030f 	and.w	r3, r3, #15
 8008f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	33e0      	adds	r3, #224	@ 0xe0
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	440b      	add	r3, r1
 8008f96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008f98:	89fb      	ldrh	r3, [r7, #14]
 8008f9a:	b2db      	uxtb	r3, r3
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	2b0f      	cmp	r3, #15
 8008fb4:	d80d      	bhi.n	8008fd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008fb6:	78fb      	ldrb	r3, [r7, #3]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	33e0      	adds	r3, #224	@ 0xe0
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	33e0      	adds	r3, #224	@ 0xe0
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
 8008ff0:	e00f      	b.n	8009012 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	33e0      	adds	r3, #224	@ 0xe0
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	b29b      	uxth	r3, r3
 800900a:	e007      	b.n	800901c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	3301      	adds	r3, #1
 8009010:	73fb      	strb	r3, [r7, #15]
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	2b0f      	cmp	r3, #15
 8009016:	d9ec      	bls.n	8008ff2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <__NVIC_SetPriority>:
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	4603      	mov	r3, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009038:	2b00      	cmp	r3, #0
 800903a:	db0a      	blt.n	8009052 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	b2da      	uxtb	r2, r3
 8009040:	490c      	ldr	r1, [pc, #48]	@ (8009074 <__NVIC_SetPriority+0x4c>)
 8009042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009046:	0112      	lsls	r2, r2, #4
 8009048:	b2d2      	uxtb	r2, r2
 800904a:	440b      	add	r3, r1
 800904c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009050:	e00a      	b.n	8009068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	b2da      	uxtb	r2, r3
 8009056:	4908      	ldr	r1, [pc, #32]	@ (8009078 <__NVIC_SetPriority+0x50>)
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	f003 030f 	and.w	r3, r3, #15
 800905e:	3b04      	subs	r3, #4
 8009060:	0112      	lsls	r2, r2, #4
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	440b      	add	r3, r1
 8009066:	761a      	strb	r2, [r3, #24]
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	e000e100 	.word	0xe000e100
 8009078:	e000ed00 	.word	0xe000ed00

0800907c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009080:	4b05      	ldr	r3, [pc, #20]	@ (8009098 <SysTick_Handler+0x1c>)
 8009082:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009084:	f001 ff44 	bl	800af10 <xTaskGetSchedulerState>
 8009088:	4603      	mov	r3, r0
 800908a:	2b01      	cmp	r3, #1
 800908c:	d001      	beq.n	8009092 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800908e:	f002 fe5b 	bl	800bd48 <xPortSysTickHandler>
  }
}
 8009092:	bf00      	nop
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	e000e010 	.word	0xe000e010

0800909c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80090a0:	2100      	movs	r1, #0
 80090a2:	f06f 0004 	mvn.w	r0, #4
 80090a6:	f7ff ffbf 	bl	8009028 <__NVIC_SetPriority>
#endif
}
 80090aa:	bf00      	nop
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090b6:	f3ef 8305 	mrs	r3, IPSR
 80090ba:	603b      	str	r3, [r7, #0]
  return(result);
 80090bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80090c2:	f06f 0305 	mvn.w	r3, #5
 80090c6:	607b      	str	r3, [r7, #4]
 80090c8:	e00c      	b.n	80090e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80090ca:	4b0a      	ldr	r3, [pc, #40]	@ (80090f4 <osKernelInitialize+0x44>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d105      	bne.n	80090de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80090d2:	4b08      	ldr	r3, [pc, #32]	@ (80090f4 <osKernelInitialize+0x44>)
 80090d4:	2201      	movs	r2, #1
 80090d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80090d8:	2300      	movs	r3, #0
 80090da:	607b      	str	r3, [r7, #4]
 80090dc:	e002      	b.n	80090e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80090de:	f04f 33ff 	mov.w	r3, #4294967295
 80090e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80090e4:	687b      	ldr	r3, [r7, #4]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000270 	.word	0x20000270

080090f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090fe:	f3ef 8305 	mrs	r3, IPSR
 8009102:	603b      	str	r3, [r7, #0]
  return(result);
 8009104:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <osKernelStart+0x1a>
    stat = osErrorISR;
 800910a:	f06f 0305 	mvn.w	r3, #5
 800910e:	607b      	str	r3, [r7, #4]
 8009110:	e010      	b.n	8009134 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009112:	4b0b      	ldr	r3, [pc, #44]	@ (8009140 <osKernelStart+0x48>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d109      	bne.n	800912e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800911a:	f7ff ffbf 	bl	800909c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800911e:	4b08      	ldr	r3, [pc, #32]	@ (8009140 <osKernelStart+0x48>)
 8009120:	2202      	movs	r2, #2
 8009122:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009124:	f001 fa80 	bl	800a628 <vTaskStartScheduler>
      stat = osOK;
 8009128:	2300      	movs	r3, #0
 800912a:	607b      	str	r3, [r7, #4]
 800912c:	e002      	b.n	8009134 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800912e:	f04f 33ff 	mov.w	r3, #4294967295
 8009132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009134:	687b      	ldr	r3, [r7, #4]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	20000270 	.word	0x20000270

08009144 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009144:	b580      	push	{r7, lr}
 8009146:	b08e      	sub	sp, #56	@ 0x38
 8009148:	af04      	add	r7, sp, #16
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009150:	2300      	movs	r3, #0
 8009152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009154:	f3ef 8305 	mrs	r3, IPSR
 8009158:	617b      	str	r3, [r7, #20]
  return(result);
 800915a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800915c:	2b00      	cmp	r3, #0
 800915e:	d17e      	bne.n	800925e <osThreadNew+0x11a>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d07b      	beq.n	800925e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009166:	2380      	movs	r3, #128	@ 0x80
 8009168:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800916a:	2318      	movs	r3, #24
 800916c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800916e:	2300      	movs	r3, #0
 8009170:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009172:	f04f 33ff 	mov.w	r3, #4294967295
 8009176:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d045      	beq.n	800920a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <osThreadNew+0x48>
        name = attr->name;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d008      	beq.n	80091b2 <osThreadNew+0x6e>
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	2b38      	cmp	r3, #56	@ 0x38
 80091a4:	d805      	bhi.n	80091b2 <osThreadNew+0x6e>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <osThreadNew+0x72>
        return (NULL);
 80091b2:	2300      	movs	r3, #0
 80091b4:	e054      	b.n	8009260 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	089b      	lsrs	r3, r3, #2
 80091c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00e      	beq.n	80091ec <osThreadNew+0xa8>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	2ba7      	cmp	r3, #167	@ 0xa7
 80091d4:	d90a      	bls.n	80091ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d006      	beq.n	80091ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d002      	beq.n	80091ec <osThreadNew+0xa8>
        mem = 1;
 80091e6:	2301      	movs	r3, #1
 80091e8:	61bb      	str	r3, [r7, #24]
 80091ea:	e010      	b.n	800920e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10c      	bne.n	800920e <osThreadNew+0xca>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d108      	bne.n	800920e <osThreadNew+0xca>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <osThreadNew+0xca>
          mem = 0;
 8009204:	2300      	movs	r3, #0
 8009206:	61bb      	str	r3, [r7, #24]
 8009208:	e001      	b.n	800920e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d110      	bne.n	8009236 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800921c:	9202      	str	r2, [sp, #8]
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	6a3a      	ldr	r2, [r7, #32]
 8009228:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f001 f808 	bl	800a240 <xTaskCreateStatic>
 8009230:	4603      	mov	r3, r0
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	e013      	b.n	800925e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d110      	bne.n	800925e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	b29a      	uxth	r2, r3
 8009240:	f107 0310 	add.w	r3, r7, #16
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f001 f856 	bl	800a300 <xTaskCreate>
 8009254:	4603      	mov	r3, r0
 8009256:	2b01      	cmp	r3, #1
 8009258:	d001      	beq.n	800925e <osThreadNew+0x11a>
            hTask = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800925e:	693b      	ldr	r3, [r7, #16]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3728      	adds	r7, #40	@ 0x28
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009270:	f3ef 8305 	mrs	r3, IPSR
 8009274:	60bb      	str	r3, [r7, #8]
  return(result);
 8009276:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <osDelay+0x1c>
    stat = osErrorISR;
 800927c:	f06f 0305 	mvn.w	r3, #5
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	e007      	b.n	8009294 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009284:	2300      	movs	r3, #0
 8009286:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d002      	beq.n	8009294 <osDelay+0x2c>
      vTaskDelay(ticks);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f001 f994 	bl	800a5bc <vTaskDelay>
    }
  }

  return (stat);
 8009294:	68fb      	ldr	r3, [r7, #12]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800929e:	b580      	push	{r7, lr}
 80092a0:	b08a      	sub	sp, #40	@ 0x28
 80092a2:	af02      	add	r7, sp, #8
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092ae:	f3ef 8305 	mrs	r3, IPSR
 80092b2:	613b      	str	r3, [r7, #16]
  return(result);
 80092b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d15f      	bne.n	800937a <osMessageQueueNew+0xdc>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d05c      	beq.n	800937a <osMessageQueueNew+0xdc>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d059      	beq.n	800937a <osMessageQueueNew+0xdc>
    mem = -1;
 80092c6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d029      	beq.n	8009326 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d012      	beq.n	8009300 <osMessageQueueNew+0x62>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	2b4f      	cmp	r3, #79	@ 0x4f
 80092e0:	d90e      	bls.n	8009300 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	695a      	ldr	r2, [r3, #20]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	68b9      	ldr	r1, [r7, #8]
 80092f2:	fb01 f303 	mul.w	r3, r1, r3
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d302      	bcc.n	8009300 <osMessageQueueNew+0x62>
        mem = 1;
 80092fa:	2301      	movs	r3, #1
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	e014      	b.n	800932a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d110      	bne.n	800932a <osMessageQueueNew+0x8c>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10c      	bne.n	800932a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009314:	2b00      	cmp	r3, #0
 8009316:	d108      	bne.n	800932a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d104      	bne.n	800932a <osMessageQueueNew+0x8c>
          mem = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	61bb      	str	r3, [r7, #24]
 8009324:	e001      	b.n	800932a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10b      	bne.n	8009348 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691a      	ldr	r2, [r3, #16]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	2100      	movs	r1, #0
 800933a:	9100      	str	r1, [sp, #0]
 800933c:	68b9      	ldr	r1, [r7, #8]
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 fa30 	bl	80097a4 <xQueueGenericCreateStatic>
 8009344:	61f8      	str	r0, [r7, #28]
 8009346:	e008      	b.n	800935a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d105      	bne.n	800935a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800934e:	2200      	movs	r2, #0
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 faa3 	bl	800989e <xQueueGenericCreate>
 8009358:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00c      	beq.n	800937a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <osMessageQueueNew+0xd0>
        name = attr->name;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	e001      	b.n	8009372 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800936e:	2300      	movs	r3, #0
 8009370:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009372:	6979      	ldr	r1, [r7, #20]
 8009374:	69f8      	ldr	r0, [r7, #28]
 8009376:	f000 ff05 	bl	800a184 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800937a:	69fb      	ldr	r3, [r7, #28]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3720      	adds	r7, #32
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	4613      	mov	r3, r2
 8009392:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009398:	2300      	movs	r3, #0
 800939a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800939c:	f3ef 8305 	mrs	r3, IPSR
 80093a0:	617b      	str	r3, [r7, #20]
  return(result);
 80093a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d028      	beq.n	80093fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d005      	beq.n	80093ba <osMessageQueuePut+0x36>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <osMessageQueuePut+0x36>
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80093ba:	f06f 0303 	mvn.w	r3, #3
 80093be:	61fb      	str	r3, [r7, #28]
 80093c0:	e038      	b.n	8009434 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80093c2:	2300      	movs	r3, #0
 80093c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80093c6:	f107 0210 	add.w	r2, r7, #16
 80093ca:	2300      	movs	r3, #0
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	69b8      	ldr	r0, [r7, #24]
 80093d0:	f000 fbc6 	bl	8009b60 <xQueueGenericSendFromISR>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d003      	beq.n	80093e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80093da:	f06f 0302 	mvn.w	r3, #2
 80093de:	61fb      	str	r3, [r7, #28]
 80093e0:	e028      	b.n	8009434 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d025      	beq.n	8009434 <osMessageQueuePut+0xb0>
 80093e8:	4b15      	ldr	r3, [pc, #84]	@ (8009440 <osMessageQueuePut+0xbc>)
 80093ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	e01c      	b.n	8009434 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <osMessageQueuePut+0x82>
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d103      	bne.n	800940e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009406:	f06f 0303 	mvn.w	r3, #3
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	e012      	b.n	8009434 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800940e:	2300      	movs	r3, #0
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	68b9      	ldr	r1, [r7, #8]
 8009414:	69b8      	ldr	r0, [r7, #24]
 8009416:	f000 faa1 	bl	800995c <xQueueGenericSend>
 800941a:	4603      	mov	r3, r0
 800941c:	2b01      	cmp	r3, #1
 800941e:	d009      	beq.n	8009434 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009426:	f06f 0301 	mvn.w	r3, #1
 800942a:	61fb      	str	r3, [r7, #28]
 800942c:	e002      	b.n	8009434 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800942e:	f06f 0302 	mvn.w	r3, #2
 8009432:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009434:	69fb      	ldr	r3, [r7, #28]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3720      	adds	r7, #32
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	e000ed04 	.word	0xe000ed04

08009444 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009456:	2300      	movs	r3, #0
 8009458:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800945a:	f3ef 8305 	mrs	r3, IPSR
 800945e:	617b      	str	r3, [r7, #20]
  return(result);
 8009460:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009462:	2b00      	cmp	r3, #0
 8009464:	d028      	beq.n	80094b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d005      	beq.n	8009478 <osMessageQueueGet+0x34>
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d002      	beq.n	8009478 <osMessageQueueGet+0x34>
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009478:	f06f 0303 	mvn.w	r3, #3
 800947c:	61fb      	str	r3, [r7, #28]
 800947e:	e037      	b.n	80094f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009480:	2300      	movs	r3, #0
 8009482:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009484:	f107 0310 	add.w	r3, r7, #16
 8009488:	461a      	mov	r2, r3
 800948a:	68b9      	ldr	r1, [r7, #8]
 800948c:	69b8      	ldr	r0, [r7, #24]
 800948e:	f000 fce7 	bl	8009e60 <xQueueReceiveFromISR>
 8009492:	4603      	mov	r3, r0
 8009494:	2b01      	cmp	r3, #1
 8009496:	d003      	beq.n	80094a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009498:	f06f 0302 	mvn.w	r3, #2
 800949c:	61fb      	str	r3, [r7, #28]
 800949e:	e027      	b.n	80094f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d024      	beq.n	80094f0 <osMessageQueueGet+0xac>
 80094a6:	4b15      	ldr	r3, [pc, #84]	@ (80094fc <osMessageQueueGet+0xb8>)
 80094a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	e01b      	b.n	80094f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d002      	beq.n	80094c4 <osMessageQueueGet+0x80>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d103      	bne.n	80094cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80094c4:	f06f 0303 	mvn.w	r3, #3
 80094c8:	61fb      	str	r3, [r7, #28]
 80094ca:	e011      	b.n	80094f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	68b9      	ldr	r1, [r7, #8]
 80094d0:	69b8      	ldr	r0, [r7, #24]
 80094d2:	f000 fbe3 	bl	8009c9c <xQueueReceive>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d009      	beq.n	80094f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80094e2:	f06f 0301 	mvn.w	r3, #1
 80094e6:	61fb      	str	r3, [r7, #28]
 80094e8:	e002      	b.n	80094f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80094ea:	f06f 0302 	mvn.w	r3, #2
 80094ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80094f0:	69fb      	ldr	r3, [r7, #28]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3720      	adds	r7, #32
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	e000ed04 	.word	0xe000ed04

08009500 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4a07      	ldr	r2, [pc, #28]	@ (800952c <vApplicationGetIdleTaskMemory+0x2c>)
 8009510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	4a06      	ldr	r2, [pc, #24]	@ (8009530 <vApplicationGetIdleTaskMemory+0x30>)
 8009516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2280      	movs	r2, #128	@ 0x80
 800951c:	601a      	str	r2, [r3, #0]
}
 800951e:	bf00      	nop
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20000274 	.word	0x20000274
 8009530:	2000031c 	.word	0x2000031c

08009534 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a07      	ldr	r2, [pc, #28]	@ (8009560 <vApplicationGetTimerTaskMemory+0x2c>)
 8009544:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4a06      	ldr	r2, [pc, #24]	@ (8009564 <vApplicationGetTimerTaskMemory+0x30>)
 800954a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009552:	601a      	str	r2, [r3, #0]
}
 8009554:	bf00      	nop
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	2000051c 	.word	0x2000051c
 8009564:	200005c4 	.word	0x200005c4

08009568 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f103 0208 	add.w	r2, r3, #8
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f04f 32ff 	mov.w	r2, #4294967295
 8009580:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f103 0208 	add.w	r2, r3, #8
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f103 0208 	add.w	r2, r3, #8
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095b6:	bf00      	nop
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095c2:	b480      	push	{r7}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	1c5a      	adds	r2, r3, #1
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	601a      	str	r2, [r3, #0]
}
 80095fe:	bf00      	nop
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800960a:	b480      	push	{r7}
 800960c:	b085      	sub	sp, #20
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009620:	d103      	bne.n	800962a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	60fb      	str	r3, [r7, #12]
 8009628:	e00c      	b.n	8009644 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	3308      	adds	r3, #8
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	e002      	b.n	8009638 <vListInsert+0x2e>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	429a      	cmp	r2, r3
 8009642:	d2f6      	bcs.n	8009632 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	601a      	str	r2, [r3, #0]
}
 8009670:	bf00      	nop
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	6892      	ldr	r2, [r2, #8]
 8009692:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6852      	ldr	r2, [r2, #4]
 800969c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d103      	bne.n	80096b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	1e5a      	subs	r2, r3, #1
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10b      	bne.n	80096fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	e7fd      	b.n	80096f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80096fc:	f002 fa94 	bl	800bc28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009708:	68f9      	ldr	r1, [r7, #12]
 800970a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800970c:	fb01 f303 	mul.w	r3, r1, r3
 8009710:	441a      	add	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800972c:	3b01      	subs	r3, #1
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	441a      	add	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	22ff      	movs	r2, #255	@ 0xff
 8009740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	22ff      	movs	r2, #255	@ 0xff
 8009748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d114      	bne.n	800977c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d01a      	beq.n	8009790 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3310      	adds	r3, #16
 800975e:	4618      	mov	r0, r3
 8009760:	f001 fa00 	bl	800ab64 <xTaskRemoveFromEventList>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d012      	beq.n	8009790 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800976a:	4b0d      	ldr	r3, [pc, #52]	@ (80097a0 <xQueueGenericReset+0xd0>)
 800976c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	e009      	b.n	8009790 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	3310      	adds	r3, #16
 8009780:	4618      	mov	r0, r3
 8009782:	f7ff fef1 	bl	8009568 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3324      	adds	r3, #36	@ 0x24
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff feec 	bl	8009568 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009790:	f002 fa7c 	bl	800bc8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009794:	2301      	movs	r3, #1
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	e000ed04 	.word	0xe000ed04

080097a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08e      	sub	sp, #56	@ 0x38
 80097a8:	af02      	add	r7, sp, #8
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10b      	bne.n	80097d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80097b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097ca:	bf00      	nop
 80097cc:	bf00      	nop
 80097ce:	e7fd      	b.n	80097cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10b      	bne.n	80097ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <xQueueGenericCreateStatic+0x56>
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <xQueueGenericCreateStatic+0x5a>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e000      	b.n	8009800 <xQueueGenericCreateStatic+0x5c>
 80097fe:	2300      	movs	r3, #0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10b      	bne.n	800981c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	623b      	str	r3, [r7, #32]
}
 8009816:	bf00      	nop
 8009818:	bf00      	nop
 800981a:	e7fd      	b.n	8009818 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d102      	bne.n	8009828 <xQueueGenericCreateStatic+0x84>
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <xQueueGenericCreateStatic+0x88>
 8009828:	2301      	movs	r3, #1
 800982a:	e000      	b.n	800982e <xQueueGenericCreateStatic+0x8a>
 800982c:	2300      	movs	r3, #0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10b      	bne.n	800984a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	61fb      	str	r3, [r7, #28]
}
 8009844:	bf00      	nop
 8009846:	bf00      	nop
 8009848:	e7fd      	b.n	8009846 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800984a:	2350      	movs	r3, #80	@ 0x50
 800984c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b50      	cmp	r3, #80	@ 0x50
 8009852:	d00b      	beq.n	800986c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	61bb      	str	r3, [r7, #24]
}
 8009866:	bf00      	nop
 8009868:	bf00      	nop
 800986a:	e7fd      	b.n	8009868 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800986c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00d      	beq.n	8009894 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009880:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	4613      	mov	r3, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	68b9      	ldr	r1, [r7, #8]
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f000 f840 	bl	8009914 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009896:	4618      	mov	r0, r3
 8009898:	3730      	adds	r7, #48	@ 0x30
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b08a      	sub	sp, #40	@ 0x28
 80098a2:	af02      	add	r7, sp, #8
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	4613      	mov	r3, r2
 80098aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10b      	bne.n	80098ca <xQueueGenericCreate+0x2c>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	613b      	str	r3, [r7, #16]
}
 80098c4:	bf00      	nop
 80098c6:	bf00      	nop
 80098c8:	e7fd      	b.n	80098c6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	fb02 f303 	mul.w	r3, r2, r3
 80098d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	3350      	adds	r3, #80	@ 0x50
 80098d8:	4618      	mov	r0, r3
 80098da:	f002 fac7 	bl	800be6c <pvPortMalloc>
 80098de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d011      	beq.n	800990a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	3350      	adds	r3, #80	@ 0x50
 80098ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098f8:	79fa      	ldrb	r2, [r7, #7]
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	4613      	mov	r3, r2
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	68b9      	ldr	r1, [r7, #8]
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 f805 	bl	8009914 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800990a:	69bb      	ldr	r3, [r7, #24]
	}
 800990c:	4618      	mov	r0, r3
 800990e:	3720      	adds	r7, #32
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d103      	bne.n	8009930 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	e002      	b.n	8009936 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009942:	2101      	movs	r1, #1
 8009944:	69b8      	ldr	r0, [r7, #24]
 8009946:	f7ff fec3 	bl	80096d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	78fa      	ldrb	r2, [r7, #3]
 800994e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009952:	bf00      	nop
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08e      	sub	sp, #56	@ 0x38
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800996a:	2300      	movs	r3, #0
 800996c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10b      	bne.n	8009990 <xQueueGenericSend+0x34>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800998a:	bf00      	nop
 800998c:	bf00      	nop
 800998e:	e7fd      	b.n	800998c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d103      	bne.n	800999e <xQueueGenericSend+0x42>
 8009996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <xQueueGenericSend+0x46>
 800999e:	2301      	movs	r3, #1
 80099a0:	e000      	b.n	80099a4 <xQueueGenericSend+0x48>
 80099a2:	2300      	movs	r3, #0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10b      	bne.n	80099c0 <xQueueGenericSend+0x64>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80099ba:	bf00      	nop
 80099bc:	bf00      	nop
 80099be:	e7fd      	b.n	80099bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d103      	bne.n	80099ce <xQueueGenericSend+0x72>
 80099c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d101      	bne.n	80099d2 <xQueueGenericSend+0x76>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e000      	b.n	80099d4 <xQueueGenericSend+0x78>
 80099d2:	2300      	movs	r3, #0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10b      	bne.n	80099f0 <xQueueGenericSend+0x94>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	623b      	str	r3, [r7, #32]
}
 80099ea:	bf00      	nop
 80099ec:	bf00      	nop
 80099ee:	e7fd      	b.n	80099ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099f0:	f001 fa8e 	bl	800af10 <xTaskGetSchedulerState>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d102      	bne.n	8009a00 <xQueueGenericSend+0xa4>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <xQueueGenericSend+0xa8>
 8009a00:	2301      	movs	r3, #1
 8009a02:	e000      	b.n	8009a06 <xQueueGenericSend+0xaa>
 8009a04:	2300      	movs	r3, #0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10b      	bne.n	8009a22 <xQueueGenericSend+0xc6>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	61fb      	str	r3, [r7, #28]
}
 8009a1c:	bf00      	nop
 8009a1e:	bf00      	nop
 8009a20:	e7fd      	b.n	8009a1e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a22:	f002 f901 	bl	800bc28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d302      	bcc.n	8009a38 <xQueueGenericSend+0xdc>
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d129      	bne.n	8009a8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a3e:	f000 fa91 	bl	8009f64 <prvCopyDataToQueue>
 8009a42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d010      	beq.n	8009a6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4e:	3324      	adds	r3, #36	@ 0x24
 8009a50:	4618      	mov	r0, r3
 8009a52:	f001 f887 	bl	800ab64 <xTaskRemoveFromEventList>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d013      	beq.n	8009a84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8009b5c <xQueueGenericSend+0x200>)
 8009a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	e00a      	b.n	8009a84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d007      	beq.n	8009a84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009a74:	4b39      	ldr	r3, [pc, #228]	@ (8009b5c <xQueueGenericSend+0x200>)
 8009a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009a84:	f002 f902 	bl	800bc8c <vPortExitCritical>
				return pdPASS;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e063      	b.n	8009b54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a92:	f002 f8fb 	bl	800bc8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e05c      	b.n	8009b54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d106      	bne.n	8009aae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009aa0:	f107 0314 	add.w	r3, r7, #20
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 f8c1 	bl	800ac2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009aae:	f002 f8ed 	bl	800bc8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ab2:	f000 fe29 	bl	800a708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ab6:	f002 f8b7 	bl	800bc28 <vPortEnterCritical>
 8009aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ac0:	b25b      	sxtb	r3, r3
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac6:	d103      	bne.n	8009ad0 <xQueueGenericSend+0x174>
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ad6:	b25b      	sxtb	r3, r3
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009adc:	d103      	bne.n	8009ae6 <xQueueGenericSend+0x18a>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ae6:	f002 f8d1 	bl	800bc8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009aea:	1d3a      	adds	r2, r7, #4
 8009aec:	f107 0314 	add.w	r3, r7, #20
 8009af0:	4611      	mov	r1, r2
 8009af2:	4618      	mov	r0, r3
 8009af4:	f001 f8b0 	bl	800ac58 <xTaskCheckForTimeOut>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d124      	bne.n	8009b48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009afe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b00:	f000 fb28 	bl	800a154 <prvIsQueueFull>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d018      	beq.n	8009b3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0c:	3310      	adds	r3, #16
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	4611      	mov	r1, r2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 ffd4 	bl	800aac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b1a:	f000 fab3 	bl	800a084 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b1e:	f000 fe01 	bl	800a724 <xTaskResumeAll>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f47f af7c 	bne.w	8009a22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b5c <xQueueGenericSend+0x200>)
 8009b2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	e772      	b.n	8009a22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b3e:	f000 faa1 	bl	800a084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b42:	f000 fdef 	bl	800a724 <xTaskResumeAll>
 8009b46:	e76c      	b.n	8009a22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b4a:	f000 fa9b 	bl	800a084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b4e:	f000 fde9 	bl	800a724 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009b52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3738      	adds	r7, #56	@ 0x38
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	e000ed04 	.word	0xe000ed04

08009b60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b090      	sub	sp, #64	@ 0x40
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10b      	bne.n	8009b90 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b8a:	bf00      	nop
 8009b8c:	bf00      	nop
 8009b8e:	e7fd      	b.n	8009b8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d103      	bne.n	8009b9e <xQueueGenericSendFromISR+0x3e>
 8009b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <xQueueGenericSendFromISR+0x42>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e000      	b.n	8009ba4 <xQueueGenericSendFromISR+0x44>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10b      	bne.n	8009bc0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	e7fd      	b.n	8009bbc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d103      	bne.n	8009bce <xQueueGenericSendFromISR+0x6e>
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d101      	bne.n	8009bd2 <xQueueGenericSendFromISR+0x72>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e000      	b.n	8009bd4 <xQueueGenericSendFromISR+0x74>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10b      	bne.n	8009bf0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	623b      	str	r3, [r7, #32]
}
 8009bea:	bf00      	nop
 8009bec:	bf00      	nop
 8009bee:	e7fd      	b.n	8009bec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bf0:	f002 f8fa 	bl	800bde8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009bf4:	f3ef 8211 	mrs	r2, BASEPRI
 8009bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	61fa      	str	r2, [r7, #28]
 8009c0a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c0e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d302      	bcc.n	8009c22 <xQueueGenericSendFromISR+0xc2>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d12f      	bne.n	8009c82 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	68b9      	ldr	r1, [r7, #8]
 8009c36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c38:	f000 f994 	bl	8009f64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c3c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c44:	d112      	bne.n	8009c6c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d016      	beq.n	8009c7c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c50:	3324      	adds	r3, #36	@ 0x24
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 ff86 	bl	800ab64 <xTaskRemoveFromEventList>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00e      	beq.n	8009c7c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00b      	beq.n	8009c7c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	601a      	str	r2, [r3, #0]
 8009c6a:	e007      	b.n	8009c7c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009c70:	3301      	adds	r3, #1
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	b25a      	sxtb	r2, r3
 8009c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009c80:	e001      	b.n	8009c86 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c88:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3740      	adds	r7, #64	@ 0x40
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08c      	sub	sp, #48	@ 0x30
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10b      	bne.n	8009cce <xQueueReceive+0x32>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	623b      	str	r3, [r7, #32]
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	e7fd      	b.n	8009cca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d103      	bne.n	8009cdc <xQueueReceive+0x40>
 8009cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <xQueueReceive+0x44>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e000      	b.n	8009ce2 <xQueueReceive+0x46>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10b      	bne.n	8009cfe <xQueueReceive+0x62>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	61fb      	str	r3, [r7, #28]
}
 8009cf8:	bf00      	nop
 8009cfa:	bf00      	nop
 8009cfc:	e7fd      	b.n	8009cfa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cfe:	f001 f907 	bl	800af10 <xTaskGetSchedulerState>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <xQueueReceive+0x72>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <xQueueReceive+0x76>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e000      	b.n	8009d14 <xQueueReceive+0x78>
 8009d12:	2300      	movs	r3, #0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10b      	bne.n	8009d30 <xQueueReceive+0x94>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	61bb      	str	r3, [r7, #24]
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	e7fd      	b.n	8009d2c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d30:	f001 ff7a 	bl	800bc28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01f      	beq.n	8009d80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d44:	f000 f978 	bl	800a038 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4a:	1e5a      	subs	r2, r3, #1
 8009d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00f      	beq.n	8009d78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5a:	3310      	adds	r3, #16
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 ff01 	bl	800ab64 <xTaskRemoveFromEventList>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d007      	beq.n	8009d78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d68:	4b3c      	ldr	r3, [pc, #240]	@ (8009e5c <xQueueReceive+0x1c0>)
 8009d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d78:	f001 ff88 	bl	800bc8c <vPortExitCritical>
				return pdPASS;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e069      	b.n	8009e54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d103      	bne.n	8009d8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d86:	f001 ff81 	bl	800bc8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e062      	b.n	8009e54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d106      	bne.n	8009da2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d94:	f107 0310 	add.w	r3, r7, #16
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 ff47 	bl	800ac2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009da2:	f001 ff73 	bl	800bc8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009da6:	f000 fcaf 	bl	800a708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009daa:	f001 ff3d 	bl	800bc28 <vPortEnterCritical>
 8009dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009db4:	b25b      	sxtb	r3, r3
 8009db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dba:	d103      	bne.n	8009dc4 <xQueueReceive+0x128>
 8009dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dca:	b25b      	sxtb	r3, r3
 8009dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd0:	d103      	bne.n	8009dda <xQueueReceive+0x13e>
 8009dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009dda:	f001 ff57 	bl	800bc8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dde:	1d3a      	adds	r2, r7, #4
 8009de0:	f107 0310 	add.w	r3, r7, #16
 8009de4:	4611      	mov	r1, r2
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 ff36 	bl	800ac58 <xTaskCheckForTimeOut>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d123      	bne.n	8009e3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009df4:	f000 f998 	bl	800a128 <prvIsQueueEmpty>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d017      	beq.n	8009e2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e00:	3324      	adds	r3, #36	@ 0x24
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	4611      	mov	r1, r2
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 fe5a 	bl	800aac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e0e:	f000 f939 	bl	800a084 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e12:	f000 fc87 	bl	800a724 <xTaskResumeAll>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d189      	bne.n	8009d30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e5c <xQueueReceive+0x1c0>)
 8009e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	e780      	b.n	8009d30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e30:	f000 f928 	bl	800a084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e34:	f000 fc76 	bl	800a724 <xTaskResumeAll>
 8009e38:	e77a      	b.n	8009d30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e3c:	f000 f922 	bl	800a084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e40:	f000 fc70 	bl	800a724 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e46:	f000 f96f 	bl	800a128 <prvIsQueueEmpty>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f43f af6f 	beq.w	8009d30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3730      	adds	r7, #48	@ 0x30
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	e000ed04 	.word	0xe000ed04

08009e60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b08e      	sub	sp, #56	@ 0x38
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10b      	bne.n	8009e8e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	623b      	str	r3, [r7, #32]
}
 8009e88:	bf00      	nop
 8009e8a:	bf00      	nop
 8009e8c:	e7fd      	b.n	8009e8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <xQueueReceiveFromISR+0x3c>
 8009e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <xQueueReceiveFromISR+0x40>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e000      	b.n	8009ea2 <xQueueReceiveFromISR+0x42>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10b      	bne.n	8009ebe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	61fb      	str	r3, [r7, #28]
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	e7fd      	b.n	8009eba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ebe:	f001 ff93 	bl	800bde8 <vPortValidateInterruptPriority>
	__asm volatile
 8009ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8009ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	61ba      	str	r2, [r7, #24]
 8009ed8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009eda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d02f      	beq.n	8009f4a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ef4:	68b9      	ldr	r1, [r7, #8]
 8009ef6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ef8:	f000 f89e 	bl	800a038 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efe:	1e5a      	subs	r2, r3, #1
 8009f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009f04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0c:	d112      	bne.n	8009f34 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d016      	beq.n	8009f44 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f18:	3310      	adds	r3, #16
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 fe22 	bl	800ab64 <xTaskRemoveFromEventList>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00e      	beq.n	8009f44 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00b      	beq.n	8009f44 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	e007      	b.n	8009f44 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f38:	3301      	adds	r3, #1
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	b25a      	sxtb	r2, r3
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009f44:	2301      	movs	r3, #1
 8009f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f48:	e001      	b.n	8009f4e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f383 8811 	msr	BASEPRI, r3
}
 8009f58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3738      	adds	r7, #56	@ 0x38
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10d      	bne.n	8009f9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d14d      	bne.n	800a026 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 ffdc 	bl	800af4c <xTaskPriorityDisinherit>
 8009f94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	609a      	str	r2, [r3, #8]
 8009f9c:	e043      	b.n	800a026 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d119      	bne.n	8009fd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6858      	ldr	r0, [r3, #4]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fac:	461a      	mov	r2, r3
 8009fae:	68b9      	ldr	r1, [r7, #8]
 8009fb0:	f002 fda6 	bl	800cb00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fbc:	441a      	add	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d32b      	bcc.n	800a026 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	605a      	str	r2, [r3, #4]
 8009fd6:	e026      	b.n	800a026 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	68d8      	ldr	r0, [r3, #12]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	f002 fd8c 	bl	800cb00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	68da      	ldr	r2, [r3, #12]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ff0:	425b      	negs	r3, r3
 8009ff2:	441a      	add	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68da      	ldr	r2, [r3, #12]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	429a      	cmp	r2, r3
 800a002:	d207      	bcs.n	800a014 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a00c:	425b      	negs	r3, r3
 800a00e:	441a      	add	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d105      	bne.n	800a026 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	3b01      	subs	r3, #1
 800a024:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a02e:	697b      	ldr	r3, [r7, #20]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a046:	2b00      	cmp	r3, #0
 800a048:	d018      	beq.n	800a07c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68da      	ldr	r2, [r3, #12]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a052:	441a      	add	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68da      	ldr	r2, [r3, #12]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	429a      	cmp	r2, r3
 800a062:	d303      	bcc.n	800a06c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	68d9      	ldr	r1, [r3, #12]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a074:	461a      	mov	r2, r3
 800a076:	6838      	ldr	r0, [r7, #0]
 800a078:	f002 fd42 	bl	800cb00 <memcpy>
	}
}
 800a07c:	bf00      	nop
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a08c:	f001 fdcc 	bl	800bc28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a096:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a098:	e011      	b.n	800a0be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d012      	beq.n	800a0c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3324      	adds	r3, #36	@ 0x24
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fd5c 	bl	800ab64 <xTaskRemoveFromEventList>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a0b2:	f000 fe35 	bl	800ad20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dce9      	bgt.n	800a09a <prvUnlockQueue+0x16>
 800a0c6:	e000      	b.n	800a0ca <prvUnlockQueue+0x46>
					break;
 800a0c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	22ff      	movs	r2, #255	@ 0xff
 800a0ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a0d2:	f001 fddb 	bl	800bc8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0d6:	f001 fda7 	bl	800bc28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0e2:	e011      	b.n	800a108 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d012      	beq.n	800a112 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3310      	adds	r3, #16
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fd37 	bl	800ab64 <xTaskRemoveFromEventList>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0fc:	f000 fe10 	bl	800ad20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a100:	7bbb      	ldrb	r3, [r7, #14]
 800a102:	3b01      	subs	r3, #1
 800a104:	b2db      	uxtb	r3, r3
 800a106:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	dce9      	bgt.n	800a0e4 <prvUnlockQueue+0x60>
 800a110:	e000      	b.n	800a114 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a112:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	22ff      	movs	r2, #255	@ 0xff
 800a118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a11c:	f001 fdb6 	bl	800bc8c <vPortExitCritical>
}
 800a120:	bf00      	nop
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a130:	f001 fd7a 	bl	800bc28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d102      	bne.n	800a142 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a13c:	2301      	movs	r3, #1
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	e001      	b.n	800a146 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a142:	2300      	movs	r3, #0
 800a144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a146:	f001 fda1 	bl	800bc8c <vPortExitCritical>

	return xReturn;
 800a14a:	68fb      	ldr	r3, [r7, #12]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a15c:	f001 fd64 	bl	800bc28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a168:	429a      	cmp	r2, r3
 800a16a:	d102      	bne.n	800a172 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a16c:	2301      	movs	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	e001      	b.n	800a176 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a172:	2300      	movs	r3, #0
 800a174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a176:	f001 fd89 	bl	800bc8c <vPortExitCritical>

	return xReturn;
 800a17a:	68fb      	ldr	r3, [r7, #12]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
 800a192:	e014      	b.n	800a1be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a194:	4a0f      	ldr	r2, [pc, #60]	@ (800a1d4 <vQueueAddToRegistry+0x50>)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10b      	bne.n	800a1b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a1a0:	490c      	ldr	r1, [pc, #48]	@ (800a1d4 <vQueueAddToRegistry+0x50>)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a1aa:	4a0a      	ldr	r2, [pc, #40]	@ (800a1d4 <vQueueAddToRegistry+0x50>)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a1b6:	e006      	b.n	800a1c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b07      	cmp	r3, #7
 800a1c2:	d9e7      	bls.n	800a194 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	200009c4 	.word	0x200009c4

0800a1d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a1e8:	f001 fd1e 	bl	800bc28 <vPortEnterCritical>
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1f2:	b25b      	sxtb	r3, r3
 800a1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f8:	d103      	bne.n	800a202 <vQueueWaitForMessageRestricted+0x2a>
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a208:	b25b      	sxtb	r3, r3
 800a20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20e:	d103      	bne.n	800a218 <vQueueWaitForMessageRestricted+0x40>
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a218:	f001 fd38 	bl	800bc8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a220:	2b00      	cmp	r3, #0
 800a222:	d106      	bne.n	800a232 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	3324      	adds	r3, #36	@ 0x24
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	68b9      	ldr	r1, [r7, #8]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 fc6d 	bl	800ab0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a232:	6978      	ldr	r0, [r7, #20]
 800a234:	f7ff ff26 	bl	800a084 <prvUnlockQueue>
	}
 800a238:	bf00      	nop
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08e      	sub	sp, #56	@ 0x38
 800a244:	af04      	add	r7, sp, #16
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a24e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10b      	bne.n	800a26c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	623b      	str	r3, [r7, #32]
}
 800a266:	bf00      	nop
 800a268:	bf00      	nop
 800a26a:	e7fd      	b.n	800a268 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	61fb      	str	r3, [r7, #28]
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	e7fd      	b.n	800a286 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a28a:	23a8      	movs	r3, #168	@ 0xa8
 800a28c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	2ba8      	cmp	r3, #168	@ 0xa8
 800a292:	d00b      	beq.n	800a2ac <xTaskCreateStatic+0x6c>
	__asm volatile
 800a294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	61bb      	str	r3, [r7, #24]
}
 800a2a6:	bf00      	nop
 800a2a8:	bf00      	nop
 800a2aa:	e7fd      	b.n	800a2a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d01e      	beq.n	800a2f2 <xTaskCreateStatic+0xb2>
 800a2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d01b      	beq.n	800a2f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d2:	9302      	str	r3, [sp, #8]
 800a2d4:	f107 0314 	add.w	r3, r7, #20
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	68b9      	ldr	r1, [r7, #8]
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 f851 	bl	800a38c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a2ec:	f000 f8f6 	bl	800a4dc <prvAddNewTaskToReadyList>
 800a2f0:	e001      	b.n	800a2f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2f6:	697b      	ldr	r3, [r7, #20]
	}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3728      	adds	r7, #40	@ 0x28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08c      	sub	sp, #48	@ 0x30
 800a304:	af04      	add	r7, sp, #16
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	603b      	str	r3, [r7, #0]
 800a30c:	4613      	mov	r3, r2
 800a30e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a310:	88fb      	ldrh	r3, [r7, #6]
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4618      	mov	r0, r3
 800a316:	f001 fda9 	bl	800be6c <pvPortMalloc>
 800a31a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00e      	beq.n	800a340 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a322:	20a8      	movs	r0, #168	@ 0xa8
 800a324:	f001 fda2 	bl	800be6c <pvPortMalloc>
 800a328:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	697a      	ldr	r2, [r7, #20]
 800a334:	631a      	str	r2, [r3, #48]	@ 0x30
 800a336:	e005      	b.n	800a344 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a338:	6978      	ldr	r0, [r7, #20]
 800a33a:	f001 fe65 	bl	800c008 <vPortFree>
 800a33e:	e001      	b.n	800a344 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a340:	2300      	movs	r3, #0
 800a342:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d017      	beq.n	800a37a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a352:	88fa      	ldrh	r2, [r7, #6]
 800a354:	2300      	movs	r3, #0
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	9302      	str	r3, [sp, #8]
 800a35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	68b9      	ldr	r1, [r7, #8]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 f80f 	bl	800a38c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a36e:	69f8      	ldr	r0, [r7, #28]
 800a370:	f000 f8b4 	bl	800a4dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a374:	2301      	movs	r3, #1
 800a376:	61bb      	str	r3, [r7, #24]
 800a378:	e002      	b.n	800a380 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a37a:	f04f 33ff 	mov.w	r3, #4294967295
 800a37e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a380:	69bb      	ldr	r3, [r7, #24]
	}
 800a382:	4618      	mov	r0, r3
 800a384:	3720      	adds	r7, #32
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b088      	sub	sp, #32
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	21a5      	movs	r1, #165	@ 0xa5
 800a3a6:	f002 fb11 	bl	800c9cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	f023 0307 	bic.w	r3, r3, #7
 800a3c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	f003 0307 	and.w	r3, r3, #7
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00b      	beq.n	800a3e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	617b      	str	r3, [r7, #20]
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	e7fd      	b.n	800a3e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01f      	beq.n	800a42c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	61fb      	str	r3, [r7, #28]
 800a3f0:	e012      	b.n	800a418 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	7819      	ldrb	r1, [r3, #0]
 800a3fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	4413      	add	r3, r2
 800a400:	3334      	adds	r3, #52	@ 0x34
 800a402:	460a      	mov	r2, r1
 800a404:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	4413      	add	r3, r2
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d006      	beq.n	800a420 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	3301      	adds	r3, #1
 800a416:	61fb      	str	r3, [r7, #28]
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	2b0f      	cmp	r3, #15
 800a41c:	d9e9      	bls.n	800a3f2 <prvInitialiseNewTask+0x66>
 800a41e:	e000      	b.n	800a422 <prvInitialiseNewTask+0x96>
			{
				break;
 800a420:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a42a:	e003      	b.n	800a434 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a436:	2b37      	cmp	r3, #55	@ 0x37
 800a438:	d901      	bls.n	800a43e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a43a:	2337      	movs	r3, #55	@ 0x37
 800a43c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a442:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a448:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	2200      	movs	r2, #0
 800a44e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a452:	3304      	adds	r3, #4
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff f8a7 	bl	80095a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45c:	3318      	adds	r3, #24
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff f8a2 	bl	80095a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a468:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a472:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a478:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	2200      	movs	r2, #0
 800a47e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a484:	2200      	movs	r2, #0
 800a486:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48c:	3354      	adds	r3, #84	@ 0x54
 800a48e:	224c      	movs	r2, #76	@ 0x4c
 800a490:	2100      	movs	r1, #0
 800a492:	4618      	mov	r0, r3
 800a494:	f002 fa9a 	bl	800c9cc <memset>
 800a498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49a:	4a0d      	ldr	r2, [pc, #52]	@ (800a4d0 <prvInitialiseNewTask+0x144>)
 800a49c:	659a      	str	r2, [r3, #88]	@ 0x58
 800a49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a0:	4a0c      	ldr	r2, [pc, #48]	@ (800a4d4 <prvInitialiseNewTask+0x148>)
 800a4a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a4d8 <prvInitialiseNewTask+0x14c>)
 800a4a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	68f9      	ldr	r1, [r7, #12]
 800a4ae:	69b8      	ldr	r0, [r7, #24]
 800a4b0:	f001 fa8c 	bl	800b9cc <pxPortInitialiseStack>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4c6:	bf00      	nop
 800a4c8:	3720      	adds	r7, #32
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20005428 	.word	0x20005428
 800a4d4:	20005490 	.word	0x20005490
 800a4d8:	200054f8 	.word	0x200054f8

0800a4dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4e4:	f001 fba0 	bl	800bc28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4e8:	4b2d      	ldr	r3, [pc, #180]	@ (800a5a0 <prvAddNewTaskToReadyList+0xc4>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	4a2c      	ldr	r2, [pc, #176]	@ (800a5a0 <prvAddNewTaskToReadyList+0xc4>)
 800a4f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4f2:	4b2c      	ldr	r3, [pc, #176]	@ (800a5a4 <prvAddNewTaskToReadyList+0xc8>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d109      	bne.n	800a50e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4fa:	4a2a      	ldr	r2, [pc, #168]	@ (800a5a4 <prvAddNewTaskToReadyList+0xc8>)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a500:	4b27      	ldr	r3, [pc, #156]	@ (800a5a0 <prvAddNewTaskToReadyList+0xc4>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d110      	bne.n	800a52a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a508:	f000 fc2e 	bl	800ad68 <prvInitialiseTaskLists>
 800a50c:	e00d      	b.n	800a52a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a50e:	4b26      	ldr	r3, [pc, #152]	@ (800a5a8 <prvAddNewTaskToReadyList+0xcc>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d109      	bne.n	800a52a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a516:	4b23      	ldr	r3, [pc, #140]	@ (800a5a4 <prvAddNewTaskToReadyList+0xc8>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a520:	429a      	cmp	r2, r3
 800a522:	d802      	bhi.n	800a52a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a524:	4a1f      	ldr	r2, [pc, #124]	@ (800a5a4 <prvAddNewTaskToReadyList+0xc8>)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a52a:	4b20      	ldr	r3, [pc, #128]	@ (800a5ac <prvAddNewTaskToReadyList+0xd0>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3301      	adds	r3, #1
 800a530:	4a1e      	ldr	r2, [pc, #120]	@ (800a5ac <prvAddNewTaskToReadyList+0xd0>)
 800a532:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a534:	4b1d      	ldr	r3, [pc, #116]	@ (800a5ac <prvAddNewTaskToReadyList+0xd0>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a540:	4b1b      	ldr	r3, [pc, #108]	@ (800a5b0 <prvAddNewTaskToReadyList+0xd4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	429a      	cmp	r2, r3
 800a546:	d903      	bls.n	800a550 <prvAddNewTaskToReadyList+0x74>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54c:	4a18      	ldr	r2, [pc, #96]	@ (800a5b0 <prvAddNewTaskToReadyList+0xd4>)
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4a15      	ldr	r2, [pc, #84]	@ (800a5b4 <prvAddNewTaskToReadyList+0xd8>)
 800a55e:	441a      	add	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3304      	adds	r3, #4
 800a564:	4619      	mov	r1, r3
 800a566:	4610      	mov	r0, r2
 800a568:	f7ff f82b 	bl	80095c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a56c:	f001 fb8e 	bl	800bc8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a570:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a8 <prvAddNewTaskToReadyList+0xcc>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00e      	beq.n	800a596 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a578:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a4 <prvAddNewTaskToReadyList+0xc8>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a582:	429a      	cmp	r2, r3
 800a584:	d207      	bcs.n	800a596 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a586:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b8 <prvAddNewTaskToReadyList+0xdc>)
 800a588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000ed8 	.word	0x20000ed8
 800a5a4:	20000a04 	.word	0x20000a04
 800a5a8:	20000ee4 	.word	0x20000ee4
 800a5ac:	20000ef4 	.word	0x20000ef4
 800a5b0:	20000ee0 	.word	0x20000ee0
 800a5b4:	20000a08 	.word	0x20000a08
 800a5b8:	e000ed04 	.word	0xe000ed04

0800a5bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d018      	beq.n	800a600 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a5ce:	4b14      	ldr	r3, [pc, #80]	@ (800a620 <vTaskDelay+0x64>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00b      	beq.n	800a5ee <vTaskDelay+0x32>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	60bb      	str	r3, [r7, #8]
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	e7fd      	b.n	800a5ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a5ee:	f000 f88b 	bl	800a708 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fe3b 	bl	800b270 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a5fa:	f000 f893 	bl	800a724 <xTaskResumeAll>
 800a5fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d107      	bne.n	800a616 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a606:	4b07      	ldr	r3, [pc, #28]	@ (800a624 <vTaskDelay+0x68>)
 800a608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a616:	bf00      	nop
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	20000f00 	.word	0x20000f00
 800a624:	e000ed04 	.word	0xe000ed04

0800a628 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b08a      	sub	sp, #40	@ 0x28
 800a62c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a632:	2300      	movs	r3, #0
 800a634:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a636:	463a      	mov	r2, r7
 800a638:	1d39      	adds	r1, r7, #4
 800a63a:	f107 0308 	add.w	r3, r7, #8
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe ff5e 	bl	8009500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	9202      	str	r2, [sp, #8]
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	2300      	movs	r3, #0
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	2300      	movs	r3, #0
 800a654:	460a      	mov	r2, r1
 800a656:	4924      	ldr	r1, [pc, #144]	@ (800a6e8 <vTaskStartScheduler+0xc0>)
 800a658:	4824      	ldr	r0, [pc, #144]	@ (800a6ec <vTaskStartScheduler+0xc4>)
 800a65a:	f7ff fdf1 	bl	800a240 <xTaskCreateStatic>
 800a65e:	4603      	mov	r3, r0
 800a660:	4a23      	ldr	r2, [pc, #140]	@ (800a6f0 <vTaskStartScheduler+0xc8>)
 800a662:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a664:	4b22      	ldr	r3, [pc, #136]	@ (800a6f0 <vTaskStartScheduler+0xc8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a66c:	2301      	movs	r3, #1
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	e001      	b.n	800a676 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a672:	2300      	movs	r3, #0
 800a674:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d102      	bne.n	800a682 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a67c:	f000 fe4c 	bl	800b318 <xTimerCreateTimerTask>
 800a680:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d11b      	bne.n	800a6c0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	613b      	str	r3, [r7, #16]
}
 800a69a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a69c:	4b15      	ldr	r3, [pc, #84]	@ (800a6f4 <vTaskStartScheduler+0xcc>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3354      	adds	r3, #84	@ 0x54
 800a6a2:	4a15      	ldr	r2, [pc, #84]	@ (800a6f8 <vTaskStartScheduler+0xd0>)
 800a6a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6a6:	4b15      	ldr	r3, [pc, #84]	@ (800a6fc <vTaskStartScheduler+0xd4>)
 800a6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6ae:	4b14      	ldr	r3, [pc, #80]	@ (800a700 <vTaskStartScheduler+0xd8>)
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6b4:	4b13      	ldr	r3, [pc, #76]	@ (800a704 <vTaskStartScheduler+0xdc>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6ba:	f001 fa11 	bl	800bae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a6be:	e00f      	b.n	800a6e0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c6:	d10b      	bne.n	800a6e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	60fb      	str	r3, [r7, #12]
}
 800a6da:	bf00      	nop
 800a6dc:	bf00      	nop
 800a6de:	e7fd      	b.n	800a6dc <vTaskStartScheduler+0xb4>
}
 800a6e0:	bf00      	nop
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	0800cc2c 	.word	0x0800cc2c
 800a6ec:	0800ad39 	.word	0x0800ad39
 800a6f0:	20000efc 	.word	0x20000efc
 800a6f4:	20000a04 	.word	0x20000a04
 800a6f8:	20000030 	.word	0x20000030
 800a6fc:	20000ef8 	.word	0x20000ef8
 800a700:	20000ee4 	.word	0x20000ee4
 800a704:	20000edc 	.word	0x20000edc

0800a708 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a708:	b480      	push	{r7}
 800a70a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a70c:	4b04      	ldr	r3, [pc, #16]	@ (800a720 <vTaskSuspendAll+0x18>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3301      	adds	r3, #1
 800a712:	4a03      	ldr	r2, [pc, #12]	@ (800a720 <vTaskSuspendAll+0x18>)
 800a714:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a716:	bf00      	nop
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	20000f00 	.word	0x20000f00

0800a724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a72a:	2300      	movs	r3, #0
 800a72c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a72e:	2300      	movs	r3, #0
 800a730:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a732:	4b42      	ldr	r3, [pc, #264]	@ (800a83c <xTaskResumeAll+0x118>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10b      	bne.n	800a752 <xTaskResumeAll+0x2e>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	603b      	str	r3, [r7, #0]
}
 800a74c:	bf00      	nop
 800a74e:	bf00      	nop
 800a750:	e7fd      	b.n	800a74e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a752:	f001 fa69 	bl	800bc28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a756:	4b39      	ldr	r3, [pc, #228]	@ (800a83c <xTaskResumeAll+0x118>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	4a37      	ldr	r2, [pc, #220]	@ (800a83c <xTaskResumeAll+0x118>)
 800a75e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a760:	4b36      	ldr	r3, [pc, #216]	@ (800a83c <xTaskResumeAll+0x118>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d162      	bne.n	800a82e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a768:	4b35      	ldr	r3, [pc, #212]	@ (800a840 <xTaskResumeAll+0x11c>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d05e      	beq.n	800a82e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a770:	e02f      	b.n	800a7d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a772:	4b34      	ldr	r3, [pc, #208]	@ (800a844 <xTaskResumeAll+0x120>)
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3318      	adds	r3, #24
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe ff7c 	bl	800967c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	3304      	adds	r3, #4
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe ff77 	bl	800967c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a792:	4b2d      	ldr	r3, [pc, #180]	@ (800a848 <xTaskResumeAll+0x124>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d903      	bls.n	800a7a2 <xTaskResumeAll+0x7e>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79e:	4a2a      	ldr	r2, [pc, #168]	@ (800a848 <xTaskResumeAll+0x124>)
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4a27      	ldr	r2, [pc, #156]	@ (800a84c <xTaskResumeAll+0x128>)
 800a7b0:	441a      	add	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	f7fe ff02 	bl	80095c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c2:	4b23      	ldr	r3, [pc, #140]	@ (800a850 <xTaskResumeAll+0x12c>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d302      	bcc.n	800a7d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a7cc:	4b21      	ldr	r3, [pc, #132]	@ (800a854 <xTaskResumeAll+0x130>)
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7d2:	4b1c      	ldr	r3, [pc, #112]	@ (800a844 <xTaskResumeAll+0x120>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1cb      	bne.n	800a772 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a7e0:	f000 fb66 	bl	800aeb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a7e4:	4b1c      	ldr	r3, [pc, #112]	@ (800a858 <xTaskResumeAll+0x134>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d010      	beq.n	800a812 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a7f0:	f000 f846 	bl	800a880 <xTaskIncrementTick>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a7fa:	4b16      	ldr	r3, [pc, #88]	@ (800a854 <xTaskResumeAll+0x130>)
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3b01      	subs	r3, #1
 800a804:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1f1      	bne.n	800a7f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a80c:	4b12      	ldr	r3, [pc, #72]	@ (800a858 <xTaskResumeAll+0x134>)
 800a80e:	2200      	movs	r2, #0
 800a810:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a812:	4b10      	ldr	r3, [pc, #64]	@ (800a854 <xTaskResumeAll+0x130>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d009      	beq.n	800a82e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a81a:	2301      	movs	r3, #1
 800a81c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a81e:	4b0f      	ldr	r3, [pc, #60]	@ (800a85c <xTaskResumeAll+0x138>)
 800a820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a82e:	f001 fa2d 	bl	800bc8c <vPortExitCritical>

	return xAlreadyYielded;
 800a832:	68bb      	ldr	r3, [r7, #8]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20000f00 	.word	0x20000f00
 800a840:	20000ed8 	.word	0x20000ed8
 800a844:	20000e98 	.word	0x20000e98
 800a848:	20000ee0 	.word	0x20000ee0
 800a84c:	20000a08 	.word	0x20000a08
 800a850:	20000a04 	.word	0x20000a04
 800a854:	20000eec 	.word	0x20000eec
 800a858:	20000ee8 	.word	0x20000ee8
 800a85c:	e000ed04 	.word	0xe000ed04

0800a860 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a866:	4b05      	ldr	r3, [pc, #20]	@ (800a87c <xTaskGetTickCount+0x1c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a86c:	687b      	ldr	r3, [r7, #4]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	20000edc 	.word	0x20000edc

0800a880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a886:	2300      	movs	r3, #0
 800a888:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a88a:	4b4f      	ldr	r3, [pc, #316]	@ (800a9c8 <xTaskIncrementTick+0x148>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f040 8090 	bne.w	800a9b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a894:	4b4d      	ldr	r3, [pc, #308]	@ (800a9cc <xTaskIncrementTick+0x14c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3301      	adds	r3, #1
 800a89a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a89c:	4a4b      	ldr	r2, [pc, #300]	@ (800a9cc <xTaskIncrementTick+0x14c>)
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d121      	bne.n	800a8ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8a8:	4b49      	ldr	r3, [pc, #292]	@ (800a9d0 <xTaskIncrementTick+0x150>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00b      	beq.n	800a8ca <xTaskIncrementTick+0x4a>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	603b      	str	r3, [r7, #0]
}
 800a8c4:	bf00      	nop
 800a8c6:	bf00      	nop
 800a8c8:	e7fd      	b.n	800a8c6 <xTaskIncrementTick+0x46>
 800a8ca:	4b41      	ldr	r3, [pc, #260]	@ (800a9d0 <xTaskIncrementTick+0x150>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	4b40      	ldr	r3, [pc, #256]	@ (800a9d4 <xTaskIncrementTick+0x154>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a3e      	ldr	r2, [pc, #248]	@ (800a9d0 <xTaskIncrementTick+0x150>)
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	4a3e      	ldr	r2, [pc, #248]	@ (800a9d4 <xTaskIncrementTick+0x154>)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	4b3e      	ldr	r3, [pc, #248]	@ (800a9d8 <xTaskIncrementTick+0x158>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	4a3c      	ldr	r2, [pc, #240]	@ (800a9d8 <xTaskIncrementTick+0x158>)
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	f000 fae2 	bl	800aeb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a8ec:	4b3b      	ldr	r3, [pc, #236]	@ (800a9dc <xTaskIncrementTick+0x15c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d349      	bcc.n	800a98a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8f6:	4b36      	ldr	r3, [pc, #216]	@ (800a9d0 <xTaskIncrementTick+0x150>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d104      	bne.n	800a90a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a900:	4b36      	ldr	r3, [pc, #216]	@ (800a9dc <xTaskIncrementTick+0x15c>)
 800a902:	f04f 32ff 	mov.w	r2, #4294967295
 800a906:	601a      	str	r2, [r3, #0]
					break;
 800a908:	e03f      	b.n	800a98a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a90a:	4b31      	ldr	r3, [pc, #196]	@ (800a9d0 <xTaskIncrementTick+0x150>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d203      	bcs.n	800a92a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a922:	4a2e      	ldr	r2, [pc, #184]	@ (800a9dc <xTaskIncrementTick+0x15c>)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a928:	e02f      	b.n	800a98a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	3304      	adds	r3, #4
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe fea4 	bl	800967c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d004      	beq.n	800a946 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	3318      	adds	r3, #24
 800a940:	4618      	mov	r0, r3
 800a942:	f7fe fe9b 	bl	800967c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a94a:	4b25      	ldr	r3, [pc, #148]	@ (800a9e0 <xTaskIncrementTick+0x160>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d903      	bls.n	800a95a <xTaskIncrementTick+0xda>
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a956:	4a22      	ldr	r2, [pc, #136]	@ (800a9e0 <xTaskIncrementTick+0x160>)
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4a1f      	ldr	r2, [pc, #124]	@ (800a9e4 <xTaskIncrementTick+0x164>)
 800a968:	441a      	add	r2, r3
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	3304      	adds	r3, #4
 800a96e:	4619      	mov	r1, r3
 800a970:	4610      	mov	r0, r2
 800a972:	f7fe fe26 	bl	80095c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a97a:	4b1b      	ldr	r3, [pc, #108]	@ (800a9e8 <xTaskIncrementTick+0x168>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a980:	429a      	cmp	r2, r3
 800a982:	d3b8      	bcc.n	800a8f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a984:	2301      	movs	r3, #1
 800a986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a988:	e7b5      	b.n	800a8f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a98a:	4b17      	ldr	r3, [pc, #92]	@ (800a9e8 <xTaskIncrementTick+0x168>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a990:	4914      	ldr	r1, [pc, #80]	@ (800a9e4 <xTaskIncrementTick+0x164>)
 800a992:	4613      	mov	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	440b      	add	r3, r1
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d901      	bls.n	800a9a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a9a6:	4b11      	ldr	r3, [pc, #68]	@ (800a9ec <xTaskIncrementTick+0x16c>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d007      	beq.n	800a9be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	617b      	str	r3, [r7, #20]
 800a9b2:	e004      	b.n	800a9be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a9f0 <xTaskIncrementTick+0x170>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	4a0d      	ldr	r2, [pc, #52]	@ (800a9f0 <xTaskIncrementTick+0x170>)
 800a9bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a9be:	697b      	ldr	r3, [r7, #20]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	20000f00 	.word	0x20000f00
 800a9cc:	20000edc 	.word	0x20000edc
 800a9d0:	20000e90 	.word	0x20000e90
 800a9d4:	20000e94 	.word	0x20000e94
 800a9d8:	20000ef0 	.word	0x20000ef0
 800a9dc:	20000ef8 	.word	0x20000ef8
 800a9e0:	20000ee0 	.word	0x20000ee0
 800a9e4:	20000a08 	.word	0x20000a08
 800a9e8:	20000a04 	.word	0x20000a04
 800a9ec:	20000eec 	.word	0x20000eec
 800a9f0:	20000ee8 	.word	0x20000ee8

0800a9f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a9fa:	4b2b      	ldr	r3, [pc, #172]	@ (800aaa8 <vTaskSwitchContext+0xb4>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa02:	4b2a      	ldr	r3, [pc, #168]	@ (800aaac <vTaskSwitchContext+0xb8>)
 800aa04:	2201      	movs	r2, #1
 800aa06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa08:	e047      	b.n	800aa9a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800aa0a:	4b28      	ldr	r3, [pc, #160]	@ (800aaac <vTaskSwitchContext+0xb8>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa10:	4b27      	ldr	r3, [pc, #156]	@ (800aab0 <vTaskSwitchContext+0xbc>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	60fb      	str	r3, [r7, #12]
 800aa16:	e011      	b.n	800aa3c <vTaskSwitchContext+0x48>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10b      	bne.n	800aa36 <vTaskSwitchContext+0x42>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	607b      	str	r3, [r7, #4]
}
 800aa30:	bf00      	nop
 800aa32:	bf00      	nop
 800aa34:	e7fd      	b.n	800aa32 <vTaskSwitchContext+0x3e>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	491d      	ldr	r1, [pc, #116]	@ (800aab4 <vTaskSwitchContext+0xc0>)
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	4613      	mov	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	440b      	add	r3, r1
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d0e3      	beq.n	800aa18 <vTaskSwitchContext+0x24>
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	4613      	mov	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4a16      	ldr	r2, [pc, #88]	@ (800aab4 <vTaskSwitchContext+0xc0>)
 800aa5c:	4413      	add	r3, r2
 800aa5e:	60bb      	str	r3, [r7, #8]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	605a      	str	r2, [r3, #4]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	3308      	adds	r3, #8
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d104      	bne.n	800aa80 <vTaskSwitchContext+0x8c>
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	605a      	str	r2, [r3, #4]
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	4a0c      	ldr	r2, [pc, #48]	@ (800aab8 <vTaskSwitchContext+0xc4>)
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	4a09      	ldr	r2, [pc, #36]	@ (800aab0 <vTaskSwitchContext+0xbc>)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa90:	4b09      	ldr	r3, [pc, #36]	@ (800aab8 <vTaskSwitchContext+0xc4>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3354      	adds	r3, #84	@ 0x54
 800aa96:	4a09      	ldr	r2, [pc, #36]	@ (800aabc <vTaskSwitchContext+0xc8>)
 800aa98:	6013      	str	r3, [r2, #0]
}
 800aa9a:	bf00      	nop
 800aa9c:	3714      	adds	r7, #20
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	20000f00 	.word	0x20000f00
 800aaac:	20000eec 	.word	0x20000eec
 800aab0:	20000ee0 	.word	0x20000ee0
 800aab4:	20000a08 	.word	0x20000a08
 800aab8:	20000a04 	.word	0x20000a04
 800aabc:	20000030 	.word	0x20000030

0800aac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10b      	bne.n	800aae8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	60fb      	str	r3, [r7, #12]
}
 800aae2:	bf00      	nop
 800aae4:	bf00      	nop
 800aae6:	e7fd      	b.n	800aae4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aae8:	4b07      	ldr	r3, [pc, #28]	@ (800ab08 <vTaskPlaceOnEventList+0x48>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3318      	adds	r3, #24
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7fe fd8a 	bl	800960a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	6838      	ldr	r0, [r7, #0]
 800aafa:	f000 fbb9 	bl	800b270 <prvAddCurrentTaskToDelayedList>
}
 800aafe:	bf00      	nop
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	20000a04 	.word	0x20000a04

0800ab0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10b      	bne.n	800ab36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	617b      	str	r3, [r7, #20]
}
 800ab30:	bf00      	nop
 800ab32:	bf00      	nop
 800ab34:	e7fd      	b.n	800ab32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab36:	4b0a      	ldr	r3, [pc, #40]	@ (800ab60 <vTaskPlaceOnEventListRestricted+0x54>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	3318      	adds	r3, #24
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7fe fd3f 	bl	80095c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ab4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	68b8      	ldr	r0, [r7, #8]
 800ab54:	f000 fb8c 	bl	800b270 <prvAddCurrentTaskToDelayedList>
	}
 800ab58:	bf00      	nop
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20000a04 	.word	0x20000a04

0800ab64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b086      	sub	sp, #24
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10b      	bne.n	800ab92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	60fb      	str	r3, [r7, #12]
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	e7fd      	b.n	800ab8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	3318      	adds	r3, #24
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe fd70 	bl	800967c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab9c:	4b1d      	ldr	r3, [pc, #116]	@ (800ac14 <xTaskRemoveFromEventList+0xb0>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d11d      	bne.n	800abe0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	3304      	adds	r3, #4
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fe fd67 	bl	800967c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abb2:	4b19      	ldr	r3, [pc, #100]	@ (800ac18 <xTaskRemoveFromEventList+0xb4>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d903      	bls.n	800abc2 <xTaskRemoveFromEventList+0x5e>
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abbe:	4a16      	ldr	r2, [pc, #88]	@ (800ac18 <xTaskRemoveFromEventList+0xb4>)
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abc6:	4613      	mov	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	4a13      	ldr	r2, [pc, #76]	@ (800ac1c <xTaskRemoveFromEventList+0xb8>)
 800abd0:	441a      	add	r2, r3
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	3304      	adds	r3, #4
 800abd6:	4619      	mov	r1, r3
 800abd8:	4610      	mov	r0, r2
 800abda:	f7fe fcf2 	bl	80095c2 <vListInsertEnd>
 800abde:	e005      	b.n	800abec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	3318      	adds	r3, #24
 800abe4:	4619      	mov	r1, r3
 800abe6:	480e      	ldr	r0, [pc, #56]	@ (800ac20 <xTaskRemoveFromEventList+0xbc>)
 800abe8:	f7fe fceb 	bl	80095c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ac24 <xTaskRemoveFromEventList+0xc0>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d905      	bls.n	800ac06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800abfa:	2301      	movs	r3, #1
 800abfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800abfe:	4b0a      	ldr	r3, [pc, #40]	@ (800ac28 <xTaskRemoveFromEventList+0xc4>)
 800ac00:	2201      	movs	r2, #1
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	e001      	b.n	800ac0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ac06:	2300      	movs	r3, #0
 800ac08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac0a:	697b      	ldr	r3, [r7, #20]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000f00 	.word	0x20000f00
 800ac18:	20000ee0 	.word	0x20000ee0
 800ac1c:	20000a08 	.word	0x20000a08
 800ac20:	20000e98 	.word	0x20000e98
 800ac24:	20000a04 	.word	0x20000a04
 800ac28:	20000eec 	.word	0x20000eec

0800ac2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac34:	4b06      	ldr	r3, [pc, #24]	@ (800ac50 <vTaskInternalSetTimeOutState+0x24>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac3c:	4b05      	ldr	r3, [pc, #20]	@ (800ac54 <vTaskInternalSetTimeOutState+0x28>)
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	605a      	str	r2, [r3, #4]
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	20000ef0 	.word	0x20000ef0
 800ac54:	20000edc 	.word	0x20000edc

0800ac58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b088      	sub	sp, #32
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10b      	bne.n	800ac80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	613b      	str	r3, [r7, #16]
}
 800ac7a:	bf00      	nop
 800ac7c:	bf00      	nop
 800ac7e:	e7fd      	b.n	800ac7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10b      	bne.n	800ac9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ac86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	60fb      	str	r3, [r7, #12]
}
 800ac98:	bf00      	nop
 800ac9a:	bf00      	nop
 800ac9c:	e7fd      	b.n	800ac9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ac9e:	f000 ffc3 	bl	800bc28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aca2:	4b1d      	ldr	r3, [pc, #116]	@ (800ad18 <xTaskCheckForTimeOut+0xc0>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acba:	d102      	bne.n	800acc2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800acbc:	2300      	movs	r3, #0
 800acbe:	61fb      	str	r3, [r7, #28]
 800acc0:	e023      	b.n	800ad0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	4b15      	ldr	r3, [pc, #84]	@ (800ad1c <xTaskCheckForTimeOut+0xc4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	429a      	cmp	r2, r3
 800accc:	d007      	beq.n	800acde <xTaskCheckForTimeOut+0x86>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	69ba      	ldr	r2, [r7, #24]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d302      	bcc.n	800acde <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800acd8:	2301      	movs	r3, #1
 800acda:	61fb      	str	r3, [r7, #28]
 800acdc:	e015      	b.n	800ad0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d20b      	bcs.n	800ad00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	1ad2      	subs	r2, r2, r3
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff ff99 	bl	800ac2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800acfa:	2300      	movs	r3, #0
 800acfc:	61fb      	str	r3, [r7, #28]
 800acfe:	e004      	b.n	800ad0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2200      	movs	r2, #0
 800ad04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad06:	2301      	movs	r3, #1
 800ad08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad0a:	f000 ffbf 	bl	800bc8c <vPortExitCritical>

	return xReturn;
 800ad0e:	69fb      	ldr	r3, [r7, #28]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3720      	adds	r7, #32
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	20000edc 	.word	0x20000edc
 800ad1c:	20000ef0 	.word	0x20000ef0

0800ad20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad20:	b480      	push	{r7}
 800ad22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad24:	4b03      	ldr	r3, [pc, #12]	@ (800ad34 <vTaskMissedYield+0x14>)
 800ad26:	2201      	movs	r2, #1
 800ad28:	601a      	str	r2, [r3, #0]
}
 800ad2a:	bf00      	nop
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	20000eec 	.word	0x20000eec

0800ad38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad40:	f000 f852 	bl	800ade8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad44:	4b06      	ldr	r3, [pc, #24]	@ (800ad60 <prvIdleTask+0x28>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d9f9      	bls.n	800ad40 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad4c:	4b05      	ldr	r3, [pc, #20]	@ (800ad64 <prvIdleTask+0x2c>)
 800ad4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad52:	601a      	str	r2, [r3, #0]
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad5c:	e7f0      	b.n	800ad40 <prvIdleTask+0x8>
 800ad5e:	bf00      	nop
 800ad60:	20000a08 	.word	0x20000a08
 800ad64:	e000ed04 	.word	0xe000ed04

0800ad68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad6e:	2300      	movs	r3, #0
 800ad70:	607b      	str	r3, [r7, #4]
 800ad72:	e00c      	b.n	800ad8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	4613      	mov	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4a12      	ldr	r2, [pc, #72]	@ (800adc8 <prvInitialiseTaskLists+0x60>)
 800ad80:	4413      	add	r3, r2
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fbf0 	bl	8009568 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	607b      	str	r3, [r7, #4]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b37      	cmp	r3, #55	@ 0x37
 800ad92:	d9ef      	bls.n	800ad74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad94:	480d      	ldr	r0, [pc, #52]	@ (800adcc <prvInitialiseTaskLists+0x64>)
 800ad96:	f7fe fbe7 	bl	8009568 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad9a:	480d      	ldr	r0, [pc, #52]	@ (800add0 <prvInitialiseTaskLists+0x68>)
 800ad9c:	f7fe fbe4 	bl	8009568 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ada0:	480c      	ldr	r0, [pc, #48]	@ (800add4 <prvInitialiseTaskLists+0x6c>)
 800ada2:	f7fe fbe1 	bl	8009568 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ada6:	480c      	ldr	r0, [pc, #48]	@ (800add8 <prvInitialiseTaskLists+0x70>)
 800ada8:	f7fe fbde 	bl	8009568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800adac:	480b      	ldr	r0, [pc, #44]	@ (800addc <prvInitialiseTaskLists+0x74>)
 800adae:	f7fe fbdb 	bl	8009568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800adb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ade0 <prvInitialiseTaskLists+0x78>)
 800adb4:	4a05      	ldr	r2, [pc, #20]	@ (800adcc <prvInitialiseTaskLists+0x64>)
 800adb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adb8:	4b0a      	ldr	r3, [pc, #40]	@ (800ade4 <prvInitialiseTaskLists+0x7c>)
 800adba:	4a05      	ldr	r2, [pc, #20]	@ (800add0 <prvInitialiseTaskLists+0x68>)
 800adbc:	601a      	str	r2, [r3, #0]
}
 800adbe:	bf00      	nop
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20000a08 	.word	0x20000a08
 800adcc:	20000e68 	.word	0x20000e68
 800add0:	20000e7c 	.word	0x20000e7c
 800add4:	20000e98 	.word	0x20000e98
 800add8:	20000eac 	.word	0x20000eac
 800addc:	20000ec4 	.word	0x20000ec4
 800ade0:	20000e90 	.word	0x20000e90
 800ade4:	20000e94 	.word	0x20000e94

0800ade8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adee:	e019      	b.n	800ae24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800adf0:	f000 ff1a 	bl	800bc28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adf4:	4b10      	ldr	r3, [pc, #64]	@ (800ae38 <prvCheckTasksWaitingTermination+0x50>)
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fe fc3b 	bl	800967c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae06:	4b0d      	ldr	r3, [pc, #52]	@ (800ae3c <prvCheckTasksWaitingTermination+0x54>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	4a0b      	ldr	r2, [pc, #44]	@ (800ae3c <prvCheckTasksWaitingTermination+0x54>)
 800ae0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae10:	4b0b      	ldr	r3, [pc, #44]	@ (800ae40 <prvCheckTasksWaitingTermination+0x58>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3b01      	subs	r3, #1
 800ae16:	4a0a      	ldr	r2, [pc, #40]	@ (800ae40 <prvCheckTasksWaitingTermination+0x58>)
 800ae18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae1a:	f000 ff37 	bl	800bc8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 f810 	bl	800ae44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae24:	4b06      	ldr	r3, [pc, #24]	@ (800ae40 <prvCheckTasksWaitingTermination+0x58>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1e1      	bne.n	800adf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae2c:	bf00      	nop
 800ae2e:	bf00      	nop
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20000eac 	.word	0x20000eac
 800ae3c:	20000ed8 	.word	0x20000ed8
 800ae40:	20000ec0 	.word	0x20000ec0

0800ae44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3354      	adds	r3, #84	@ 0x54
 800ae50:	4618      	mov	r0, r3
 800ae52:	f001 fdc3 	bl	800c9dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d108      	bne.n	800ae72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae64:	4618      	mov	r0, r3
 800ae66:	f001 f8cf 	bl	800c008 <vPortFree>
				vPortFree( pxTCB );
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f001 f8cc 	bl	800c008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae70:	e019      	b.n	800aea6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d103      	bne.n	800ae84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 f8c3 	bl	800c008 <vPortFree>
	}
 800ae82:	e010      	b.n	800aea6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d00b      	beq.n	800aea6 <prvDeleteTCB+0x62>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	60fb      	str	r3, [r7, #12]
}
 800aea0:	bf00      	nop
 800aea2:	bf00      	nop
 800aea4:	e7fd      	b.n	800aea2 <prvDeleteTCB+0x5e>
	}
 800aea6:	bf00      	nop
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
	...

0800aeb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aeb6:	4b0c      	ldr	r3, [pc, #48]	@ (800aee8 <prvResetNextTaskUnblockTime+0x38>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d104      	bne.n	800aeca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aec0:	4b0a      	ldr	r3, [pc, #40]	@ (800aeec <prvResetNextTaskUnblockTime+0x3c>)
 800aec2:	f04f 32ff 	mov.w	r2, #4294967295
 800aec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aec8:	e008      	b.n	800aedc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeca:	4b07      	ldr	r3, [pc, #28]	@ (800aee8 <prvResetNextTaskUnblockTime+0x38>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	4a04      	ldr	r2, [pc, #16]	@ (800aeec <prvResetNextTaskUnblockTime+0x3c>)
 800aeda:	6013      	str	r3, [r2, #0]
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	20000e90 	.word	0x20000e90
 800aeec:	20000ef8 	.word	0x20000ef8

0800aef0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aef6:	4b05      	ldr	r3, [pc, #20]	@ (800af0c <xTaskGetCurrentTaskHandle+0x1c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aefc:	687b      	ldr	r3, [r7, #4]
	}
 800aefe:	4618      	mov	r0, r3
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	20000a04 	.word	0x20000a04

0800af10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af16:	4b0b      	ldr	r3, [pc, #44]	@ (800af44 <xTaskGetSchedulerState+0x34>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d102      	bne.n	800af24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af1e:	2301      	movs	r3, #1
 800af20:	607b      	str	r3, [r7, #4]
 800af22:	e008      	b.n	800af36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af24:	4b08      	ldr	r3, [pc, #32]	@ (800af48 <xTaskGetSchedulerState+0x38>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d102      	bne.n	800af32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af2c:	2302      	movs	r3, #2
 800af2e:	607b      	str	r3, [r7, #4]
 800af30:	e001      	b.n	800af36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af32:	2300      	movs	r3, #0
 800af34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af36:	687b      	ldr	r3, [r7, #4]
	}
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	20000ee4 	.word	0x20000ee4
 800af48:	20000f00 	.word	0x20000f00

0800af4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af58:	2300      	movs	r3, #0
 800af5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d058      	beq.n	800b014 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af62:	4b2f      	ldr	r3, [pc, #188]	@ (800b020 <xTaskPriorityDisinherit+0xd4>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d00b      	beq.n	800af84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	60fb      	str	r3, [r7, #12]
}
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	e7fd      	b.n	800af80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10b      	bne.n	800afa4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	60bb      	str	r3, [r7, #8]
}
 800af9e:	bf00      	nop
 800afa0:	bf00      	nop
 800afa2:	e7fd      	b.n	800afa0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afa8:	1e5a      	subs	r2, r3, #1
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d02c      	beq.n	800b014 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d128      	bne.n	800b014 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	3304      	adds	r3, #4
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fe fb58 	bl	800967c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe4:	4b0f      	ldr	r3, [pc, #60]	@ (800b024 <xTaskPriorityDisinherit+0xd8>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d903      	bls.n	800aff4 <xTaskPriorityDisinherit+0xa8>
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff0:	4a0c      	ldr	r2, [pc, #48]	@ (800b024 <xTaskPriorityDisinherit+0xd8>)
 800aff2:	6013      	str	r3, [r2, #0]
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff8:	4613      	mov	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4413      	add	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4a09      	ldr	r2, [pc, #36]	@ (800b028 <xTaskPriorityDisinherit+0xdc>)
 800b002:	441a      	add	r2, r3
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	3304      	adds	r3, #4
 800b008:	4619      	mov	r1, r3
 800b00a:	4610      	mov	r0, r2
 800b00c:	f7fe fad9 	bl	80095c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b010:	2301      	movs	r3, #1
 800b012:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b014:	697b      	ldr	r3, [r7, #20]
	}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20000a04 	.word	0x20000a04
 800b024:	20000ee0 	.word	0x20000ee0
 800b028:	20000a08 	.word	0x20000a08

0800b02c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b03a:	f000 fdf5 	bl	800bc28 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b03e:	4b29      	ldr	r3, [pc, #164]	@ (800b0e4 <xTaskNotifyWait+0xb8>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b046:	b2db      	uxtb	r3, r3
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d01c      	beq.n	800b086 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b04c:	4b25      	ldr	r3, [pc, #148]	@ (800b0e4 <xTaskNotifyWait+0xb8>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	43d2      	mvns	r2, r2
 800b058:	400a      	ands	r2, r1
 800b05a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b05e:	4b21      	ldr	r3, [pc, #132]	@ (800b0e4 <xTaskNotifyWait+0xb8>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00b      	beq.n	800b086 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b06e:	2101      	movs	r1, #1
 800b070:	6838      	ldr	r0, [r7, #0]
 800b072:	f000 f8fd 	bl	800b270 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b076:	4b1c      	ldr	r3, [pc, #112]	@ (800b0e8 <xTaskNotifyWait+0xbc>)
 800b078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b086:	f000 fe01 	bl	800bc8c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b08a:	f000 fdcd 	bl	800bc28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d005      	beq.n	800b0a0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b094:	4b13      	ldr	r3, [pc, #76]	@ (800b0e4 <xTaskNotifyWait+0xb8>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b0a0:	4b10      	ldr	r3, [pc, #64]	@ (800b0e4 <xTaskNotifyWait+0xb8>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d002      	beq.n	800b0b4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	617b      	str	r3, [r7, #20]
 800b0b2:	e00a      	b.n	800b0ca <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e4 <xTaskNotifyWait+0xb8>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	43d2      	mvns	r2, r2
 800b0c0:	400a      	ands	r2, r1
 800b0c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b0ca:	4b06      	ldr	r3, [pc, #24]	@ (800b0e4 <xTaskNotifyWait+0xb8>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b0d4:	f000 fdda 	bl	800bc8c <vPortExitCritical>

		return xReturn;
 800b0d8:	697b      	ldr	r3, [r7, #20]
	}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000a04 	.word	0x20000a04
 800b0e8:	e000ed04 	.word	0xe000ed04

0800b0ec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08a      	sub	sp, #40	@ 0x28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10b      	bne.n	800b11e <xTaskGenericNotify+0x32>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	61bb      	str	r3, [r7, #24]
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	e7fd      	b.n	800b11a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b122:	f000 fd81 	bl	800bc28 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d004      	beq.n	800b136 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b13c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	2202      	movs	r2, #2
 800b142:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	2b04      	cmp	r3, #4
 800b14a:	d82e      	bhi.n	800b1aa <xTaskGenericNotify+0xbe>
 800b14c:	a201      	add	r2, pc, #4	@ (adr r2, 800b154 <xTaskGenericNotify+0x68>)
 800b14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b152:	bf00      	nop
 800b154:	0800b1cf 	.word	0x0800b1cf
 800b158:	0800b169 	.word	0x0800b169
 800b15c:	0800b17b 	.word	0x0800b17b
 800b160:	0800b18b 	.word	0x0800b18b
 800b164:	0800b195 	.word	0x0800b195
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	431a      	orrs	r2, r3
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b178:	e02c      	b.n	800b1d4 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b188:	e024      	b.n	800b1d4 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b18a:	6a3b      	ldr	r3, [r7, #32]
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b192:	e01f      	b.n	800b1d4 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b194:	7ffb      	ldrb	r3, [r7, #31]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d004      	beq.n	800b1a4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b1a2:	e017      	b.n	800b1d4 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b1a8:	e014      	b.n	800b1d4 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b4:	d00d      	beq.n	800b1d2 <xTaskGenericNotify+0xe6>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	617b      	str	r3, [r7, #20]
}
 800b1c8:	bf00      	nop
 800b1ca:	bf00      	nop
 800b1cc:	e7fd      	b.n	800b1ca <xTaskGenericNotify+0xde>
					break;
 800b1ce:	bf00      	nop
 800b1d0:	e000      	b.n	800b1d4 <xTaskGenericNotify+0xe8>

					break;
 800b1d2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b1d4:	7ffb      	ldrb	r3, [r7, #31]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d13b      	bne.n	800b252 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fe fa4c 	bl	800967c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1e8:	4b1d      	ldr	r3, [pc, #116]	@ (800b260 <xTaskGenericNotify+0x174>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d903      	bls.n	800b1f8 <xTaskGenericNotify+0x10c>
 800b1f0:	6a3b      	ldr	r3, [r7, #32]
 800b1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f4:	4a1a      	ldr	r2, [pc, #104]	@ (800b260 <xTaskGenericNotify+0x174>)
 800b1f6:	6013      	str	r3, [r2, #0]
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4a17      	ldr	r2, [pc, #92]	@ (800b264 <xTaskGenericNotify+0x178>)
 800b206:	441a      	add	r2, r3
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	3304      	adds	r3, #4
 800b20c:	4619      	mov	r1, r3
 800b20e:	4610      	mov	r0, r2
 800b210:	f7fe f9d7 	bl	80095c2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d00b      	beq.n	800b234 <xTaskGenericNotify+0x148>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	613b      	str	r3, [r7, #16]
}
 800b22e:	bf00      	nop
 800b230:	bf00      	nop
 800b232:	e7fd      	b.n	800b230 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b238:	4b0b      	ldr	r3, [pc, #44]	@ (800b268 <xTaskGenericNotify+0x17c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b23e:	429a      	cmp	r2, r3
 800b240:	d907      	bls.n	800b252 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b242:	4b0a      	ldr	r3, [pc, #40]	@ (800b26c <xTaskGenericNotify+0x180>)
 800b244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b252:	f000 fd1b 	bl	800bc8c <vPortExitCritical>

		return xReturn;
 800b256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b258:	4618      	mov	r0, r3
 800b25a:	3728      	adds	r7, #40	@ 0x28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20000ee0 	.word	0x20000ee0
 800b264:	20000a08 	.word	0x20000a08
 800b268:	20000a04 	.word	0x20000a04
 800b26c:	e000ed04 	.word	0xe000ed04

0800b270 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b27a:	4b21      	ldr	r3, [pc, #132]	@ (800b300 <prvAddCurrentTaskToDelayedList+0x90>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b280:	4b20      	ldr	r3, [pc, #128]	@ (800b304 <prvAddCurrentTaskToDelayedList+0x94>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3304      	adds	r3, #4
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe f9f8 	bl	800967c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b292:	d10a      	bne.n	800b2aa <prvAddCurrentTaskToDelayedList+0x3a>
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d007      	beq.n	800b2aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b29a:	4b1a      	ldr	r3, [pc, #104]	@ (800b304 <prvAddCurrentTaskToDelayedList+0x94>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3304      	adds	r3, #4
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4819      	ldr	r0, [pc, #100]	@ (800b308 <prvAddCurrentTaskToDelayedList+0x98>)
 800b2a4:	f7fe f98d 	bl	80095c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2a8:	e026      	b.n	800b2f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2b2:	4b14      	ldr	r3, [pc, #80]	@ (800b304 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d209      	bcs.n	800b2d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2c2:	4b12      	ldr	r3, [pc, #72]	@ (800b30c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b304 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	f7fe f99b 	bl	800960a <vListInsert>
}
 800b2d4:	e010      	b.n	800b2f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b310 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	4b0a      	ldr	r3, [pc, #40]	@ (800b304 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	f7fe f991 	bl	800960a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b314 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d202      	bcs.n	800b2f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b2f2:	4a08      	ldr	r2, [pc, #32]	@ (800b314 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	6013      	str	r3, [r2, #0]
}
 800b2f8:	bf00      	nop
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20000edc 	.word	0x20000edc
 800b304:	20000a04 	.word	0x20000a04
 800b308:	20000ec4 	.word	0x20000ec4
 800b30c:	20000e94 	.word	0x20000e94
 800b310:	20000e90 	.word	0x20000e90
 800b314:	20000ef8 	.word	0x20000ef8

0800b318 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b08a      	sub	sp, #40	@ 0x28
 800b31c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b31e:	2300      	movs	r3, #0
 800b320:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b322:	f000 fb13 	bl	800b94c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b326:	4b1d      	ldr	r3, [pc, #116]	@ (800b39c <xTimerCreateTimerTask+0x84>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d021      	beq.n	800b372 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b332:	2300      	movs	r3, #0
 800b334:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b336:	1d3a      	adds	r2, r7, #4
 800b338:	f107 0108 	add.w	r1, r7, #8
 800b33c:	f107 030c 	add.w	r3, r7, #12
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe f8f7 	bl	8009534 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	9202      	str	r2, [sp, #8]
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	2302      	movs	r3, #2
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	2300      	movs	r3, #0
 800b356:	460a      	mov	r2, r1
 800b358:	4911      	ldr	r1, [pc, #68]	@ (800b3a0 <xTimerCreateTimerTask+0x88>)
 800b35a:	4812      	ldr	r0, [pc, #72]	@ (800b3a4 <xTimerCreateTimerTask+0x8c>)
 800b35c:	f7fe ff70 	bl	800a240 <xTaskCreateStatic>
 800b360:	4603      	mov	r3, r0
 800b362:	4a11      	ldr	r2, [pc, #68]	@ (800b3a8 <xTimerCreateTimerTask+0x90>)
 800b364:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b366:	4b10      	ldr	r3, [pc, #64]	@ (800b3a8 <xTimerCreateTimerTask+0x90>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b36e:	2301      	movs	r3, #1
 800b370:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10b      	bne.n	800b390 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	613b      	str	r3, [r7, #16]
}
 800b38a:	bf00      	nop
 800b38c:	bf00      	nop
 800b38e:	e7fd      	b.n	800b38c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b390:	697b      	ldr	r3, [r7, #20]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3718      	adds	r7, #24
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	20000f34 	.word	0x20000f34
 800b3a0:	0800cc34 	.word	0x0800cc34
 800b3a4:	0800b4e5 	.word	0x0800b4e5
 800b3a8:	20000f38 	.word	0x20000f38

0800b3ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b08a      	sub	sp, #40	@ 0x28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d10b      	bne.n	800b3dc <xTimerGenericCommand+0x30>
	__asm volatile
 800b3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	623b      	str	r3, [r7, #32]
}
 800b3d6:	bf00      	nop
 800b3d8:	bf00      	nop
 800b3da:	e7fd      	b.n	800b3d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3dc:	4b19      	ldr	r3, [pc, #100]	@ (800b444 <xTimerGenericCommand+0x98>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d02a      	beq.n	800b43a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2b05      	cmp	r3, #5
 800b3f4:	dc18      	bgt.n	800b428 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3f6:	f7ff fd8b 	bl	800af10 <xTaskGetSchedulerState>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d109      	bne.n	800b414 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b400:	4b10      	ldr	r3, [pc, #64]	@ (800b444 <xTimerGenericCommand+0x98>)
 800b402:	6818      	ldr	r0, [r3, #0]
 800b404:	f107 0110 	add.w	r1, r7, #16
 800b408:	2300      	movs	r3, #0
 800b40a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b40c:	f7fe faa6 	bl	800995c <xQueueGenericSend>
 800b410:	6278      	str	r0, [r7, #36]	@ 0x24
 800b412:	e012      	b.n	800b43a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b414:	4b0b      	ldr	r3, [pc, #44]	@ (800b444 <xTimerGenericCommand+0x98>)
 800b416:	6818      	ldr	r0, [r3, #0]
 800b418:	f107 0110 	add.w	r1, r7, #16
 800b41c:	2300      	movs	r3, #0
 800b41e:	2200      	movs	r2, #0
 800b420:	f7fe fa9c 	bl	800995c <xQueueGenericSend>
 800b424:	6278      	str	r0, [r7, #36]	@ 0x24
 800b426:	e008      	b.n	800b43a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b428:	4b06      	ldr	r3, [pc, #24]	@ (800b444 <xTimerGenericCommand+0x98>)
 800b42a:	6818      	ldr	r0, [r3, #0]
 800b42c:	f107 0110 	add.w	r1, r7, #16
 800b430:	2300      	movs	r3, #0
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	f7fe fb94 	bl	8009b60 <xQueueGenericSendFromISR>
 800b438:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3728      	adds	r7, #40	@ 0x28
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	20000f34 	.word	0x20000f34

0800b448 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b088      	sub	sp, #32
 800b44c:	af02      	add	r7, sp, #8
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b452:	4b23      	ldr	r3, [pc, #140]	@ (800b4e0 <prvProcessExpiredTimer+0x98>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	3304      	adds	r3, #4
 800b460:	4618      	mov	r0, r3
 800b462:	f7fe f90b 	bl	800967c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b46c:	f003 0304 	and.w	r3, r3, #4
 800b470:	2b00      	cmp	r3, #0
 800b472:	d023      	beq.n	800b4bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	699a      	ldr	r2, [r3, #24]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	18d1      	adds	r1, r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	6978      	ldr	r0, [r7, #20]
 800b482:	f000 f8d5 	bl	800b630 <prvInsertTimerInActiveList>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d020      	beq.n	800b4ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b48c:	2300      	movs	r3, #0
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	2300      	movs	r3, #0
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	2100      	movs	r1, #0
 800b496:	6978      	ldr	r0, [r7, #20]
 800b498:	f7ff ff88 	bl	800b3ac <xTimerGenericCommand>
 800b49c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d114      	bne.n	800b4ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a8:	f383 8811 	msr	BASEPRI, r3
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	60fb      	str	r3, [r7, #12]
}
 800b4b6:	bf00      	nop
 800b4b8:	bf00      	nop
 800b4ba:	e7fd      	b.n	800b4b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4c2:	f023 0301 	bic.w	r3, r3, #1
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	6978      	ldr	r0, [r7, #20]
 800b4d4:	4798      	blx	r3
}
 800b4d6:	bf00      	nop
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20000f2c 	.word	0x20000f2c

0800b4e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4ec:	f107 0308 	add.w	r3, r7, #8
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 f859 	bl	800b5a8 <prvGetNextExpireTime>
 800b4f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f000 f805 	bl	800b50c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b502:	f000 f8d7 	bl	800b6b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b506:	bf00      	nop
 800b508:	e7f0      	b.n	800b4ec <prvTimerTask+0x8>
	...

0800b50c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b516:	f7ff f8f7 	bl	800a708 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b51a:	f107 0308 	add.w	r3, r7, #8
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 f866 	bl	800b5f0 <prvSampleTimeNow>
 800b524:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d130      	bne.n	800b58e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10a      	bne.n	800b548 <prvProcessTimerOrBlockTask+0x3c>
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	429a      	cmp	r2, r3
 800b538:	d806      	bhi.n	800b548 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b53a:	f7ff f8f3 	bl	800a724 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b53e:	68f9      	ldr	r1, [r7, #12]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff ff81 	bl	800b448 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b546:	e024      	b.n	800b592 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d008      	beq.n	800b560 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b54e:	4b13      	ldr	r3, [pc, #76]	@ (800b59c <prvProcessTimerOrBlockTask+0x90>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <prvProcessTimerOrBlockTask+0x50>
 800b558:	2301      	movs	r3, #1
 800b55a:	e000      	b.n	800b55e <prvProcessTimerOrBlockTask+0x52>
 800b55c:	2300      	movs	r3, #0
 800b55e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b560:	4b0f      	ldr	r3, [pc, #60]	@ (800b5a0 <prvProcessTimerOrBlockTask+0x94>)
 800b562:	6818      	ldr	r0, [r3, #0]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	4619      	mov	r1, r3
 800b56e:	f7fe fe33 	bl	800a1d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b572:	f7ff f8d7 	bl	800a724 <xTaskResumeAll>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10a      	bne.n	800b592 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b57c:	4b09      	ldr	r3, [pc, #36]	@ (800b5a4 <prvProcessTimerOrBlockTask+0x98>)
 800b57e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	f3bf 8f6f 	isb	sy
}
 800b58c:	e001      	b.n	800b592 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b58e:	f7ff f8c9 	bl	800a724 <xTaskResumeAll>
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	20000f30 	.word	0x20000f30
 800b5a0:	20000f34 	.word	0x20000f34
 800b5a4:	e000ed04 	.word	0xe000ed04

0800b5a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b5b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b5ec <prvGetNextExpireTime+0x44>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d101      	bne.n	800b5be <prvGetNextExpireTime+0x16>
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	e000      	b.n	800b5c0 <prvGetNextExpireTime+0x18>
 800b5be:	2200      	movs	r2, #0
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d105      	bne.n	800b5d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5cc:	4b07      	ldr	r3, [pc, #28]	@ (800b5ec <prvGetNextExpireTime+0x44>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	60fb      	str	r3, [r7, #12]
 800b5d6:	e001      	b.n	800b5dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	20000f2c 	.word	0x20000f2c

0800b5f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5f8:	f7ff f932 	bl	800a860 <xTaskGetTickCount>
 800b5fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b62c <prvSampleTimeNow+0x3c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	429a      	cmp	r2, r3
 800b606:	d205      	bcs.n	800b614 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b608:	f000 f93a 	bl	800b880 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	601a      	str	r2, [r3, #0]
 800b612:	e002      	b.n	800b61a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b61a:	4a04      	ldr	r2, [pc, #16]	@ (800b62c <prvSampleTimeNow+0x3c>)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b620:	68fb      	ldr	r3, [r7, #12]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20000f3c 	.word	0x20000f3c

0800b630 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b63e:	2300      	movs	r3, #0
 800b640:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	429a      	cmp	r2, r3
 800b654:	d812      	bhi.n	800b67c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	1ad2      	subs	r2, r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	429a      	cmp	r2, r3
 800b662:	d302      	bcc.n	800b66a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b664:	2301      	movs	r3, #1
 800b666:	617b      	str	r3, [r7, #20]
 800b668:	e01b      	b.n	800b6a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b66a:	4b10      	ldr	r3, [pc, #64]	@ (800b6ac <prvInsertTimerInActiveList+0x7c>)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3304      	adds	r3, #4
 800b672:	4619      	mov	r1, r3
 800b674:	4610      	mov	r0, r2
 800b676:	f7fd ffc8 	bl	800960a <vListInsert>
 800b67a:	e012      	b.n	800b6a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	429a      	cmp	r2, r3
 800b682:	d206      	bcs.n	800b692 <prvInsertTimerInActiveList+0x62>
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d302      	bcc.n	800b692 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b68c:	2301      	movs	r3, #1
 800b68e:	617b      	str	r3, [r7, #20]
 800b690:	e007      	b.n	800b6a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b692:	4b07      	ldr	r3, [pc, #28]	@ (800b6b0 <prvInsertTimerInActiveList+0x80>)
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3304      	adds	r3, #4
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f7fd ffb4 	bl	800960a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b6a2:	697b      	ldr	r3, [r7, #20]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	20000f30 	.word	0x20000f30
 800b6b0:	20000f2c 	.word	0x20000f2c

0800b6b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08e      	sub	sp, #56	@ 0x38
 800b6b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6ba:	e0ce      	b.n	800b85a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	da19      	bge.n	800b6f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b6c2:	1d3b      	adds	r3, r7, #4
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10b      	bne.n	800b6e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	61fb      	str	r3, [r7, #28]
}
 800b6e0:	bf00      	nop
 800b6e2:	bf00      	nop
 800b6e4:	e7fd      	b.n	800b6e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6ec:	6850      	ldr	r0, [r2, #4]
 800b6ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6f0:	6892      	ldr	r2, [r2, #8]
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f2c0 80ae 	blt.w	800b85a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d004      	beq.n	800b714 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b70c:	3304      	adds	r3, #4
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fd ffb4 	bl	800967c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b714:	463b      	mov	r3, r7
 800b716:	4618      	mov	r0, r3
 800b718:	f7ff ff6a 	bl	800b5f0 <prvSampleTimeNow>
 800b71c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b09      	cmp	r3, #9
 800b722:	f200 8097 	bhi.w	800b854 <prvProcessReceivedCommands+0x1a0>
 800b726:	a201      	add	r2, pc, #4	@ (adr r2, 800b72c <prvProcessReceivedCommands+0x78>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b755 	.word	0x0800b755
 800b730:	0800b755 	.word	0x0800b755
 800b734:	0800b755 	.word	0x0800b755
 800b738:	0800b7cb 	.word	0x0800b7cb
 800b73c:	0800b7df 	.word	0x0800b7df
 800b740:	0800b82b 	.word	0x0800b82b
 800b744:	0800b755 	.word	0x0800b755
 800b748:	0800b755 	.word	0x0800b755
 800b74c:	0800b7cb 	.word	0x0800b7cb
 800b750:	0800b7df 	.word	0x0800b7df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b756:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b75a:	f043 0301 	orr.w	r3, r3, #1
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b762:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	18d1      	adds	r1, r2, r3
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b774:	f7ff ff5c 	bl	800b630 <prvInsertTimerInActiveList>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d06c      	beq.n	800b858 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b784:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b78c:	f003 0304 	and.w	r3, r3, #4
 800b790:	2b00      	cmp	r3, #0
 800b792:	d061      	beq.n	800b858 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	441a      	add	r2, r3
 800b79c:	2300      	movs	r3, #0
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7a6:	f7ff fe01 	bl	800b3ac <xTimerGenericCommand>
 800b7aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d152      	bne.n	800b858 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	61bb      	str	r3, [r7, #24]
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop
 800b7c8:	e7fd      	b.n	800b7c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7d0:	f023 0301 	bic.w	r3, r3, #1
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b7dc:	e03d      	b.n	800b85a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7e4:	f043 0301 	orr.w	r3, r3, #1
 800b7e8:	b2da      	uxtb	r2, r3
 800b7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10b      	bne.n	800b816 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	617b      	str	r3, [r7, #20]
}
 800b810:	bf00      	nop
 800b812:	bf00      	nop
 800b814:	e7fd      	b.n	800b812 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b818:	699a      	ldr	r2, [r3, #24]
 800b81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81c:	18d1      	adds	r1, r2, r3
 800b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b824:	f7ff ff04 	bl	800b630 <prvInsertTimerInActiveList>
					break;
 800b828:	e017      	b.n	800b85a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b830:	f003 0302 	and.w	r3, r3, #2
 800b834:	2b00      	cmp	r3, #0
 800b836:	d103      	bne.n	800b840 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b83a:	f000 fbe5 	bl	800c008 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b83e:	e00c      	b.n	800b85a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b846:	f023 0301 	bic.w	r3, r3, #1
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b84e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b852:	e002      	b.n	800b85a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b854:	bf00      	nop
 800b856:	e000      	b.n	800b85a <prvProcessReceivedCommands+0x1a6>
					break;
 800b858:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b85a:	4b08      	ldr	r3, [pc, #32]	@ (800b87c <prvProcessReceivedCommands+0x1c8>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	1d39      	adds	r1, r7, #4
 800b860:	2200      	movs	r2, #0
 800b862:	4618      	mov	r0, r3
 800b864:	f7fe fa1a 	bl	8009c9c <xQueueReceive>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f47f af26 	bne.w	800b6bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	3730      	adds	r7, #48	@ 0x30
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	20000f34 	.word	0x20000f34

0800b880 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b886:	e049      	b.n	800b91c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b888:	4b2e      	ldr	r3, [pc, #184]	@ (800b944 <prvSwitchTimerLists+0xc4>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b892:	4b2c      	ldr	r3, [pc, #176]	@ (800b944 <prvSwitchTimerLists+0xc4>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fd feeb 	bl	800967c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8b4:	f003 0304 	and.w	r3, r3, #4
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d02f      	beq.n	800b91c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d90e      	bls.n	800b8ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8da:	4b1a      	ldr	r3, [pc, #104]	@ (800b944 <prvSwitchTimerLists+0xc4>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	4610      	mov	r0, r2
 800b8e6:	f7fd fe90 	bl	800960a <vListInsert>
 800b8ea:	e017      	b.n	800b91c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f7ff fd58 	bl	800b3ac <xTimerGenericCommand>
 800b8fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10b      	bne.n	800b91c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	603b      	str	r3, [r7, #0]
}
 800b916:	bf00      	nop
 800b918:	bf00      	nop
 800b91a:	e7fd      	b.n	800b918 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b91c:	4b09      	ldr	r3, [pc, #36]	@ (800b944 <prvSwitchTimerLists+0xc4>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1b0      	bne.n	800b888 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b926:	4b07      	ldr	r3, [pc, #28]	@ (800b944 <prvSwitchTimerLists+0xc4>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b92c:	4b06      	ldr	r3, [pc, #24]	@ (800b948 <prvSwitchTimerLists+0xc8>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a04      	ldr	r2, [pc, #16]	@ (800b944 <prvSwitchTimerLists+0xc4>)
 800b932:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b934:	4a04      	ldr	r2, [pc, #16]	@ (800b948 <prvSwitchTimerLists+0xc8>)
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	6013      	str	r3, [r2, #0]
}
 800b93a:	bf00      	nop
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	20000f2c 	.word	0x20000f2c
 800b948:	20000f30 	.word	0x20000f30

0800b94c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b952:	f000 f969 	bl	800bc28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b956:	4b15      	ldr	r3, [pc, #84]	@ (800b9ac <prvCheckForValidListAndQueue+0x60>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d120      	bne.n	800b9a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b95e:	4814      	ldr	r0, [pc, #80]	@ (800b9b0 <prvCheckForValidListAndQueue+0x64>)
 800b960:	f7fd fe02 	bl	8009568 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b964:	4813      	ldr	r0, [pc, #76]	@ (800b9b4 <prvCheckForValidListAndQueue+0x68>)
 800b966:	f7fd fdff 	bl	8009568 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b96a:	4b13      	ldr	r3, [pc, #76]	@ (800b9b8 <prvCheckForValidListAndQueue+0x6c>)
 800b96c:	4a10      	ldr	r2, [pc, #64]	@ (800b9b0 <prvCheckForValidListAndQueue+0x64>)
 800b96e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b970:	4b12      	ldr	r3, [pc, #72]	@ (800b9bc <prvCheckForValidListAndQueue+0x70>)
 800b972:	4a10      	ldr	r2, [pc, #64]	@ (800b9b4 <prvCheckForValidListAndQueue+0x68>)
 800b974:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b976:	2300      	movs	r3, #0
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	4b11      	ldr	r3, [pc, #68]	@ (800b9c0 <prvCheckForValidListAndQueue+0x74>)
 800b97c:	4a11      	ldr	r2, [pc, #68]	@ (800b9c4 <prvCheckForValidListAndQueue+0x78>)
 800b97e:	2110      	movs	r1, #16
 800b980:	200a      	movs	r0, #10
 800b982:	f7fd ff0f 	bl	80097a4 <xQueueGenericCreateStatic>
 800b986:	4603      	mov	r3, r0
 800b988:	4a08      	ldr	r2, [pc, #32]	@ (800b9ac <prvCheckForValidListAndQueue+0x60>)
 800b98a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b98c:	4b07      	ldr	r3, [pc, #28]	@ (800b9ac <prvCheckForValidListAndQueue+0x60>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d005      	beq.n	800b9a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b994:	4b05      	ldr	r3, [pc, #20]	@ (800b9ac <prvCheckForValidListAndQueue+0x60>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	490b      	ldr	r1, [pc, #44]	@ (800b9c8 <prvCheckForValidListAndQueue+0x7c>)
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe fbf2 	bl	800a184 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9a0:	f000 f974 	bl	800bc8c <vPortExitCritical>
}
 800b9a4:	bf00      	nop
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	20000f34 	.word	0x20000f34
 800b9b0:	20000f04 	.word	0x20000f04
 800b9b4:	20000f18 	.word	0x20000f18
 800b9b8:	20000f2c 	.word	0x20000f2c
 800b9bc:	20000f30 	.word	0x20000f30
 800b9c0:	20000fe0 	.word	0x20000fe0
 800b9c4:	20000f40 	.word	0x20000f40
 800b9c8:	0800cc3c 	.word	0x0800cc3c

0800b9cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3b04      	subs	r3, #4
 800b9dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b9e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3b04      	subs	r3, #4
 800b9ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f023 0201 	bic.w	r2, r3, #1
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3b04      	subs	r3, #4
 800b9fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9fc:	4a0c      	ldr	r2, [pc, #48]	@ (800ba30 <pxPortInitialiseStack+0x64>)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	3b14      	subs	r3, #20
 800ba06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	3b04      	subs	r3, #4
 800ba12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f06f 0202 	mvn.w	r2, #2
 800ba1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	3b20      	subs	r3, #32
 800ba20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba22:	68fb      	ldr	r3, [r7, #12]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	0800ba35 	.word	0x0800ba35

0800ba34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba3e:	4b13      	ldr	r3, [pc, #76]	@ (800ba8c <prvTaskExitError+0x58>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba46:	d00b      	beq.n	800ba60 <prvTaskExitError+0x2c>
	__asm volatile
 800ba48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4c:	f383 8811 	msr	BASEPRI, r3
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	60fb      	str	r3, [r7, #12]
}
 800ba5a:	bf00      	nop
 800ba5c:	bf00      	nop
 800ba5e:	e7fd      	b.n	800ba5c <prvTaskExitError+0x28>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60bb      	str	r3, [r7, #8]
}
 800ba72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba74:	bf00      	nop
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d0fc      	beq.n	800ba76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba7c:	bf00      	nop
 800ba7e:	bf00      	nop
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	2000002c 	.word	0x2000002c

0800ba90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba90:	4b07      	ldr	r3, [pc, #28]	@ (800bab0 <pxCurrentTCBConst2>)
 800ba92:	6819      	ldr	r1, [r3, #0]
 800ba94:	6808      	ldr	r0, [r1, #0]
 800ba96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9a:	f380 8809 	msr	PSP, r0
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f04f 0000 	mov.w	r0, #0
 800baa6:	f380 8811 	msr	BASEPRI, r0
 800baaa:	4770      	bx	lr
 800baac:	f3af 8000 	nop.w

0800bab0 <pxCurrentTCBConst2>:
 800bab0:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop

0800bab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bab8:	4808      	ldr	r0, [pc, #32]	@ (800badc <prvPortStartFirstTask+0x24>)
 800baba:	6800      	ldr	r0, [r0, #0]
 800babc:	6800      	ldr	r0, [r0, #0]
 800babe:	f380 8808 	msr	MSP, r0
 800bac2:	f04f 0000 	mov.w	r0, #0
 800bac6:	f380 8814 	msr	CONTROL, r0
 800baca:	b662      	cpsie	i
 800bacc:	b661      	cpsie	f
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	df00      	svc	0
 800bad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bada:	bf00      	nop
 800badc:	e000ed08 	.word	0xe000ed08

0800bae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bae6:	4b47      	ldr	r3, [pc, #284]	@ (800bc04 <xPortStartScheduler+0x124>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a47      	ldr	r2, [pc, #284]	@ (800bc08 <xPortStartScheduler+0x128>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d10b      	bne.n	800bb08 <xPortStartScheduler+0x28>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	613b      	str	r3, [r7, #16]
}
 800bb02:	bf00      	nop
 800bb04:	bf00      	nop
 800bb06:	e7fd      	b.n	800bb04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb08:	4b3e      	ldr	r3, [pc, #248]	@ (800bc04 <xPortStartScheduler+0x124>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a3f      	ldr	r2, [pc, #252]	@ (800bc0c <xPortStartScheduler+0x12c>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d10b      	bne.n	800bb2a <xPortStartScheduler+0x4a>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	60fb      	str	r3, [r7, #12]
}
 800bb24:	bf00      	nop
 800bb26:	bf00      	nop
 800bb28:	e7fd      	b.n	800bb26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb2a:	4b39      	ldr	r3, [pc, #228]	@ (800bc10 <xPortStartScheduler+0x130>)
 800bb2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	22ff      	movs	r2, #255	@ 0xff
 800bb3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb44:	78fb      	ldrb	r3, [r7, #3]
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bb4c:	b2da      	uxtb	r2, r3
 800bb4e:	4b31      	ldr	r3, [pc, #196]	@ (800bc14 <xPortStartScheduler+0x134>)
 800bb50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb52:	4b31      	ldr	r3, [pc, #196]	@ (800bc18 <xPortStartScheduler+0x138>)
 800bb54:	2207      	movs	r2, #7
 800bb56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb58:	e009      	b.n	800bb6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bb5a:	4b2f      	ldr	r3, [pc, #188]	@ (800bc18 <xPortStartScheduler+0x138>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	4a2d      	ldr	r2, [pc, #180]	@ (800bc18 <xPortStartScheduler+0x138>)
 800bb62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb64:	78fb      	ldrb	r3, [r7, #3]
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	005b      	lsls	r3, r3, #1
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb6e:	78fb      	ldrb	r3, [r7, #3]
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb76:	2b80      	cmp	r3, #128	@ 0x80
 800bb78:	d0ef      	beq.n	800bb5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb7a:	4b27      	ldr	r3, [pc, #156]	@ (800bc18 <xPortStartScheduler+0x138>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f1c3 0307 	rsb	r3, r3, #7
 800bb82:	2b04      	cmp	r3, #4
 800bb84:	d00b      	beq.n	800bb9e <xPortStartScheduler+0xbe>
	__asm volatile
 800bb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	60bb      	str	r3, [r7, #8]
}
 800bb98:	bf00      	nop
 800bb9a:	bf00      	nop
 800bb9c:	e7fd      	b.n	800bb9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb9e:	4b1e      	ldr	r3, [pc, #120]	@ (800bc18 <xPortStartScheduler+0x138>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	021b      	lsls	r3, r3, #8
 800bba4:	4a1c      	ldr	r2, [pc, #112]	@ (800bc18 <xPortStartScheduler+0x138>)
 800bba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bba8:	4b1b      	ldr	r3, [pc, #108]	@ (800bc18 <xPortStartScheduler+0x138>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bbb0:	4a19      	ldr	r2, [pc, #100]	@ (800bc18 <xPortStartScheduler+0x138>)
 800bbb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bbbc:	4b17      	ldr	r3, [pc, #92]	@ (800bc1c <xPortStartScheduler+0x13c>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a16      	ldr	r2, [pc, #88]	@ (800bc1c <xPortStartScheduler+0x13c>)
 800bbc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bbc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bbc8:	4b14      	ldr	r3, [pc, #80]	@ (800bc1c <xPortStartScheduler+0x13c>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a13      	ldr	r2, [pc, #76]	@ (800bc1c <xPortStartScheduler+0x13c>)
 800bbce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bbd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bbd4:	f000 f8da 	bl	800bd8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bbd8:	4b11      	ldr	r3, [pc, #68]	@ (800bc20 <xPortStartScheduler+0x140>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bbde:	f000 f8f9 	bl	800bdd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbe2:	4b10      	ldr	r3, [pc, #64]	@ (800bc24 <xPortStartScheduler+0x144>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a0f      	ldr	r2, [pc, #60]	@ (800bc24 <xPortStartScheduler+0x144>)
 800bbe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bbec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbee:	f7ff ff63 	bl	800bab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbf2:	f7fe feff 	bl	800a9f4 <vTaskSwitchContext>
	prvTaskExitError();
 800bbf6:	f7ff ff1d 	bl	800ba34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	e000ed00 	.word	0xe000ed00
 800bc08:	410fc271 	.word	0x410fc271
 800bc0c:	410fc270 	.word	0x410fc270
 800bc10:	e000e400 	.word	0xe000e400
 800bc14:	20001030 	.word	0x20001030
 800bc18:	20001034 	.word	0x20001034
 800bc1c:	e000ed20 	.word	0xe000ed20
 800bc20:	2000002c 	.word	0x2000002c
 800bc24:	e000ef34 	.word	0xe000ef34

0800bc28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	607b      	str	r3, [r7, #4]
}
 800bc40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc42:	4b10      	ldr	r3, [pc, #64]	@ (800bc84 <vPortEnterCritical+0x5c>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3301      	adds	r3, #1
 800bc48:	4a0e      	ldr	r2, [pc, #56]	@ (800bc84 <vPortEnterCritical+0x5c>)
 800bc4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc4c:	4b0d      	ldr	r3, [pc, #52]	@ (800bc84 <vPortEnterCritical+0x5c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d110      	bne.n	800bc76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc54:	4b0c      	ldr	r3, [pc, #48]	@ (800bc88 <vPortEnterCritical+0x60>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00b      	beq.n	800bc76 <vPortEnterCritical+0x4e>
	__asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	603b      	str	r3, [r7, #0]
}
 800bc70:	bf00      	nop
 800bc72:	bf00      	nop
 800bc74:	e7fd      	b.n	800bc72 <vPortEnterCritical+0x4a>
	}
}
 800bc76:	bf00      	nop
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	2000002c 	.word	0x2000002c
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc92:	4b12      	ldr	r3, [pc, #72]	@ (800bcdc <vPortExitCritical+0x50>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10b      	bne.n	800bcb2 <vPortExitCritical+0x26>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	607b      	str	r3, [r7, #4]
}
 800bcac:	bf00      	nop
 800bcae:	bf00      	nop
 800bcb0:	e7fd      	b.n	800bcae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bcb2:	4b0a      	ldr	r3, [pc, #40]	@ (800bcdc <vPortExitCritical+0x50>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	4a08      	ldr	r2, [pc, #32]	@ (800bcdc <vPortExitCritical+0x50>)
 800bcba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bcbc:	4b07      	ldr	r3, [pc, #28]	@ (800bcdc <vPortExitCritical+0x50>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d105      	bne.n	800bcd0 <vPortExitCritical+0x44>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	f383 8811 	msr	BASEPRI, r3
}
 800bcce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	2000002c 	.word	0x2000002c

0800bce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bce0:	f3ef 8009 	mrs	r0, PSP
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	4b15      	ldr	r3, [pc, #84]	@ (800bd40 <pxCurrentTCBConst>)
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	f01e 0f10 	tst.w	lr, #16
 800bcf0:	bf08      	it	eq
 800bcf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfa:	6010      	str	r0, [r2, #0]
 800bcfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bd04:	f380 8811 	msr	BASEPRI, r0
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f7fe fe70 	bl	800a9f4 <vTaskSwitchContext>
 800bd14:	f04f 0000 	mov.w	r0, #0
 800bd18:	f380 8811 	msr	BASEPRI, r0
 800bd1c:	bc09      	pop	{r0, r3}
 800bd1e:	6819      	ldr	r1, [r3, #0]
 800bd20:	6808      	ldr	r0, [r1, #0]
 800bd22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd26:	f01e 0f10 	tst.w	lr, #16
 800bd2a:	bf08      	it	eq
 800bd2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd30:	f380 8809 	msr	PSP, r0
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	f3af 8000 	nop.w

0800bd40 <pxCurrentTCBConst>:
 800bd40:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop

0800bd48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd62:	f7fe fd8d 	bl	800a880 <xTaskIncrementTick>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d003      	beq.n	800bd74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd6c:	4b06      	ldr	r3, [pc, #24]	@ (800bd88 <xPortSysTickHandler+0x40>)
 800bd6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	2300      	movs	r3, #0
 800bd76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	f383 8811 	msr	BASEPRI, r3
}
 800bd7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	e000ed04 	.word	0xe000ed04

0800bd8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd90:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc0 <vPortSetupTimerInterrupt+0x34>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd96:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc4 <vPortSetupTimerInterrupt+0x38>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc8 <vPortSetupTimerInterrupt+0x3c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a0a      	ldr	r2, [pc, #40]	@ (800bdcc <vPortSetupTimerInterrupt+0x40>)
 800bda2:	fba2 2303 	umull	r2, r3, r2, r3
 800bda6:	099b      	lsrs	r3, r3, #6
 800bda8:	4a09      	ldr	r2, [pc, #36]	@ (800bdd0 <vPortSetupTimerInterrupt+0x44>)
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdae:	4b04      	ldr	r3, [pc, #16]	@ (800bdc0 <vPortSetupTimerInterrupt+0x34>)
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	601a      	str	r2, [r3, #0]
}
 800bdb4:	bf00      	nop
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	e000e010 	.word	0xe000e010
 800bdc4:	e000e018 	.word	0xe000e018
 800bdc8:	20000000 	.word	0x20000000
 800bdcc:	10624dd3 	.word	0x10624dd3
 800bdd0:	e000e014 	.word	0xe000e014

0800bdd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bdd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bde4 <vPortEnableVFP+0x10>
 800bdd8:	6801      	ldr	r1, [r0, #0]
 800bdda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bdde:	6001      	str	r1, [r0, #0]
 800bde0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bde2:	bf00      	nop
 800bde4:	e000ed88 	.word	0xe000ed88

0800bde8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdee:	f3ef 8305 	mrs	r3, IPSR
 800bdf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b0f      	cmp	r3, #15
 800bdf8:	d915      	bls.n	800be26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdfa:	4a18      	ldr	r2, [pc, #96]	@ (800be5c <vPortValidateInterruptPriority+0x74>)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be04:	4b16      	ldr	r3, [pc, #88]	@ (800be60 <vPortValidateInterruptPriority+0x78>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	7afa      	ldrb	r2, [r7, #11]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d20b      	bcs.n	800be26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	607b      	str	r3, [r7, #4]
}
 800be20:	bf00      	nop
 800be22:	bf00      	nop
 800be24:	e7fd      	b.n	800be22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be26:	4b0f      	ldr	r3, [pc, #60]	@ (800be64 <vPortValidateInterruptPriority+0x7c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800be2e:	4b0e      	ldr	r3, [pc, #56]	@ (800be68 <vPortValidateInterruptPriority+0x80>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	429a      	cmp	r2, r3
 800be34:	d90b      	bls.n	800be4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	603b      	str	r3, [r7, #0]
}
 800be48:	bf00      	nop
 800be4a:	bf00      	nop
 800be4c:	e7fd      	b.n	800be4a <vPortValidateInterruptPriority+0x62>
	}
 800be4e:	bf00      	nop
 800be50:	3714      	adds	r7, #20
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	e000e3f0 	.word	0xe000e3f0
 800be60:	20001030 	.word	0x20001030
 800be64:	e000ed0c 	.word	0xe000ed0c
 800be68:	20001034 	.word	0x20001034

0800be6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08a      	sub	sp, #40	@ 0x28
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be74:	2300      	movs	r3, #0
 800be76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be78:	f7fe fc46 	bl	800a708 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be7c:	4b5c      	ldr	r3, [pc, #368]	@ (800bff0 <pvPortMalloc+0x184>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d101      	bne.n	800be88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be84:	f000 f924 	bl	800c0d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be88:	4b5a      	ldr	r3, [pc, #360]	@ (800bff4 <pvPortMalloc+0x188>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4013      	ands	r3, r2
 800be90:	2b00      	cmp	r3, #0
 800be92:	f040 8095 	bne.w	800bfc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d01e      	beq.n	800beda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800be9c:	2208      	movs	r2, #8
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4413      	add	r3, r2
 800bea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f003 0307 	and.w	r3, r3, #7
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d015      	beq.n	800beda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f023 0307 	bic.w	r3, r3, #7
 800beb4:	3308      	adds	r3, #8
 800beb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f003 0307 	and.w	r3, r3, #7
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00b      	beq.n	800beda <pvPortMalloc+0x6e>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	617b      	str	r3, [r7, #20]
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	e7fd      	b.n	800bed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d06f      	beq.n	800bfc0 <pvPortMalloc+0x154>
 800bee0:	4b45      	ldr	r3, [pc, #276]	@ (800bff8 <pvPortMalloc+0x18c>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d86a      	bhi.n	800bfc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800beea:	4b44      	ldr	r3, [pc, #272]	@ (800bffc <pvPortMalloc+0x190>)
 800beec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800beee:	4b43      	ldr	r3, [pc, #268]	@ (800bffc <pvPortMalloc+0x190>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bef4:	e004      	b.n	800bf00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800befa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d903      	bls.n	800bf12 <pvPortMalloc+0xa6>
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1f1      	bne.n	800bef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf12:	4b37      	ldr	r3, [pc, #220]	@ (800bff0 <pvPortMalloc+0x184>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d051      	beq.n	800bfc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2208      	movs	r2, #8
 800bf22:	4413      	add	r3, r2
 800bf24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	6a3b      	ldr	r3, [r7, #32]
 800bf2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	1ad2      	subs	r2, r2, r3
 800bf36:	2308      	movs	r3, #8
 800bf38:	005b      	lsls	r3, r3, #1
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d920      	bls.n	800bf80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4413      	add	r3, r2
 800bf44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	f003 0307 	and.w	r3, r3, #7
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00b      	beq.n	800bf68 <pvPortMalloc+0xfc>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	613b      	str	r3, [r7, #16]
}
 800bf62:	bf00      	nop
 800bf64:	bf00      	nop
 800bf66:	e7fd      	b.n	800bf64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	1ad2      	subs	r2, r2, r3
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf7a:	69b8      	ldr	r0, [r7, #24]
 800bf7c:	f000 f90a 	bl	800c194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf80:	4b1d      	ldr	r3, [pc, #116]	@ (800bff8 <pvPortMalloc+0x18c>)
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	4a1b      	ldr	r2, [pc, #108]	@ (800bff8 <pvPortMalloc+0x18c>)
 800bf8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf8e:	4b1a      	ldr	r3, [pc, #104]	@ (800bff8 <pvPortMalloc+0x18c>)
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	4b1b      	ldr	r3, [pc, #108]	@ (800c000 <pvPortMalloc+0x194>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d203      	bcs.n	800bfa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf9a:	4b17      	ldr	r3, [pc, #92]	@ (800bff8 <pvPortMalloc+0x18c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a18      	ldr	r2, [pc, #96]	@ (800c000 <pvPortMalloc+0x194>)
 800bfa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	4b13      	ldr	r3, [pc, #76]	@ (800bff4 <pvPortMalloc+0x188>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	431a      	orrs	r2, r3
 800bfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bfb6:	4b13      	ldr	r3, [pc, #76]	@ (800c004 <pvPortMalloc+0x198>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	4a11      	ldr	r2, [pc, #68]	@ (800c004 <pvPortMalloc+0x198>)
 800bfbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bfc0:	f7fe fbb0 	bl	800a724 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00b      	beq.n	800bfe6 <pvPortMalloc+0x17a>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	60fb      	str	r3, [r7, #12]
}
 800bfe0:	bf00      	nop
 800bfe2:	bf00      	nop
 800bfe4:	e7fd      	b.n	800bfe2 <pvPortMalloc+0x176>
	return pvReturn;
 800bfe6:	69fb      	ldr	r3, [r7, #28]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3728      	adds	r7, #40	@ 0x28
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	20004c40 	.word	0x20004c40
 800bff4:	20004c54 	.word	0x20004c54
 800bff8:	20004c44 	.word	0x20004c44
 800bffc:	20004c38 	.word	0x20004c38
 800c000:	20004c48 	.word	0x20004c48
 800c004:	20004c4c 	.word	0x20004c4c

0800c008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d04f      	beq.n	800c0ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c01a:	2308      	movs	r3, #8
 800c01c:	425b      	negs	r3, r3
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	4413      	add	r3, r2
 800c022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	4b25      	ldr	r3, [pc, #148]	@ (800c0c4 <vPortFree+0xbc>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4013      	ands	r3, r2
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10b      	bne.n	800c04e <vPortFree+0x46>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	60fb      	str	r3, [r7, #12]
}
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	e7fd      	b.n	800c04a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00b      	beq.n	800c06e <vPortFree+0x66>
	__asm volatile
 800c056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	60bb      	str	r3, [r7, #8]
}
 800c068:	bf00      	nop
 800c06a:	bf00      	nop
 800c06c:	e7fd      	b.n	800c06a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	4b14      	ldr	r3, [pc, #80]	@ (800c0c4 <vPortFree+0xbc>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4013      	ands	r3, r2
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d01e      	beq.n	800c0ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d11a      	bne.n	800c0ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	685a      	ldr	r2, [r3, #4]
 800c088:	4b0e      	ldr	r3, [pc, #56]	@ (800c0c4 <vPortFree+0xbc>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	43db      	mvns	r3, r3
 800c08e:	401a      	ands	r2, r3
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c094:	f7fe fb38 	bl	800a708 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	685a      	ldr	r2, [r3, #4]
 800c09c:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c8 <vPortFree+0xc0>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	4a09      	ldr	r2, [pc, #36]	@ (800c0c8 <vPortFree+0xc0>)
 800c0a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c0a6:	6938      	ldr	r0, [r7, #16]
 800c0a8:	f000 f874 	bl	800c194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c0ac:	4b07      	ldr	r3, [pc, #28]	@ (800c0cc <vPortFree+0xc4>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	4a06      	ldr	r2, [pc, #24]	@ (800c0cc <vPortFree+0xc4>)
 800c0b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c0b6:	f7fe fb35 	bl	800a724 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c0ba:	bf00      	nop
 800c0bc:	3718      	adds	r7, #24
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	20004c54 	.word	0x20004c54
 800c0c8:	20004c44 	.word	0x20004c44
 800c0cc:	20004c50 	.word	0x20004c50

0800c0d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c0da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0dc:	4b27      	ldr	r3, [pc, #156]	@ (800c17c <prvHeapInit+0xac>)
 800c0de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f003 0307 	and.w	r3, r3, #7
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00c      	beq.n	800c104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	3307      	adds	r3, #7
 800c0ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f023 0307 	bic.w	r3, r3, #7
 800c0f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	4a1f      	ldr	r2, [pc, #124]	@ (800c17c <prvHeapInit+0xac>)
 800c100:	4413      	add	r3, r2
 800c102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c108:	4a1d      	ldr	r2, [pc, #116]	@ (800c180 <prvHeapInit+0xb0>)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c10e:	4b1c      	ldr	r3, [pc, #112]	@ (800c180 <prvHeapInit+0xb0>)
 800c110:	2200      	movs	r2, #0
 800c112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	4413      	add	r3, r2
 800c11a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c11c:	2208      	movs	r2, #8
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	1a9b      	subs	r3, r3, r2
 800c122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f023 0307 	bic.w	r3, r3, #7
 800c12a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	4a15      	ldr	r2, [pc, #84]	@ (800c184 <prvHeapInit+0xb4>)
 800c130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c132:	4b14      	ldr	r3, [pc, #80]	@ (800c184 <prvHeapInit+0xb4>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2200      	movs	r2, #0
 800c138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c13a:	4b12      	ldr	r3, [pc, #72]	@ (800c184 <prvHeapInit+0xb4>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2200      	movs	r2, #0
 800c140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	1ad2      	subs	r2, r2, r3
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c150:	4b0c      	ldr	r3, [pc, #48]	@ (800c184 <prvHeapInit+0xb4>)
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	4a0a      	ldr	r2, [pc, #40]	@ (800c188 <prvHeapInit+0xb8>)
 800c15e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	4a09      	ldr	r2, [pc, #36]	@ (800c18c <prvHeapInit+0xbc>)
 800c166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c168:	4b09      	ldr	r3, [pc, #36]	@ (800c190 <prvHeapInit+0xc0>)
 800c16a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c16e:	601a      	str	r2, [r3, #0]
}
 800c170:	bf00      	nop
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	20001038 	.word	0x20001038
 800c180:	20004c38 	.word	0x20004c38
 800c184:	20004c40 	.word	0x20004c40
 800c188:	20004c48 	.word	0x20004c48
 800c18c:	20004c44 	.word	0x20004c44
 800c190:	20004c54 	.word	0x20004c54

0800c194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c19c:	4b28      	ldr	r3, [pc, #160]	@ (800c240 <prvInsertBlockIntoFreeList+0xac>)
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	e002      	b.n	800c1a8 <prvInsertBlockIntoFreeList+0x14>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	60fb      	str	r3, [r7, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d8f7      	bhi.n	800c1a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	4413      	add	r3, r2
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d108      	bne.n	800c1d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	685a      	ldr	r2, [r3, #4]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	441a      	add	r2, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	441a      	add	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d118      	bne.n	800c21c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	4b15      	ldr	r3, [pc, #84]	@ (800c244 <prvInsertBlockIntoFreeList+0xb0>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d00d      	beq.n	800c212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685a      	ldr	r2, [r3, #4]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	441a      	add	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	601a      	str	r2, [r3, #0]
 800c210:	e008      	b.n	800c224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c212:	4b0c      	ldr	r3, [pc, #48]	@ (800c244 <prvInsertBlockIntoFreeList+0xb0>)
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	e003      	b.n	800c224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d002      	beq.n	800c232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c232:	bf00      	nop
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	20004c38 	.word	0x20004c38
 800c244:	20004c40 	.word	0x20004c40

0800c248 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c24c:	2201      	movs	r2, #1
 800c24e:	490e      	ldr	r1, [pc, #56]	@ (800c288 <MX_USB_HOST_Init+0x40>)
 800c250:	480e      	ldr	r0, [pc, #56]	@ (800c28c <MX_USB_HOST_Init+0x44>)
 800c252:	f7fa ffd5 	bl	8007200 <USBH_Init>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d001      	beq.n	800c260 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c25c:	f7f4 fd70 	bl	8000d40 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c260:	490b      	ldr	r1, [pc, #44]	@ (800c290 <MX_USB_HOST_Init+0x48>)
 800c262:	480a      	ldr	r0, [pc, #40]	@ (800c28c <MX_USB_HOST_Init+0x44>)
 800c264:	f7fb f89b 	bl	800739e <USBH_RegisterClass>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c26e:	f7f4 fd67 	bl	8000d40 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c272:	4806      	ldr	r0, [pc, #24]	@ (800c28c <MX_USB_HOST_Init+0x44>)
 800c274:	f7fb f91f 	bl	80074b6 <USBH_Start>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d001      	beq.n	800c282 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c27e:	f7f4 fd5f 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c282:	bf00      	nop
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	0800c295 	.word	0x0800c295
 800c28c:	20004c58 	.word	0x20004c58
 800c290:	2000000c 	.word	0x2000000c

0800c294 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c2a0:	78fb      	ldrb	r3, [r7, #3]
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	2b04      	cmp	r3, #4
 800c2a6:	d819      	bhi.n	800c2dc <USBH_UserProcess+0x48>
 800c2a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b0 <USBH_UserProcess+0x1c>)
 800c2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ae:	bf00      	nop
 800c2b0:	0800c2dd 	.word	0x0800c2dd
 800c2b4:	0800c2cd 	.word	0x0800c2cd
 800c2b8:	0800c2dd 	.word	0x0800c2dd
 800c2bc:	0800c2d5 	.word	0x0800c2d5
 800c2c0:	0800c2c5 	.word	0x0800c2c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c2c4:	4b09      	ldr	r3, [pc, #36]	@ (800c2ec <USBH_UserProcess+0x58>)
 800c2c6:	2203      	movs	r2, #3
 800c2c8:	701a      	strb	r2, [r3, #0]
  break;
 800c2ca:	e008      	b.n	800c2de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c2cc:	4b07      	ldr	r3, [pc, #28]	@ (800c2ec <USBH_UserProcess+0x58>)
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	701a      	strb	r2, [r3, #0]
  break;
 800c2d2:	e004      	b.n	800c2de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c2d4:	4b05      	ldr	r3, [pc, #20]	@ (800c2ec <USBH_UserProcess+0x58>)
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	701a      	strb	r2, [r3, #0]
  break;
 800c2da:	e000      	b.n	800c2de <USBH_UserProcess+0x4a>

  default:
  break;
 800c2dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c2de:	bf00      	nop
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	2000503c 	.word	0x2000503c

0800c2f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b08a      	sub	sp, #40	@ 0x28
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2f8:	f107 0314 	add.w	r3, r7, #20
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	601a      	str	r2, [r3, #0]
 800c300:	605a      	str	r2, [r3, #4]
 800c302:	609a      	str	r2, [r3, #8]
 800c304:	60da      	str	r2, [r3, #12]
 800c306:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c310:	d147      	bne.n	800c3a2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c312:	2300      	movs	r3, #0
 800c314:	613b      	str	r3, [r7, #16]
 800c316:	4b25      	ldr	r3, [pc, #148]	@ (800c3ac <HAL_HCD_MspInit+0xbc>)
 800c318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c31a:	4a24      	ldr	r2, [pc, #144]	@ (800c3ac <HAL_HCD_MspInit+0xbc>)
 800c31c:	f043 0301 	orr.w	r3, r3, #1
 800c320:	6313      	str	r3, [r2, #48]	@ 0x30
 800c322:	4b22      	ldr	r3, [pc, #136]	@ (800c3ac <HAL_HCD_MspInit+0xbc>)
 800c324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	613b      	str	r3, [r7, #16]
 800c32c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c32e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c334:	2300      	movs	r3, #0
 800c336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c338:	2300      	movs	r3, #0
 800c33a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c33c:	f107 0314 	add.w	r3, r7, #20
 800c340:	4619      	mov	r1, r3
 800c342:	481b      	ldr	r0, [pc, #108]	@ (800c3b0 <HAL_HCD_MspInit+0xc0>)
 800c344:	f7f5 f8f2 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c348:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c34c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c34e:	2302      	movs	r3, #2
 800c350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c352:	2300      	movs	r3, #0
 800c354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c356:	2303      	movs	r3, #3
 800c358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c35a:	230a      	movs	r3, #10
 800c35c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c35e:	f107 0314 	add.w	r3, r7, #20
 800c362:	4619      	mov	r1, r3
 800c364:	4812      	ldr	r0, [pc, #72]	@ (800c3b0 <HAL_HCD_MspInit+0xc0>)
 800c366:	f7f5 f8e1 	bl	800152c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c36a:	4b10      	ldr	r3, [pc, #64]	@ (800c3ac <HAL_HCD_MspInit+0xbc>)
 800c36c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c36e:	4a0f      	ldr	r2, [pc, #60]	@ (800c3ac <HAL_HCD_MspInit+0xbc>)
 800c370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c374:	6353      	str	r3, [r2, #52]	@ 0x34
 800c376:	2300      	movs	r3, #0
 800c378:	60fb      	str	r3, [r7, #12]
 800c37a:	4b0c      	ldr	r3, [pc, #48]	@ (800c3ac <HAL_HCD_MspInit+0xbc>)
 800c37c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c37e:	4a0b      	ldr	r2, [pc, #44]	@ (800c3ac <HAL_HCD_MspInit+0xbc>)
 800c380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c384:	6453      	str	r3, [r2, #68]	@ 0x44
 800c386:	4b09      	ldr	r3, [pc, #36]	@ (800c3ac <HAL_HCD_MspInit+0xbc>)
 800c388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c38a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c38e:	60fb      	str	r3, [r7, #12]
 800c390:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c392:	2200      	movs	r2, #0
 800c394:	2105      	movs	r1, #5
 800c396:	2043      	movs	r0, #67	@ 0x43
 800c398:	f7f5 f89e 	bl	80014d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c39c:	2043      	movs	r0, #67	@ 0x43
 800c39e:	f7f5 f8b7 	bl	8001510 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c3a2:	bf00      	nop
 800c3a4:	3728      	adds	r7, #40	@ 0x28
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	40023800 	.word	0x40023800
 800c3b0:	40020000 	.word	0x40020000

0800c3b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fb fd29 	bl	8007e1a <USBH_LL_IncTimer>
}
 800c3c8:	bf00      	nop
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fb fd6d 	bl	8007ebe <USBH_LL_Connect>
}
 800c3e4:	bf00      	nop
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fb fd82 	bl	8007f04 <USBH_LL_Disconnect>
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	70fb      	strb	r3, [r7, #3]
 800c414:	4613      	mov	r3, r2
 800c416:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fb fdb9 	bl	8007f96 <USBH_LL_NotifyURBChange>
#endif
}
 800c424:	bf00      	nop
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fb fd17 	bl	8007e6e <USBH_LL_PortEnabled>
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c456:	4618      	mov	r0, r3
 800c458:	f7fb fd23 	bl	8007ea2 <USBH_LL_PortDisabled>
}
 800c45c:	bf00      	nop
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c472:	2b01      	cmp	r3, #1
 800c474:	d12a      	bne.n	800c4cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c476:	4a18      	ldr	r2, [pc, #96]	@ (800c4d8 <USBH_LL_Init+0x74>)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a15      	ldr	r2, [pc, #84]	@ (800c4d8 <USBH_LL_Init+0x74>)
 800c482:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c486:	4b14      	ldr	r3, [pc, #80]	@ (800c4d8 <USBH_LL_Init+0x74>)
 800c488:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c48c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c48e:	4b12      	ldr	r3, [pc, #72]	@ (800c4d8 <USBH_LL_Init+0x74>)
 800c490:	2208      	movs	r2, #8
 800c492:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c494:	4b10      	ldr	r3, [pc, #64]	@ (800c4d8 <USBH_LL_Init+0x74>)
 800c496:	2201      	movs	r2, #1
 800c498:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c49a:	4b0f      	ldr	r3, [pc, #60]	@ (800c4d8 <USBH_LL_Init+0x74>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c4a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d8 <USBH_LL_Init+0x74>)
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c4d8 <USBH_LL_Init+0x74>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c4ac:	480a      	ldr	r0, [pc, #40]	@ (800c4d8 <USBH_LL_Init+0x74>)
 800c4ae:	f7f5 f9f4 	bl	800189a <HAL_HCD_Init>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c4b8:	f7f4 fc42 	bl	8000d40 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c4bc:	4806      	ldr	r0, [pc, #24]	@ (800c4d8 <USBH_LL_Init+0x74>)
 800c4be:	f7f5 fe55 	bl	800216c <HAL_HCD_GetCurrentFrame>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7fb fc98 	bl	8007dfc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20005040 	.word	0x20005040

0800c4dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7f5 fdc2 	bl	800207c <HAL_HCD_Start>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4fc:	7bfb      	ldrb	r3, [r7, #15]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 f95e 	bl	800c7c0 <USBH_Get_USB_Status>
 800c504:	4603      	mov	r3, r0
 800c506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c508:	7bbb      	ldrb	r3, [r7, #14]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c512:	b580      	push	{r7, lr}
 800c514:	b084      	sub	sp, #16
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c528:	4618      	mov	r0, r3
 800c52a:	f7f5 fdca 	bl	80020c2 <HAL_HCD_Stop>
 800c52e:	4603      	mov	r3, r0
 800c530:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c532:	7bfb      	ldrb	r3, [r7, #15]
 800c534:	4618      	mov	r0, r3
 800c536:	f000 f943 	bl	800c7c0 <USBH_Get_USB_Status>
 800c53a:	4603      	mov	r3, r0
 800c53c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c53e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c550:	2301      	movs	r3, #1
 800c552:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7f5 fe14 	bl	8002188 <HAL_HCD_GetCurrentSpeed>
 800c560:	4603      	mov	r3, r0
 800c562:	2b02      	cmp	r3, #2
 800c564:	d00c      	beq.n	800c580 <USBH_LL_GetSpeed+0x38>
 800c566:	2b02      	cmp	r3, #2
 800c568:	d80d      	bhi.n	800c586 <USBH_LL_GetSpeed+0x3e>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <USBH_LL_GetSpeed+0x2c>
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d003      	beq.n	800c57a <USBH_LL_GetSpeed+0x32>
 800c572:	e008      	b.n	800c586 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c574:	2300      	movs	r3, #0
 800c576:	73fb      	strb	r3, [r7, #15]
    break;
 800c578:	e008      	b.n	800c58c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c57a:	2301      	movs	r3, #1
 800c57c:	73fb      	strb	r3, [r7, #15]
    break;
 800c57e:	e005      	b.n	800c58c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c580:	2302      	movs	r3, #2
 800c582:	73fb      	strb	r3, [r7, #15]
    break;
 800c584:	e002      	b.n	800c58c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c586:	2301      	movs	r3, #1
 800c588:	73fb      	strb	r3, [r7, #15]
    break;
 800c58a:	bf00      	nop
  }
  return  speed;
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7f5 fda5 	bl	80020fc <HAL_HCD_ResetPort>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f000 f901 	bl	800c7c0 <USBH_Get_USB_Status>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c5de:	78fa      	ldrb	r2, [r7, #3]
 800c5e0:	4611      	mov	r1, r2
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7f5 fdad 	bl	8002142 <HAL_HCD_HC_GetXferCount>
 800c5e8:	4603      	mov	r3, r0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c5f2:	b590      	push	{r4, r7, lr}
 800c5f4:	b089      	sub	sp, #36	@ 0x24
 800c5f6:	af04      	add	r7, sp, #16
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	4608      	mov	r0, r1
 800c5fc:	4611      	mov	r1, r2
 800c5fe:	461a      	mov	r2, r3
 800c600:	4603      	mov	r3, r0
 800c602:	70fb      	strb	r3, [r7, #3]
 800c604:	460b      	mov	r3, r1
 800c606:	70bb      	strb	r3, [r7, #2]
 800c608:	4613      	mov	r3, r2
 800c60a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c610:	2300      	movs	r3, #0
 800c612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c61a:	787c      	ldrb	r4, [r7, #1]
 800c61c:	78ba      	ldrb	r2, [r7, #2]
 800c61e:	78f9      	ldrb	r1, [r7, #3]
 800c620:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c622:	9302      	str	r3, [sp, #8]
 800c624:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	4623      	mov	r3, r4
 800c632:	f7f5 f999 	bl	8001968 <HAL_HCD_HC_Init>
 800c636:	4603      	mov	r3, r0
 800c638:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c63a:	7bfb      	ldrb	r3, [r7, #15]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 f8bf 	bl	800c7c0 <USBH_Get_USB_Status>
 800c642:	4603      	mov	r3, r0
 800c644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c646:	7bbb      	ldrb	r3, [r7, #14]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3714      	adds	r7, #20
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd90      	pop	{r4, r7, pc}

0800c650 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c65c:	2300      	movs	r3, #0
 800c65e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c660:	2300      	movs	r3, #0
 800c662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c66a:	78fa      	ldrb	r2, [r7, #3]
 800c66c:	4611      	mov	r1, r2
 800c66e:	4618      	mov	r0, r3
 800c670:	f7f5 fa32 	bl	8001ad8 <HAL_HCD_HC_Halt>
 800c674:	4603      	mov	r3, r0
 800c676:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c678:	7bfb      	ldrb	r3, [r7, #15]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 f8a0 	bl	800c7c0 <USBH_Get_USB_Status>
 800c680:	4603      	mov	r3, r0
 800c682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c684:	7bbb      	ldrb	r3, [r7, #14]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c68e:	b590      	push	{r4, r7, lr}
 800c690:	b089      	sub	sp, #36	@ 0x24
 800c692:	af04      	add	r7, sp, #16
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	4608      	mov	r0, r1
 800c698:	4611      	mov	r1, r2
 800c69a:	461a      	mov	r2, r3
 800c69c:	4603      	mov	r3, r0
 800c69e:	70fb      	strb	r3, [r7, #3]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70bb      	strb	r3, [r7, #2]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c6b6:	787c      	ldrb	r4, [r7, #1]
 800c6b8:	78ba      	ldrb	r2, [r7, #2]
 800c6ba:	78f9      	ldrb	r1, [r7, #3]
 800c6bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c6c0:	9303      	str	r3, [sp, #12]
 800c6c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c6c4:	9302      	str	r3, [sp, #8]
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	4623      	mov	r3, r4
 800c6d2:	f7f5 fa25 	bl	8001b20 <HAL_HCD_HC_SubmitRequest>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c6da:	7bfb      	ldrb	r3, [r7, #15]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 f86f 	bl	800c7c0 <USBH_Get_USB_Status>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd90      	pop	{r4, r7, pc}

0800c6f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c702:	78fa      	ldrb	r2, [r7, #3]
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f7f5 fd06 	bl	8002118 <HAL_HCD_HC_GetURBState>
 800c70c:	4603      	mov	r3, r0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b082      	sub	sp, #8
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	460b      	mov	r3, r1
 800c720:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d103      	bne.n	800c734 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c72c:	78fb      	ldrb	r3, [r7, #3]
 800c72e:	4618      	mov	r0, r3
 800c730:	f000 f872 	bl	800c818 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c734:	20c8      	movs	r0, #200	@ 0xc8
 800c736:	f7f4 fdf3 	bl	8001320 <HAL_Delay>
  return USBH_OK;
 800c73a:	2300      	movs	r3, #0
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	460b      	mov	r3, r1
 800c74e:	70fb      	strb	r3, [r7, #3]
 800c750:	4613      	mov	r3, r2
 800c752:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c75a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c75c:	78fa      	ldrb	r2, [r7, #3]
 800c75e:	68f9      	ldr	r1, [r7, #12]
 800c760:	4613      	mov	r3, r2
 800c762:	011b      	lsls	r3, r3, #4
 800c764:	1a9b      	subs	r3, r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	440b      	add	r3, r1
 800c76a:	3317      	adds	r3, #23
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00a      	beq.n	800c788 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c772:	78fa      	ldrb	r2, [r7, #3]
 800c774:	68f9      	ldr	r1, [r7, #12]
 800c776:	4613      	mov	r3, r2
 800c778:	011b      	lsls	r3, r3, #4
 800c77a:	1a9b      	subs	r3, r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	440b      	add	r3, r1
 800c780:	333c      	adds	r3, #60	@ 0x3c
 800c782:	78ba      	ldrb	r2, [r7, #2]
 800c784:	701a      	strb	r2, [r3, #0]
 800c786:	e009      	b.n	800c79c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c788:	78fa      	ldrb	r2, [r7, #3]
 800c78a:	68f9      	ldr	r1, [r7, #12]
 800c78c:	4613      	mov	r3, r2
 800c78e:	011b      	lsls	r3, r3, #4
 800c790:	1a9b      	subs	r3, r3, r2
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	440b      	add	r3, r1
 800c796:	333d      	adds	r3, #61	@ 0x3d
 800c798:	78ba      	ldrb	r2, [r7, #2]
 800c79a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3714      	adds	r7, #20
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7f4 fdb4 	bl	8001320 <HAL_Delay>
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c7ce:	79fb      	ldrb	r3, [r7, #7]
 800c7d0:	2b03      	cmp	r3, #3
 800c7d2:	d817      	bhi.n	800c804 <USBH_Get_USB_Status+0x44>
 800c7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7dc <USBH_Get_USB_Status+0x1c>)
 800c7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7da:	bf00      	nop
 800c7dc:	0800c7ed 	.word	0x0800c7ed
 800c7e0:	0800c7f3 	.word	0x0800c7f3
 800c7e4:	0800c7f9 	.word	0x0800c7f9
 800c7e8:	0800c7ff 	.word	0x0800c7ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c7f0:	e00b      	b.n	800c80a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	73fb      	strb	r3, [r7, #15]
    break;
 800c7f6:	e008      	b.n	800c80a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c7fc:	e005      	b.n	800c80a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c7fe:	2302      	movs	r3, #2
 800c800:	73fb      	strb	r3, [r7, #15]
    break;
 800c802:	e002      	b.n	800c80a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c804:	2302      	movs	r3, #2
 800c806:	73fb      	strb	r3, [r7, #15]
    break;
 800c808:	bf00      	nop
  }
  return usb_status;
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3714      	adds	r7, #20
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	4603      	mov	r3, r0
 800c820:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c822:	79fb      	ldrb	r3, [r7, #7]
 800c824:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c826:	79fb      	ldrb	r3, [r7, #7]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c82c:	2300      	movs	r3, #0
 800c82e:	73fb      	strb	r3, [r7, #15]
 800c830:	e001      	b.n	800c836 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c832:	2301      	movs	r3, #1
 800c834:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c836:	7bfb      	ldrb	r3, [r7, #15]
 800c838:	461a      	mov	r2, r3
 800c83a:	2101      	movs	r1, #1
 800c83c:	4803      	ldr	r0, [pc, #12]	@ (800c84c <MX_DriverVbusFS+0x34>)
 800c83e:	f7f4 fff9 	bl	8001834 <HAL_GPIO_WritePin>
}
 800c842:	bf00      	nop
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	40020800 	.word	0x40020800

0800c850 <malloc>:
 800c850:	4b02      	ldr	r3, [pc, #8]	@ (800c85c <malloc+0xc>)
 800c852:	4601      	mov	r1, r0
 800c854:	6818      	ldr	r0, [r3, #0]
 800c856:	f000 b82d 	b.w	800c8b4 <_malloc_r>
 800c85a:	bf00      	nop
 800c85c:	20000030 	.word	0x20000030

0800c860 <free>:
 800c860:	4b02      	ldr	r3, [pc, #8]	@ (800c86c <free+0xc>)
 800c862:	4601      	mov	r1, r0
 800c864:	6818      	ldr	r0, [r3, #0]
 800c866:	f000 b959 	b.w	800cb1c <_free_r>
 800c86a:	bf00      	nop
 800c86c:	20000030 	.word	0x20000030

0800c870 <sbrk_aligned>:
 800c870:	b570      	push	{r4, r5, r6, lr}
 800c872:	4e0f      	ldr	r6, [pc, #60]	@ (800c8b0 <sbrk_aligned+0x40>)
 800c874:	460c      	mov	r4, r1
 800c876:	6831      	ldr	r1, [r6, #0]
 800c878:	4605      	mov	r5, r0
 800c87a:	b911      	cbnz	r1, 800c882 <sbrk_aligned+0x12>
 800c87c:	f000 f904 	bl	800ca88 <_sbrk_r>
 800c880:	6030      	str	r0, [r6, #0]
 800c882:	4621      	mov	r1, r4
 800c884:	4628      	mov	r0, r5
 800c886:	f000 f8ff 	bl	800ca88 <_sbrk_r>
 800c88a:	1c43      	adds	r3, r0, #1
 800c88c:	d103      	bne.n	800c896 <sbrk_aligned+0x26>
 800c88e:	f04f 34ff 	mov.w	r4, #4294967295
 800c892:	4620      	mov	r0, r4
 800c894:	bd70      	pop	{r4, r5, r6, pc}
 800c896:	1cc4      	adds	r4, r0, #3
 800c898:	f024 0403 	bic.w	r4, r4, #3
 800c89c:	42a0      	cmp	r0, r4
 800c89e:	d0f8      	beq.n	800c892 <sbrk_aligned+0x22>
 800c8a0:	1a21      	subs	r1, r4, r0
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	f000 f8f0 	bl	800ca88 <_sbrk_r>
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	d1f2      	bne.n	800c892 <sbrk_aligned+0x22>
 800c8ac:	e7ef      	b.n	800c88e <sbrk_aligned+0x1e>
 800c8ae:	bf00      	nop
 800c8b0:	20005420 	.word	0x20005420

0800c8b4 <_malloc_r>:
 800c8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8b8:	1ccd      	adds	r5, r1, #3
 800c8ba:	f025 0503 	bic.w	r5, r5, #3
 800c8be:	3508      	adds	r5, #8
 800c8c0:	2d0c      	cmp	r5, #12
 800c8c2:	bf38      	it	cc
 800c8c4:	250c      	movcc	r5, #12
 800c8c6:	2d00      	cmp	r5, #0
 800c8c8:	4606      	mov	r6, r0
 800c8ca:	db01      	blt.n	800c8d0 <_malloc_r+0x1c>
 800c8cc:	42a9      	cmp	r1, r5
 800c8ce:	d904      	bls.n	800c8da <_malloc_r+0x26>
 800c8d0:	230c      	movs	r3, #12
 800c8d2:	6033      	str	r3, [r6, #0]
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9b0 <_malloc_r+0xfc>
 800c8de:	f000 f869 	bl	800c9b4 <__malloc_lock>
 800c8e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c8e6:	461c      	mov	r4, r3
 800c8e8:	bb44      	cbnz	r4, 800c93c <_malloc_r+0x88>
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f7ff ffbf 	bl	800c870 <sbrk_aligned>
 800c8f2:	1c43      	adds	r3, r0, #1
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	d158      	bne.n	800c9aa <_malloc_r+0xf6>
 800c8f8:	f8d8 4000 	ldr.w	r4, [r8]
 800c8fc:	4627      	mov	r7, r4
 800c8fe:	2f00      	cmp	r7, #0
 800c900:	d143      	bne.n	800c98a <_malloc_r+0xd6>
 800c902:	2c00      	cmp	r4, #0
 800c904:	d04b      	beq.n	800c99e <_malloc_r+0xea>
 800c906:	6823      	ldr	r3, [r4, #0]
 800c908:	4639      	mov	r1, r7
 800c90a:	4630      	mov	r0, r6
 800c90c:	eb04 0903 	add.w	r9, r4, r3
 800c910:	f000 f8ba 	bl	800ca88 <_sbrk_r>
 800c914:	4581      	cmp	r9, r0
 800c916:	d142      	bne.n	800c99e <_malloc_r+0xea>
 800c918:	6821      	ldr	r1, [r4, #0]
 800c91a:	1a6d      	subs	r5, r5, r1
 800c91c:	4629      	mov	r1, r5
 800c91e:	4630      	mov	r0, r6
 800c920:	f7ff ffa6 	bl	800c870 <sbrk_aligned>
 800c924:	3001      	adds	r0, #1
 800c926:	d03a      	beq.n	800c99e <_malloc_r+0xea>
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	442b      	add	r3, r5
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	f8d8 3000 	ldr.w	r3, [r8]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	bb62      	cbnz	r2, 800c990 <_malloc_r+0xdc>
 800c936:	f8c8 7000 	str.w	r7, [r8]
 800c93a:	e00f      	b.n	800c95c <_malloc_r+0xa8>
 800c93c:	6822      	ldr	r2, [r4, #0]
 800c93e:	1b52      	subs	r2, r2, r5
 800c940:	d420      	bmi.n	800c984 <_malloc_r+0xd0>
 800c942:	2a0b      	cmp	r2, #11
 800c944:	d917      	bls.n	800c976 <_malloc_r+0xc2>
 800c946:	1961      	adds	r1, r4, r5
 800c948:	42a3      	cmp	r3, r4
 800c94a:	6025      	str	r5, [r4, #0]
 800c94c:	bf18      	it	ne
 800c94e:	6059      	strne	r1, [r3, #4]
 800c950:	6863      	ldr	r3, [r4, #4]
 800c952:	bf08      	it	eq
 800c954:	f8c8 1000 	streq.w	r1, [r8]
 800c958:	5162      	str	r2, [r4, r5]
 800c95a:	604b      	str	r3, [r1, #4]
 800c95c:	4630      	mov	r0, r6
 800c95e:	f000 f82f 	bl	800c9c0 <__malloc_unlock>
 800c962:	f104 000b 	add.w	r0, r4, #11
 800c966:	1d23      	adds	r3, r4, #4
 800c968:	f020 0007 	bic.w	r0, r0, #7
 800c96c:	1ac2      	subs	r2, r0, r3
 800c96e:	bf1c      	itt	ne
 800c970:	1a1b      	subne	r3, r3, r0
 800c972:	50a3      	strne	r3, [r4, r2]
 800c974:	e7af      	b.n	800c8d6 <_malloc_r+0x22>
 800c976:	6862      	ldr	r2, [r4, #4]
 800c978:	42a3      	cmp	r3, r4
 800c97a:	bf0c      	ite	eq
 800c97c:	f8c8 2000 	streq.w	r2, [r8]
 800c980:	605a      	strne	r2, [r3, #4]
 800c982:	e7eb      	b.n	800c95c <_malloc_r+0xa8>
 800c984:	4623      	mov	r3, r4
 800c986:	6864      	ldr	r4, [r4, #4]
 800c988:	e7ae      	b.n	800c8e8 <_malloc_r+0x34>
 800c98a:	463c      	mov	r4, r7
 800c98c:	687f      	ldr	r7, [r7, #4]
 800c98e:	e7b6      	b.n	800c8fe <_malloc_r+0x4a>
 800c990:	461a      	mov	r2, r3
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	42a3      	cmp	r3, r4
 800c996:	d1fb      	bne.n	800c990 <_malloc_r+0xdc>
 800c998:	2300      	movs	r3, #0
 800c99a:	6053      	str	r3, [r2, #4]
 800c99c:	e7de      	b.n	800c95c <_malloc_r+0xa8>
 800c99e:	230c      	movs	r3, #12
 800c9a0:	6033      	str	r3, [r6, #0]
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f000 f80c 	bl	800c9c0 <__malloc_unlock>
 800c9a8:	e794      	b.n	800c8d4 <_malloc_r+0x20>
 800c9aa:	6005      	str	r5, [r0, #0]
 800c9ac:	e7d6      	b.n	800c95c <_malloc_r+0xa8>
 800c9ae:	bf00      	nop
 800c9b0:	20005424 	.word	0x20005424

0800c9b4 <__malloc_lock>:
 800c9b4:	4801      	ldr	r0, [pc, #4]	@ (800c9bc <__malloc_lock+0x8>)
 800c9b6:	f000 b8a1 	b.w	800cafc <__retarget_lock_acquire_recursive>
 800c9ba:	bf00      	nop
 800c9bc:	20005564 	.word	0x20005564

0800c9c0 <__malloc_unlock>:
 800c9c0:	4801      	ldr	r0, [pc, #4]	@ (800c9c8 <__malloc_unlock+0x8>)
 800c9c2:	f000 b89c 	b.w	800cafe <__retarget_lock_release_recursive>
 800c9c6:	bf00      	nop
 800c9c8:	20005564 	.word	0x20005564

0800c9cc <memset>:
 800c9cc:	4402      	add	r2, r0
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d100      	bne.n	800c9d6 <memset+0xa>
 800c9d4:	4770      	bx	lr
 800c9d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c9da:	e7f9      	b.n	800c9d0 <memset+0x4>

0800c9dc <_reclaim_reent>:
 800c9dc:	4b29      	ldr	r3, [pc, #164]	@ (800ca84 <_reclaim_reent+0xa8>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4283      	cmp	r3, r0
 800c9e2:	b570      	push	{r4, r5, r6, lr}
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	d04b      	beq.n	800ca80 <_reclaim_reent+0xa4>
 800c9e8:	69c3      	ldr	r3, [r0, #28]
 800c9ea:	b1ab      	cbz	r3, 800ca18 <_reclaim_reent+0x3c>
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	b16b      	cbz	r3, 800ca0c <_reclaim_reent+0x30>
 800c9f0:	2500      	movs	r5, #0
 800c9f2:	69e3      	ldr	r3, [r4, #28]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	5959      	ldr	r1, [r3, r5]
 800c9f8:	2900      	cmp	r1, #0
 800c9fa:	d13b      	bne.n	800ca74 <_reclaim_reent+0x98>
 800c9fc:	3504      	adds	r5, #4
 800c9fe:	2d80      	cmp	r5, #128	@ 0x80
 800ca00:	d1f7      	bne.n	800c9f2 <_reclaim_reent+0x16>
 800ca02:	69e3      	ldr	r3, [r4, #28]
 800ca04:	4620      	mov	r0, r4
 800ca06:	68d9      	ldr	r1, [r3, #12]
 800ca08:	f000 f888 	bl	800cb1c <_free_r>
 800ca0c:	69e3      	ldr	r3, [r4, #28]
 800ca0e:	6819      	ldr	r1, [r3, #0]
 800ca10:	b111      	cbz	r1, 800ca18 <_reclaim_reent+0x3c>
 800ca12:	4620      	mov	r0, r4
 800ca14:	f000 f882 	bl	800cb1c <_free_r>
 800ca18:	6961      	ldr	r1, [r4, #20]
 800ca1a:	b111      	cbz	r1, 800ca22 <_reclaim_reent+0x46>
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f000 f87d 	bl	800cb1c <_free_r>
 800ca22:	69e1      	ldr	r1, [r4, #28]
 800ca24:	b111      	cbz	r1, 800ca2c <_reclaim_reent+0x50>
 800ca26:	4620      	mov	r0, r4
 800ca28:	f000 f878 	bl	800cb1c <_free_r>
 800ca2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ca2e:	b111      	cbz	r1, 800ca36 <_reclaim_reent+0x5a>
 800ca30:	4620      	mov	r0, r4
 800ca32:	f000 f873 	bl	800cb1c <_free_r>
 800ca36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca38:	b111      	cbz	r1, 800ca40 <_reclaim_reent+0x64>
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f000 f86e 	bl	800cb1c <_free_r>
 800ca40:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ca42:	b111      	cbz	r1, 800ca4a <_reclaim_reent+0x6e>
 800ca44:	4620      	mov	r0, r4
 800ca46:	f000 f869 	bl	800cb1c <_free_r>
 800ca4a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ca4c:	b111      	cbz	r1, 800ca54 <_reclaim_reent+0x78>
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 f864 	bl	800cb1c <_free_r>
 800ca54:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ca56:	b111      	cbz	r1, 800ca5e <_reclaim_reent+0x82>
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f000 f85f 	bl	800cb1c <_free_r>
 800ca5e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ca60:	b111      	cbz	r1, 800ca68 <_reclaim_reent+0x8c>
 800ca62:	4620      	mov	r0, r4
 800ca64:	f000 f85a 	bl	800cb1c <_free_r>
 800ca68:	6a23      	ldr	r3, [r4, #32]
 800ca6a:	b14b      	cbz	r3, 800ca80 <_reclaim_reent+0xa4>
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca72:	4718      	bx	r3
 800ca74:	680e      	ldr	r6, [r1, #0]
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 f850 	bl	800cb1c <_free_r>
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	e7bb      	b.n	800c9f8 <_reclaim_reent+0x1c>
 800ca80:	bd70      	pop	{r4, r5, r6, pc}
 800ca82:	bf00      	nop
 800ca84:	20000030 	.word	0x20000030

0800ca88 <_sbrk_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	4d06      	ldr	r5, [pc, #24]	@ (800caa4 <_sbrk_r+0x1c>)
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	4604      	mov	r4, r0
 800ca90:	4608      	mov	r0, r1
 800ca92:	602b      	str	r3, [r5, #0]
 800ca94:	f7f4 fb90 	bl	80011b8 <_sbrk>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_sbrk_r+0x1a>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_sbrk_r+0x1a>
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	20005560 	.word	0x20005560

0800caa8 <__errno>:
 800caa8:	4b01      	ldr	r3, [pc, #4]	@ (800cab0 <__errno+0x8>)
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	20000030 	.word	0x20000030

0800cab4 <__libc_init_array>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	4d0d      	ldr	r5, [pc, #52]	@ (800caec <__libc_init_array+0x38>)
 800cab8:	4c0d      	ldr	r4, [pc, #52]	@ (800caf0 <__libc_init_array+0x3c>)
 800caba:	1b64      	subs	r4, r4, r5
 800cabc:	10a4      	asrs	r4, r4, #2
 800cabe:	2600      	movs	r6, #0
 800cac0:	42a6      	cmp	r6, r4
 800cac2:	d109      	bne.n	800cad8 <__libc_init_array+0x24>
 800cac4:	4d0b      	ldr	r5, [pc, #44]	@ (800caf4 <__libc_init_array+0x40>)
 800cac6:	4c0c      	ldr	r4, [pc, #48]	@ (800caf8 <__libc_init_array+0x44>)
 800cac8:	f000 f872 	bl	800cbb0 <_init>
 800cacc:	1b64      	subs	r4, r4, r5
 800cace:	10a4      	asrs	r4, r4, #2
 800cad0:	2600      	movs	r6, #0
 800cad2:	42a6      	cmp	r6, r4
 800cad4:	d105      	bne.n	800cae2 <__libc_init_array+0x2e>
 800cad6:	bd70      	pop	{r4, r5, r6, pc}
 800cad8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cadc:	4798      	blx	r3
 800cade:	3601      	adds	r6, #1
 800cae0:	e7ee      	b.n	800cac0 <__libc_init_array+0xc>
 800cae2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cae6:	4798      	blx	r3
 800cae8:	3601      	adds	r6, #1
 800caea:	e7f2      	b.n	800cad2 <__libc_init_array+0x1e>
 800caec:	0800cc88 	.word	0x0800cc88
 800caf0:	0800cc88 	.word	0x0800cc88
 800caf4:	0800cc88 	.word	0x0800cc88
 800caf8:	0800cc8c 	.word	0x0800cc8c

0800cafc <__retarget_lock_acquire_recursive>:
 800cafc:	4770      	bx	lr

0800cafe <__retarget_lock_release_recursive>:
 800cafe:	4770      	bx	lr

0800cb00 <memcpy>:
 800cb00:	440a      	add	r2, r1
 800cb02:	4291      	cmp	r1, r2
 800cb04:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb08:	d100      	bne.n	800cb0c <memcpy+0xc>
 800cb0a:	4770      	bx	lr
 800cb0c:	b510      	push	{r4, lr}
 800cb0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb16:	4291      	cmp	r1, r2
 800cb18:	d1f9      	bne.n	800cb0e <memcpy+0xe>
 800cb1a:	bd10      	pop	{r4, pc}

0800cb1c <_free_r>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4605      	mov	r5, r0
 800cb20:	2900      	cmp	r1, #0
 800cb22:	d041      	beq.n	800cba8 <_free_r+0x8c>
 800cb24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb28:	1f0c      	subs	r4, r1, #4
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	bfb8      	it	lt
 800cb2e:	18e4      	addlt	r4, r4, r3
 800cb30:	f7ff ff40 	bl	800c9b4 <__malloc_lock>
 800cb34:	4a1d      	ldr	r2, [pc, #116]	@ (800cbac <_free_r+0x90>)
 800cb36:	6813      	ldr	r3, [r2, #0]
 800cb38:	b933      	cbnz	r3, 800cb48 <_free_r+0x2c>
 800cb3a:	6063      	str	r3, [r4, #4]
 800cb3c:	6014      	str	r4, [r2, #0]
 800cb3e:	4628      	mov	r0, r5
 800cb40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb44:	f7ff bf3c 	b.w	800c9c0 <__malloc_unlock>
 800cb48:	42a3      	cmp	r3, r4
 800cb4a:	d908      	bls.n	800cb5e <_free_r+0x42>
 800cb4c:	6820      	ldr	r0, [r4, #0]
 800cb4e:	1821      	adds	r1, r4, r0
 800cb50:	428b      	cmp	r3, r1
 800cb52:	bf01      	itttt	eq
 800cb54:	6819      	ldreq	r1, [r3, #0]
 800cb56:	685b      	ldreq	r3, [r3, #4]
 800cb58:	1809      	addeq	r1, r1, r0
 800cb5a:	6021      	streq	r1, [r4, #0]
 800cb5c:	e7ed      	b.n	800cb3a <_free_r+0x1e>
 800cb5e:	461a      	mov	r2, r3
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	b10b      	cbz	r3, 800cb68 <_free_r+0x4c>
 800cb64:	42a3      	cmp	r3, r4
 800cb66:	d9fa      	bls.n	800cb5e <_free_r+0x42>
 800cb68:	6811      	ldr	r1, [r2, #0]
 800cb6a:	1850      	adds	r0, r2, r1
 800cb6c:	42a0      	cmp	r0, r4
 800cb6e:	d10b      	bne.n	800cb88 <_free_r+0x6c>
 800cb70:	6820      	ldr	r0, [r4, #0]
 800cb72:	4401      	add	r1, r0
 800cb74:	1850      	adds	r0, r2, r1
 800cb76:	4283      	cmp	r3, r0
 800cb78:	6011      	str	r1, [r2, #0]
 800cb7a:	d1e0      	bne.n	800cb3e <_free_r+0x22>
 800cb7c:	6818      	ldr	r0, [r3, #0]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	6053      	str	r3, [r2, #4]
 800cb82:	4408      	add	r0, r1
 800cb84:	6010      	str	r0, [r2, #0]
 800cb86:	e7da      	b.n	800cb3e <_free_r+0x22>
 800cb88:	d902      	bls.n	800cb90 <_free_r+0x74>
 800cb8a:	230c      	movs	r3, #12
 800cb8c:	602b      	str	r3, [r5, #0]
 800cb8e:	e7d6      	b.n	800cb3e <_free_r+0x22>
 800cb90:	6820      	ldr	r0, [r4, #0]
 800cb92:	1821      	adds	r1, r4, r0
 800cb94:	428b      	cmp	r3, r1
 800cb96:	bf04      	itt	eq
 800cb98:	6819      	ldreq	r1, [r3, #0]
 800cb9a:	685b      	ldreq	r3, [r3, #4]
 800cb9c:	6063      	str	r3, [r4, #4]
 800cb9e:	bf04      	itt	eq
 800cba0:	1809      	addeq	r1, r1, r0
 800cba2:	6021      	streq	r1, [r4, #0]
 800cba4:	6054      	str	r4, [r2, #4]
 800cba6:	e7ca      	b.n	800cb3e <_free_r+0x22>
 800cba8:	bd38      	pop	{r3, r4, r5, pc}
 800cbaa:	bf00      	nop
 800cbac:	20005424 	.word	0x20005424

0800cbb0 <_init>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	bf00      	nop
 800cbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb6:	bc08      	pop	{r3}
 800cbb8:	469e      	mov	lr, r3
 800cbba:	4770      	bx	lr

0800cbbc <_fini>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	bf00      	nop
 800cbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc2:	bc08      	pop	{r3}
 800cbc4:	469e      	mov	lr, r3
 800cbc6:	4770      	bx	lr
