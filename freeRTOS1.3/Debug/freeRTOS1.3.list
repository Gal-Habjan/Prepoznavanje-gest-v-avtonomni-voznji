
freeRTOS1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b938  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800bad8  0800bad8  0000cad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbbc  0800bbbc  0000d154  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbbc  0800bbbc  0000cbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbc4  0800bbc4  0000d154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbc4  0800bbc4  0000cbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bbc8  0800bbc8  0000cbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  0800bbcc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068d0  20000154  0800bd20  0000d154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006a24  0800bd20  0000da24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b7b  00000000  00000000  0000d184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005559  00000000  00000000  00031cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  00037258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001879  00000000  00000000  00039208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000070c0  00000000  00000000  0003aa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027014  00000000  00000000  00041b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0deb  00000000  00000000  00068b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109940  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008950  00000000  00000000  00109984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a6  00000000  00000000  001122d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bac0 	.word	0x0800bac0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	0800bac0 	.word	0x0800bac0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <LEDTask>:
	HAND = 1,
	PEACE = 2,
	THUMBS_UP = 3,
	NOTHING = 4
};
void LEDTask(void *pvParameters) {  // green LED
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	uint32_t recievedCommand = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
	xLedTaskHandle = xTaskGetCurrentTaskHandle();
 80004dc:	f009 fb5c 	bl	8009b98 <xTaskGetCurrentTaskHandle>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4a25      	ldr	r2, [pc, #148]	@ (8000578 <LEDTask+0xa8>)
 80004e4:	6013      	str	r3, [r2, #0]
//    uint32_t ulNotificationValue;
	for (;;) {

		xTaskNotifyWait(0, 0x00, &recievedCommand, portMAX_DELAY); //Waits untill a task is called
 80004e6:	f107 020c 	add.w	r2, r7, #12
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f009 fbef 	bl	8009cd4 <xTaskNotifyWait>

		if (recievedCommand == FIST) {
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d106      	bne.n	800050a <LEDTask+0x3a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000502:	481e      	ldr	r0, [pc, #120]	@ (800057c <LEDTask+0xac>)
 8000504:	f001 f968 	bl	80017d8 <HAL_GPIO_WritePin>
 8000508:	e005      	b.n	8000516 <LEDTask+0x46>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000510:	481a      	ldr	r0, [pc, #104]	@ (800057c <LEDTask+0xac>)
 8000512:	f001 f961 	bl	80017d8 <HAL_GPIO_WritePin>
		}
		if (recievedCommand == HAND) {
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d106      	bne.n	800052a <LEDTask+0x5a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000522:	4816      	ldr	r0, [pc, #88]	@ (800057c <LEDTask+0xac>)
 8000524:	f001 f958 	bl	80017d8 <HAL_GPIO_WritePin>
 8000528:	e005      	b.n	8000536 <LEDTask+0x66>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000530:	4812      	ldr	r0, [pc, #72]	@ (800057c <LEDTask+0xac>)
 8000532:	f001 f951 	bl	80017d8 <HAL_GPIO_WritePin>
		}
		if (recievedCommand == PEACE) {
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d106      	bne.n	800054a <LEDTask+0x7a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000542:	480e      	ldr	r0, [pc, #56]	@ (800057c <LEDTask+0xac>)
 8000544:	f001 f948 	bl	80017d8 <HAL_GPIO_WritePin>
 8000548:	e005      	b.n	8000556 <LEDTask+0x86>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000550:	480a      	ldr	r0, [pc, #40]	@ (800057c <LEDTask+0xac>)
 8000552:	f001 f941 	bl	80017d8 <HAL_GPIO_WritePin>
		}
		if (recievedCommand == THUMBS_UP) {
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	2b03      	cmp	r3, #3
 800055a:	d106      	bne.n	800056a <LEDTask+0x9a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000562:	4806      	ldr	r0, [pc, #24]	@ (800057c <LEDTask+0xac>)
 8000564:	f001 f938 	bl	80017d8 <HAL_GPIO_WritePin>
 8000568:	e7bd      	b.n	80004e6 <LEDTask+0x16>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000570:	4802      	ldr	r0, [pc, #8]	@ (800057c <LEDTask+0xac>)
 8000572:	f001 f931 	bl	80017d8 <HAL_GPIO_WritePin>
		xTaskNotifyWait(0, 0x00, &recievedCommand, portMAX_DELAY); //Waits untill a task is called
 8000576:	e7b6      	b.n	80004e6 <LEDTask+0x16>
 8000578:	200002c8 	.word	0x200002c8
 800057c:	40020c00 	.word	0x40020c00

08000580 <usbRecieveData>:
		}
	}
}
static int usbCommand = NOTHING;
void usbRecieveData(uint8_t data) {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]

	usbCommand = data;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4a03      	ldr	r2, [pc, #12]	@ (800059c <usbRecieveData+0x1c>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	20000000 	.word	0x20000000

080005a0 <DC_MotorTask>:

void DC_MotorTask(void *pvParameters) {  // red LED
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	int recievedCommand = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
	for (;;) {
		xQueueReceive(motorQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80005ac:	4b26      	ldr	r3, [pc, #152]	@ (8000648 <DC_MotorTask+0xa8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f107 010c 	add.w	r1, r7, #12
 80005b4:	2264      	movs	r2, #100	@ 0x64
 80005b6:	4618      	mov	r0, r3
 80005b8:	f008 fa46 	bl	8008a48 <xQueueReceive>

		if (recievedCommand == FIST) {
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d114      	bne.n	80005ec <DC_MotorTask+0x4c>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2102      	movs	r1, #2
 80005c6:	4821      	ldr	r0, [pc, #132]	@ (800064c <DC_MotorTask+0xac>)
 80005c8:	f001 f906 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2104      	movs	r1, #4
 80005d0:	481e      	ldr	r0, [pc, #120]	@ (800064c <DC_MotorTask+0xac>)
 80005d2:	f001 f901 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2110      	movs	r1, #16
 80005da:	481d      	ldr	r0, [pc, #116]	@ (8000650 <DC_MotorTask+0xb0>)
 80005dc:	f001 f8fc 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2120      	movs	r1, #32
 80005e4:	481a      	ldr	r0, [pc, #104]	@ (8000650 <DC_MotorTask+0xb0>)
 80005e6:	f001 f8f7 	bl	80017d8 <HAL_GPIO_WritePin>
 80005ea:	e7df      	b.n	80005ac <DC_MotorTask+0xc>
		} else if (recievedCommand == HAND) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d114      	bne.n	800061c <DC_MotorTask+0x7c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2102      	movs	r1, #2
 80005f6:	4815      	ldr	r0, [pc, #84]	@ (800064c <DC_MotorTask+0xac>)
 80005f8:	f001 f8ee 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2104      	movs	r1, #4
 8000600:	4812      	ldr	r0, [pc, #72]	@ (800064c <DC_MotorTask+0xac>)
 8000602:	f001 f8e9 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2110      	movs	r1, #16
 800060a:	4811      	ldr	r0, [pc, #68]	@ (8000650 <DC_MotorTask+0xb0>)
 800060c:	f001 f8e4 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2120      	movs	r1, #32
 8000614:	480e      	ldr	r0, [pc, #56]	@ (8000650 <DC_MotorTask+0xb0>)
 8000616:	f001 f8df 	bl	80017d8 <HAL_GPIO_WritePin>
 800061a:	e7c7      	b.n	80005ac <DC_MotorTask+0xc>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	@ (800064c <DC_MotorTask+0xac>)
 8000622:	f001 f8d9 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	4808      	ldr	r0, [pc, #32]	@ (800064c <DC_MotorTask+0xac>)
 800062c:	f001 f8d4 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2110      	movs	r1, #16
 8000634:	4806      	ldr	r0, [pc, #24]	@ (8000650 <DC_MotorTask+0xb0>)
 8000636:	f001 f8cf 	bl	80017d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4804      	ldr	r0, [pc, #16]	@ (8000650 <DC_MotorTask+0xb0>)
 8000640:	f001 f8ca 	bl	80017d8 <HAL_GPIO_WritePin>
		xQueueReceive(motorQueue, &recievedCommand, pdMS_TO_TICKS(100));
 8000644:	e7b2      	b.n	80005ac <DC_MotorTask+0xc>
 8000646:	bf00      	nop
 8000648:	200002c0 	.word	0x200002c0
 800064c:	40020000 	.word	0x40020000
 8000650:	40020800 	.word	0x40020800

08000654 <beeper_noise>:

		}

	}
}
void beeper_noise() {   //pin je pb7
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
	uint32_t leveli_glasnosti[5] = { 50, 80, 50, 120, 0 };
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <beeper_noise+0x74>)
 800065c:	463c      	mov	r4, r7
 800065e:	461d      	mov	r5, r3
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	682b      	ldr	r3, [r5, #0]
 8000666:	6023      	str	r3, [r4, #0]

	for (uint8_t var = 0; var < 5; ++var) {
 8000668:	2300      	movs	r3, #0
 800066a:	75fb      	strb	r3, [r7, #23]
 800066c:	e020      	b.n	80006b0 <beeper_noise+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	4816      	ldr	r0, [pc, #88]	@ (80006cc <beeper_noise+0x78>)
 8000674:	f001 f8b0 	bl	80017d8 <HAL_GPIO_WritePin>
		HAL_Delay(leveli_glasnosti[var]);
 8000678:	7dfb      	ldrb	r3, [r7, #23]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3318      	adds	r3, #24
 800067e:	443b      	add	r3, r7
 8000680:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fe1d 	bl	80012c4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	480f      	ldr	r0, [pc, #60]	@ (80006cc <beeper_noise+0x78>)
 8000690:	f001 f8a2 	bl	80017d8 <HAL_GPIO_WritePin>
		HAL_Delay(120 - leveli_glasnosti[var]);
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	3318      	adds	r3, #24
 800069a:	443b      	add	r3, r7
 800069c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80006a0:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fe0d 	bl	80012c4 <HAL_Delay>
	for (uint8_t var = 0; var < 5; ++var) {
 80006aa:	7dfb      	ldrb	r3, [r7, #23]
 80006ac:	3301      	adds	r3, #1
 80006ae:	75fb      	strb	r3, [r7, #23]
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d9db      	bls.n	800066e <beeper_noise+0x1a>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	4804      	ldr	r0, [pc, #16]	@ (80006cc <beeper_noise+0x78>)
 80006bc:	f001 f88c 	bl	80017d8 <HAL_GPIO_WritePin>

}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}
 80006c8:	0800bae4 	.word	0x0800bae4
 80006cc:	40020400 	.word	0x40020400

080006d0 <beeperTask>:
void beeperTask(void *pvParameters) {  // blue LED
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	int recievedCommand = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
	for (;;) {
		xQueueReceive(beeperQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <beeperTask+0x28>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f107 010c 	add.w	r1, r7, #12
 80006e4:	2264      	movs	r2, #100	@ 0x64
 80006e6:	4618      	mov	r0, r3
 80006e8:	f008 f9ae 	bl	8008a48 <xQueueReceive>

		if (recievedCommand == THUMBS_UP) {
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d1f4      	bne.n	80006dc <beeperTask+0xc>
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
			beeper_noise();
 80006f2:	f7ff ffaf 	bl	8000654 <beeper_noise>
		xQueueReceive(beeperQueue, &recievedCommand, pdMS_TO_TICKS(100));
 80006f6:	e7f1      	b.n	80006dc <beeperTask+0xc>
 80006f8:	200002c4 	.word	0x200002c4

080006fc <USBTask>:
		}

	}
}

void USBTask(void *pvParameters) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

	for (;;) {
		//check for buffer

		if (usbCommand)
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <USBTask+0x5c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d006      	beq.n	800071a <USBTask+0x1e>
			xQueueSend(ledQueue, &usbCommand, pdMS_TO_TICKS(100));
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <USBTask+0x60>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	2300      	movs	r3, #0
 8000712:	2264      	movs	r2, #100	@ 0x64
 8000714:	4910      	ldr	r1, [pc, #64]	@ (8000758 <USBTask+0x5c>)
 8000716:	f007 fff7 	bl	8008708 <xQueueGenericSend>
		if (xLedTaskHandle != NULL) {
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <USBTask+0x64>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d008      	beq.n	8000734 <USBTask+0x38>
			xTaskNotify(xLedTaskHandle, usbCommand, eSetValueWithoutOverwrite);
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <USBTask+0x64>)
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <USBTask+0x5c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4619      	mov	r1, r3
 800072c:	2300      	movs	r3, #0
 800072e:	2204      	movs	r2, #4
 8000730:	f009 fb30 	bl	8009d94 <xTaskGenericNotify>
		}
//        xQueueSend(ledQueue, &command, pdMS_TO_TICKS(100));
		xQueueSend(motorQueue, &usbCommand, pdMS_TO_TICKS(100));
 8000734:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <USBTask+0x68>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	2264      	movs	r2, #100	@ 0x64
 800073c:	4906      	ldr	r1, [pc, #24]	@ (8000758 <USBTask+0x5c>)
 800073e:	f007 ffe3 	bl	8008708 <xQueueGenericSend>
		xQueueSend(beeperQueue, &usbCommand, pdMS_TO_TICKS(100));
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <USBTask+0x6c>)
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	2300      	movs	r3, #0
 8000748:	2264      	movs	r2, #100	@ 0x64
 800074a:	4903      	ldr	r1, [pc, #12]	@ (8000758 <USBTask+0x5c>)
 800074c:	f007 ffdc 	bl	8008708 <xQueueGenericSend>

		vTaskDelay(pdMS_TO_TICKS(100));
 8000750:	2064      	movs	r0, #100	@ 0x64
 8000752:	f008 fd87 	bl	8009264 <vTaskDelay>
		if (usbCommand)
 8000756:	e7d5      	b.n	8000704 <USBTask+0x8>
 8000758:	20000000 	.word	0x20000000
 800075c:	200002bc 	.word	0x200002bc
 8000760:	200002c8 	.word	0x200002c8
 8000764:	200002c0 	.word	0x200002c0
 8000768:	200002c4 	.word	0x200002c4

0800076c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
// Create a queue with 5 items, each of 1 byte (uint8_t) in size
	//usbQueue = xQueueCreate(5, sizeof(uint8_t));
	ledQueue = xQueueCreate(2, sizeof(int));
 8000772:	2200      	movs	r2, #0
 8000774:	2104      	movs	r1, #4
 8000776:	2002      	movs	r0, #2
 8000778:	f007 ff67 	bl	800864a <xQueueGenericCreate>
 800077c:	4603      	mov	r3, r0
 800077e:	4a2c      	ldr	r2, [pc, #176]	@ (8000830 <main+0xc4>)
 8000780:	6013      	str	r3, [r2, #0]
	motorQueue = xQueueCreate(2, sizeof(int));
 8000782:	2200      	movs	r2, #0
 8000784:	2104      	movs	r1, #4
 8000786:	2002      	movs	r0, #2
 8000788:	f007 ff5f 	bl	800864a <xQueueGenericCreate>
 800078c:	4603      	mov	r3, r0
 800078e:	4a29      	ldr	r2, [pc, #164]	@ (8000834 <main+0xc8>)
 8000790:	6013      	str	r3, [r2, #0]
	beeperQueue = xQueueCreate(2, sizeof(int));
 8000792:	2200      	movs	r2, #0
 8000794:	2104      	movs	r1, #4
 8000796:	2002      	movs	r0, #2
 8000798:	f007 ff57 	bl	800864a <xQueueGenericCreate>
 800079c:	4603      	mov	r3, r0
 800079e:	4a26      	ldr	r2, [pc, #152]	@ (8000838 <main+0xcc>)
 80007a0:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007a2:	f000 fd4d 	bl	8001240 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007a6:	f000 f865 	bl	8000874 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80007aa:	f000 f8cb 	bl	8000944 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007ae:	f000 f9ab 	bl	8000b08 <MX_GPIO_Init>
	MX_I2C1_Init();
 80007b2:	f000 f8e7 	bl	8000984 <MX_I2C1_Init>
	MX_I2S2_Init();
 80007b6:	f000 f913 	bl	80009e0 <MX_I2S2_Init>
	MX_I2S3_Init();
 80007ba:	f000 f93f 	bl	8000a3c <MX_I2S3_Init>
	MX_SPI1_Init();
 80007be:	f000 f96d 	bl	8000a9c <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80007c2:	f007 fc7b 	bl	80080bc <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80007c6:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <main+0xd0>)
 80007c8:	2100      	movs	r1, #0
 80007ca:	481d      	ldr	r0, [pc, #116]	@ (8000840 <main+0xd4>)
 80007cc:	f007 fcc0 	bl	8008150 <osThreadNew>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <main+0xd8>)
 80007d4:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */

	/* add events, ... */
	xTaskCreate(LEDTask, "LED Task", 128, NULL, 2, &TaskHandle_LEDTask);
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <main+0xdc>)
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	2302      	movs	r3, #2
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	491a      	ldr	r1, [pc, #104]	@ (800084c <main+0xe0>)
 80007e4:	481a      	ldr	r0, [pc, #104]	@ (8000850 <main+0xe4>)
 80007e6:	f008 fbdf 	bl	8008fa8 <xTaskCreate>
	xTaskCreate(USBTask, "USB Task", 128, NULL, 2, NULL);
 80007ea:	2300      	movs	r3, #0
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	2302      	movs	r3, #2
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2300      	movs	r3, #0
 80007f4:	2280      	movs	r2, #128	@ 0x80
 80007f6:	4917      	ldr	r1, [pc, #92]	@ (8000854 <main+0xe8>)
 80007f8:	4817      	ldr	r0, [pc, #92]	@ (8000858 <main+0xec>)
 80007fa:	f008 fbd5 	bl	8008fa8 <xTaskCreate>
	xTaskCreate(beeperTask, "beeper Task", 128, NULL, 2,
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <main+0xf0>)
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	2302      	movs	r3, #2
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2300      	movs	r3, #0
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	4915      	ldr	r1, [pc, #84]	@ (8000860 <main+0xf4>)
 800080c:	4815      	ldr	r0, [pc, #84]	@ (8000864 <main+0xf8>)
 800080e:	f008 fbcb 	bl	8008fa8 <xTaskCreate>
			&TaskHandle_beeperTask);
	xTaskCreate(DC_MotorTask, "DC Motor Task", 128, NULL, 2,
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <main+0xfc>)
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	2302      	movs	r3, #2
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	2280      	movs	r2, #128	@ 0x80
 800081e:	4913      	ldr	r1, [pc, #76]	@ (800086c <main+0x100>)
 8000820:	4813      	ldr	r0, [pc, #76]	@ (8000870 <main+0x104>)
 8000822:	f008 fbc1 	bl	8008fa8 <xTaskCreate>
			&TaskHandle_DC_MotorTask);
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000826:	f007 fc6d 	bl	8008104 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 800082a:	bf00      	nop
 800082c:	e7fd      	b.n	800082a <main+0xbe>
 800082e:	bf00      	nop
 8000830:	200002bc 	.word	0x200002bc
 8000834:	200002c0 	.word	0x200002c0
 8000838:	200002c4 	.word	0x200002c4
 800083c:	0800bb80 	.word	0x0800bb80
 8000840:	08000d19 	.word	0x08000d19
 8000844:	200002ac 	.word	0x200002ac
 8000848:	200002b0 	.word	0x200002b0
 800084c:	0800baf8 	.word	0x0800baf8
 8000850:	080004d1 	.word	0x080004d1
 8000854:	0800bb04 	.word	0x0800bb04
 8000858:	080006fd 	.word	0x080006fd
 800085c:	200002b8 	.word	0x200002b8
 8000860:	0800bb10 	.word	0x0800bb10
 8000864:	080006d1 	.word	0x080006d1
 8000868:	200002b4 	.word	0x200002b4
 800086c:	0800bb1c 	.word	0x0800bb1c
 8000870:	080005a1 	.word	0x080005a1

08000874 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	@ 0x50
 8000878:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2230      	movs	r2, #48	@ 0x30
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f00b f834 	bl	800b8f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	4b27      	ldr	r3, [pc, #156]	@ (800093c <SystemClock_Config+0xc8>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	4a26      	ldr	r2, [pc, #152]	@ (800093c <SystemClock_Config+0xc8>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a8:	4b24      	ldr	r3, [pc, #144]	@ (800093c <SystemClock_Config+0xc8>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <SystemClock_Config+0xcc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a20      	ldr	r2, [pc, #128]	@ (8000940 <SystemClock_Config+0xcc>)
 80008be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <SystemClock_Config+0xcc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80008e8:	23a8      	movs	r3, #168	@ 0xa8
 80008ea:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80008f0:	2307      	movs	r3, #7
 80008f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 ffbd 	bl	8003878 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x94>
		Error_Handler();
 8000904:	f000 fa24 	bl	8000d50 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2302      	movs	r3, #2
 800090e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000918:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2102      	movs	r1, #2
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fa1f 	bl	8003d68 <HAL_RCC_ClockConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xc0>
		Error_Handler();
 8000930:	f000 fa0e 	bl	8000d50 <Error_Handler>
	}
}
 8000934:	bf00      	nop
 8000936:	3750      	adds	r7, #80	@ 0x50
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800095a:	2301      	movs	r3, #1
 800095c:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800095e:	23c8      	movs	r3, #200	@ 0xc8
 8000960:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000962:	2305      	movs	r3, #5
 8000964:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800096a:	463b      	mov	r3, r7
 800096c:	4618      	mov	r0, r3
 800096e:	f003 fc39 	bl	80041e4 <HAL_RCCEx_PeriphCLKConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <PeriphCommonClock_Config+0x38>
		Error_Handler();
 8000978:	f000 f9ea 	bl	8000d50 <Error_Handler>
	}
}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_I2C1_Init+0x50>)
 800098a:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <MX_I2C1_Init+0x54>)
 800098c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_I2C1_Init+0x50>)
 8000990:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <MX_I2C1_Init+0x58>)
 8000992:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_I2C1_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_I2C1_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009a6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009c2:	f000 ff23 	bl	800180c <HAL_I2C_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80009cc:	f000 f9c0 	bl	8000d50 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000170 	.word	0x20000170
 80009d8:	40005400 	.word	0x40005400
 80009dc:	000186a0 	.word	0x000186a0

080009e0 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_I2S2_Init+0x50>)
 80009e6:	4a13      	ldr	r2, [pc, #76]	@ (8000a34 <MX_I2S2_Init+0x54>)
 80009e8:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_I2S2_Init+0x50>)
 80009ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f0:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_I2S2_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <MX_I2S2_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_I2S2_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <MX_I2S2_Init+0x50>)
 8000a06:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <MX_I2S2_Init+0x58>)
 8000a08:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_I2S2_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a10:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <MX_I2S2_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_I2S2_Init+0x50>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_I2S2_Init+0x50>)
 8000a1e:	f001 f839 	bl	8001a94 <HAL_I2S_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2S2_Init+0x4c>
		Error_Handler();
 8000a28:	f000 f992 	bl	8000d50 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200001c4 	.word	0x200001c4
 8000a34:	40003800 	.word	0x40003800
 8000a38:	00017700 	.word	0x00017700

08000a3c <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_I2S3_Init+0x54>)
 8000a42:	4a14      	ldr	r2, [pc, #80]	@ (8000a94 <MX_I2S3_Init+0x58>)
 8000a44:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_I2S3_Init+0x54>)
 8000a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a4c:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <MX_I2S3_Init+0x54>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_I2S3_Init+0x54>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <MX_I2S3_Init+0x54>)
 8000a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a60:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <MX_I2S3_Init+0x54>)
 8000a64:	4a0c      	ldr	r2, [pc, #48]	@ (8000a98 <MX_I2S3_Init+0x5c>)
 8000a66:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_I2S3_Init+0x54>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <MX_I2S3_Init+0x54>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_I2S3_Init+0x54>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_I2S3_Init+0x54>)
 8000a7c:	f001 f80a 	bl	8001a94 <HAL_I2S_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2S3_Init+0x4e>
		Error_Handler();
 8000a86:	f000 f963 	bl	8000d50 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000020c 	.word	0x2000020c
 8000a94:	40003c00 	.word	0x40003c00
 8000a98:	00017700 	.word	0x00017700

08000a9c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000aa2:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <MX_SPI1_Init+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000aa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aac:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000acc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ae8:	220a      	movs	r2, #10
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000aee:	f003 fccb 	bl	8004488 <HAL_SPI_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_SPI1_Init+0x60>
		Error_Handler();
 8000af8:	f000 f92a 	bl	8000d50 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000254 	.word	0x20000254
 8000b04:	40013000 	.word	0x40013000

08000b08 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	@ 0x30
 8000b0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	4b77      	ldr	r3, [pc, #476]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a76      	ldr	r2, [pc, #472]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b28:	f043 0310 	orr.w	r3, r3, #16
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b74      	ldr	r3, [pc, #464]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	4b70      	ldr	r3, [pc, #448]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a6f      	ldr	r2, [pc, #444]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b69      	ldr	r3, [pc, #420]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a68      	ldr	r2, [pc, #416]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b66      	ldr	r3, [pc, #408]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b62      	ldr	r3, [pc, #392]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a61      	ldr	r2, [pc, #388]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b5f      	ldr	r3, [pc, #380]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b5b      	ldr	r3, [pc, #364]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a5a      	ldr	r2, [pc, #360]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b58      	ldr	r3, [pc, #352]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b54      	ldr	r3, [pc, #336]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a53      	ldr	r2, [pc, #332]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b51      	ldr	r3, [pc, #324]	@ (8000d00 <MX_GPIO_Init+0x1f8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2108      	movs	r1, #8
 8000bca:	484e      	ldr	r0, [pc, #312]	@ (8000d04 <MX_GPIO_Init+0x1fc>)
 8000bcc:	f000 fe04 	bl	80017d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	484c      	ldr	r0, [pc, #304]	@ (8000d08 <MX_GPIO_Init+0x200>)
 8000bd6:	f000 fdff 	bl	80017d8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2106      	movs	r1, #6
 8000bde:	484b      	ldr	r0, [pc, #300]	@ (8000d0c <MX_GPIO_Init+0x204>)
 8000be0:	f000 fdfa 	bl	80017d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2130      	movs	r1, #48	@ 0x30
 8000be8:	4847      	ldr	r0, [pc, #284]	@ (8000d08 <MX_GPIO_Init+0x200>)
 8000bea:	f000 fdf5 	bl	80017d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000bf4:	4846      	ldr	r0, [pc, #280]	@ (8000d10 <MX_GPIO_Init+0x208>)
 8000bf6:	f000 fdef 	bl	80017d8 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2180      	movs	r1, #128	@ 0x80
 8000bfe:	4845      	ldr	r0, [pc, #276]	@ (8000d14 <MX_GPIO_Init+0x20c>)
 8000c00:	f000 fdea 	bl	80017d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DATA_Ready_Pin */
	GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000c04:	2304      	movs	r3, #4
 8000c06:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	483b      	ldr	r0, [pc, #236]	@ (8000d04 <MX_GPIO_Init+0x1fc>)
 8000c18:	f000 fc5a 	bl	80014d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4834      	ldr	r0, [pc, #208]	@ (8000d04 <MX_GPIO_Init+0x1fc>)
 8000c34:	f000 fc4c 	bl	80014d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = INT1_Pin | INT2_Pin | MEMS_INT2_Pin;
 8000c38:	2332      	movs	r3, #50	@ 0x32
 8000c3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c3c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c40:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	482d      	ldr	r0, [pc, #180]	@ (8000d04 <MX_GPIO_Init+0x1fc>)
 8000c4e:	f000 fc3f 	bl	80014d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC4 PC5 */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | GPIO_PIN_4 | GPIO_PIN_5;
 8000c52:	2331      	movs	r3, #49	@ 0x31
 8000c54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4827      	ldr	r0, [pc, #156]	@ (8000d08 <MX_GPIO_Init+0x200>)
 8000c6a:	f000 fc31 	bl	80014d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c72:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c76:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4822      	ldr	r0, [pc, #136]	@ (8000d0c <MX_GPIO_Init+0x204>)
 8000c84:	f000 fc24 	bl	80014d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2;
 8000c88:	2306      	movs	r3, #6
 8000c8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481b      	ldr	r0, [pc, #108]	@ (8000d0c <MX_GPIO_Init+0x204>)
 8000ca0:	f000 fc16 	bl	80014d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000ca4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000ca8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4814      	ldr	r0, [pc, #80]	@ (8000d10 <MX_GPIO_Init+0x208>)
 8000cbe:	f000 fc07 	bl	80014d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <MX_GPIO_Init+0x208>)
 8000cd6:	f000 fbfb 	bl	80014d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cda:	2380      	movs	r3, #128	@ 0x80
 8000cdc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4808      	ldr	r0, [pc, #32]	@ (8000d14 <MX_GPIO_Init+0x20c>)
 8000cf2:	f000 fbed 	bl	80014d0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3730      	adds	r7, #48	@ 0x30
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020c00 	.word	0x40020c00
 8000d14:	40020400 	.word	0x40020400

08000d18 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000d20:	f00a f8ea 	bl	800aef8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f007 faa5 	bl	8008274 <osDelay>
 8000d2a:	e7fb      	b.n	8000d24 <StartDefaultTask+0xc>

08000d2c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d3e:	f000 faa1 	bl	8001284 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40000800 	.word	0x40000800

08000d50 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	4a11      	ldr	r2, [pc, #68]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8e:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	f06f 0001 	mvn.w	r0, #1
 8000da2:	f000 fb6b 	bl	800147c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	@ (8000e38 <HAL_I2C_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12c      	bne.n	8000e30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <HAL_I2C_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a17      	ldr	r2, [pc, #92]	@ (8000e3c <HAL_I2C_MspInit+0x88>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <HAL_I2C_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000df2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df8:	2312      	movs	r3, #18
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e04:	2304      	movs	r3, #4
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <HAL_I2C_MspInit+0x8c>)
 8000e10:	f000 fb5e 	bl	80014d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <HAL_I2C_MspInit+0x88>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a07      	ldr	r2, [pc, #28]	@ (8000e3c <HAL_I2C_MspInit+0x88>)
 8000e1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_I2C_MspInit+0x88>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	@ 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020400 	.word	0x40020400

08000e44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08e      	sub	sp, #56	@ 0x38
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a59      	ldr	r2, [pc, #356]	@ (8000fc8 <HAL_I2S_MspInit+0x184>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d15b      	bne.n	8000f1e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
 8000e6a:	4b58      	ldr	r3, [pc, #352]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a57      	ldr	r2, [pc, #348]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e76:	4b55      	ldr	r3, [pc, #340]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7e:	623b      	str	r3, [r7, #32]
 8000e80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	4b51      	ldr	r3, [pc, #324]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a50      	ldr	r2, [pc, #320]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b4e      	ldr	r3, [pc, #312]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a49      	ldr	r2, [pc, #292]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b47      	ldr	r3, [pc, #284]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000eca:	2306      	movs	r3, #6
 8000ecc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	483e      	ldr	r0, [pc, #248]	@ (8000fd0 <HAL_I2S_MspInit+0x18c>)
 8000ed6:	f000 fafb 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000eda:	2308      	movs	r3, #8
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eea:	2305      	movs	r3, #5
 8000eec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4836      	ldr	r0, [pc, #216]	@ (8000fd0 <HAL_I2S_MspInit+0x18c>)
 8000ef6:	f000 faeb 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000efa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f0c:	2305      	movs	r3, #5
 8000f0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	482f      	ldr	r0, [pc, #188]	@ (8000fd4 <HAL_I2S_MspInit+0x190>)
 8000f18:	f000 fada 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f1c:	e04f      	b.n	8000fbe <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd8 <HAL_I2S_MspInit+0x194>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d14a      	bne.n	8000fbe <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	4a26      	ldr	r2, [pc, #152]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f38:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f54:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f68:	4a18      	ldr	r2, [pc, #96]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <HAL_I2S_MspInit+0x188>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4811      	ldr	r0, [pc, #68]	@ (8000fdc <HAL_I2S_MspInit+0x198>)
 8000f98:	f000 fa9a 	bl	80014d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f9c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fae:	2306      	movs	r3, #6
 8000fb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <HAL_I2S_MspInit+0x18c>)
 8000fba:	f000 fa89 	bl	80014d0 <HAL_GPIO_Init>
}
 8000fbe:	bf00      	nop
 8000fc0:	3738      	adds	r7, #56	@ 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40003800 	.word	0x40003800
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40003c00 	.word	0x40003c00
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <HAL_SPI_MspInit+0x84>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12b      	bne.n	800105a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a17      	ldr	r2, [pc, #92]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 800100c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a10      	ldr	r2, [pc, #64]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800103a:	23e0      	movs	r3, #224	@ 0xe0
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104a:	2305      	movs	r3, #5
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	@ (800106c <HAL_SPI_MspInit+0x8c>)
 8001056:	f000 fa3b 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	@ 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40013000 	.word	0x40013000
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000

08001070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	@ 0x38
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <HAL_InitTick+0xe4>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	4a32      	ldr	r2, [pc, #200]	@ (8001154 <HAL_InitTick+0xe4>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001090:	4b30      	ldr	r3, [pc, #192]	@ (8001154 <HAL_InitTick+0xe4>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800109c:	f107 0210 	add.w	r2, r7, #16
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 f86a 	bl	8004180 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d103      	bne.n	80010be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010b6:	f003 f84f 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 80010ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80010bc:	e004      	b.n	80010c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010be:	f003 f84b 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 80010c2:	4603      	mov	r3, r0
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ca:	4a23      	ldr	r2, [pc, #140]	@ (8001158 <HAL_InitTick+0xe8>)
 80010cc:	fba2 2303 	umull	r2, r3, r2, r3
 80010d0:	0c9b      	lsrs	r3, r3, #18
 80010d2:	3b01      	subs	r3, #1
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_InitTick+0xec>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <HAL_InitTick+0xf0>)
 80010da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <HAL_InitTick+0xec>)
 80010de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80010e4:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <HAL_InitTick+0xec>)
 80010e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <HAL_InitTick+0xec>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <HAL_InitTick+0xec>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_InitTick+0xec>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80010fc:	4817      	ldr	r0, [pc, #92]	@ (800115c <HAL_InitTick+0xec>)
 80010fe:	f003 fa4c 	bl	800459a <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001108:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800110c:	2b00      	cmp	r3, #0
 800110e:	d11b      	bne.n	8001148 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001110:	4812      	ldr	r0, [pc, #72]	@ (800115c <HAL_InitTick+0xec>)
 8001112:	f003 fa9b 	bl	800464c <HAL_TIM_Base_Start_IT>
 8001116:	4603      	mov	r3, r0
 8001118:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800111c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001120:	2b00      	cmp	r3, #0
 8001122:	d111      	bne.n	8001148 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001124:	201e      	movs	r0, #30
 8001126:	f000 f9c5 	bl	80014b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d808      	bhi.n	8001142 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	201e      	movs	r0, #30
 8001136:	f000 f9a1 	bl	800147c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <HAL_InitTick+0xf4>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e002      	b.n	8001148 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001148:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800114c:	4618      	mov	r0, r3
 800114e:	3738      	adds	r7, #56	@ 0x38
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	431bde83 	.word	0x431bde83
 800115c:	200002cc 	.word	0x200002cc
 8001160:	40000800 	.word	0x40000800
 8001164:	20000008 	.word	0x20000008

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <NMI_Handler+0x4>

08001170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <MemManage_Handler+0x4>

08001180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <UsageFault_Handler+0x4>

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <TIM4_IRQHandler+0x10>)
 80011a6:	f003 fab3 	bl	8004710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200002cc 	.word	0x200002cc

080011b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <OTG_FS_IRQHandler+0x10>)
 80011ba:	f001 fa4f 	bl	800265c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200061e0 	.word	0x200061e0

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001224 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f0:	f7ff ffea 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f00a fbc7 	bl	800b9ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff faa5 	bl	800076c <main>
  bx  lr    
 8001222:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8001230:	0800bbcc 	.word	0x0800bbcc
  ldr r2, =_sbss
 8001234:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8001238:	20006a24 	.word	0x20006a24

0800123c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <HAL_Init+0x40>)
 800124a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800124e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <HAL_Init+0x40>)
 8001256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800125a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <HAL_Init+0x40>)
 8001262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f8fc 	bl	8001466 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	200f      	movs	r0, #15
 8001270:	f7ff fefe 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f7ff fd72 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023c00 	.word	0x40023c00

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	20000314 	.word	0x20000314

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000314 	.word	0x20000314

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000000c 	.word	0x2000000c

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	@ (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	@ (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	@ (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff4c 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148e:	f7ff ff61 	bl	8001354 <__NVIC_GetPriorityGrouping>
 8001492:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	6978      	ldr	r0, [r7, #20]
 800149a:	f7ff ffb1 	bl	8001400 <NVIC_EncodePriority>
 800149e:	4602      	mov	r2, r0
 80014a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff80 	bl	80013ac <__NVIC_SetPriority>
}
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff54 	bl	8001370 <__NVIC_EnableIRQ>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	@ 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e159      	b.n	80017a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8148 	bne.w	800179a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b01      	cmp	r3, #1
 8001514:	d005      	beq.n	8001522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151e:	2b02      	cmp	r3, #2
 8001520:	d130      	bne.n	8001584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	f003 0201 	and.w	r2, r3, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b03      	cmp	r3, #3
 800158e:	d017      	beq.n	80015c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d123      	bne.n	8001614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	08da      	lsrs	r2, r3, #3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3208      	adds	r2, #8
 80015d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	69b9      	ldr	r1, [r7, #24]
 8001610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0203 	and.w	r2, r3, #3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a2 	beq.w	800179a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b57      	ldr	r3, [pc, #348]	@ (80017b8 <HAL_GPIO_Init+0x2e8>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	4a56      	ldr	r2, [pc, #344]	@ (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001664:	6453      	str	r3, [r2, #68]	@ 0x44
 8001666:	4b54      	ldr	r3, [pc, #336]	@ (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001672:	4a52      	ldr	r2, [pc, #328]	@ (80017bc <HAL_GPIO_Init+0x2ec>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <HAL_GPIO_Init+0x2f0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_GPIO_Init+0x202>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <HAL_GPIO_Init+0x2f4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x1fe>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a47      	ldr	r2, [pc, #284]	@ (80017c8 <HAL_GPIO_Init+0x2f8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x1fa>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a46      	ldr	r2, [pc, #280]	@ (80017cc <HAL_GPIO_Init+0x2fc>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x1f6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a45      	ldr	r2, [pc, #276]	@ (80017d0 <HAL_GPIO_Init+0x300>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x1f2>
 80016be:	2304      	movs	r3, #4
 80016c0:	e008      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016c2:	2307      	movs	r3, #7
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e004      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016d2:	2300      	movs	r3, #0
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f002 0203 	and.w	r2, r2, #3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4093      	lsls	r3, r2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e4:	4935      	ldr	r1, [pc, #212]	@ (80017bc <HAL_GPIO_Init+0x2ec>)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f2:	4b38      	ldr	r3, [pc, #224]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001716:	4a2f      	ldr	r2, [pc, #188]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800171c:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001740:	4a24      	ldr	r2, [pc, #144]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001746:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176a:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001794:	4a0f      	ldr	r2, [pc, #60]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f aea2 	bls.w	80014ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	@ 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40013c00 	.word	0x40013c00

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e12b      	b.n	8001a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fabe 	bl	8000db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2224      	movs	r2, #36	@ 0x24
 800183c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800185e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800186e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001870:	f002 fc72 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8001874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a81      	ldr	r2, [pc, #516]	@ (8001a80 <HAL_I2C_Init+0x274>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d807      	bhi.n	8001890 <HAL_I2C_Init+0x84>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4a80      	ldr	r2, [pc, #512]	@ (8001a84 <HAL_I2C_Init+0x278>)
 8001884:	4293      	cmp	r3, r2
 8001886:	bf94      	ite	ls
 8001888:	2301      	movls	r3, #1
 800188a:	2300      	movhi	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	e006      	b.n	800189e <HAL_I2C_Init+0x92>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4a7d      	ldr	r2, [pc, #500]	@ (8001a88 <HAL_I2C_Init+0x27c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	bf94      	ite	ls
 8001898:	2301      	movls	r3, #1
 800189a:	2300      	movhi	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0e7      	b.n	8001a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4a78      	ldr	r2, [pc, #480]	@ (8001a8c <HAL_I2C_Init+0x280>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0c9b      	lsrs	r3, r3, #18
 80018b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a80 <HAL_I2C_Init+0x274>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d802      	bhi.n	80018e0 <HAL_I2C_Init+0xd4>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3301      	adds	r3, #1
 80018de:	e009      	b.n	80018f4 <HAL_I2C_Init+0xe8>
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018e6:	fb02 f303 	mul.w	r3, r2, r3
 80018ea:	4a69      	ldr	r2, [pc, #420]	@ (8001a90 <HAL_I2C_Init+0x284>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	099b      	lsrs	r3, r3, #6
 80018f2:	3301      	adds	r3, #1
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001906:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	495c      	ldr	r1, [pc, #368]	@ (8001a80 <HAL_I2C_Init+0x274>)
 8001910:	428b      	cmp	r3, r1
 8001912:	d819      	bhi.n	8001948 <HAL_I2C_Init+0x13c>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1e59      	subs	r1, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001922:	1c59      	adds	r1, r3, #1
 8001924:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001928:	400b      	ands	r3, r1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00a      	beq.n	8001944 <HAL_I2C_Init+0x138>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1e59      	subs	r1, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fbb1 f3f3 	udiv	r3, r1, r3
 800193c:	3301      	adds	r3, #1
 800193e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001942:	e051      	b.n	80019e8 <HAL_I2C_Init+0x1dc>
 8001944:	2304      	movs	r3, #4
 8001946:	e04f      	b.n	80019e8 <HAL_I2C_Init+0x1dc>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d111      	bne.n	8001974 <HAL_I2C_Init+0x168>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1e58      	subs	r0, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	440b      	add	r3, r1
 800195e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001962:	3301      	adds	r3, #1
 8001964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	e012      	b.n	800199a <HAL_I2C_Init+0x18e>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1e58      	subs	r0, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	0099      	lsls	r1, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	fbb0 f3f3 	udiv	r3, r0, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_Init+0x196>
 800199e:	2301      	movs	r3, #1
 80019a0:	e022      	b.n	80019e8 <HAL_I2C_Init+0x1dc>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10e      	bne.n	80019c8 <HAL_I2C_Init+0x1bc>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1e58      	subs	r0, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6859      	ldr	r1, [r3, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	440b      	add	r3, r1
 80019b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019c6:	e00f      	b.n	80019e8 <HAL_I2C_Init+0x1dc>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e58      	subs	r0, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	0099      	lsls	r1, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	fbb0 f3f3 	udiv	r3, r0, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	6809      	ldr	r1, [r1, #0]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6911      	ldr	r1, [r2, #16]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68d2      	ldr	r2, [r2, #12]
 8001a22:	4311      	orrs	r1, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	000186a0 	.word	0x000186a0
 8001a84:	001e847f 	.word	0x001e847f
 8001a88:	003d08ff 	.word	0x003d08ff
 8001a8c:	431bde83 	.word	0x431bde83
 8001a90:	10624dd3 	.word	0x10624dd3

08001a94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e128      	b.n	8001cf8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a90      	ldr	r2, [pc, #576]	@ (8001d00 <HAL_I2S_Init+0x26c>)
 8001abe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff f9bf 	bl	8000e44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001adc:	f023 030f 	bic.w	r3, r3, #15
 8001ae0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d060      	beq.n	8001bb4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001afa:	2310      	movs	r3, #16
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e001      	b.n	8001b04 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b00:	2320      	movs	r3, #32
 8001b02:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d802      	bhi.n	8001b12 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f002 fc56 	bl	80043c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b18:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b22:	d125      	bne.n	8001b70 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d010      	beq.n	8001b4e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	461a      	mov	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	3305      	adds	r3, #5
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	e01f      	b.n	8001b8e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	461a      	mov	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	3305      	adds	r3, #5
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	e00e      	b.n	8001b8e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	461a      	mov	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	3305      	adds	r3, #5
 8001b8c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4a5c      	ldr	r2, [pc, #368]	@ (8001d04 <HAL_I2S_Init+0x270>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	e003      	b.n	8001bbc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d902      	bls.n	8001bc8 <HAL_I2S_Init+0x134>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	2bff      	cmp	r3, #255	@ 0xff
 8001bc6:	d907      	bls.n	8001bd8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	f043 0210 	orr.w	r2, r3, #16
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e08f      	b.n	8001cf8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	ea42 0103 	orr.w	r1, r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001bf6:	f023 030f 	bic.w	r3, r3, #15
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6851      	ldr	r1, [r2, #4]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6892      	ldr	r2, [r2, #8]
 8001c02:	4311      	orrs	r1, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68d2      	ldr	r2, [r2, #12]
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6992      	ldr	r2, [r2, #24]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c1a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d161      	bne.n	8001ce8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a38      	ldr	r2, [pc, #224]	@ (8001d08 <HAL_I2S_Init+0x274>)
 8001c28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a37      	ldr	r2, [pc, #220]	@ (8001d0c <HAL_I2S_Init+0x278>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_I2S_Init+0x1a4>
 8001c34:	4b36      	ldr	r3, [pc, #216]	@ (8001d10 <HAL_I2S_Init+0x27c>)
 8001c36:	e001      	b.n	8001c3c <HAL_I2S_Init+0x1a8>
 8001c38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	4932      	ldr	r1, [pc, #200]	@ (8001d0c <HAL_I2S_Init+0x278>)
 8001c44:	428a      	cmp	r2, r1
 8001c46:	d101      	bne.n	8001c4c <HAL_I2S_Init+0x1b8>
 8001c48:	4a31      	ldr	r2, [pc, #196]	@ (8001d10 <HAL_I2S_Init+0x27c>)
 8001c4a:	e001      	b.n	8001c50 <HAL_I2S_Init+0x1bc>
 8001c4c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001c50:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001c54:	f023 030f 	bic.w	r3, r3, #15
 8001c58:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d0c <HAL_I2S_Init+0x278>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_I2S_Init+0x1d4>
 8001c64:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <HAL_I2S_Init+0x27c>)
 8001c66:	e001      	b.n	8001c6c <HAL_I2S_Init+0x1d8>
 8001c68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a25      	ldr	r2, [pc, #148]	@ (8001d0c <HAL_I2S_Init+0x278>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_I2S_Init+0x1ea>
 8001c7a:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <HAL_I2S_Init+0x27c>)
 8001c7c:	e001      	b.n	8001c82 <HAL_I2S_Init+0x1ee>
 8001c7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c8e:	d003      	beq.n	8001c98 <HAL_I2S_Init+0x204>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d103      	bne.n	8001ca0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	e001      	b.n	8001ca4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cd0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8001d0c <HAL_I2S_Init+0x278>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_I2S_Init+0x24c>
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <HAL_I2S_Init+0x27c>)
 8001cde:	e001      	b.n	8001ce4 <HAL_I2S_Init+0x250>
 8001ce0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ce4:	897a      	ldrh	r2, [r7, #10]
 8001ce6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	08001e0b 	.word	0x08001e0b
 8001d04:	cccccccd 	.word	0xcccccccd
 8001d08:	08001f21 	.word	0x08001f21
 8001d0c:	40003800 	.word	0x40003800
 8001d10:	40003400 	.word	0x40003400

08001d14 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	881a      	ldrh	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	1c9a      	adds	r2, r3, #2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10e      	bne.n	8001da4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001d94:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffb8 	bl	8001d14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc6:	1c9a      	adds	r2, r3, #2
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10e      	bne.n	8001e02 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001df2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff93 	bl	8001d28 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d13a      	bne.n	8001e9c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d109      	bne.n	8001e44 <I2S_IRQHandler+0x3a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3a:	2b40      	cmp	r3, #64	@ 0x40
 8001e3c:	d102      	bne.n	8001e44 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ffb4 	bl	8001dac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4a:	2b40      	cmp	r3, #64	@ 0x40
 8001e4c:	d126      	bne.n	8001e9c <I2S_IRQHandler+0x92>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d11f      	bne.n	8001e9c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f043 0202 	orr.w	r2, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ff50 	bl	8001d3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d136      	bne.n	8001f16 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d109      	bne.n	8001ec6 <I2S_IRQHandler+0xbc>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ebc:	2b80      	cmp	r3, #128	@ 0x80
 8001ebe:	d102      	bne.n	8001ec6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff45 	bl	8001d50 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d122      	bne.n	8001f16 <I2S_IRQHandler+0x10c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d11b      	bne.n	8001f16 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001eec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	f043 0204 	orr.w	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff13 	bl	8001d3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a92      	ldr	r2, [pc, #584]	@ (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001f3a:	4b92      	ldr	r3, [pc, #584]	@ (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f3c:	e001      	b.n	8001f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001f3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a8b      	ldr	r2, [pc, #556]	@ (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001f58:	4b8a      	ldr	r3, [pc, #552]	@ (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f5a:	e001      	b.n	8001f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001f5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f6c:	d004      	beq.n	8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 8099 	bne.w	80020aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d107      	bne.n	8001f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f925 	bl	80021dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f9c8 	bl	800233c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb2:	2b40      	cmp	r3, #64	@ 0x40
 8001fb4:	d13a      	bne.n	800202c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d035      	beq.n	800202c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001fca:	4b6e      	ldr	r3, [pc, #440]	@ (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fcc:	e001      	b.n	8001fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001fce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4969      	ldr	r1, [pc, #420]	@ (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fda:	428b      	cmp	r3, r1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001fde:	4b69      	ldr	r3, [pc, #420]	@ (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fe0:	e001      	b.n	8001fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001fe2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fe6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001fea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001ffa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f043 0202 	orr.w	r2, r3, #2
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fe88 	bl	8001d3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b08      	cmp	r3, #8
 8002034:	f040 80c3 	bne.w	80021be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80bd 	beq.w	80021be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002052:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a49      	ldr	r2, [pc, #292]	@ (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800205e:	4b49      	ldr	r3, [pc, #292]	@ (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002060:	e001      	b.n	8002066 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002062:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4944      	ldr	r1, [pc, #272]	@ (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800206e:	428b      	cmp	r3, r1
 8002070:	d101      	bne.n	8002076 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002072:	4b44      	ldr	r3, [pc, #272]	@ (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002074:	e001      	b.n	800207a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002076:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800207a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800207e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	f043 0204 	orr.w	r2, r3, #4
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fe4a 	bl	8001d3c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020a8:	e089      	b.n	80021be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d107      	bne.n	80020c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8be 	bl	8002240 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8fd 	bl	80022d8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e4:	2b40      	cmp	r3, #64	@ 0x40
 80020e6:	d12f      	bne.n	8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d02a      	beq.n	8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002100:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1e      	ldr	r2, [pc, #120]	@ (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800210c:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800210e:	e001      	b.n	8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002110:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4919      	ldr	r1, [pc, #100]	@ (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800211c:	428b      	cmp	r3, r1
 800211e:	d101      	bne.n	8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002120:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002122:	e001      	b.n	8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002124:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002128:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800212c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	f043 0202 	orr.w	r2, r3, #2
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fdfa 	bl	8001d3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b08      	cmp	r3, #8
 8002150:	d136      	bne.n	80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d031      	beq.n	80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002168:	e001      	b.n	800216e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800216a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4902      	ldr	r1, [pc, #8]	@ (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002176:	428b      	cmp	r3, r1
 8002178:	d106      	bne.n	8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800217a:	4b02      	ldr	r3, [pc, #8]	@ (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800217c:	e006      	b.n	800218c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800217e:	bf00      	nop
 8002180:	40003800 	.word	0x40003800
 8002184:	40003400 	.word	0x40003400
 8002188:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800218c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002190:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f043 0204 	orr.w	r2, r3, #4
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff fdc0 	bl	8001d3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021bc:	e000      	b.n	80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021be:	bf00      	nop
}
 80021c0:	bf00      	nop
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	1c99      	adds	r1, r3, #2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6251      	str	r1, [r2, #36]	@ 0x24
 80021ee:	881a      	ldrh	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d113      	bne.n	8002236 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800221c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ffc9 	bl	80021c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	1c99      	adds	r1, r3, #2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6251      	str	r1, [r2, #36]	@ 0x24
 8002252:	8819      	ldrh	r1, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1d      	ldr	r2, [pc, #116]	@ (80022d0 <I2SEx_TxISR_I2SExt+0x90>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <I2SEx_TxISR_I2SExt+0x22>
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <I2SEx_TxISR_I2SExt+0x94>)
 8002260:	e001      	b.n	8002266 <I2SEx_TxISR_I2SExt+0x26>
 8002262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002266:	460a      	mov	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d121      	bne.n	80022c6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <I2SEx_TxISR_I2SExt+0x90>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <I2SEx_TxISR_I2SExt+0x50>
 800228c:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <I2SEx_TxISR_I2SExt+0x94>)
 800228e:	e001      	b.n	8002294 <I2SEx_TxISR_I2SExt+0x54>
 8002290:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	490d      	ldr	r1, [pc, #52]	@ (80022d0 <I2SEx_TxISR_I2SExt+0x90>)
 800229c:	428b      	cmp	r3, r1
 800229e:	d101      	bne.n	80022a4 <I2SEx_TxISR_I2SExt+0x64>
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <I2SEx_TxISR_I2SExt+0x94>)
 80022a2:	e001      	b.n	80022a8 <I2SEx_TxISR_I2SExt+0x68>
 80022a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff81 	bl	80021c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40003800 	.word	0x40003800
 80022d4:	40003400 	.word	0x40003400

080022d8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68d8      	ldr	r0, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	1c99      	adds	r1, r3, #2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80022f0:	b282      	uxth	r2, r0
 80022f2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d113      	bne.n	8002334 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800231a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ff4a 	bl	80021c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a20      	ldr	r2, [pc, #128]	@ (80023cc <I2SEx_RxISR_I2SExt+0x90>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <I2SEx_RxISR_I2SExt+0x16>
 800234e:	4b20      	ldr	r3, [pc, #128]	@ (80023d0 <I2SEx_RxISR_I2SExt+0x94>)
 8002350:	e001      	b.n	8002356 <I2SEx_RxISR_I2SExt+0x1a>
 8002352:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002356:	68d8      	ldr	r0, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	1c99      	adds	r1, r3, #2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002362:	b282      	uxth	r2, r0
 8002364:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d121      	bne.n	80023c2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <I2SEx_RxISR_I2SExt+0x90>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <I2SEx_RxISR_I2SExt+0x50>
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <I2SEx_RxISR_I2SExt+0x94>)
 800238a:	e001      	b.n	8002390 <I2SEx_RxISR_I2SExt+0x54>
 800238c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	490d      	ldr	r1, [pc, #52]	@ (80023cc <I2SEx_RxISR_I2SExt+0x90>)
 8002398:	428b      	cmp	r3, r1
 800239a:	d101      	bne.n	80023a0 <I2SEx_RxISR_I2SExt+0x64>
 800239c:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <I2SEx_RxISR_I2SExt+0x94>)
 800239e:	e001      	b.n	80023a4 <I2SEx_RxISR_I2SExt+0x68>
 80023a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023a8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff03 	bl	80021c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40003800 	.word	0x40003800
 80023d0:	40003400 	.word	0x40003400

080023d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af02      	add	r7, sp, #8
 80023da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e101      	b.n	80025ea <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d106      	bne.n	8002406 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f008 ff5d 	bl	800b2c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2203      	movs	r2, #3
 800240a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002414:	d102      	bne.n	800241c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f002 fc44 	bl	8004cae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7c1a      	ldrb	r2, [r3, #16]
 800242e:	f88d 2000 	strb.w	r2, [sp]
 8002432:	3304      	adds	r3, #4
 8002434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002436:	f002 fb23 	bl	8004a80 <USB_CoreInit>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0ce      	b.n	80025ea <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fc3c 	bl	8004cd0 <USB_SetCurrentMode>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0bf      	b.n	80025ea <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	e04a      	b.n	8002506 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3315      	adds	r3, #21
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3314      	adds	r3, #20
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	b298      	uxth	r0, r3
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	332e      	adds	r3, #46	@ 0x2e
 80024ac:	4602      	mov	r2, r0
 80024ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	3318      	adds	r3, #24
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	331c      	adds	r3, #28
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3320      	adds	r3, #32
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3324      	adds	r3, #36	@ 0x24
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	3301      	adds	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	791b      	ldrb	r3, [r3, #4]
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	429a      	cmp	r2, r3
 800250e:	d3af      	bcc.n	8002470 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e044      	b.n	80025a0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	3301      	adds	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	791b      	ldrb	r3, [r3, #4]
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3b5      	bcc.n	8002516 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7c1a      	ldrb	r2, [r3, #16]
 80025b2:	f88d 2000 	strb.w	r2, [sp]
 80025b6:	3304      	adds	r3, #4
 80025b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ba:	f002 fbd5 	bl	8004d68 <USB_DevInit>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e00c      	b.n	80025ea <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 fc1f 	bl	8005e26 <USB_DevDisconnect>

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_PCD_Start+0x1c>
 800260a:	2302      	movs	r3, #2
 800260c:	e022      	b.n	8002654 <HAL_PCD_Start+0x62>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f002 fb26 	bl	8004c8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f003 fbcd 	bl	8005de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b08d      	sub	sp, #52	@ 0x34
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f003 fc8b 	bl	8005f8e <USB_GetMode>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 848c 	bne.w	8002f98 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f003 fbef 	bl	8005e68 <USB_ReadInterrupts>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8482 	beq.w	8002f96 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fbdc 	bl	8005e68 <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d107      	bne.n	80026ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f002 0202 	and.w	r2, r2, #2
 80026c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 fbca 	bl	8005e68 <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d161      	bne.n	80027a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0210 	bic.w	r2, r2, #16
 80026ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f003 020f 	and.w	r2, r3, #15
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	3304      	adds	r3, #4
 800270c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	0c5b      	lsrs	r3, r3, #17
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	2b02      	cmp	r3, #2
 8002718:	d124      	bne.n	8002764 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d035      	beq.n	8002792 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002730:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002734:	b29b      	uxth	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	6a38      	ldr	r0, [r7, #32]
 800273a:	f003 fa01 	bl	8005b40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800274a:	441a      	add	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800275c:	441a      	add	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	615a      	str	r2, [r3, #20]
 8002762:	e016      	b.n	8002792 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	0c5b      	lsrs	r3, r3, #17
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	2b06      	cmp	r3, #6
 800276e:	d110      	bne.n	8002792 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002776:	2208      	movs	r2, #8
 8002778:	4619      	mov	r1, r3
 800277a:	6a38      	ldr	r0, [r7, #32]
 800277c:	f003 f9e0 	bl	8005b40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278c:	441a      	add	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699a      	ldr	r2, [r3, #24]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0210 	orr.w	r2, r2, #16
 80027a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fb5e 	bl	8005e68 <USB_ReadInterrupts>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027b6:	f040 80a7 	bne.w	8002908 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 fb63 	bl	8005e8e <USB_ReadDevAllOutEpInterrupt>
 80027c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027ca:	e099      	b.n	8002900 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 808e 	beq.w	80028f4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 fb87 	bl	8005ef6 <USB_ReadDevOutEPInterrupt>
 80027e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00c      	beq.n	800280e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002800:	461a      	mov	r2, r3
 8002802:	2301      	movs	r3, #1
 8002804:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002806:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fea3 	bl	8003554 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00c      	beq.n	8002832 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002824:	461a      	mov	r2, r3
 8002826:	2308      	movs	r3, #8
 8002828:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800282a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 ff79 	bl	8003724 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002848:	461a      	mov	r2, r3
 800284a:	2310      	movs	r3, #16
 800284c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d030      	beq.n	80028ba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002860:	2b80      	cmp	r3, #128	@ 0x80
 8002862:	d109      	bne.n	8002878 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002876:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	3304      	adds	r3, #4
 800288c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	78db      	ldrb	r3, [r3, #3]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d108      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f008 fe16 	bl	800b4d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028b4:	461a      	mov	r2, r3
 80028b6:	2302      	movs	r3, #2
 80028b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d0:	461a      	mov	r2, r3
 80028d2:	2320      	movs	r3, #32
 80028d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d009      	beq.n	80028f4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ec:	461a      	mov	r2, r3
 80028ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	3301      	adds	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002902:	2b00      	cmp	r3, #0
 8002904:	f47f af62 	bne.w	80027cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f003 faab 	bl	8005e68 <USB_ReadInterrupts>
 8002912:	4603      	mov	r3, r0
 8002914:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002918:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800291c:	f040 80db 	bne.w	8002ad6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 facc 	bl	8005ec2 <USB_ReadDevAllInEpInterrupt>
 800292a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002930:	e0cd      	b.n	8002ace <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80c2 	beq.w	8002ac2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f003 faf2 	bl	8005f32 <USB_ReadDevInEPInterrupt>
 800294e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d057      	beq.n	8002a0a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	2201      	movs	r2, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800296e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	43db      	mvns	r3, r3
 8002974:	69f9      	ldr	r1, [r7, #28]
 8002976:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800297a:	4013      	ands	r3, r2
 800297c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800298a:	461a      	mov	r2, r3
 800298c:	2301      	movs	r3, #1
 800298e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	799b      	ldrb	r3, [r3, #6]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d132      	bne.n	80029fe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3320      	adds	r3, #32
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4403      	add	r3, r0
 80029b8:	331c      	adds	r3, #28
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4419      	add	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4403      	add	r3, r0
 80029cc:	3320      	adds	r3, #32
 80029ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d113      	bne.n	80029fe <HAL_PCD_IRQHandler+0x3a2>
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	3324      	adds	r3, #36	@ 0x24
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d108      	bne.n	80029fe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029f6:	461a      	mov	r2, r3
 80029f8:	2101      	movs	r1, #1
 80029fa:	f003 faf9 	bl	8005ff0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f008 fcea 	bl	800b3de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a20:	461a      	mov	r2, r3
 8002a22:	2308      	movs	r3, #8
 8002a24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2310      	movs	r3, #16
 8002a40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2340      	movs	r3, #64	@ 0x40
 8002a5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d023      	beq.n	8002ab0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a6a:	6a38      	ldr	r0, [r7, #32]
 8002a6c:	f002 fae0 	bl	8005030 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	3310      	adds	r3, #16
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	3304      	adds	r3, #4
 8002a82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	78db      	ldrb	r3, [r3, #3]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d108      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f008 fd2d 	bl	800b4f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2302      	movs	r3, #2
 8002aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002aba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fcbd 	bl	800343c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f af2e 	bne.w	8002932 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 f9c4 	bl	8005e68 <USB_ReadInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aea:	d122      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d108      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b12:	2100      	movs	r1, #0
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fea3 	bl	8003860 <HAL_PCDEx_LPM_Callback>
 8002b1a:	e002      	b.n	8002b22 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f008 fccb 	bl	800b4b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 f996 	bl	8005e68 <USB_ReadInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b46:	d112      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d102      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f008 fc87 	bl	800b46c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b6c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 f978 	bl	8005e68 <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b82:	f040 80b7 	bne.w	8002cf4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fa45 	bl	8005030 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002baa:	e046      	b.n	8002c3a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bbe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bd0:	0151      	lsls	r1, r2, #5
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	440a      	add	r2, r1
 8002bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002bda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bde:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bec:	461a      	mov	r2, r3
 8002bee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bf2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c04:	0151      	lsls	r1, r2, #5
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	440a      	add	r2, r1
 8002c0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c24:	0151      	lsls	r1, r2, #5
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	440a      	add	r2, r1
 8002c2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c32:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c36:	3301      	adds	r3, #1
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d3b2      	bcc.n	8002bac <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c54:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c58:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7bdb      	ldrb	r3, [r3, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d016      	beq.n	8002c90 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c72:	f043 030b 	orr.w	r3, r3, #11
 8002c76:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c88:	f043 030b 	orr.w	r3, r3, #11
 8002c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8e:	e015      	b.n	8002cbc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ca2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ca6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cb6:	f043 030b 	orr.w	r3, r3, #11
 8002cba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002cce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f003 f986 	bl	8005ff0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 f8b5 	bl	8005e68 <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d08:	d123      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 f94b 	bl	8005faa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 fa02 	bl	8005122 <USB_GetDevSpeed>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681c      	ldr	r4, [r3, #0]
 8002d2a:	f001 fa09 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8002d2e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d34:	461a      	mov	r2, r3
 8002d36:	4620      	mov	r0, r4
 8002d38:	f001 ff06 	bl	8004b48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f008 fb76 	bl	800b42e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 f886 	bl	8005e68 <USB_ReadInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d10a      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f008 fb53 	bl	800b412 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f002 0208 	and.w	r2, r2, #8
 8002d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 f871 	bl	8005e68 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8c:	2b80      	cmp	r3, #128	@ 0x80
 8002d8e:	d123      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da0:	e014      	b.n	8002dcc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fb0a 	bl	80033da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	3301      	adds	r3, #1
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	791b      	ldrb	r3, [r3, #4]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d3e4      	bcc.n	8002da2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 f843 	bl	8005e68 <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dec:	d13c      	bne.n	8002e68 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dee:	2301      	movs	r3, #1
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df2:	e02b      	b.n	8002e4c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3318      	adds	r3, #24
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d115      	bne.n	8002e46 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	da12      	bge.n	8002e46 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3317      	adds	r3, #23
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 faca 	bl	80033da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	3301      	adds	r3, #1
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	791b      	ldrb	r3, [r3, #4]
 8002e50:	461a      	mov	r2, r3
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d3cd      	bcc.n	8002df4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 fffb 	bl	8005e68 <USB_ReadInterrupts>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e7c:	d156      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e7e:	2301      	movs	r3, #1
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e82:	e045      	b.n	8002f10 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d12e      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002eac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	da2b      	bge.n	8002f0a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ebe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d121      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f06:	6053      	str	r3, [r2, #4]
            break;
 8002f08:	e008      	b.n	8002f1c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	791b      	ldrb	r3, [r3, #4]
 8002f14:	461a      	mov	r2, r3
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d3b3      	bcc.n	8002e84 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f002 ff99 	bl	8005e68 <USB_ReadInterrupts>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f40:	d10a      	bne.n	8002f58 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f008 faea 	bl	800b51c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f002 ff83 	bl	8005e68 <USB_ReadInterrupts>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d115      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f008 fada 	bl	800b538 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6859      	ldr	r1, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	e000      	b.n	8002f98 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002f96:	bf00      	nop
    }
  }
}
 8002f98:	3734      	adds	r7, #52	@ 0x34
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}

08002f9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_PCD_SetAddress+0x1a>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e012      	b.n	8002fde <HAL_PCD_SetAddress+0x40>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 fee2 	bl	8005d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	4608      	mov	r0, r1
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	70fb      	strb	r3, [r7, #3]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	803b      	strh	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da0f      	bge.n	800302c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3310      	adds	r3, #16
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	705a      	strb	r2, [r3, #1]
 800302a:	e00f      	b.n	800304c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 020f 	and.w	r2, r3, #15
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	3304      	adds	r3, #4
 8003044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	b2da      	uxtb	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003058:	883b      	ldrh	r3, [r7, #0]
 800305a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	78ba      	ldrb	r2, [r7, #2]
 8003066:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	785b      	ldrb	r3, [r3, #1]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d004      	beq.n	800307a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800307a:	78bb      	ldrb	r3, [r7, #2]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d102      	bne.n	8003086 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_PCD_EP_Open+0xae>
 8003090:	2302      	movs	r3, #2
 8003092:	e00e      	b.n	80030b2 <HAL_PCD_EP_Open+0xcc>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f002 f862 	bl	800516c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80030b0:	7afb      	ldrb	r3, [r7, #11]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da0f      	bge.n	80030ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 020f 	and.w	r2, r3, #15
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	3310      	adds	r3, #16
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	3304      	adds	r3, #4
 80030e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	705a      	strb	r2, [r3, #1]
 80030ec:	e00f      	b.n	800310e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 020f 	and.w	r2, r3, #15
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_PCD_EP_Close+0x6e>
 8003124:	2302      	movs	r3, #2
 8003126:	e00e      	b.n	8003146 <HAL_PCD_EP_Close+0x8c>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68f9      	ldr	r1, [r7, #12]
 8003136:	4618      	mov	r0, r3
 8003138:	f002 f8a0 	bl	800527c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	460b      	mov	r3, r1
 800315c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	f003 020f 	and.w	r2, r3, #15
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2200      	movs	r2, #0
 8003188:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2200      	movs	r2, #0
 800318e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003190:	7afb      	ldrb	r3, [r7, #11]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	b2da      	uxtb	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	799b      	ldrb	r3, [r3, #6]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d102      	bne.n	80031aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	799b      	ldrb	r3, [r3, #6]
 80031b2:	461a      	mov	r2, r3
 80031b4:	6979      	ldr	r1, [r7, #20]
 80031b6:	f002 f93d 	bl	8005434 <USB_EPStartXfer>

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 020f 	and.w	r2, r3, #15
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	460b      	mov	r3, r1
 8003202:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003204:	7afb      	ldrb	r3, [r7, #11]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3310      	adds	r3, #16
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2200      	movs	r2, #0
 800322c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2201      	movs	r2, #1
 8003232:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003234:	7afb      	ldrb	r3, [r7, #11]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	b2da      	uxtb	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	799b      	ldrb	r3, [r3, #6]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d102      	bne.n	800324e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	799b      	ldrb	r3, [r3, #6]
 8003256:	461a      	mov	r2, r3
 8003258:	6979      	ldr	r1, [r7, #20]
 800325a:	f002 f8eb 	bl	8005434 <USB_EPStartXfer>

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	7912      	ldrb	r2, [r2, #4]
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e04f      	b.n	8003326 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800328a:	2b00      	cmp	r3, #0
 800328c:	da0f      	bge.n	80032ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	3310      	adds	r3, #16
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	705a      	strb	r2, [r3, #1]
 80032ac:	e00d      	b.n	80032ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_PCD_EP_SetStall+0x82>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e01d      	b.n	8003326 <HAL_PCD_EP_SetStall+0xbe>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fc79 	bl	8005bf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7999      	ldrb	r1, [r3, #6]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003316:	461a      	mov	r2, r3
 8003318:	f002 fe6a 	bl	8005ff0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	7912      	ldrb	r2, [r2, #4]
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e042      	b.n	80033d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800334c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003350:	2b00      	cmp	r3, #0
 8003352:	da0f      	bge.n	8003374 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	f003 020f 	and.w	r2, r3, #15
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	3310      	adds	r3, #16
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	3304      	adds	r3, #4
 800336a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	705a      	strb	r2, [r3, #1]
 8003372:	e00f      	b.n	8003394 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	f003 020f 	and.w	r2, r3, #15
 800337a:	4613      	mov	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	3304      	adds	r3, #4
 800338c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_PCD_EP_ClrStall+0x86>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e00e      	b.n	80033d2 <HAL_PCD_EP_ClrStall+0xa4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 fc82 	bl	8005ccc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	da0c      	bge.n	8003408 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	f003 020f 	and.w	r2, r3, #15
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	3310      	adds	r3, #16
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e00c      	b.n	8003422 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	f003 020f 	and.w	r2, r3, #15
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	3304      	adds	r3, #4
 8003420:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	4618      	mov	r0, r3
 800342a:	f002 faa1 	bl	8005970 <USB_EPStopXfer>
 800342e:	4603      	mov	r3, r0
 8003430:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003432:	7afb      	ldrb	r3, [r7, #11]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	@ 0x28
 8003440:	af02      	add	r7, sp, #8
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	3310      	adds	r3, #16
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	3304      	adds	r3, #4
 8003462:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	429a      	cmp	r2, r3
 800346e:	d901      	bls.n	8003474 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e06b      	b.n	800354c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	429a      	cmp	r2, r3
 8003488:	d902      	bls.n	8003490 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	3303      	adds	r3, #3
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003498:	e02a      	b.n	80034f0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d902      	bls.n	80034b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3303      	adds	r3, #3
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68d9      	ldr	r1, [r3, #12]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	4603      	mov	r3, r0
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f002 faf6 	bl	8005ac4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	441a      	add	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	441a      	add	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	429a      	cmp	r2, r3
 8003504:	d809      	bhi.n	800351a <PCD_WriteEmptyTxFifo+0xde>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800350e:	429a      	cmp	r2, r3
 8003510:	d203      	bcs.n	800351a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1bf      	bne.n	800349a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	429a      	cmp	r2, r3
 8003524:	d811      	bhi.n	800354a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	2201      	movs	r2, #1
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800353a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	43db      	mvns	r3, r3
 8003540:	6939      	ldr	r1, [r7, #16]
 8003542:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003546:	4013      	ands	r3, r2
 8003548:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	333c      	adds	r3, #60	@ 0x3c
 800356c:	3304      	adds	r3, #4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	799b      	ldrb	r3, [r3, #6]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d17b      	bne.n	8003682 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d015      	beq.n	80035c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	4a61      	ldr	r2, [pc, #388]	@ (800371c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	f240 80b9 	bls.w	8003710 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80b3 	beq.w	8003710 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b6:	461a      	mov	r2, r3
 80035b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035bc:	6093      	str	r3, [r2, #8]
 80035be:	e0a7      	b.n	8003710 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d6:	461a      	mov	r2, r3
 80035d8:	2320      	movs	r3, #32
 80035da:	6093      	str	r3, [r2, #8]
 80035dc:	e098      	b.n	8003710 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 8093 	bne.w	8003710 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	4a4b      	ldr	r2, [pc, #300]	@ (800371c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d90f      	bls.n	8003612 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003608:	461a      	mov	r2, r3
 800360a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800360e:	6093      	str	r3, [r2, #8]
 8003610:	e07e      	b.n	8003710 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	0159      	lsls	r1, r3, #5
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	440b      	add	r3, r1
 8003634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363e:	1ad2      	subs	r2, r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d114      	bne.n	8003674 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800365c:	461a      	mov	r2, r3
 800365e:	2101      	movs	r1, #1
 8003660:	f002 fcc6 	bl	8005ff0 <USB_EP0_OutStart>
 8003664:	e006      	b.n	8003674 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	441a      	add	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	4619      	mov	r1, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f007 fe94 	bl	800b3a8 <HAL_PCD_DataOutStageCallback>
 8003680:	e046      	b.n	8003710 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	4a26      	ldr	r2, [pc, #152]	@ (8003720 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d124      	bne.n	80036d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a6:	6093      	str	r3, [r2, #8]
 80036a8:	e032      	b.n	8003710 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c0:	461a      	mov	r2, r3
 80036c2:	2320      	movs	r3, #32
 80036c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	4619      	mov	r1, r3
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f007 fe6b 	bl	800b3a8 <HAL_PCD_DataOutStageCallback>
 80036d2:	e01d      	b.n	8003710 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d114      	bne.n	8003704 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d108      	bne.n	8003704 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036fc:	461a      	mov	r2, r3
 80036fe:	2100      	movs	r1, #0
 8003700:	f002 fc76 	bl	8005ff0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f007 fe4c 	bl	800b3a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	4f54300a 	.word	0x4f54300a
 8003720:	4f54310a 	.word	0x4f54310a

08003724 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	333c      	adds	r3, #60	@ 0x3c
 800373c:	3304      	adds	r3, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a15      	ldr	r2, [pc, #84]	@ (80037ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d90e      	bls.n	8003778 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003770:	461a      	mov	r2, r3
 8003772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003776:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f007 fe03 	bl	800b384 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4a0a      	ldr	r2, [pc, #40]	@ (80037ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d90c      	bls.n	80037a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	799b      	ldrb	r3, [r3, #6]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d108      	bne.n	80037a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003798:	461a      	mov	r2, r3
 800379a:	2101      	movs	r1, #1
 800379c:	f002 fc28 	bl	8005ff0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	4f54300a 	.word	0x4f54300a

080037b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	70fb      	strb	r3, [r7, #3]
 80037bc:	4613      	mov	r3, r2
 80037be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037ce:	883b      	ldrh	r3, [r7, #0]
 80037d0:	0419      	lsls	r1, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	430a      	orrs	r2, r1
 80037da:	629a      	str	r2, [r3, #40]	@ 0x28
 80037dc:	e028      	b.n	8003830 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4413      	add	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e00d      	b.n	800380e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	3340      	adds	r3, #64	@ 0x40
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4413      	add	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	3301      	adds	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	3b01      	subs	r3, #1
 8003814:	429a      	cmp	r2, r3
 8003816:	d3ec      	bcc.n	80037f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003818:	883b      	ldrh	r3, [r7, #0]
 800381a:	0418      	lsls	r0, r3, #16
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	3b01      	subs	r3, #1
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	4302      	orrs	r2, r0
 8003828:	3340      	adds	r3, #64	@ 0x40
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e267      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d075      	beq.n	8003982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003896:	4b88      	ldr	r3, [pc, #544]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d00c      	beq.n	80038bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038a2:	4b85      	ldr	r3, [pc, #532]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d112      	bne.n	80038d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ae:	4b82      	ldr	r3, [pc, #520]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ba:	d10b      	bne.n	80038d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038bc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d05b      	beq.n	8003980 <HAL_RCC_OscConfig+0x108>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d157      	bne.n	8003980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e242      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038dc:	d106      	bne.n	80038ec <HAL_RCC_OscConfig+0x74>
 80038de:	4b76      	ldr	r3, [pc, #472]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a75      	ldr	r2, [pc, #468]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e01d      	b.n	8003928 <HAL_RCC_OscConfig+0xb0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0x98>
 80038f6:	4b70      	ldr	r3, [pc, #448]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a6f      	ldr	r2, [pc, #444]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6c      	ldr	r2, [pc, #432]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0xb0>
 8003910:	4b69      	ldr	r3, [pc, #420]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a68      	ldr	r2, [pc, #416]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b66      	ldr	r3, [pc, #408]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a65      	ldr	r2, [pc, #404]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d013      	beq.n	8003958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fd fcbc 	bl	80012ac <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003938:	f7fd fcb8 	bl	80012ac <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	@ 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e207      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0xc0>
 8003956:	e014      	b.n	8003982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fd fca8 	bl	80012ac <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003960:	f7fd fca4 	bl	80012ac <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	@ 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e1f3      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	4b51      	ldr	r3, [pc, #324]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0xe8>
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d063      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800398e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d11c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a6:	4b44      	ldr	r3, [pc, #272]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d116      	bne.n	80039e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b2:	4b41      	ldr	r3, [pc, #260]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_RCC_OscConfig+0x152>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e1c7      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4937      	ldr	r1, [pc, #220]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	e03a      	b.n	8003a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e8:	4b34      	ldr	r3, [pc, #208]	@ (8003abc <HAL_RCC_OscConfig+0x244>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fd fc5d 	bl	80012ac <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f6:	f7fd fc59 	bl	80012ac <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1a8      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a14:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4925      	ldr	r1, [pc, #148]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
 8003a28:	e015      	b.n	8003a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2a:	4b24      	ldr	r3, [pc, #144]	@ (8003abc <HAL_RCC_OscConfig+0x244>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fc3c 	bl	80012ac <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a38:	f7fd fc38 	bl	80012ac <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e187      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d036      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d016      	beq.n	8003a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <HAL_RCC_OscConfig+0x248>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd fc1c 	bl	80012ac <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fd fc18 	bl	80012ac <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e167      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x200>
 8003a96:	e01b      	b.n	8003ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a98:	4b09      	ldr	r3, [pc, #36]	@ (8003ac0 <HAL_RCC_OscConfig+0x248>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9e:	f7fd fc05 	bl	80012ac <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	e00e      	b.n	8003ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa6:	f7fd fc01 	bl	80012ac <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d907      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e150      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	42470000 	.word	0x42470000
 8003ac0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac4:	4b88      	ldr	r3, [pc, #544]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ea      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8097 	beq.w	8003c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae2:	4b81      	ldr	r3, [pc, #516]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003afe:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0e:	4b77      	ldr	r3, [pc, #476]	@ (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d118      	bne.n	8003b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1a:	4b74      	ldr	r3, [pc, #464]	@ (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a73      	ldr	r2, [pc, #460]	@ (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b26:	f7fd fbc1 	bl	80012ac <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2e:	f7fd fbbd 	bl	80012ac <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e10c      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b40:	4b6a      	ldr	r3, [pc, #424]	@ (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d106      	bne.n	8003b62 <HAL_RCC_OscConfig+0x2ea>
 8003b54:	4b64      	ldr	r3, [pc, #400]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b58:	4a63      	ldr	r2, [pc, #396]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b60:	e01c      	b.n	8003b9c <HAL_RCC_OscConfig+0x324>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x30c>
 8003b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b76:	4b5c      	ldr	r3, [pc, #368]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b82:	e00b      	b.n	8003b9c <HAL_RCC_OscConfig+0x324>
 8003b84:	4b58      	ldr	r3, [pc, #352]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b88:	4a57      	ldr	r2, [pc, #348]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b90:	4b55      	ldr	r3, [pc, #340]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	4a54      	ldr	r2, [pc, #336]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b96:	f023 0304 	bic.w	r3, r3, #4
 8003b9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fd fb82 	bl	80012ac <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fd fb7e 	bl	80012ac <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0cb      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc2:	4b49      	ldr	r3, [pc, #292]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ee      	beq.n	8003bac <HAL_RCC_OscConfig+0x334>
 8003bce:	e014      	b.n	8003bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd0:	f7fd fb6c 	bl	80012ac <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fd fb68 	bl	80012ac <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e0b5      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bee:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ee      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c00:	4b39      	ldr	r3, [pc, #228]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	4a38      	ldr	r2, [pc, #224]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a1 	beq.w	8003d58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c16:	4b34      	ldr	r3, [pc, #208]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d05c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d141      	bne.n	8003cae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2a:	4b31      	ldr	r3, [pc, #196]	@ (8003cf0 <HAL_RCC_OscConfig+0x478>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fd fb3c 	bl	80012ac <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c38:	f7fd fb38 	bl	80012ac <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e087      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	019b      	lsls	r3, r3, #6
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	491b      	ldr	r1, [pc, #108]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c80:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf0 <HAL_RCC_OscConfig+0x478>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c86:	f7fd fb11 	bl	80012ac <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8e:	f7fd fb0d 	bl	80012ac <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e05c      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca0:	4b11      	ldr	r3, [pc, #68]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x416>
 8003cac:	e054      	b.n	8003d58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cae:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <HAL_RCC_OscConfig+0x478>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fafa 	bl	80012ac <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd faf6 	bl	80012ac <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e045      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x444>
 8003cda:	e03d      	b.n	8003d58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e038      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <HAL_RCC_OscConfig+0x4ec>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d028      	beq.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d121      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d11a      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d111      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d107      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800

08003d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0cc      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b68      	ldr	r3, [pc, #416]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d90c      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b65      	ldr	r3, [pc, #404]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b63      	ldr	r3, [pc, #396]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0b8      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dbc:	4b59      	ldr	r3, [pc, #356]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a58      	ldr	r2, [pc, #352]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003dc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd4:	4b53      	ldr	r3, [pc, #332]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a52      	ldr	r2, [pc, #328]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	4b50      	ldr	r3, [pc, #320]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	494d      	ldr	r1, [pc, #308]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d044      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	4b47      	ldr	r3, [pc, #284]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d119      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e07f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	4b3f      	ldr	r3, [pc, #252]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e06f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e36:	4b3b      	ldr	r3, [pc, #236]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e067      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e46:	4b37      	ldr	r3, [pc, #220]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 0203 	bic.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4934      	ldr	r1, [pc, #208]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e58:	f7fd fa28 	bl	80012ac <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e60:	f7fd fa24 	bl	80012ac <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e04f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	4b2b      	ldr	r3, [pc, #172]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 020c 	and.w	r2, r3, #12
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d1eb      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e88:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d20c      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b22      	ldr	r3, [pc, #136]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b20      	ldr	r3, [pc, #128]	@ (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e032      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebc:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4916      	ldr	r1, [pc, #88]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eda:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	490e      	ldr	r1, [pc, #56]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eee:	f000 f821 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	490a      	ldr	r1, [pc, #40]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	5ccb      	ldrb	r3, [r1, r3]
 8003f02:	fa22 f303 	lsr.w	r3, r2, r3
 8003f06:	4a09      	ldr	r2, [pc, #36]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f0a:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fd f8ae 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023c00 	.word	0x40023c00
 8003f24:	40023800 	.word	0x40023800
 8003f28:	0800bba4 	.word	0x0800bba4
 8003f2c:	20000004 	.word	0x20000004
 8003f30:	20000008 	.word	0x20000008

08003f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f38:	b094      	sub	sp, #80	@ 0x50
 8003f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f4c:	4b79      	ldr	r3, [pc, #484]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d00d      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x40>
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	f200 80e1 	bhi.w	8004120 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x34>
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d003      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f66:	e0db      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b73      	ldr	r3, [pc, #460]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f6c:	e0db      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f6e:	4b73      	ldr	r3, [pc, #460]	@ (800413c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f72:	e0d8      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f74:	4b6f      	ldr	r3, [pc, #444]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d063      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	2200      	movs	r2, #0
 8003f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	462b      	mov	r3, r5
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	0159      	lsls	r1, r3, #5
 8003fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb8:	0150      	lsls	r0, r2, #5
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	1a51      	subs	r1, r2, r1
 8003fc2:	6139      	str	r1, [r7, #16]
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd8:	4659      	mov	r1, fp
 8003fda:	018b      	lsls	r3, r1, #6
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	018a      	lsls	r2, r1, #6
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fec:	4659      	mov	r1, fp
 8003fee:	eb63 0901 	sbc.w	r9, r3, r1
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004006:	4690      	mov	r8, r2
 8004008:	4699      	mov	r9, r3
 800400a:	4623      	mov	r3, r4
 800400c:	eb18 0303 	adds.w	r3, r8, r3
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	462b      	mov	r3, r5
 8004014:	eb49 0303 	adc.w	r3, r9, r3
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004026:	4629      	mov	r1, r5
 8004028:	024b      	lsls	r3, r1, #9
 800402a:	4621      	mov	r1, r4
 800402c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004030:	4621      	mov	r1, r4
 8004032:	024a      	lsls	r2, r1, #9
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800403a:	2200      	movs	r2, #0
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004044:	f7fc f8cc 	bl	80001e0 <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4613      	mov	r3, r2
 800404e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004050:	e058      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004052:	4b38      	ldr	r3, [pc, #224]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	2200      	movs	r2, #0
 800405a:	4618      	mov	r0, r3
 800405c:	4611      	mov	r1, r2
 800405e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	2300      	movs	r3, #0
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
 8004068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	f04f 0000 	mov.w	r0, #0
 8004074:	f04f 0100 	mov.w	r1, #0
 8004078:	0159      	lsls	r1, r3, #5
 800407a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407e:	0150      	lsls	r0, r2, #5
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4641      	mov	r1, r8
 8004086:	ebb2 0a01 	subs.w	sl, r2, r1
 800408a:	4649      	mov	r1, r9
 800408c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800409c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040a4:	ebb2 040a 	subs.w	r4, r2, sl
 80040a8:	eb63 050b 	sbc.w	r5, r3, fp
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	00eb      	lsls	r3, r5, #3
 80040b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ba:	00e2      	lsls	r2, r4, #3
 80040bc:	4614      	mov	r4, r2
 80040be:	461d      	mov	r5, r3
 80040c0:	4643      	mov	r3, r8
 80040c2:	18e3      	adds	r3, r4, r3
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	464b      	mov	r3, r9
 80040c8:	eb45 0303 	adc.w	r3, r5, r3
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040da:	4629      	mov	r1, r5
 80040dc:	028b      	lsls	r3, r1, #10
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e4:	4621      	mov	r1, r4
 80040e6:	028a      	lsls	r2, r1, #10
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ee:	2200      	movs	r2, #0
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	61fa      	str	r2, [r7, #28]
 80040f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f8:	f7fc f872 	bl	80001e0 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004104:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	3301      	adds	r3, #1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x204>)
 8004122:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004128:	4618      	mov	r0, r3
 800412a:	3750      	adds	r7, #80	@ 0x50
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	00f42400 	.word	0x00f42400
 800413c:	007a1200 	.word	0x007a1200

08004140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004144:	4b03      	ldr	r3, [pc, #12]	@ (8004154 <HAL_RCC_GetHCLKFreq+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000004 	.word	0x20000004

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800415c:	f7ff fff0 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	@ (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40023800 	.word	0x40023800
 800417c:	0800bbb4 	.word	0x0800bbb4

08004180 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	220f      	movs	r2, #15
 800418e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004190:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <HAL_RCC_GetClockConfig+0x5c>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0203 	and.w	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800419c:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <HAL_RCC_GetClockConfig+0x5c>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <HAL_RCC_GetClockConfig+0x5c>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041b4:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <HAL_RCC_GetClockConfig+0x5c>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	08db      	lsrs	r3, r3, #3
 80041ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041c2:	4b07      	ldr	r3, [pc, #28]	@ (80041e0 <HAL_RCC_GetClockConfig+0x60>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0207 	and.w	r2, r3, #7
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	601a      	str	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40023c00 	.word	0x40023c00

080041e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d105      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004208:	2b00      	cmp	r3, #0
 800420a:	d038      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800420c:	4b68      	ldr	r3, [pc, #416]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004212:	f7fd f84b 	bl	80012ac <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004218:	e008      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800421a:	f7fd f847 	bl	80012ac <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e0bd      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800422c:	4b61      	ldr	r3, [pc, #388]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	071b      	lsls	r3, r3, #28
 800424a:	495a      	ldr	r1, [pc, #360]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004252:	4b57      	ldr	r3, [pc, #348]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004258:	f7fd f828 	bl	80012ac <HAL_GetTick>
 800425c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004260:	f7fd f824 	bl	80012ac <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e09a      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004272:	4b50      	ldr	r3, [pc, #320]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8083 	beq.w	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	4b48      	ldr	r3, [pc, #288]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	4a47      	ldr	r2, [pc, #284]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429a:	6413      	str	r3, [r2, #64]	@ 0x40
 800429c:	4b45      	ldr	r3, [pc, #276]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042a8:	4b43      	ldr	r3, [pc, #268]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a42      	ldr	r2, [pc, #264]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fc fffa 	bl	80012ac <HAL_GetTick>
 80042b8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042bc:	f7fc fff6 	bl	80012ac <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e06c      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80042ce:	4b3a      	ldr	r3, [pc, #232]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042da:	4b36      	ldr	r3, [pc, #216]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d02f      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d028      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042f8:	4b2e      	ldr	r3, [pc, #184]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004300:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004302:	4b2e      	ldr	r3, [pc, #184]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004308:	4b2c      	ldr	r3, [pc, #176]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800430e:	4a29      	ldr	r2, [pc, #164]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004314:	4b27      	ldr	r3, [pc, #156]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d114      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004320:	f7fc ffc4 	bl	80012ac <HAL_GetTick>
 8004324:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	e00a      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fc ffc0 	bl	80012ac <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e034      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433e:	4b1d      	ldr	r3, [pc, #116]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ee      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004352:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004356:	d10d      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004358:	4b16      	ldr	r3, [pc, #88]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800436c:	4911      	ldr	r1, [pc, #68]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
 8004372:	e005      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004374:	4b0f      	ldr	r3, [pc, #60]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a0e      	ldr	r2, [pc, #56]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800437e:	6093      	str	r3, [r2, #8]
 8004380:	4b0c      	ldr	r3, [pc, #48]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004382:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438c:	4909      	ldr	r1, [pc, #36]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	4313      	orrs	r3, r2
 8004390:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	7d1a      	ldrb	r2, [r3, #20]
 80043a2:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80043a4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	42470068 	.word	0x42470068
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40007000 	.word	0x40007000
 80043bc:	42470e40 	.word	0x42470e40
 80043c0:	424711e0 	.word	0x424711e0

080043c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d141      	bne.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043e2:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043f8:	d131      	bne.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043fa:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043fc:	617b      	str	r3, [r7, #20]
          break;
 80043fe:	e031      	b.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004400:	4b1d      	ldr	r3, [pc, #116]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800440c:	d109      	bne.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800440e:	4b1a      	ldr	r3, [pc, #104]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004414:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004418:	4a19      	ldr	r2, [pc, #100]	@ (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800441a:	fbb2 f3f3 	udiv	r3, r2, r3
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	e008      	b.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004422:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800442c:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800442e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004432:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004434:	4b10      	ldr	r3, [pc, #64]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004448:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800444a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800444e:	0f1b      	lsrs	r3, r3, #28
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	617b      	str	r3, [r7, #20]
          break;
 800445c:	e002      	b.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
          break;
 8004462:	bf00      	nop
        }
      }
      break;
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8004466:	bf00      	nop
    }
  }
  return frequency;
 8004468:	697b      	ldr	r3, [r7, #20]
}
 800446a:	4618      	mov	r0, r3
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	00bb8000 	.word	0x00bb8000
 8004480:	007a1200 	.word	0x007a1200
 8004484:	00f42400 	.word	0x00f42400

08004488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e07b      	b.n	8004592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044aa:	d009      	beq.n	80044c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	61da      	str	r2, [r3, #28]
 80044b2:	e005      	b.n	80044c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fc fd80 	bl	8000fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004544:	ea42 0103 	orr.w	r1, r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	f003 0104 	and.w	r1, r3, #4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004566:	f003 0210 	and.w	r2, r3, #16
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e041      	b.n	8004630 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f839 	bl	8004638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f000 f9b1 	bl	8004940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	d001      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e044      	b.n	80046ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1e      	ldr	r2, [pc, #120]	@ (80046fc <HAL_TIM_Base_Start_IT+0xb0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d018      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x6c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468e:	d013      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x6c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1a      	ldr	r2, [pc, #104]	@ (8004700 <HAL_TIM_Base_Start_IT+0xb4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00e      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x6c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a19      	ldr	r2, [pc, #100]	@ (8004704 <HAL_TIM_Base_Start_IT+0xb8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x6c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <HAL_TIM_Base_Start_IT+0xbc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x6c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a16      	ldr	r2, [pc, #88]	@ (800470c <HAL_TIM_Base_Start_IT+0xc0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d111      	bne.n	80046dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b06      	cmp	r3, #6
 80046c8:	d010      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0201 	orr.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046da:	e007      	b.n	80046ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800
 8004708:	40000c00 	.word	0x40000c00
 800470c:	40014000 	.word	0x40014000

08004710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d020      	beq.n	8004774 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01b      	beq.n	8004774 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0202 	mvn.w	r2, #2
 8004744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f8d2 	bl	8004904 <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f8c4 	bl	80048f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f8d5 	bl	8004918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d020      	beq.n	80047c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01b      	beq.n	80047c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0204 	mvn.w	r2, #4
 8004790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8ac 	bl	8004904 <HAL_TIM_IC_CaptureCallback>
 80047ac:	e005      	b.n	80047ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f89e 	bl	80048f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f8af 	bl	8004918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d020      	beq.n	800480c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01b      	beq.n	800480c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0208 	mvn.w	r2, #8
 80047dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2204      	movs	r2, #4
 80047e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f886 	bl	8004904 <HAL_TIM_IC_CaptureCallback>
 80047f8:	e005      	b.n	8004806 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f878 	bl	80048f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f889 	bl	8004918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b00      	cmp	r3, #0
 8004814:	d020      	beq.n	8004858 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0210 	mvn.w	r2, #16
 8004828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2208      	movs	r2, #8
 800482e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f860 	bl	8004904 <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f852 	bl	80048f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f863 	bl	8004918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0201 	mvn.w	r2, #1
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fa58 	bl	8000d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00c      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8e6 	bl	8004a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00c      	beq.n	80048c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f834 	bl	800492c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00c      	beq.n	80048e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0220 	mvn.w	r2, #32
 80048e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f8b8 	bl	8004a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3a      	ldr	r2, [pc, #232]	@ (8004a3c <TIM_Base_SetConfig+0xfc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00f      	beq.n	8004978 <TIM_Base_SetConfig+0x38>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495e:	d00b      	beq.n	8004978 <TIM_Base_SetConfig+0x38>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a37      	ldr	r2, [pc, #220]	@ (8004a40 <TIM_Base_SetConfig+0x100>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <TIM_Base_SetConfig+0x38>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a36      	ldr	r2, [pc, #216]	@ (8004a44 <TIM_Base_SetConfig+0x104>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0x38>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a35      	ldr	r2, [pc, #212]	@ (8004a48 <TIM_Base_SetConfig+0x108>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d108      	bne.n	800498a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2b      	ldr	r2, [pc, #172]	@ (8004a3c <TIM_Base_SetConfig+0xfc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01b      	beq.n	80049ca <TIM_Base_SetConfig+0x8a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004998:	d017      	beq.n	80049ca <TIM_Base_SetConfig+0x8a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a28      	ldr	r2, [pc, #160]	@ (8004a40 <TIM_Base_SetConfig+0x100>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <TIM_Base_SetConfig+0x8a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a27      	ldr	r2, [pc, #156]	@ (8004a44 <TIM_Base_SetConfig+0x104>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00f      	beq.n	80049ca <TIM_Base_SetConfig+0x8a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a26      	ldr	r2, [pc, #152]	@ (8004a48 <TIM_Base_SetConfig+0x108>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00b      	beq.n	80049ca <TIM_Base_SetConfig+0x8a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a25      	ldr	r2, [pc, #148]	@ (8004a4c <TIM_Base_SetConfig+0x10c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <TIM_Base_SetConfig+0x8a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a24      	ldr	r2, [pc, #144]	@ (8004a50 <TIM_Base_SetConfig+0x110>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <TIM_Base_SetConfig+0x8a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a23      	ldr	r2, [pc, #140]	@ (8004a54 <TIM_Base_SetConfig+0x114>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d108      	bne.n	80049dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0e      	ldr	r2, [pc, #56]	@ (8004a3c <TIM_Base_SetConfig+0xfc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d103      	bne.n	8004a10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d105      	bne.n	8004a2e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	611a      	str	r2, [r3, #16]
  }
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a80:	b084      	sub	sp, #16
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	f107 001c 	add.w	r0, r7, #28
 8004a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d123      	bne.n	8004ae2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d105      	bne.n	8004ad6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 fae8 	bl	80060ac <USB_CoreReset>
 8004adc:	4603      	mov	r3, r0
 8004ade:	73fb      	strb	r3, [r7, #15]
 8004ae0:	e01b      	b.n	8004b1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 fadc 	bl	80060ac <USB_CoreReset>
 8004af4:	4603      	mov	r3, r0
 8004af6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004af8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b0c:	e005      	b.n	8004b1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b1a:	7fbb      	ldrb	r3, [r7, #30]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10b      	bne.n	8004b38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f043 0206 	orr.w	r2, r3, #6
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f043 0220 	orr.w	r2, r3, #32
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b44:	b004      	add	sp, #16
 8004b46:	4770      	bx	lr

08004b48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d165      	bne.n	8004c28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4a41      	ldr	r2, [pc, #260]	@ (8004c64 <USB_SetTurnaroundTime+0x11c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d906      	bls.n	8004b72 <USB_SetTurnaroundTime+0x2a>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4a40      	ldr	r2, [pc, #256]	@ (8004c68 <USB_SetTurnaroundTime+0x120>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d202      	bcs.n	8004b72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e062      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4a3c      	ldr	r2, [pc, #240]	@ (8004c68 <USB_SetTurnaroundTime+0x120>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d306      	bcc.n	8004b88 <USB_SetTurnaroundTime+0x40>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c6c <USB_SetTurnaroundTime+0x124>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d202      	bcs.n	8004b88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b82:	230e      	movs	r3, #14
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e057      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4a38      	ldr	r2, [pc, #224]	@ (8004c6c <USB_SetTurnaroundTime+0x124>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d306      	bcc.n	8004b9e <USB_SetTurnaroundTime+0x56>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4a37      	ldr	r2, [pc, #220]	@ (8004c70 <USB_SetTurnaroundTime+0x128>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d202      	bcs.n	8004b9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b98:	230d      	movs	r3, #13
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	e04c      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4a33      	ldr	r2, [pc, #204]	@ (8004c70 <USB_SetTurnaroundTime+0x128>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d306      	bcc.n	8004bb4 <USB_SetTurnaroundTime+0x6c>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4a32      	ldr	r2, [pc, #200]	@ (8004c74 <USB_SetTurnaroundTime+0x12c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d802      	bhi.n	8004bb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004bae:	230c      	movs	r3, #12
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e041      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8004c74 <USB_SetTurnaroundTime+0x12c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d906      	bls.n	8004bca <USB_SetTurnaroundTime+0x82>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4a2e      	ldr	r2, [pc, #184]	@ (8004c78 <USB_SetTurnaroundTime+0x130>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d802      	bhi.n	8004bca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004bc4:	230b      	movs	r3, #11
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	e036      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004c78 <USB_SetTurnaroundTime+0x130>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d906      	bls.n	8004be0 <USB_SetTurnaroundTime+0x98>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4a29      	ldr	r2, [pc, #164]	@ (8004c7c <USB_SetTurnaroundTime+0x134>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d802      	bhi.n	8004be0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004bda:	230a      	movs	r3, #10
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e02b      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4a26      	ldr	r2, [pc, #152]	@ (8004c7c <USB_SetTurnaroundTime+0x134>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d906      	bls.n	8004bf6 <USB_SetTurnaroundTime+0xae>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4a25      	ldr	r2, [pc, #148]	@ (8004c80 <USB_SetTurnaroundTime+0x138>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d202      	bcs.n	8004bf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bf0:	2309      	movs	r3, #9
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e020      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4a21      	ldr	r2, [pc, #132]	@ (8004c80 <USB_SetTurnaroundTime+0x138>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d306      	bcc.n	8004c0c <USB_SetTurnaroundTime+0xc4>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4a20      	ldr	r2, [pc, #128]	@ (8004c84 <USB_SetTurnaroundTime+0x13c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d802      	bhi.n	8004c0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c06:	2308      	movs	r3, #8
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e015      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004c84 <USB_SetTurnaroundTime+0x13c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d906      	bls.n	8004c22 <USB_SetTurnaroundTime+0xda>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4a1c      	ldr	r2, [pc, #112]	@ (8004c88 <USB_SetTurnaroundTime+0x140>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d202      	bcs.n	8004c22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c1c:	2307      	movs	r3, #7
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e00a      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c22:	2306      	movs	r3, #6
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e007      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c2e:	2309      	movs	r3, #9
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e001      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c34:	2309      	movs	r3, #9
 8004c36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	029b      	lsls	r3, r3, #10
 8004c4c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	00d8acbf 	.word	0x00d8acbf
 8004c68:	00e4e1c0 	.word	0x00e4e1c0
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	01067380 	.word	0x01067380
 8004c74:	011a499f 	.word	0x011a499f
 8004c78:	01312cff 	.word	0x01312cff
 8004c7c:	014ca43f 	.word	0x014ca43f
 8004c80:	016e3600 	.word	0x016e3600
 8004c84:	01a6ab1f 	.word	0x01a6ab1f
 8004c88:	01e84800 	.word	0x01e84800

08004c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f023 0201 	bic.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d115      	bne.n	8004d1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cfe:	200a      	movs	r0, #10
 8004d00:	f7fc fae0 	bl	80012c4 <HAL_Delay>
      ms += 10U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	330a      	adds	r3, #10
 8004d08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 f93f 	bl	8005f8e <USB_GetMode>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d01e      	beq.n	8004d54 <USB_SetCurrentMode+0x84>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d1a:	d9f0      	bls.n	8004cfe <USB_SetCurrentMode+0x2e>
 8004d1c:	e01a      	b.n	8004d54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d115      	bne.n	8004d50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d30:	200a      	movs	r0, #10
 8004d32:	f7fc fac7 	bl	80012c4 <HAL_Delay>
      ms += 10U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	330a      	adds	r3, #10
 8004d3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f001 f926 	bl	8005f8e <USB_GetMode>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <USB_SetCurrentMode+0x84>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d4c:	d9f0      	bls.n	8004d30 <USB_SetCurrentMode+0x60>
 8004d4e:	e001      	b.n	8004d54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e005      	b.n	8004d60 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d58:	d101      	bne.n	8004d5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d68:	b084      	sub	sp, #16
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e009      	b.n	8004d9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3340      	adds	r3, #64	@ 0x40
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b0e      	cmp	r3, #14
 8004da0:	d9f2      	bls.n	8004d88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004da2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d11c      	bne.n	8004de4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dda:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004de2:	e00b      	b.n	8004dfc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10d      	bne.n	8004e2c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e18:	2100      	movs	r1, #0
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f968 	bl	80050f0 <USB_SetDevSpeed>
 8004e20:	e008      	b.n	8004e34 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e22:	2101      	movs	r1, #1
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f963 	bl	80050f0 <USB_SetDevSpeed>
 8004e2a:	e003      	b.n	8004e34 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e2c:	2103      	movs	r1, #3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f95e 	bl	80050f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e34:	2110      	movs	r1, #16
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8fa 	bl	8005030 <USB_FlushTxFifo>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f924 	bl	8005094 <USB_FlushRxFifo>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e68:	461a      	mov	r2, r3
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e74:	461a      	mov	r2, r3
 8004e76:	2300      	movs	r3, #0
 8004e78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	e043      	b.n	8004f08 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e96:	d118      	bne.n	8004eca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e013      	b.n	8004edc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e008      	b.n	8004edc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2300      	movs	r3, #0
 8004eec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004efa:	461a      	mov	r2, r3
 8004efc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3301      	adds	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d3b5      	bcc.n	8004e80 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f14:	2300      	movs	r3, #0
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	e043      	b.n	8004fa2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f30:	d118      	bne.n	8004f64 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f44:	461a      	mov	r2, r3
 8004f46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	e013      	b.n	8004f76 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e008      	b.n	8004f76 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f70:	461a      	mov	r2, r3
 8004f72:	2300      	movs	r3, #0
 8004f74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f82:	461a      	mov	r2, r3
 8004f84:	2300      	movs	r3, #0
 8004f86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f94:	461a      	mov	r2, r3
 8004f96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d3b5      	bcc.n	8004f1a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004fce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f043 0210 	orr.w	r2, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	4b10      	ldr	r3, [pc, #64]	@ (800502c <USB_DevInit+0x2c4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ff0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f043 0208 	orr.w	r2, r3, #8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005004:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800501c:	7dfb      	ldrb	r3, [r7, #23]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005028:	b004      	add	sp, #16
 800502a:	4770      	bx	lr
 800502c:	803c3800 	.word	0x803c3800

08005030 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800504a:	d901      	bls.n	8005050 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e01b      	b.n	8005088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	daf2      	bge.n	800503e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	019b      	lsls	r3, r3, #6
 8005060:	f043 0220 	orr.w	r2, r3, #32
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005074:	d901      	bls.n	800507a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e006      	b.n	8005088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b20      	cmp	r3, #32
 8005084:	d0f0      	beq.n	8005068 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ac:	d901      	bls.n	80050b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e018      	b.n	80050e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	daf2      	bge.n	80050a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2210      	movs	r2, #16
 80050c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3301      	adds	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050d0:	d901      	bls.n	80050d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e006      	b.n	80050e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d0f0      	beq.n	80050c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005110:	4313      	orrs	r3, r2
 8005112:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005122:	b480      	push	{r7}
 8005124:	b087      	sub	sp, #28
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0306 	and.w	r3, r3, #6
 800513a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]
 8005146:	e00a      	b.n	800515e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d002      	beq.n	8005154 <USB_GetDevSpeed+0x32>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b06      	cmp	r3, #6
 8005152:	d102      	bne.n	800515a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005154:	2302      	movs	r3, #2
 8005156:	75fb      	strb	r3, [r7, #23]
 8005158:	e001      	b.n	800515e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800515a:	230f      	movs	r3, #15
 800515c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800515e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005160:	4618      	mov	r0, r3
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d13a      	bne.n	80051fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	2101      	movs	r1, #1
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	b29b      	uxth	r3, r3
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d155      	bne.n	800526c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	791b      	ldrb	r3, [r3, #4]
 80051da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	059b      	lsls	r3, r3, #22
 80051e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051e4:	4313      	orrs	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	e036      	b.n	800526c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005204:	69da      	ldr	r2, [r3, #28]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	2101      	movs	r1, #1
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	68f9      	ldr	r1, [r7, #12]
 8005218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800521c:	4313      	orrs	r3, r2
 800521e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d11a      	bne.n	800526c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	791b      	ldrb	r3, [r3, #4]
 8005250:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005252:	430b      	orrs	r3, r1
 8005254:	4313      	orrs	r3, r2
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800526a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d161      	bne.n	800535c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052ae:	d11f      	bne.n	80052f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	2101      	movs	r1, #1
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	b29b      	uxth	r3, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	68f9      	ldr	r1, [r7, #12]
 800530c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005310:	4013      	ands	r3, r2
 8005312:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	2101      	movs	r1, #1
 8005326:	fa01 f303 	lsl.w	r3, r1, r3
 800532a:	b29b      	uxth	r3, r3
 800532c:	43db      	mvns	r3, r3
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005334:	4013      	ands	r3, r2
 8005336:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	0159      	lsls	r1, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	440b      	add	r3, r1
 800534e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005352:	4619      	mov	r1, r3
 8005354:	4b35      	ldr	r3, [pc, #212]	@ (800542c <USB_DeactivateEndpoint+0x1b0>)
 8005356:	4013      	ands	r3, r2
 8005358:	600b      	str	r3, [r1, #0]
 800535a:	e060      	b.n	800541e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800536e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005372:	d11f      	bne.n	80053b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800538e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005392:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	2101      	movs	r1, #1
 80053c6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	43db      	mvns	r3, r3
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053d4:	4013      	ands	r3, r2
 80053d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	2101      	movs	r1, #1
 80053ea:	fa01 f303 	lsl.w	r3, r1, r3
 80053ee:	041b      	lsls	r3, r3, #16
 80053f0:	43db      	mvns	r3, r3
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053f8:	4013      	ands	r3, r2
 80053fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	0159      	lsls	r1, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	440b      	add	r3, r1
 8005412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005416:	4619      	mov	r1, r3
 8005418:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <USB_DeactivateEndpoint+0x1b4>)
 800541a:	4013      	ands	r3, r2
 800541c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	ec337800 	.word	0xec337800
 8005430:	eff37800 	.word	0xeff37800

08005434 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	@ 0x28
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	2b01      	cmp	r3, #1
 8005452:	f040 817f 	bne.w	8005754 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d132      	bne.n	80054c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005478:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800547c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800549c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054bc:	0cdb      	lsrs	r3, r3, #19
 80054be:	04db      	lsls	r3, r3, #19
 80054c0:	6113      	str	r3, [r2, #16]
 80054c2:	e097      	b.n	80055f4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054de:	0cdb      	lsrs	r3, r3, #19
 80054e0:	04db      	lsls	r3, r3, #19
 80054e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005502:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005506:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d11a      	bne.n	8005544 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	429a      	cmp	r2, r3
 8005518:	d903      	bls.n	8005522 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	440a      	add	r2, r1
 8005538:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800553c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005540:	6113      	str	r3, [r2, #16]
 8005542:	e044      	b.n	80055ce <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	4413      	add	r3, r2
 800554e:	1e5a      	subs	r2, r3, #1
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	fbb2 f3f3 	udiv	r3, r2, r3
 8005558:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	8afb      	ldrh	r3, [r7, #22]
 800556a:	04d9      	lsls	r1, r3, #19
 800556c:	4ba4      	ldr	r3, [pc, #656]	@ (8005800 <USB_EPStartXfer+0x3cc>)
 800556e:	400b      	ands	r3, r1
 8005570:	69b9      	ldr	r1, [r7, #24]
 8005572:	0148      	lsls	r0, r1, #5
 8005574:	69f9      	ldr	r1, [r7, #28]
 8005576:	4401      	add	r1, r0
 8005578:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800557c:	4313      	orrs	r3, r2
 800557e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	791b      	ldrb	r3, [r3, #4]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d122      	bne.n	80055ce <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055a2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80055a6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	8afb      	ldrh	r3, [r7, #22]
 80055b8:	075b      	lsls	r3, r3, #29
 80055ba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80055be:	69b9      	ldr	r1, [r7, #24]
 80055c0:	0148      	lsls	r0, r1, #5
 80055c2:	69f9      	ldr	r1, [r7, #28]
 80055c4:	4401      	add	r1, r0
 80055c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055ca:	4313      	orrs	r3, r2
 80055cc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e4:	69b9      	ldr	r1, [r7, #24]
 80055e6:	0148      	lsls	r0, r1, #5
 80055e8:	69f9      	ldr	r1, [r7, #28]
 80055ea:	4401      	add	r1, r0
 80055ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055f0:	4313      	orrs	r3, r2
 80055f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d14b      	bne.n	8005692 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	791b      	ldrb	r3, [r3, #4]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d128      	bne.n	8005670 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d110      	bne.n	8005650 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005648:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	e00f      	b.n	8005670 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800566a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800566e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800568a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e166      	b.n	8005960 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056b0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	791b      	ldrb	r3, [r3, #4]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d015      	beq.n	80056e6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 814e 	beq.w	8005960 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	69f9      	ldr	r1, [r7, #28]
 80056dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056e0:	4313      	orrs	r3, r2
 80056e2:	634b      	str	r3, [r1, #52]	@ 0x34
 80056e4:	e13c      	b.n	8005960 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d110      	bne.n	8005718 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005710:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e00f      	b.n	8005738 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005736:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	68d9      	ldr	r1, [r3, #12]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	b298      	uxth	r0, r3
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	4603      	mov	r3, r0
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f9b9 	bl	8005ac4 <USB_WritePacket>
 8005752:	e105      	b.n	8005960 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	440a      	add	r2, r1
 800576a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800576e:	0cdb      	lsrs	r3, r3, #19
 8005770:	04db      	lsls	r3, r3, #19
 8005772:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800578e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005792:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005796:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d132      	bne.n	8005804 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	0148      	lsls	r0, r1, #5
 80057d0:	69f9      	ldr	r1, [r7, #28]
 80057d2:	4401      	add	r1, r0
 80057d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057d8:	4313      	orrs	r3, r2
 80057da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057fa:	6113      	str	r3, [r2, #16]
 80057fc:	e062      	b.n	80058c4 <USB_EPStartXfer+0x490>
 80057fe:	bf00      	nop
 8005800:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d123      	bne.n	8005854 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005822:	69b9      	ldr	r1, [r7, #24]
 8005824:	0148      	lsls	r0, r1, #5
 8005826:	69f9      	ldr	r1, [r7, #28]
 8005828:	4401      	add	r1, r0
 800582a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800582e:	4313      	orrs	r3, r2
 8005830:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800584c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005850:	6113      	str	r3, [r2, #16]
 8005852:	e037      	b.n	80058c4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	4413      	add	r3, r2
 800585e:	1e5a      	subs	r2, r3, #1
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	8afa      	ldrh	r2, [r7, #22]
 8005870:	fb03 f202 	mul.w	r2, r3, r2
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	8afb      	ldrh	r3, [r7, #22]
 8005888:	04d9      	lsls	r1, r3, #19
 800588a:	4b38      	ldr	r3, [pc, #224]	@ (800596c <USB_EPStartXfer+0x538>)
 800588c:	400b      	ands	r3, r1
 800588e:	69b9      	ldr	r1, [r7, #24]
 8005890:	0148      	lsls	r0, r1, #5
 8005892:	69f9      	ldr	r1, [r7, #28]
 8005894:	4401      	add	r1, r0
 8005896:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800589a:	4313      	orrs	r3, r2
 800589c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b4:	69b9      	ldr	r1, [r7, #24]
 80058b6:	0148      	lsls	r0, r1, #5
 80058b8:	69f9      	ldr	r1, [r7, #28]
 80058ba:	4401      	add	r1, r0
 80058bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058c0:	4313      	orrs	r3, r2
 80058c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d10d      	bne.n	80058e6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	68d9      	ldr	r1, [r3, #12]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e2:	460a      	mov	r2, r1
 80058e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	791b      	ldrb	r3, [r3, #4]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d128      	bne.n	8005940 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d110      	bne.n	8005920 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005918:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e00f      	b.n	8005940 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	440a      	add	r2, r1
 8005936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800593a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800593e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800595a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800595e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	1ff80000 	.word	0x1ff80000

08005970 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d14a      	bne.n	8005a24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059a6:	f040 8086 	bne.w	8005ab6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	7812      	ldrb	r2, [r2, #0]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d902      	bls.n	8005a08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
          break;
 8005a06:	e056      	b.n	8005ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a20:	d0e7      	beq.n	80059f2 <USB_EPStopXfer+0x82>
 8005a22:	e048      	b.n	8005ab6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a3c:	d13b      	bne.n	8005ab6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	7812      	ldrb	r2, [r2, #0]
 8005a52:	0151      	lsls	r1, r2, #5
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	440a      	add	r2, r1
 8005a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	7812      	ldrb	r2, [r2, #0]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d902      	bls.n	8005a9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
          break;
 8005a9a:	e00c      	b.n	8005ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab4:	d0e7      	beq.n	8005a86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	@ 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	4611      	mov	r1, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	71fb      	strb	r3, [r7, #7]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d123      	bne.n	8005b32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005aea:	88bb      	ldrh	r3, [r7, #4]
 8005aec:	3303      	adds	r3, #3
 8005aee:	089b      	lsrs	r3, r3, #2
 8005af0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e018      	b.n	8005b2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	031a      	lsls	r2, r3, #12
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b04:	461a      	mov	r2, r3
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3301      	adds	r3, #1
 8005b22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	3301      	adds	r3, #1
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d3e2      	bcc.n	8005af8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3724      	adds	r7, #36	@ 0x24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b08b      	sub	sp, #44	@ 0x2c
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	089b      	lsrs	r3, r3, #2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	623b      	str	r3, [r7, #32]
 8005b6a:	e014      	b.n	8005b96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	3301      	adds	r3, #1
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	3301      	adds	r3, #1
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	3301      	adds	r3, #1
 8005b94:	623b      	str	r3, [r7, #32]
 8005b96:	6a3a      	ldr	r2, [r7, #32]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d3e6      	bcc.n	8005b6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b9e:	8bfb      	ldrh	r3, [r7, #30]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01e      	beq.n	8005be2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f107 0310 	add.w	r3, r7, #16
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	701a      	strb	r2, [r3, #0]
      i++;
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005bd6:	8bfb      	ldrh	r3, [r7, #30]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bdc:	8bfb      	ldrh	r3, [r7, #30]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1ea      	bne.n	8005bb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	372c      	adds	r7, #44	@ 0x2c
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d12c      	bne.n	8005c66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	db12      	blt.n	8005c44 <USB_EPSetStall+0x54>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00f      	beq.n	8005c44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e02b      	b.n	8005cbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	db12      	blt.n	8005c9e <USB_EPSetStall+0xae>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00f      	beq.n	8005c9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d128      	bne.n	8005d3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	791b      	ldrb	r3, [r3, #4]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d003      	beq.n	8005d18 <USB_EPClearStall+0x4c>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	791b      	ldrb	r3, [r3, #4]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d138      	bne.n	8005d8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e027      	b.n	8005d8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	791b      	ldrb	r3, [r3, #4]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d003      	beq.n	8005d6a <USB_EPClearStall+0x9e>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	791b      	ldrb	r3, [r3, #4]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d10f      	bne.n	8005d8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005dba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005dcc:	68f9      	ldr	r1, [r7, #12]
 8005dce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e12:	f023 0302 	bic.w	r3, r3, #2
 8005e16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e40:	f023 0303 	bic.w	r3, r3, #3
 8005e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e54:	f043 0302 	orr.w	r3, r3, #2
 8005e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e80:	68fb      	ldr	r3, [r7, #12]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b085      	sub	sp, #20
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	0c1b      	lsrs	r3, r3, #16
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b085      	sub	sp, #20
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	b29b      	uxth	r3, r3
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b085      	sub	sp, #20
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4013      	ands	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f24:	68bb      	ldr	r3, [r7, #8]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b087      	sub	sp, #28
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f62:	01db      	lsls	r3, r3, #7
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f80:	68bb      	ldr	r3, [r7, #8]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005fc8:	f023 0307 	bic.w	r3, r3, #7
 8005fcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	333c      	adds	r3, #60	@ 0x3c
 8006006:	3304      	adds	r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4a26      	ldr	r2, [pc, #152]	@ (80060a8 <USB_EP0_OutStart+0xb8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d90a      	bls.n	800602a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006024:	d101      	bne.n	800602a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e037      	b.n	800609a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006030:	461a      	mov	r2, r3
 8006032:	2300      	movs	r3, #0
 8006034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006044:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006058:	f043 0318 	orr.w	r3, r3, #24
 800605c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800606c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006070:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d10f      	bne.n	8006098 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006092:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006096:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	4f54300a 	.word	0x4f54300a

080060ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060c4:	d901      	bls.n	80060ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e01b      	b.n	8006102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	daf2      	bge.n	80060b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f043 0201 	orr.w	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060ee:	d901      	bls.n	80060f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e006      	b.n	8006102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d0f0      	beq.n	80060e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
	...

08006110 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800611c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006120:	f005 fba2 	bl	800b868 <USBD_static_malloc>
 8006124:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d109      	bne.n	8006140 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	32b0      	adds	r2, #176	@ 0xb0
 8006136:	2100      	movs	r1, #0
 8006138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800613c:	2302      	movs	r3, #2
 800613e:	e0d4      	b.n	80062ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006140:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006144:	2100      	movs	r1, #0
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f005 fbd2 	bl	800b8f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32b0      	adds	r2, #176	@ 0xb0
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	32b0      	adds	r2, #176	@ 0xb0
 8006166:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	7c1b      	ldrb	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d138      	bne.n	80061ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006178:	4b5e      	ldr	r3, [pc, #376]	@ (80062f4 <USBD_CDC_Init+0x1e4>)
 800617a:	7819      	ldrb	r1, [r3, #0]
 800617c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006180:	2202      	movs	r2, #2
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f005 fa4d 	bl	800b622 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006188:	4b5a      	ldr	r3, [pc, #360]	@ (80062f4 <USBD_CDC_Init+0x1e4>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	f003 020f 	and.w	r2, r3, #15
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	440b      	add	r3, r1
 800619c:	3324      	adds	r3, #36	@ 0x24
 800619e:	2201      	movs	r2, #1
 80061a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061a2:	4b55      	ldr	r3, [pc, #340]	@ (80062f8 <USBD_CDC_Init+0x1e8>)
 80061a4:	7819      	ldrb	r1, [r3, #0]
 80061a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061aa:	2202      	movs	r2, #2
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f005 fa38 	bl	800b622 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061b2:	4b51      	ldr	r3, [pc, #324]	@ (80062f8 <USBD_CDC_Init+0x1e8>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f003 020f 	and.w	r2, r3, #15
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80061ca:	2201      	movs	r2, #1
 80061cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061ce:	4b4b      	ldr	r3, [pc, #300]	@ (80062fc <USBD_CDC_Init+0x1ec>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	440b      	add	r3, r1
 80061e2:	3326      	adds	r3, #38	@ 0x26
 80061e4:	2210      	movs	r2, #16
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	e035      	b.n	8006256 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061ea:	4b42      	ldr	r3, [pc, #264]	@ (80062f4 <USBD_CDC_Init+0x1e4>)
 80061ec:	7819      	ldrb	r1, [r3, #0]
 80061ee:	2340      	movs	r3, #64	@ 0x40
 80061f0:	2202      	movs	r2, #2
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f005 fa15 	bl	800b622 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80061f8:	4b3e      	ldr	r3, [pc, #248]	@ (80062f4 <USBD_CDC_Init+0x1e4>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f003 020f 	and.w	r2, r3, #15
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	3324      	adds	r3, #36	@ 0x24
 800620e:	2201      	movs	r2, #1
 8006210:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006212:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <USBD_CDC_Init+0x1e8>)
 8006214:	7819      	ldrb	r1, [r3, #0]
 8006216:	2340      	movs	r3, #64	@ 0x40
 8006218:	2202      	movs	r2, #2
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f005 fa01 	bl	800b622 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006220:	4b35      	ldr	r3, [pc, #212]	@ (80062f8 <USBD_CDC_Init+0x1e8>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006238:	2201      	movs	r2, #1
 800623a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800623c:	4b2f      	ldr	r3, [pc, #188]	@ (80062fc <USBD_CDC_Init+0x1ec>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f003 020f 	and.w	r2, r3, #15
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	3326      	adds	r3, #38	@ 0x26
 8006252:	2210      	movs	r2, #16
 8006254:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006256:	4b29      	ldr	r3, [pc, #164]	@ (80062fc <USBD_CDC_Init+0x1ec>)
 8006258:	7819      	ldrb	r1, [r3, #0]
 800625a:	2308      	movs	r3, #8
 800625c:	2203      	movs	r2, #3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f005 f9df 	bl	800b622 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006264:	4b25      	ldr	r3, [pc, #148]	@ (80062fc <USBD_CDC_Init+0x1ec>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f003 020f 	and.w	r2, r3, #15
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	3324      	adds	r3, #36	@ 0x24
 800627a:	2201      	movs	r2, #1
 800627c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	33b0      	adds	r3, #176	@ 0xb0
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80062b4:	2302      	movs	r3, #2
 80062b6:	e018      	b.n	80062ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7c1b      	ldrb	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062c0:	4b0d      	ldr	r3, [pc, #52]	@ (80062f8 <USBD_CDC_Init+0x1e8>)
 80062c2:	7819      	ldrb	r1, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f005 fa96 	bl	800b800 <USBD_LL_PrepareReceive>
 80062d4:	e008      	b.n	80062e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062d6:	4b08      	ldr	r3, [pc, #32]	@ (80062f8 <USBD_CDC_Init+0x1e8>)
 80062d8:	7819      	ldrb	r1, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062e0:	2340      	movs	r3, #64	@ 0x40
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f005 fa8c 	bl	800b800 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000097 	.word	0x20000097
 80062f8:	20000098 	.word	0x20000098
 80062fc:	20000099 	.word	0x20000099

08006300 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800630c:	4b3a      	ldr	r3, [pc, #232]	@ (80063f8 <USBD_CDC_DeInit+0xf8>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f005 f9ab 	bl	800b66e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006318:	4b37      	ldr	r3, [pc, #220]	@ (80063f8 <USBD_CDC_DeInit+0xf8>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f003 020f 	and.w	r2, r3, #15
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	3324      	adds	r3, #36	@ 0x24
 800632e:	2200      	movs	r2, #0
 8006330:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006332:	4b32      	ldr	r3, [pc, #200]	@ (80063fc <USBD_CDC_DeInit+0xfc>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f005 f998 	bl	800b66e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800633e:	4b2f      	ldr	r3, [pc, #188]	@ (80063fc <USBD_CDC_DeInit+0xfc>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f003 020f 	and.w	r2, r3, #15
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006356:	2200      	movs	r2, #0
 8006358:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800635a:	4b29      	ldr	r3, [pc, #164]	@ (8006400 <USBD_CDC_DeInit+0x100>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f005 f984 	bl	800b66e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006366:	4b26      	ldr	r3, [pc, #152]	@ (8006400 <USBD_CDC_DeInit+0x100>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f003 020f 	and.w	r2, r3, #15
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	3324      	adds	r3, #36	@ 0x24
 800637c:	2200      	movs	r2, #0
 800637e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006380:	4b1f      	ldr	r3, [pc, #124]	@ (8006400 <USBD_CDC_DeInit+0x100>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	3326      	adds	r3, #38	@ 0x26
 8006396:	2200      	movs	r2, #0
 8006398:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	32b0      	adds	r2, #176	@ 0xb0
 80063a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01f      	beq.n	80063ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	33b0      	adds	r3, #176	@ 0xb0
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	32b0      	adds	r2, #176	@ 0xb0
 80063ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f005 fa58 	bl	800b884 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	32b0      	adds	r2, #176	@ 0xb0
 80063de:	2100      	movs	r1, #0
 80063e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000097 	.word	0x20000097
 80063fc:	20000098 	.word	0x20000098
 8006400:	20000099 	.word	0x20000099

08006404 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	32b0      	adds	r2, #176	@ 0xb0
 8006418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	e0bf      	b.n	80065b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800643c:	2b00      	cmp	r3, #0
 800643e:	d050      	beq.n	80064e2 <USBD_CDC_Setup+0xde>
 8006440:	2b20      	cmp	r3, #32
 8006442:	f040 80af 	bne.w	80065a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	88db      	ldrh	r3, [r3, #6]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d03a      	beq.n	80064c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	b25b      	sxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	da1b      	bge.n	8006490 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	33b0      	adds	r3, #176	@ 0xb0
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800646e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	88d2      	ldrh	r2, [r2, #6]
 8006474:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	88db      	ldrh	r3, [r3, #6]
 800647a:	2b07      	cmp	r3, #7
 800647c:	bf28      	it	cs
 800647e:	2307      	movcs	r3, #7
 8006480:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	89fa      	ldrh	r2, [r7, #14]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fd53 	bl	8007f34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800648e:	e090      	b.n	80065b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785a      	ldrb	r2, [r3, #1]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	88db      	ldrh	r3, [r3, #6]
 800649e:	2b3f      	cmp	r3, #63	@ 0x3f
 80064a0:	d803      	bhi.n	80064aa <USBD_CDC_Setup+0xa6>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	88db      	ldrh	r3, [r3, #6]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	e000      	b.n	80064ac <USBD_CDC_Setup+0xa8>
 80064aa:	2240      	movs	r2, #64	@ 0x40
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80064b2:	6939      	ldr	r1, [r7, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80064ba:	461a      	mov	r2, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fd65 	bl	8007f8c <USBD_CtlPrepareRx>
      break;
 80064c2:	e076      	b.n	80065b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	33b0      	adds	r3, #176	@ 0xb0
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	7850      	ldrb	r0, [r2, #1]
 80064da:	2200      	movs	r2, #0
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	4798      	blx	r3
      break;
 80064e0:	e067      	b.n	80065b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	785b      	ldrb	r3, [r3, #1]
 80064e6:	2b0b      	cmp	r3, #11
 80064e8:	d851      	bhi.n	800658e <USBD_CDC_Setup+0x18a>
 80064ea:	a201      	add	r2, pc, #4	@ (adr r2, 80064f0 <USBD_CDC_Setup+0xec>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006521 	.word	0x08006521
 80064f4:	0800659d 	.word	0x0800659d
 80064f8:	0800658f 	.word	0x0800658f
 80064fc:	0800658f 	.word	0x0800658f
 8006500:	0800658f 	.word	0x0800658f
 8006504:	0800658f 	.word	0x0800658f
 8006508:	0800658f 	.word	0x0800658f
 800650c:	0800658f 	.word	0x0800658f
 8006510:	0800658f 	.word	0x0800658f
 8006514:	0800658f 	.word	0x0800658f
 8006518:	0800654b 	.word	0x0800654b
 800651c:	08006575 	.word	0x08006575
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b03      	cmp	r3, #3
 800652a:	d107      	bne.n	800653c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800652c:	f107 030a 	add.w	r3, r7, #10
 8006530:	2202      	movs	r2, #2
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 fcfd 	bl	8007f34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800653a:	e032      	b.n	80065a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 fc7b 	bl	8007e3a <USBD_CtlError>
            ret = USBD_FAIL;
 8006544:	2303      	movs	r3, #3
 8006546:	75fb      	strb	r3, [r7, #23]
          break;
 8006548:	e02b      	b.n	80065a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d107      	bne.n	8006566 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006556:	f107 030d 	add.w	r3, r7, #13
 800655a:	2201      	movs	r2, #1
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f001 fce8 	bl	8007f34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006564:	e01d      	b.n	80065a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fc66 	bl	8007e3a <USBD_CtlError>
            ret = USBD_FAIL;
 800656e:	2303      	movs	r3, #3
 8006570:	75fb      	strb	r3, [r7, #23]
          break;
 8006572:	e016      	b.n	80065a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b03      	cmp	r3, #3
 800657e:	d00f      	beq.n	80065a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fc59 	bl	8007e3a <USBD_CtlError>
            ret = USBD_FAIL;
 8006588:	2303      	movs	r3, #3
 800658a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800658c:	e008      	b.n	80065a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fc52 	bl	8007e3a <USBD_CtlError>
          ret = USBD_FAIL;
 8006596:	2303      	movs	r3, #3
 8006598:	75fb      	strb	r3, [r7, #23]
          break;
 800659a:	e002      	b.n	80065a2 <USBD_CDC_Setup+0x19e>
          break;
 800659c:	bf00      	nop
 800659e:	e008      	b.n	80065b2 <USBD_CDC_Setup+0x1ae>
          break;
 80065a0:	bf00      	nop
      }
      break;
 80065a2:	e006      	b.n	80065b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fc47 	bl	8007e3a <USBD_CtlError>
      ret = USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	75fb      	strb	r3, [r7, #23]
      break;
 80065b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32b0      	adds	r2, #176	@ 0xb0
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e065      	b.n	80066b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	32b0      	adds	r2, #176	@ 0xb0
 80065f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	f003 020f 	and.w	r2, r3, #15
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	3318      	adds	r3, #24
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d02f      	beq.n	8006670 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	f003 020f 	and.w	r2, r3, #15
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	3318      	adds	r3, #24
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	f003 010f 	and.w	r1, r3, #15
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	460b      	mov	r3, r1
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	440b      	add	r3, r1
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4403      	add	r3, r0
 8006638:	331c      	adds	r3, #28
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006646:	2b00      	cmp	r3, #0
 8006648:	d112      	bne.n	8006670 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	f003 020f 	and.w	r2, r3, #15
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	3318      	adds	r3, #24
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006662:	78f9      	ldrb	r1, [r7, #3]
 8006664:	2300      	movs	r3, #0
 8006666:	2200      	movs	r2, #0
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f005 f8a8 	bl	800b7be <USBD_LL_Transmit>
 800666e:	e01f      	b.n	80066b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	33b0      	adds	r3, #176	@ 0xb0
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d010      	beq.n	80066b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	33b0      	adds	r3, #176	@ 0xb0
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	32b0      	adds	r2, #176	@ 0xb0
 80066d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	32b0      	adds	r2, #176	@ 0xb0
 80066e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e01a      	b.n	8006722 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f005 f8a6 	bl	800b842 <USBD_LL_GetRxDataSize>
 80066f6:	4602      	mov	r2, r0
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	33b0      	adds	r3, #176	@ 0xb0
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800671c:	4611      	mov	r1, r2
 800671e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	32b0      	adds	r2, #176	@ 0xb0
 800673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006740:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006748:	2303      	movs	r3, #3
 800674a:	e024      	b.n	8006796 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	33b0      	adds	r3, #176	@ 0xb0
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d019      	beq.n	8006794 <USBD_CDC_EP0_RxReady+0x6a>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006766:	2bff      	cmp	r3, #255	@ 0xff
 8006768:	d014      	beq.n	8006794 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	33b0      	adds	r3, #176	@ 0xb0
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006782:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800678a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	22ff      	movs	r2, #255	@ 0xff
 8006790:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067a8:	2182      	movs	r1, #130	@ 0x82
 80067aa:	4818      	ldr	r0, [pc, #96]	@ (800680c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067ac:	f000 fd0f 	bl	80071ce <USBD_GetEpDesc>
 80067b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067b2:	2101      	movs	r1, #1
 80067b4:	4815      	ldr	r0, [pc, #84]	@ (800680c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067b6:	f000 fd0a 	bl	80071ce <USBD_GetEpDesc>
 80067ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067bc:	2181      	movs	r1, #129	@ 0x81
 80067be:	4813      	ldr	r0, [pc, #76]	@ (800680c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067c0:	f000 fd05 	bl	80071ce <USBD_GetEpDesc>
 80067c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2210      	movs	r2, #16
 80067d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d006      	beq.n	80067e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2200      	movs	r2, #0
 80067dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067e0:	711a      	strb	r2, [r3, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d006      	beq.n	80067fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067f4:	711a      	strb	r2, [r3, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2243      	movs	r2, #67	@ 0x43
 80067fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006800:	4b02      	ldr	r3, [pc, #8]	@ (800680c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000054 	.word	0x20000054

08006810 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006818:	2182      	movs	r1, #130	@ 0x82
 800681a:	4818      	ldr	r0, [pc, #96]	@ (800687c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800681c:	f000 fcd7 	bl	80071ce <USBD_GetEpDesc>
 8006820:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006822:	2101      	movs	r1, #1
 8006824:	4815      	ldr	r0, [pc, #84]	@ (800687c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006826:	f000 fcd2 	bl	80071ce <USBD_GetEpDesc>
 800682a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800682c:	2181      	movs	r1, #129	@ 0x81
 800682e:	4813      	ldr	r0, [pc, #76]	@ (800687c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006830:	f000 fccd 	bl	80071ce <USBD_GetEpDesc>
 8006834:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2210      	movs	r2, #16
 8006840:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d006      	beq.n	8006856 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2200      	movs	r2, #0
 800684c:	711a      	strb	r2, [r3, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f042 0202 	orr.w	r2, r2, #2
 8006854:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d006      	beq.n	800686a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	711a      	strb	r2, [r3, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f042 0202 	orr.w	r2, r2, #2
 8006868:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2243      	movs	r2, #67	@ 0x43
 800686e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006870:	4b02      	ldr	r3, [pc, #8]	@ (800687c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000054 	.word	0x20000054

08006880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006888:	2182      	movs	r1, #130	@ 0x82
 800688a:	4818      	ldr	r0, [pc, #96]	@ (80068ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800688c:	f000 fc9f 	bl	80071ce <USBD_GetEpDesc>
 8006890:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006892:	2101      	movs	r1, #1
 8006894:	4815      	ldr	r0, [pc, #84]	@ (80068ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006896:	f000 fc9a 	bl	80071ce <USBD_GetEpDesc>
 800689a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800689c:	2181      	movs	r1, #129	@ 0x81
 800689e:	4813      	ldr	r0, [pc, #76]	@ (80068ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068a0:	f000 fc95 	bl	80071ce <USBD_GetEpDesc>
 80068a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2210      	movs	r2, #16
 80068b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d006      	beq.n	80068c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068c0:	711a      	strb	r2, [r3, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d006      	beq.n	80068da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068d4:	711a      	strb	r2, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2243      	movs	r2, #67	@ 0x43
 80068de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068e0:	4b02      	ldr	r3, [pc, #8]	@ (80068ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000054 	.word	0x20000054

080068f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	220a      	movs	r2, #10
 80068fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80068fe:	4b03      	ldr	r3, [pc, #12]	@ (800690c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	20000010 	.word	0x20000010

08006910 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	e009      	b.n	8006938 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	33b0      	adds	r3, #176	@ 0xb0
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	32b0      	adds	r2, #176	@ 0xb0
 800695a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006966:	2303      	movs	r3, #3
 8006968:	e008      	b.n	800697c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	371c      	adds	r7, #28
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	32b0      	adds	r2, #176	@ 0xb0
 800699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e004      	b.n	80069b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	32b0      	adds	r2, #176	@ 0xb0
 80069d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	32b0      	adds	r2, #176	@ 0xb0
 80069e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e018      	b.n	8006a24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	7c1b      	ldrb	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069fa:	4b0c      	ldr	r3, [pc, #48]	@ (8006a2c <USBD_CDC_ReceivePacket+0x68>)
 80069fc:	7819      	ldrb	r1, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f004 fef9 	bl	800b800 <USBD_LL_PrepareReceive>
 8006a0e:	e008      	b.n	8006a22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a10:	4b06      	ldr	r3, [pc, #24]	@ (8006a2c <USBD_CDC_ReceivePacket+0x68>)
 8006a12:	7819      	ldrb	r1, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a1a:	2340      	movs	r3, #64	@ 0x40
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f004 feef 	bl	800b800 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000098 	.word	0x20000098

08006a30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e01f      	b.n	8006a88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	79fa      	ldrb	r2, [r7, #7]
 8006a7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f004 fd69 	bl	800b554 <USBD_LL_Init>
 8006a82:	4603      	mov	r3, r0
 8006a84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e025      	b.n	8006af4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	32ae      	adds	r2, #174	@ 0xae
 8006aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00f      	beq.n	8006ae4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	32ae      	adds	r2, #174	@ 0xae
 8006ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad4:	f107 020e 	add.w	r2, r7, #14
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4798      	blx	r3
 8006adc:	4602      	mov	r2, r0
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f004 fd71 	bl	800b5ec <USBD_LL_Start>
 8006b0a:	4603      	mov	r3, r0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	460b      	mov	r3, r1
 8006b34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d009      	beq.n	8006b58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	78fa      	ldrb	r2, [r7, #3]
 8006b4e:	4611      	mov	r1, r2
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	4798      	blx	r3
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f90c 	bl	8007dc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d01a      	beq.n	8006c08 <USBD_LL_SetupStage+0x72>
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d822      	bhi.n	8006c1c <USBD_LL_SetupStage+0x86>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <USBD_LL_SetupStage+0x4a>
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d00a      	beq.n	8006bf4 <USBD_LL_SetupStage+0x5e>
 8006bde:	e01d      	b.n	8006c1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fb63 	bl	80072b4 <USBD_StdDevReq>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf2:	e020      	b.n	8006c36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fbcb 	bl	8007398 <USBD_StdItfReq>
 8006c02:	4603      	mov	r3, r0
 8006c04:	73fb      	strb	r3, [r7, #15]
      break;
 8006c06:	e016      	b.n	8006c36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fc2d 	bl	8007470 <USBD_StdEPReq>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1a:	e00c      	b.n	8006c36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006c22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f004 fd3e 	bl	800b6ac <USBD_LL_StallEP>
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]
      break;
 8006c34:	bf00      	nop
  }

  return ret;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d16e      	bne.n	8006d36 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006c5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	f040 8098 	bne.w	8006d9c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d913      	bls.n	8006ca0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	1ad2      	subs	r2, r2, r3
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	bf28      	it	cs
 8006c92:	4613      	movcs	r3, r2
 8006c94:	461a      	mov	r2, r3
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f001 f994 	bl	8007fc6 <USBD_CtlContinueRx>
 8006c9e:	e07d      	b.n	8006d9c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d014      	beq.n	8006cd8 <USBD_LL_DataOutStage+0x98>
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d81d      	bhi.n	8006cee <USBD_LL_DataOutStage+0xae>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <USBD_LL_DataOutStage+0x7c>
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d003      	beq.n	8006cc2 <USBD_LL_DataOutStage+0x82>
 8006cba:	e018      	b.n	8006cee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	75bb      	strb	r3, [r7, #22]
            break;
 8006cc0:	e018      	b.n	8006cf4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	4619      	mov	r1, r3
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fa64 	bl	800719a <USBD_CoreFindIF>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75bb      	strb	r3, [r7, #22]
            break;
 8006cd6:	e00d      	b.n	8006cf4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 fa66 	bl	80071b4 <USBD_CoreFindEP>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	75bb      	strb	r3, [r7, #22]
            break;
 8006cec:	e002      	b.n	8006cf4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	75bb      	strb	r3, [r7, #22]
            break;
 8006cf2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006cf4:	7dbb      	ldrb	r3, [r7, #22]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d119      	bne.n	8006d2e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d113      	bne.n	8006d2e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006d06:	7dba      	ldrb	r2, [r7, #22]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	32ae      	adds	r2, #174	@ 0xae
 8006d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006d16:	7dba      	ldrb	r2, [r7, #22]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006d1e:	7dba      	ldrb	r2, [r7, #22]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	32ae      	adds	r2, #174	@ 0xae
 8006d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f001 f95a 	bl	8007fe8 <USBD_CtlSendStatus>
 8006d34:	e032      	b.n	8006d9c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006d36:	7afb      	ldrb	r3, [r7, #11]
 8006d38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	4619      	mov	r1, r3
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 fa37 	bl	80071b4 <USBD_CoreFindEP>
 8006d46:	4603      	mov	r3, r0
 8006d48:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d4a:	7dbb      	ldrb	r3, [r7, #22]
 8006d4c:	2bff      	cmp	r3, #255	@ 0xff
 8006d4e:	d025      	beq.n	8006d9c <USBD_LL_DataOutStage+0x15c>
 8006d50:	7dbb      	ldrb	r3, [r7, #22]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d122      	bne.n	8006d9c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d117      	bne.n	8006d92 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d62:	7dba      	ldrb	r2, [r7, #22]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	32ae      	adds	r2, #174	@ 0xae
 8006d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00f      	beq.n	8006d92 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d72:	7dba      	ldrb	r2, [r7, #22]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d7a:	7dba      	ldrb	r2, [r7, #22]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	32ae      	adds	r2, #174	@ 0xae
 8006d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	7afa      	ldrb	r2, [r7, #11]
 8006d88:	4611      	mov	r1, r2
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	4798      	blx	r3
 8006d8e:	4603      	mov	r3, r0
 8006d90:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	e000      	b.n	8006d9e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b086      	sub	sp, #24
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	460b      	mov	r3, r1
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d16f      	bne.n	8006e9a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3314      	adds	r3, #20
 8006dbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d15a      	bne.n	8006e80 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	689a      	ldr	r2, [r3, #8]
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d914      	bls.n	8006e00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	1ad2      	subs	r2, r2, r3
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f001 f8bc 	bl	8007f6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006df2:	2300      	movs	r3, #0
 8006df4:	2200      	movs	r2, #0
 8006df6:	2100      	movs	r1, #0
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f004 fd01 	bl	800b800 <USBD_LL_PrepareReceive>
 8006dfe:	e03f      	b.n	8006e80 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d11c      	bne.n	8006e46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d316      	bcc.n	8006e46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d20f      	bcs.n	8006e46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e26:	2200      	movs	r2, #0
 8006e28:	2100      	movs	r1, #0
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f001 f89d 	bl	8007f6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f004 fcde 	bl	800b800 <USBD_LL_PrepareReceive>
 8006e44:	e01c      	b.n	8006e80 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d10f      	bne.n	8006e72 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e72:	2180      	movs	r1, #128	@ 0x80
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f004 fc19 	bl	800b6ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f001 f8c7 	bl	800800e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d03a      	beq.n	8006f00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff fe42 	bl	8006b14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006e98:	e032      	b.n	8006f00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e9a:	7afb      	ldrb	r3, [r7, #11]
 8006e9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f985 	bl	80071b4 <USBD_CoreFindEP>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	2bff      	cmp	r3, #255	@ 0xff
 8006eb2:	d025      	beq.n	8006f00 <USBD_LL_DataInStage+0x15a>
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d122      	bne.n	8006f00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d11c      	bne.n	8006f00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ec6:	7dfa      	ldrb	r2, [r7, #23]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	32ae      	adds	r2, #174	@ 0xae
 8006ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d014      	beq.n	8006f00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ed6:	7dfa      	ldrb	r2, [r7, #23]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006ede:	7dfa      	ldrb	r2, [r7, #23]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	32ae      	adds	r2, #174	@ 0xae
 8006ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	7afa      	ldrb	r2, [r7, #11]
 8006eec:	4611      	mov	r1, r2
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	4798      	blx	r3
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006ef6:	7dbb      	ldrb	r3, [r7, #22]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006efc:	7dbb      	ldrb	r3, [r7, #22]
 8006efe:	e000      	b.n	8006f02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d014      	beq.n	8006f70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00e      	beq.n	8006f70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6852      	ldr	r2, [r2, #4]
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	4611      	mov	r1, r2
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f70:	2340      	movs	r3, #64	@ 0x40
 8006f72:	2200      	movs	r2, #0
 8006f74:	2100      	movs	r1, #0
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f004 fb53 	bl	800b622 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2240      	movs	r2, #64	@ 0x40
 8006f88:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f8c:	2340      	movs	r3, #64	@ 0x40
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2180      	movs	r1, #128	@ 0x80
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f004 fb45 	bl	800b622 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2240      	movs	r2, #64	@ 0x40
 8006fa2:	621a      	str	r2, [r3, #32]

  return ret;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	78fa      	ldrb	r2, [r7, #3]
 8006fbe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d006      	beq.n	8006ff0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b04      	cmp	r3, #4
 8007018:	d106      	bne.n	8007028 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007020:	b2da      	uxtb	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d110      	bne.n	800706c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00b      	beq.n	800706c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	460b      	mov	r3, r1
 8007080:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	32ae      	adds	r2, #174	@ 0xae
 800708c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007094:	2303      	movs	r3, #3
 8007096:	e01c      	b.n	80070d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d115      	bne.n	80070d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	32ae      	adds	r2, #174	@ 0xae
 80070ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	32ae      	adds	r2, #174	@ 0xae
 80070c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	4611      	mov	r1, r2
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	32ae      	adds	r2, #174	@ 0xae
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e01c      	b.n	8007136 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b03      	cmp	r3, #3
 8007106:	d115      	bne.n	8007134 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	32ae      	adds	r2, #174	@ 0xae
 8007112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00b      	beq.n	8007134 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	32ae      	adds	r2, #174	@ 0xae
 8007126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	4611      	mov	r1, r2
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00e      	beq.n	8007190 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	6852      	ldr	r2, [r2, #4]
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	4611      	mov	r1, r2
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800718c:	2303      	movs	r3, #3
 800718e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	7812      	ldrb	r2, [r2, #0]
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d91f      	bls.n	8007234 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80071fa:	e013      	b.n	8007224 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80071fc:	f107 030a 	add.w	r3, r7, #10
 8007200:	4619      	mov	r1, r3
 8007202:	6978      	ldr	r0, [r7, #20]
 8007204:	f000 f81b 	bl	800723e <USBD_GetNextDesc>
 8007208:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b05      	cmp	r3, #5
 8007210:	d108      	bne.n	8007224 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	789b      	ldrb	r3, [r3, #2]
 800721a:	78fa      	ldrb	r2, [r7, #3]
 800721c:	429a      	cmp	r2, r3
 800721e:	d008      	beq.n	8007232 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	885b      	ldrh	r3, [r3, #2]
 8007228:	b29a      	uxth	r2, r3
 800722a:	897b      	ldrh	r3, [r7, #10]
 800722c:	429a      	cmp	r2, r3
 800722e:	d8e5      	bhi.n	80071fc <USBD_GetEpDesc+0x2e>
 8007230:	e000      	b.n	8007234 <USBD_GetEpDesc+0x66>
          break;
 8007232:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007234:	693b      	ldr	r3, [r7, #16]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	4413      	add	r3, r2
 8007256:	b29a      	uxth	r2, r3
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4413      	add	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007268:	68fb      	ldr	r3, [r7, #12]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007276:	b480      	push	{r7}
 8007278:	b087      	sub	sp, #28
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	3301      	adds	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007294:	8a3b      	ldrh	r3, [r7, #16]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	b21a      	sxth	r2, r3
 800729a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800729e:	4313      	orrs	r3, r2
 80072a0:	b21b      	sxth	r3, r3
 80072a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072a4:	89fb      	ldrh	r3, [r7, #14]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072ca:	2b40      	cmp	r3, #64	@ 0x40
 80072cc:	d005      	beq.n	80072da <USBD_StdDevReq+0x26>
 80072ce:	2b40      	cmp	r3, #64	@ 0x40
 80072d0:	d857      	bhi.n	8007382 <USBD_StdDevReq+0xce>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00f      	beq.n	80072f6 <USBD_StdDevReq+0x42>
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d153      	bne.n	8007382 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	32ae      	adds	r2, #174	@ 0xae
 80072e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
 80072f0:	4603      	mov	r3, r0
 80072f2:	73fb      	strb	r3, [r7, #15]
      break;
 80072f4:	e04a      	b.n	800738c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	2b09      	cmp	r3, #9
 80072fc:	d83b      	bhi.n	8007376 <USBD_StdDevReq+0xc2>
 80072fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <USBD_StdDevReq+0x50>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	08007359 	.word	0x08007359
 8007308:	0800736d 	.word	0x0800736d
 800730c:	08007377 	.word	0x08007377
 8007310:	08007363 	.word	0x08007363
 8007314:	08007377 	.word	0x08007377
 8007318:	08007337 	.word	0x08007337
 800731c:	0800732d 	.word	0x0800732d
 8007320:	08007377 	.word	0x08007377
 8007324:	0800734f 	.word	0x0800734f
 8007328:	08007341 	.word	0x08007341
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa3c 	bl	80077ac <USBD_GetDescriptor>
          break;
 8007334:	e024      	b.n	8007380 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fba1 	bl	8007a80 <USBD_SetAddress>
          break;
 800733e:	e01f      	b.n	8007380 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fbe0 	bl	8007b08 <USBD_SetConfig>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
          break;
 800734c:	e018      	b.n	8007380 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fc83 	bl	8007c5c <USBD_GetConfig>
          break;
 8007356:	e013      	b.n	8007380 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fcb4 	bl	8007cc8 <USBD_GetStatus>
          break;
 8007360:	e00e      	b.n	8007380 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fce3 	bl	8007d30 <USBD_SetFeature>
          break;
 800736a:	e009      	b.n	8007380 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fd07 	bl	8007d82 <USBD_ClrFeature>
          break;
 8007374:	e004      	b.n	8007380 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fd5e 	bl	8007e3a <USBD_CtlError>
          break;
 800737e:	bf00      	nop
      }
      break;
 8007380:	e004      	b.n	800738c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fd58 	bl	8007e3a <USBD_CtlError>
      break;
 800738a:	bf00      	nop
  }

  return ret;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop

08007398 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073ae:	2b40      	cmp	r3, #64	@ 0x40
 80073b0:	d005      	beq.n	80073be <USBD_StdItfReq+0x26>
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d852      	bhi.n	800745c <USBD_StdItfReq+0xc4>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <USBD_StdItfReq+0x26>
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d14e      	bne.n	800745c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d840      	bhi.n	800744e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	889b      	ldrh	r3, [r3, #4]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d836      	bhi.n	8007444 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	889b      	ldrh	r3, [r3, #4]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff fedb 	bl	800719a <USBD_CoreFindIF>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2bff      	cmp	r3, #255	@ 0xff
 80073ec:	d01d      	beq.n	800742a <USBD_StdItfReq+0x92>
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d11a      	bne.n	800742a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80073f4:	7bba      	ldrb	r2, [r7, #14]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	32ae      	adds	r2, #174	@ 0xae
 80073fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00f      	beq.n	8007424 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007404:	7bba      	ldrb	r2, [r7, #14]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800740c:	7bba      	ldrb	r2, [r7, #14]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	32ae      	adds	r2, #174	@ 0xae
 8007412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
 800741e:	4603      	mov	r3, r0
 8007420:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007422:	e004      	b.n	800742e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007424:	2303      	movs	r3, #3
 8007426:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007428:	e001      	b.n	800742e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800742a:	2303      	movs	r3, #3
 800742c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	88db      	ldrh	r3, [r3, #6]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d110      	bne.n	8007458 <USBD_StdItfReq+0xc0>
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10d      	bne.n	8007458 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fdd3 	bl	8007fe8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007442:	e009      	b.n	8007458 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fcf7 	bl	8007e3a <USBD_CtlError>
          break;
 800744c:	e004      	b.n	8007458 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fcf2 	bl	8007e3a <USBD_CtlError>
          break;
 8007456:	e000      	b.n	800745a <USBD_StdItfReq+0xc2>
          break;
 8007458:	bf00      	nop
      }
      break;
 800745a:	e004      	b.n	8007466 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fceb 	bl	8007e3a <USBD_CtlError>
      break;
 8007464:	bf00      	nop
  }

  return ret;
 8007466:	7bfb      	ldrb	r3, [r7, #15]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	889b      	ldrh	r3, [r3, #4]
 8007482:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800748c:	2b40      	cmp	r3, #64	@ 0x40
 800748e:	d007      	beq.n	80074a0 <USBD_StdEPReq+0x30>
 8007490:	2b40      	cmp	r3, #64	@ 0x40
 8007492:	f200 817f 	bhi.w	8007794 <USBD_StdEPReq+0x324>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d02a      	beq.n	80074f0 <USBD_StdEPReq+0x80>
 800749a:	2b20      	cmp	r3, #32
 800749c:	f040 817a 	bne.w	8007794 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff fe85 	bl	80071b4 <USBD_CoreFindEP>
 80074aa:	4603      	mov	r3, r0
 80074ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074ae:	7b7b      	ldrb	r3, [r7, #13]
 80074b0:	2bff      	cmp	r3, #255	@ 0xff
 80074b2:	f000 8174 	beq.w	800779e <USBD_StdEPReq+0x32e>
 80074b6:	7b7b      	ldrb	r3, [r7, #13]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 8170 	bne.w	800779e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80074be:	7b7a      	ldrb	r2, [r7, #13]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80074c6:	7b7a      	ldrb	r2, [r7, #13]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	32ae      	adds	r2, #174	@ 0xae
 80074cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 8163 	beq.w	800779e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80074d8:	7b7a      	ldrb	r2, [r7, #13]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	32ae      	adds	r2, #174	@ 0xae
 80074de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4798      	blx	r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074ee:	e156      	b.n	800779e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d008      	beq.n	800750a <USBD_StdEPReq+0x9a>
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	f300 8145 	bgt.w	8007788 <USBD_StdEPReq+0x318>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 809b 	beq.w	800763a <USBD_StdEPReq+0x1ca>
 8007504:	2b01      	cmp	r3, #1
 8007506:	d03c      	beq.n	8007582 <USBD_StdEPReq+0x112>
 8007508:	e13e      	b.n	8007788 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d002      	beq.n	800751c <USBD_StdEPReq+0xac>
 8007516:	2b03      	cmp	r3, #3
 8007518:	d016      	beq.n	8007548 <USBD_StdEPReq+0xd8>
 800751a:	e02c      	b.n	8007576 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00d      	beq.n	800753e <USBD_StdEPReq+0xce>
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	2b80      	cmp	r3, #128	@ 0x80
 8007526:	d00a      	beq.n	800753e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f004 f8bd 	bl	800b6ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007532:	2180      	movs	r1, #128	@ 0x80
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f004 f8b9 	bl	800b6ac <USBD_LL_StallEP>
 800753a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800753c:	e020      	b.n	8007580 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fc7a 	bl	8007e3a <USBD_CtlError>
              break;
 8007546:	e01b      	b.n	8007580 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	885b      	ldrh	r3, [r3, #2]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10e      	bne.n	800756e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <USBD_StdEPReq+0xfe>
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b80      	cmp	r3, #128	@ 0x80
 800755a:	d008      	beq.n	800756e <USBD_StdEPReq+0xfe>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	88db      	ldrh	r3, [r3, #6]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f004 f89f 	bl	800b6ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fd3a 	bl	8007fe8 <USBD_CtlSendStatus>

              break;
 8007574:	e004      	b.n	8007580 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fc5e 	bl	8007e3a <USBD_CtlError>
              break;
 800757e:	bf00      	nop
          }
          break;
 8007580:	e107      	b.n	8007792 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d002      	beq.n	8007594 <USBD_StdEPReq+0x124>
 800758e:	2b03      	cmp	r3, #3
 8007590:	d016      	beq.n	80075c0 <USBD_StdEPReq+0x150>
 8007592:	e04b      	b.n	800762c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00d      	beq.n	80075b6 <USBD_StdEPReq+0x146>
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b80      	cmp	r3, #128	@ 0x80
 800759e:	d00a      	beq.n	80075b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f004 f881 	bl	800b6ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075aa:	2180      	movs	r1, #128	@ 0x80
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f004 f87d 	bl	800b6ac <USBD_LL_StallEP>
 80075b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075b4:	e040      	b.n	8007638 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fc3e 	bl	8007e3a <USBD_CtlError>
              break;
 80075be:	e03b      	b.n	8007638 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	885b      	ldrh	r3, [r3, #2]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d136      	bne.n	8007636 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f004 f887 	bl	800b6ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fd03 	bl	8007fe8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff fde4 	bl	80071b4 <USBD_CoreFindEP>
 80075ec:	4603      	mov	r3, r0
 80075ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075f0:	7b7b      	ldrb	r3, [r7, #13]
 80075f2:	2bff      	cmp	r3, #255	@ 0xff
 80075f4:	d01f      	beq.n	8007636 <USBD_StdEPReq+0x1c6>
 80075f6:	7b7b      	ldrb	r3, [r7, #13]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d11c      	bne.n	8007636 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80075fc:	7b7a      	ldrb	r2, [r7, #13]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007604:	7b7a      	ldrb	r2, [r7, #13]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	32ae      	adds	r2, #174	@ 0xae
 800760a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d010      	beq.n	8007636 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007614:	7b7a      	ldrb	r2, [r7, #13]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	32ae      	adds	r2, #174	@ 0xae
 800761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	4798      	blx	r3
 8007626:	4603      	mov	r3, r0
 8007628:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800762a:	e004      	b.n	8007636 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fc03 	bl	8007e3a <USBD_CtlError>
              break;
 8007634:	e000      	b.n	8007638 <USBD_StdEPReq+0x1c8>
              break;
 8007636:	bf00      	nop
          }
          break;
 8007638:	e0ab      	b.n	8007792 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d002      	beq.n	800764c <USBD_StdEPReq+0x1dc>
 8007646:	2b03      	cmp	r3, #3
 8007648:	d032      	beq.n	80076b0 <USBD_StdEPReq+0x240>
 800764a:	e097      	b.n	800777c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d007      	beq.n	8007662 <USBD_StdEPReq+0x1f2>
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	2b80      	cmp	r3, #128	@ 0x80
 8007656:	d004      	beq.n	8007662 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fbed 	bl	8007e3a <USBD_CtlError>
                break;
 8007660:	e091      	b.n	8007786 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007666:	2b00      	cmp	r3, #0
 8007668:	da0b      	bge.n	8007682 <USBD_StdEPReq+0x212>
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	3310      	adds	r3, #16
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4413      	add	r3, r2
 800767e:	3304      	adds	r3, #4
 8007680:	e00b      	b.n	800769a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	4413      	add	r3, r2
 8007698:	3304      	adds	r3, #4
 800769a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2202      	movs	r2, #2
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fc43 	bl	8007f34 <USBD_CtlSendData>
              break;
 80076ae:	e06a      	b.n	8007786 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	da11      	bge.n	80076dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	f003 020f 	and.w	r2, r3, #15
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	3324      	adds	r3, #36	@ 0x24
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d117      	bne.n	8007702 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fbb0 	bl	8007e3a <USBD_CtlError>
                  break;
 80076da:	e054      	b.n	8007786 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fb9d 	bl	8007e3a <USBD_CtlError>
                  break;
 8007700:	e041      	b.n	8007786 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007706:	2b00      	cmp	r3, #0
 8007708:	da0b      	bge.n	8007722 <USBD_StdEPReq+0x2b2>
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007710:	4613      	mov	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	3310      	adds	r3, #16
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	4413      	add	r3, r2
 800771e:	3304      	adds	r3, #4
 8007720:	e00b      	b.n	800773a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	4413      	add	r3, r2
 8007738:	3304      	adds	r3, #4
 800773a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <USBD_StdEPReq+0x2d8>
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b80      	cmp	r3, #128	@ 0x80
 8007746:	d103      	bne.n	8007750 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2200      	movs	r2, #0
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e00e      	b.n	800776e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f003 ffe7 	bl	800b728 <USBD_LL_IsStallEP>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2201      	movs	r2, #1
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	e002      	b.n	800776e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2202      	movs	r2, #2
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fbdd 	bl	8007f34 <USBD_CtlSendData>
              break;
 800777a:	e004      	b.n	8007786 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fb5b 	bl	8007e3a <USBD_CtlError>
              break;
 8007784:	bf00      	nop
          }
          break;
 8007786:	e004      	b.n	8007792 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fb55 	bl	8007e3a <USBD_CtlError>
          break;
 8007790:	bf00      	nop
      }
      break;
 8007792:	e005      	b.n	80077a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fb4f 	bl	8007e3a <USBD_CtlError>
      break;
 800779c:	e000      	b.n	80077a0 <USBD_StdEPReq+0x330>
      break;
 800779e:	bf00      	nop
  }

  return ret;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	885b      	ldrh	r3, [r3, #2]
 80077c6:	0a1b      	lsrs	r3, r3, #8
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	3b01      	subs	r3, #1
 80077cc:	2b06      	cmp	r3, #6
 80077ce:	f200 8128 	bhi.w	8007a22 <USBD_GetDescriptor+0x276>
 80077d2:	a201      	add	r2, pc, #4	@ (adr r2, 80077d8 <USBD_GetDescriptor+0x2c>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	080077f5 	.word	0x080077f5
 80077dc:	0800780d 	.word	0x0800780d
 80077e0:	0800784d 	.word	0x0800784d
 80077e4:	08007a23 	.word	0x08007a23
 80077e8:	08007a23 	.word	0x08007a23
 80077ec:	080079c3 	.word	0x080079c3
 80077f0:	080079ef 	.word	0x080079ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	7c12      	ldrb	r2, [r2, #16]
 8007800:	f107 0108 	add.w	r1, r7, #8
 8007804:	4610      	mov	r0, r2
 8007806:	4798      	blx	r3
 8007808:	60f8      	str	r0, [r7, #12]
      break;
 800780a:	e112      	b.n	8007a32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7c1b      	ldrb	r3, [r3, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10d      	bne.n	8007830 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800781a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781c:	f107 0208 	add.w	r2, r7, #8
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
 8007824:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	2202      	movs	r2, #2
 800782c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800782e:	e100      	b.n	8007a32 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007838:	f107 0208 	add.w	r2, r7, #8
 800783c:	4610      	mov	r0, r2
 800783e:	4798      	blx	r3
 8007840:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3301      	adds	r3, #1
 8007846:	2202      	movs	r2, #2
 8007848:	701a      	strb	r2, [r3, #0]
      break;
 800784a:	e0f2      	b.n	8007a32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	885b      	ldrh	r3, [r3, #2]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b05      	cmp	r3, #5
 8007854:	f200 80ac 	bhi.w	80079b0 <USBD_GetDescriptor+0x204>
 8007858:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <USBD_GetDescriptor+0xb4>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007879 	.word	0x08007879
 8007864:	080078ad 	.word	0x080078ad
 8007868:	080078e1 	.word	0x080078e1
 800786c:	08007915 	.word	0x08007915
 8007870:	08007949 	.word	0x08007949
 8007874:	0800797d 	.word	0x0800797d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	7c12      	ldrb	r2, [r2, #16]
 8007890:	f107 0108 	add.w	r1, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800789a:	e091      	b.n	80079c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 facb 	bl	8007e3a <USBD_CtlError>
            err++;
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	3301      	adds	r3, #1
 80078a8:	72fb      	strb	r3, [r7, #11]
          break;
 80078aa:	e089      	b.n	80079c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	7c12      	ldrb	r2, [r2, #16]
 80078c4:	f107 0108 	add.w	r1, r7, #8
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ce:	e077      	b.n	80079c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fab1 	bl	8007e3a <USBD_CtlError>
            err++;
 80078d8:	7afb      	ldrb	r3, [r7, #11]
 80078da:	3301      	adds	r3, #1
 80078dc:	72fb      	strb	r3, [r7, #11]
          break;
 80078de:	e06f      	b.n	80079c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	7c12      	ldrb	r2, [r2, #16]
 80078f8:	f107 0108 	add.w	r1, r7, #8
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007902:	e05d      	b.n	80079c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa97 	bl	8007e3a <USBD_CtlError>
            err++;
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	3301      	adds	r3, #1
 8007910:	72fb      	strb	r3, [r7, #11]
          break;
 8007912:	e055      	b.n	80079c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	7c12      	ldrb	r2, [r2, #16]
 800792c:	f107 0108 	add.w	r1, r7, #8
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
 8007934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007936:	e043      	b.n	80079c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa7d 	bl	8007e3a <USBD_CtlError>
            err++;
 8007940:	7afb      	ldrb	r3, [r7, #11]
 8007942:	3301      	adds	r3, #1
 8007944:	72fb      	strb	r3, [r7, #11]
          break;
 8007946:	e03b      	b.n	80079c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	7c12      	ldrb	r2, [r2, #16]
 8007960:	f107 0108 	add.w	r1, r7, #8
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
 8007968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800796a:	e029      	b.n	80079c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa63 	bl	8007e3a <USBD_CtlError>
            err++;
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	3301      	adds	r3, #1
 8007978:	72fb      	strb	r3, [r7, #11]
          break;
 800797a:	e021      	b.n	80079c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	7c12      	ldrb	r2, [r2, #16]
 8007994:	f107 0108 	add.w	r1, r7, #8
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800799e:	e00f      	b.n	80079c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa49 	bl	8007e3a <USBD_CtlError>
            err++;
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	3301      	adds	r3, #1
 80079ac:	72fb      	strb	r3, [r7, #11]
          break;
 80079ae:	e007      	b.n	80079c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fa41 	bl	8007e3a <USBD_CtlError>
          err++;
 80079b8:	7afb      	ldrb	r3, [r7, #11]
 80079ba:	3301      	adds	r3, #1
 80079bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80079be:	bf00      	nop
      }
      break;
 80079c0:	e037      	b.n	8007a32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	7c1b      	ldrb	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d109      	bne.n	80079de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d2:	f107 0208 	add.w	r2, r7, #8
 80079d6:	4610      	mov	r0, r2
 80079d8:	4798      	blx	r3
 80079da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079dc:	e029      	b.n	8007a32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa2a 	bl	8007e3a <USBD_CtlError>
        err++;
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	3301      	adds	r3, #1
 80079ea:	72fb      	strb	r3, [r7, #11]
      break;
 80079ec:	e021      	b.n	8007a32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7c1b      	ldrb	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10d      	bne.n	8007a12 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fe:	f107 0208 	add.w	r2, r7, #8
 8007a02:	4610      	mov	r0, r2
 8007a04:	4798      	blx	r3
 8007a06:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	2207      	movs	r2, #7
 8007a0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a10:	e00f      	b.n	8007a32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fa10 	bl	8007e3a <USBD_CtlError>
        err++;
 8007a1a:	7afb      	ldrb	r3, [r7, #11]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a20:	e007      	b.n	8007a32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fa08 	bl	8007e3a <USBD_CtlError>
      err++;
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a30:	bf00      	nop
  }

  if (err != 0U)
 8007a32:	7afb      	ldrb	r3, [r7, #11]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d11e      	bne.n	8007a76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	88db      	ldrh	r3, [r3, #6]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d016      	beq.n	8007a6e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a40:	893b      	ldrh	r3, [r7, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00e      	beq.n	8007a64 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	88da      	ldrh	r2, [r3, #6]
 8007a4a:	893b      	ldrh	r3, [r7, #8]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	bf28      	it	cs
 8007a50:	4613      	movcs	r3, r2
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a56:	893b      	ldrh	r3, [r7, #8]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fa69 	bl	8007f34 <USBD_CtlSendData>
 8007a62:	e009      	b.n	8007a78 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f9e7 	bl	8007e3a <USBD_CtlError>
 8007a6c:	e004      	b.n	8007a78 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 faba 	bl	8007fe8 <USBD_CtlSendStatus>
 8007a74:	e000      	b.n	8007a78 <USBD_GetDescriptor+0x2cc>
    return;
 8007a76:	bf00      	nop
  }
}
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop

08007a80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	889b      	ldrh	r3, [r3, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d131      	bne.n	8007af6 <USBD_SetAddress+0x76>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	88db      	ldrh	r3, [r3, #6]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d12d      	bne.n	8007af6 <USBD_SetAddress+0x76>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	885b      	ldrh	r3, [r3, #2]
 8007a9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007aa0:	d829      	bhi.n	8007af6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d104      	bne.n	8007ac4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9bc 	bl	8007e3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac2:	e01d      	b.n	8007b00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7bfa      	ldrb	r2, [r7, #15]
 8007ac8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f003 fe55 	bl	800b780 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa86 	bl	8007fe8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aea:	e009      	b.n	8007b00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af4:	e004      	b.n	8007b00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f99e 	bl	8007e3a <USBD_CtlError>
  }
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	885b      	ldrh	r3, [r3, #2]
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007b1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b20:	4b4d      	ldr	r3, [pc, #308]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d905      	bls.n	8007b34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f985 	bl	8007e3a <USBD_CtlError>
    return USBD_FAIL;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e08c      	b.n	8007c4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d002      	beq.n	8007b46 <USBD_SetConfig+0x3e>
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d029      	beq.n	8007b98 <USBD_SetConfig+0x90>
 8007b44:	e075      	b.n	8007c32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b46:	4b44      	ldr	r3, [pc, #272]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d020      	beq.n	8007b90 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007b4e:	4b42      	ldr	r3, [pc, #264]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b58:	4b3f      	ldr	r3, [pc, #252]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fe ffe3 	bl	8006b2a <USBD_SetClassConfig>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d008      	beq.n	8007b80 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f962 	bl	8007e3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b7e:	e065      	b.n	8007c4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fa31 	bl	8007fe8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2203      	movs	r2, #3
 8007b8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007b8e:	e05d      	b.n	8007c4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fa29 	bl	8007fe8 <USBD_CtlSendStatus>
      break;
 8007b96:	e059      	b.n	8007c4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b98:	4b2f      	ldr	r3, [pc, #188]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d112      	bne.n	8007bc6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bb2:	4b29      	ldr	r3, [pc, #164]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fe ffd2 	bl	8006b62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa12 	bl	8007fe8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bc4:	e042      	b.n	8007c4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007bc6:	4b24      	ldr	r3, [pc, #144]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d02a      	beq.n	8007c2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7fe ffc0 	bl	8006b62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007be2:	4b1d      	ldr	r3, [pc, #116]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bec:	4b1a      	ldr	r3, [pc, #104]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fe ff99 	bl	8006b2a <USBD_SetClassConfig>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00f      	beq.n	8007c22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f918 	bl	8007e3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fe ffa5 	bl	8006b62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007c20:	e014      	b.n	8007c4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f9e0 	bl	8007fe8 <USBD_CtlSendStatus>
      break;
 8007c28:	e010      	b.n	8007c4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9dc 	bl	8007fe8 <USBD_CtlSendStatus>
      break;
 8007c30:	e00c      	b.n	8007c4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f900 	bl	8007e3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c3a:	4b07      	ldr	r3, [pc, #28]	@ (8007c58 <USBD_SetConfig+0x150>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7fe ff8e 	bl	8006b62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c46:	2303      	movs	r3, #3
 8007c48:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4a:	bf00      	nop
  }

  return ret;
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20000318 	.word	0x20000318

08007c5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	88db      	ldrh	r3, [r3, #6]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d004      	beq.n	8007c78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f8e2 	bl	8007e3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c76:	e023      	b.n	8007cc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	dc02      	bgt.n	8007c8a <USBD_GetConfig+0x2e>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dc03      	bgt.n	8007c90 <USBD_GetConfig+0x34>
 8007c88:	e015      	b.n	8007cb6 <USBD_GetConfig+0x5a>
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d00b      	beq.n	8007ca6 <USBD_GetConfig+0x4a>
 8007c8e:	e012      	b.n	8007cb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	3308      	adds	r3, #8
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f948 	bl	8007f34 <USBD_CtlSendData>
        break;
 8007ca4:	e00c      	b.n	8007cc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	2201      	movs	r2, #1
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f940 	bl	8007f34 <USBD_CtlSendData>
        break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f8be 	bl	8007e3a <USBD_CtlError>
        break;
 8007cbe:	bf00      	nop
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d81e      	bhi.n	8007d1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	88db      	ldrh	r3, [r3, #6]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d004      	beq.n	8007cf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f8a5 	bl	8007e3a <USBD_CtlError>
        break;
 8007cf0:	e01a      	b.n	8007d28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d005      	beq.n	8007d0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f043 0202 	orr.w	r2, r3, #2
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	330c      	adds	r3, #12
 8007d12:	2202      	movs	r2, #2
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f90c 	bl	8007f34 <USBD_CtlSendData>
      break;
 8007d1c:	e004      	b.n	8007d28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f88a 	bl	8007e3a <USBD_CtlError>
      break;
 8007d26:	bf00      	nop
  }
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	885b      	ldrh	r3, [r3, #2]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d107      	bne.n	8007d52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f94c 	bl	8007fe8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007d50:	e013      	b.n	8007d7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	885b      	ldrh	r3, [r3, #2]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d10b      	bne.n	8007d72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	889b      	ldrh	r3, [r3, #4]
 8007d5e:	0a1b      	lsrs	r3, r3, #8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f93c 	bl	8007fe8 <USBD_CtlSendStatus>
}
 8007d70:	e003      	b.n	8007d7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f860 	bl	8007e3a <USBD_CtlError>
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	3b01      	subs	r3, #1
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d80b      	bhi.n	8007db2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	885b      	ldrh	r3, [r3, #2]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d10c      	bne.n	8007dbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f91c 	bl	8007fe8 <USBD_CtlSendStatus>
      }
      break;
 8007db0:	e004      	b.n	8007dbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f840 	bl	8007e3a <USBD_CtlError>
      break;
 8007dba:	e000      	b.n	8007dbe <USBD_ClrFeature+0x3c>
      break;
 8007dbc:	bf00      	nop
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	781a      	ldrb	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff fa40 	bl	8007276 <SWAPBYTE>
 8007df6:	4603      	mov	r3, r0
 8007df8:	461a      	mov	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3301      	adds	r3, #1
 8007e02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f7ff fa33 	bl	8007276 <SWAPBYTE>
 8007e10:	4603      	mov	r3, r0
 8007e12:	461a      	mov	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3301      	adds	r3, #1
 8007e22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff fa26 	bl	8007276 <SWAPBYTE>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	80da      	strh	r2, [r3, #6]
}
 8007e32:	bf00      	nop
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e44:	2180      	movs	r1, #128	@ 0x80
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f003 fc30 	bl	800b6ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f003 fc2c 	bl	800b6ac <USBD_LL_StallEP>
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d042      	beq.n	8007ef8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007e76:	6938      	ldr	r0, [r7, #16]
 8007e78:	f000 f842 	bl	8007f00 <USBD_GetLen>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	3301      	adds	r3, #1
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e86:	d808      	bhi.n	8007e9a <USBD_GetString+0x3e>
 8007e88:	6938      	ldr	r0, [r7, #16]
 8007e8a:	f000 f839 	bl	8007f00 <USBD_GetLen>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	3301      	adds	r3, #1
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	e001      	b.n	8007e9e <USBD_GetString+0x42>
 8007e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	7812      	ldrb	r2, [r2, #0]
 8007eac:	701a      	strb	r2, [r3, #0]
  idx++;
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4413      	add	r3, r2
 8007eba:	2203      	movs	r2, #3
 8007ebc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ec4:	e013      	b.n	8007eee <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	4413      	add	r3, r2
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	7812      	ldrb	r2, [r2, #0]
 8007ed0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	613b      	str	r3, [r7, #16]
    idx++;
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	3301      	adds	r3, #1
 8007edc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	3301      	adds	r3, #1
 8007eec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e7      	bne.n	8007ec6 <USBD_GetString+0x6a>
 8007ef6:	e000      	b.n	8007efa <USBD_GetString+0x9e>
    return;
 8007ef8:	bf00      	nop
  }
}
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f10:	e005      	b.n	8007f1e <USBD_GetLen+0x1e>
  {
    len++;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	3301      	adds	r3, #1
 8007f16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1f5      	bne.n	8007f12 <USBD_GetLen+0x12>
  }

  return len;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	2100      	movs	r1, #0
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f003 fc2f 	bl	800b7be <USBD_LL_Transmit>

  return USBD_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f003 fc1e 	bl	800b7be <USBD_LL_Transmit>

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f003 fc22 	bl	800b800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f003 fc11 	bl	800b800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f003 fbdd 	bl	800b7be <USBD_LL_Transmit>

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2205      	movs	r2, #5
 800801a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800801e:	2300      	movs	r3, #0
 8008020:	2200      	movs	r2, #0
 8008022:	2100      	movs	r1, #0
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f003 fbeb 	bl	800b800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <__NVIC_SetPriority>:
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	6039      	str	r1, [r7, #0]
 800803e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008044:	2b00      	cmp	r3, #0
 8008046:	db0a      	blt.n	800805e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	b2da      	uxtb	r2, r3
 800804c:	490c      	ldr	r1, [pc, #48]	@ (8008080 <__NVIC_SetPriority+0x4c>)
 800804e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008052:	0112      	lsls	r2, r2, #4
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	440b      	add	r3, r1
 8008058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800805c:	e00a      	b.n	8008074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	b2da      	uxtb	r2, r3
 8008062:	4908      	ldr	r1, [pc, #32]	@ (8008084 <__NVIC_SetPriority+0x50>)
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	f003 030f 	and.w	r3, r3, #15
 800806a:	3b04      	subs	r3, #4
 800806c:	0112      	lsls	r2, r2, #4
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	440b      	add	r3, r1
 8008072:	761a      	strb	r2, [r3, #24]
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	e000e100 	.word	0xe000e100
 8008084:	e000ed00 	.word	0xe000ed00

08008088 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800808c:	4b05      	ldr	r3, [pc, #20]	@ (80080a4 <SysTick_Handler+0x1c>)
 800808e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008090:	f001 fd92 	bl	8009bb8 <xTaskGetSchedulerState>
 8008094:	4603      	mov	r3, r0
 8008096:	2b01      	cmp	r3, #1
 8008098:	d001      	beq.n	800809e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800809a:	f002 fcad 	bl	800a9f8 <xPortSysTickHandler>
  }
}
 800809e:	bf00      	nop
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	e000e010 	.word	0xe000e010

080080a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80080ac:	2100      	movs	r1, #0
 80080ae:	f06f 0004 	mvn.w	r0, #4
 80080b2:	f7ff ffbf 	bl	8008034 <__NVIC_SetPriority>
#endif
}
 80080b6:	bf00      	nop
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080c2:	f3ef 8305 	mrs	r3, IPSR
 80080c6:	603b      	str	r3, [r7, #0]
  return(result);
 80080c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80080ce:	f06f 0305 	mvn.w	r3, #5
 80080d2:	607b      	str	r3, [r7, #4]
 80080d4:	e00c      	b.n	80080f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80080d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008100 <osKernelInitialize+0x44>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d105      	bne.n	80080ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80080de:	4b08      	ldr	r3, [pc, #32]	@ (8008100 <osKernelInitialize+0x44>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	607b      	str	r3, [r7, #4]
 80080e8:	e002      	b.n	80080f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80080ea:	f04f 33ff 	mov.w	r3, #4294967295
 80080ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080f0:	687b      	ldr	r3, [r7, #4]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	2000031c 	.word	0x2000031c

08008104 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800810a:	f3ef 8305 	mrs	r3, IPSR
 800810e:	603b      	str	r3, [r7, #0]
  return(result);
 8008110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008116:	f06f 0305 	mvn.w	r3, #5
 800811a:	607b      	str	r3, [r7, #4]
 800811c:	e010      	b.n	8008140 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800811e:	4b0b      	ldr	r3, [pc, #44]	@ (800814c <osKernelStart+0x48>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d109      	bne.n	800813a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008126:	f7ff ffbf 	bl	80080a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800812a:	4b08      	ldr	r3, [pc, #32]	@ (800814c <osKernelStart+0x48>)
 800812c:	2202      	movs	r2, #2
 800812e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008130:	f001 f8ce 	bl	80092d0 <vTaskStartScheduler>
      stat = osOK;
 8008134:	2300      	movs	r3, #0
 8008136:	607b      	str	r3, [r7, #4]
 8008138:	e002      	b.n	8008140 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800813a:	f04f 33ff 	mov.w	r3, #4294967295
 800813e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008140:	687b      	ldr	r3, [r7, #4]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	2000031c 	.word	0x2000031c

08008150 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008150:	b580      	push	{r7, lr}
 8008152:	b08e      	sub	sp, #56	@ 0x38
 8008154:	af04      	add	r7, sp, #16
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800815c:	2300      	movs	r3, #0
 800815e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008160:	f3ef 8305 	mrs	r3, IPSR
 8008164:	617b      	str	r3, [r7, #20]
  return(result);
 8008166:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008168:	2b00      	cmp	r3, #0
 800816a:	d17e      	bne.n	800826a <osThreadNew+0x11a>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d07b      	beq.n	800826a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008172:	2380      	movs	r3, #128	@ 0x80
 8008174:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008176:	2318      	movs	r3, #24
 8008178:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800817a:	2300      	movs	r3, #0
 800817c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800817e:	f04f 33ff 	mov.w	r3, #4294967295
 8008182:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d045      	beq.n	8008216 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <osThreadNew+0x48>
        name = attr->name;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d008      	beq.n	80081be <osThreadNew+0x6e>
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	2b38      	cmp	r3, #56	@ 0x38
 80081b0:	d805      	bhi.n	80081be <osThreadNew+0x6e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <osThreadNew+0x72>
        return (NULL);
 80081be:	2300      	movs	r3, #0
 80081c0:	e054      	b.n	800826c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	089b      	lsrs	r3, r3, #2
 80081d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00e      	beq.n	80081f8 <osThreadNew+0xa8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	2ba7      	cmp	r3, #167	@ 0xa7
 80081e0:	d90a      	bls.n	80081f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d006      	beq.n	80081f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <osThreadNew+0xa8>
        mem = 1;
 80081f2:	2301      	movs	r3, #1
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	e010      	b.n	800821a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10c      	bne.n	800821a <osThreadNew+0xca>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d108      	bne.n	800821a <osThreadNew+0xca>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <osThreadNew+0xca>
          mem = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	61bb      	str	r3, [r7, #24]
 8008214:	e001      	b.n	800821a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d110      	bne.n	8008242 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008228:	9202      	str	r2, [sp, #8]
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	6a3a      	ldr	r2, [r7, #32]
 8008234:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fe56 	bl	8008ee8 <xTaskCreateStatic>
 800823c:	4603      	mov	r3, r0
 800823e:	613b      	str	r3, [r7, #16]
 8008240:	e013      	b.n	800826a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d110      	bne.n	800826a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	b29a      	uxth	r2, r3
 800824c:	f107 0310 	add.w	r3, r7, #16
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fea4 	bl	8008fa8 <xTaskCreate>
 8008260:	4603      	mov	r3, r0
 8008262:	2b01      	cmp	r3, #1
 8008264:	d001      	beq.n	800826a <osThreadNew+0x11a>
            hTask = NULL;
 8008266:	2300      	movs	r3, #0
 8008268:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800826a:	693b      	ldr	r3, [r7, #16]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3728      	adds	r7, #40	@ 0x28
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800827c:	f3ef 8305 	mrs	r3, IPSR
 8008280:	60bb      	str	r3, [r7, #8]
  return(result);
 8008282:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <osDelay+0x1c>
    stat = osErrorISR;
 8008288:	f06f 0305 	mvn.w	r3, #5
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	e007      	b.n	80082a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 ffe2 	bl	8009264 <vTaskDelay>
    }
  }

  return (stat);
 80082a0:	68fb      	ldr	r3, [r7, #12]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4a07      	ldr	r2, [pc, #28]	@ (80082d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80082bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4a06      	ldr	r2, [pc, #24]	@ (80082dc <vApplicationGetIdleTaskMemory+0x30>)
 80082c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2280      	movs	r2, #128	@ 0x80
 80082c8:	601a      	str	r2, [r3, #0]
}
 80082ca:	bf00      	nop
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	20000320 	.word	0x20000320
 80082dc:	200003c8 	.word	0x200003c8

080082e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4a07      	ldr	r2, [pc, #28]	@ (800830c <vApplicationGetTimerTaskMemory+0x2c>)
 80082f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	4a06      	ldr	r2, [pc, #24]	@ (8008310 <vApplicationGetTimerTaskMemory+0x30>)
 80082f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082fe:	601a      	str	r2, [r3, #0]
}
 8008300:	bf00      	nop
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	200005c8 	.word	0x200005c8
 8008310:	20000670 	.word	0x20000670

08008314 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f103 0208 	add.w	r2, r3, #8
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f04f 32ff 	mov.w	r2, #4294967295
 800832c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f103 0208 	add.w	r2, r3, #8
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f103 0208 	add.w	r2, r3, #8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800836e:	b480      	push	{r7}
 8008370:	b085      	sub	sp, #20
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	601a      	str	r2, [r3, #0]
}
 80083aa:	bf00      	nop
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083b6:	b480      	push	{r7}
 80083b8:	b085      	sub	sp, #20
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083cc:	d103      	bne.n	80083d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e00c      	b.n	80083f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	3308      	adds	r3, #8
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	e002      	b.n	80083e4 <vListInsert+0x2e>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d2f6      	bcs.n	80083de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	601a      	str	r2, [r3, #0]
}
 800841c:	bf00      	nop
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	6892      	ldr	r2, [r2, #8]
 800843e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	6852      	ldr	r2, [r2, #4]
 8008448:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d103      	bne.n	800845c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	1e5a      	subs	r2, r3, #1
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10b      	bne.n	80084a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084a2:	bf00      	nop
 80084a4:	bf00      	nop
 80084a6:	e7fd      	b.n	80084a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80084a8:	f002 fa16 	bl	800a8d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b4:	68f9      	ldr	r1, [r7, #12]
 80084b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80084b8:	fb01 f303 	mul.w	r3, r1, r3
 80084bc:	441a      	add	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084d8:	3b01      	subs	r3, #1
 80084da:	68f9      	ldr	r1, [r7, #12]
 80084dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80084de:	fb01 f303 	mul.w	r3, r1, r3
 80084e2:	441a      	add	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	22ff      	movs	r2, #255	@ 0xff
 80084ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	22ff      	movs	r2, #255	@ 0xff
 80084f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d114      	bne.n	8008528 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d01a      	beq.n	800853c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3310      	adds	r3, #16
 800850a:	4618      	mov	r0, r3
 800850c:	f001 f97e 	bl	800980c <xTaskRemoveFromEventList>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d012      	beq.n	800853c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008516:	4b0d      	ldr	r3, [pc, #52]	@ (800854c <xQueueGenericReset+0xd0>)
 8008518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	e009      	b.n	800853c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3310      	adds	r3, #16
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff fef1 	bl	8008314 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3324      	adds	r3, #36	@ 0x24
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff feec 	bl	8008314 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800853c:	f002 f9fe 	bl	800a93c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008540:	2301      	movs	r3, #1
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	e000ed04 	.word	0xe000ed04

08008550 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08e      	sub	sp, #56	@ 0x38
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10b      	bne.n	800857c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008576:	bf00      	nop
 8008578:	bf00      	nop
 800857a:	e7fd      	b.n	8008578 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10b      	bne.n	800859a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <xQueueGenericCreateStatic+0x56>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <xQueueGenericCreateStatic+0x5a>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e000      	b.n	80085ac <xQueueGenericCreateStatic+0x5c>
 80085aa:	2300      	movs	r3, #0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10b      	bne.n	80085c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	623b      	str	r3, [r7, #32]
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	e7fd      	b.n	80085c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <xQueueGenericCreateStatic+0x84>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d101      	bne.n	80085d8 <xQueueGenericCreateStatic+0x88>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e000      	b.n	80085da <xQueueGenericCreateStatic+0x8a>
 80085d8:	2300      	movs	r3, #0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10b      	bne.n	80085f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	61fb      	str	r3, [r7, #28]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085f6:	2350      	movs	r3, #80	@ 0x50
 80085f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2b50      	cmp	r3, #80	@ 0x50
 80085fe:	d00b      	beq.n	8008618 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	61bb      	str	r3, [r7, #24]
}
 8008612:	bf00      	nop
 8008614:	bf00      	nop
 8008616:	e7fd      	b.n	8008614 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008618:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800861e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00d      	beq.n	8008640 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800862c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	4613      	mov	r3, r2
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	68b9      	ldr	r1, [r7, #8]
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 f840 	bl	80086c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008642:	4618      	mov	r0, r3
 8008644:	3730      	adds	r7, #48	@ 0x30
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800864a:	b580      	push	{r7, lr}
 800864c:	b08a      	sub	sp, #40	@ 0x28
 800864e:	af02      	add	r7, sp, #8
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	4613      	mov	r3, r2
 8008656:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10b      	bne.n	8008676 <xQueueGenericCreate+0x2c>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	613b      	str	r3, [r7, #16]
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	e7fd      	b.n	8008672 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	fb02 f303 	mul.w	r3, r2, r3
 800867e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	3350      	adds	r3, #80	@ 0x50
 8008684:	4618      	mov	r0, r3
 8008686:	f002 fa49 	bl	800ab1c <pvPortMalloc>
 800868a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d011      	beq.n	80086b6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	3350      	adds	r3, #80	@ 0x50
 800869a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086a4:	79fa      	ldrb	r2, [r7, #7]
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	4613      	mov	r3, r2
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	68b9      	ldr	r1, [r7, #8]
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 f805 	bl	80086c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086b6:	69bb      	ldr	r3, [r7, #24]
	}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3720      	adds	r7, #32
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d103      	bne.n	80086dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	e002      	b.n	80086e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086ee:	2101      	movs	r1, #1
 80086f0:	69b8      	ldr	r0, [r7, #24]
 80086f2:	f7ff fec3 	bl	800847c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	78fa      	ldrb	r2, [r7, #3]
 80086fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80086fe:	bf00      	nop
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08e      	sub	sp, #56	@ 0x38
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008716:	2300      	movs	r3, #0
 8008718:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10b      	bne.n	800873c <xQueueGenericSend+0x34>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	e7fd      	b.n	8008738 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d103      	bne.n	800874a <xQueueGenericSend+0x42>
 8008742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <xQueueGenericSend+0x46>
 800874a:	2301      	movs	r3, #1
 800874c:	e000      	b.n	8008750 <xQueueGenericSend+0x48>
 800874e:	2300      	movs	r3, #0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10b      	bne.n	800876c <xQueueGenericSend+0x64>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008766:	bf00      	nop
 8008768:	bf00      	nop
 800876a:	e7fd      	b.n	8008768 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d103      	bne.n	800877a <xQueueGenericSend+0x72>
 8008772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008776:	2b01      	cmp	r3, #1
 8008778:	d101      	bne.n	800877e <xQueueGenericSend+0x76>
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <xQueueGenericSend+0x78>
 800877e:	2300      	movs	r3, #0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10b      	bne.n	800879c <xQueueGenericSend+0x94>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	623b      	str	r3, [r7, #32]
}
 8008796:	bf00      	nop
 8008798:	bf00      	nop
 800879a:	e7fd      	b.n	8008798 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800879c:	f001 fa0c 	bl	8009bb8 <xTaskGetSchedulerState>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d102      	bne.n	80087ac <xQueueGenericSend+0xa4>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <xQueueGenericSend+0xa8>
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <xQueueGenericSend+0xaa>
 80087b0:	2300      	movs	r3, #0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <xQueueGenericSend+0xc6>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	61fb      	str	r3, [r7, #28]
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	e7fd      	b.n	80087ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087ce:	f002 f883 	bl	800a8d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087da:	429a      	cmp	r2, r3
 80087dc:	d302      	bcc.n	80087e4 <xQueueGenericSend+0xdc>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d129      	bne.n	8008838 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	68b9      	ldr	r1, [r7, #8]
 80087e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087ea:	f000 fa0f 	bl	8008c0c <prvCopyDataToQueue>
 80087ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d010      	beq.n	800881a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	3324      	adds	r3, #36	@ 0x24
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 f805 	bl	800980c <xTaskRemoveFromEventList>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d013      	beq.n	8008830 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008808:	4b3f      	ldr	r3, [pc, #252]	@ (8008908 <xQueueGenericSend+0x200>)
 800880a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	e00a      	b.n	8008830 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008820:	4b39      	ldr	r3, [pc, #228]	@ (8008908 <xQueueGenericSend+0x200>)
 8008822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008830:	f002 f884 	bl	800a93c <vPortExitCritical>
				return pdPASS;
 8008834:	2301      	movs	r3, #1
 8008836:	e063      	b.n	8008900 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800883e:	f002 f87d 	bl	800a93c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008842:	2300      	movs	r3, #0
 8008844:	e05c      	b.n	8008900 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800884c:	f107 0314 	add.w	r3, r7, #20
 8008850:	4618      	mov	r0, r3
 8008852:	f001 f83f 	bl	80098d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008856:	2301      	movs	r3, #1
 8008858:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800885a:	f002 f86f 	bl	800a93c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800885e:	f000 fda7 	bl	80093b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008862:	f002 f839 	bl	800a8d8 <vPortEnterCritical>
 8008866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800886c:	b25b      	sxtb	r3, r3
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008872:	d103      	bne.n	800887c <xQueueGenericSend+0x174>
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008882:	b25b      	sxtb	r3, r3
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d103      	bne.n	8008892 <xQueueGenericSend+0x18a>
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008892:	f002 f853 	bl	800a93c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008896:	1d3a      	adds	r2, r7, #4
 8008898:	f107 0314 	add.w	r3, r7, #20
 800889c:	4611      	mov	r1, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 f82e 	bl	8009900 <xTaskCheckForTimeOut>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d124      	bne.n	80088f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088ac:	f000 faa6 	bl	8008dfc <prvIsQueueFull>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d018      	beq.n	80088e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	3310      	adds	r3, #16
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 ff52 	bl	8009768 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088c6:	f000 fa31 	bl	8008d2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088ca:	f000 fd7f 	bl	80093cc <xTaskResumeAll>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f47f af7c 	bne.w	80087ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80088d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008908 <xQueueGenericSend+0x200>)
 80088d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	e772      	b.n	80087ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088ea:	f000 fa1f 	bl	8008d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088ee:	f000 fd6d 	bl	80093cc <xTaskResumeAll>
 80088f2:	e76c      	b.n	80087ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088f6:	f000 fa19 	bl	8008d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088fa:	f000 fd67 	bl	80093cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80088fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008900:	4618      	mov	r0, r3
 8008902:	3738      	adds	r7, #56	@ 0x38
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b090      	sub	sp, #64	@ 0x40
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10b      	bne.n	800893c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008936:	bf00      	nop
 8008938:	bf00      	nop
 800893a:	e7fd      	b.n	8008938 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d103      	bne.n	800894a <xQueueGenericSendFromISR+0x3e>
 8008942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <xQueueGenericSendFromISR+0x42>
 800894a:	2301      	movs	r3, #1
 800894c:	e000      	b.n	8008950 <xQueueGenericSendFromISR+0x44>
 800894e:	2300      	movs	r3, #0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10b      	bne.n	800896c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b02      	cmp	r3, #2
 8008970:	d103      	bne.n	800897a <xQueueGenericSendFromISR+0x6e>
 8008972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <xQueueGenericSendFromISR+0x72>
 800897a:	2301      	movs	r3, #1
 800897c:	e000      	b.n	8008980 <xQueueGenericSendFromISR+0x74>
 800897e:	2300      	movs	r3, #0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10b      	bne.n	800899c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	623b      	str	r3, [r7, #32]
}
 8008996:	bf00      	nop
 8008998:	bf00      	nop
 800899a:	e7fd      	b.n	8008998 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800899c:	f002 f87c 	bl	800aa98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089a0:	f3ef 8211 	mrs	r2, BASEPRI
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	61fa      	str	r2, [r7, #28]
 80089b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d302      	bcc.n	80089ce <xQueueGenericSendFromISR+0xc2>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d12f      	bne.n	8008a2e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089e4:	f000 f912 	bl	8008c0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80089ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f0:	d112      	bne.n	8008a18 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d016      	beq.n	8008a28 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fc:	3324      	adds	r3, #36	@ 0x24
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 ff04 	bl	800980c <xTaskRemoveFromEventList>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00e      	beq.n	8008a28 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	e007      	b.n	8008a28 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	b25a      	sxtb	r2, r3
 8008a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a2c:	e001      	b.n	8008a32 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a34:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3740      	adds	r7, #64	@ 0x40
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08c      	sub	sp, #48	@ 0x30
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10b      	bne.n	8008a7a <xQueueReceive+0x32>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	623b      	str	r3, [r7, #32]
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	e7fd      	b.n	8008a76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d103      	bne.n	8008a88 <xQueueReceive+0x40>
 8008a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <xQueueReceive+0x44>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <xQueueReceive+0x46>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10b      	bne.n	8008aaa <xQueueReceive+0x62>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	61fb      	str	r3, [r7, #28]
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	e7fd      	b.n	8008aa6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aaa:	f001 f885 	bl	8009bb8 <xTaskGetSchedulerState>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d102      	bne.n	8008aba <xQueueReceive+0x72>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <xQueueReceive+0x76>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <xQueueReceive+0x78>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10b      	bne.n	8008adc <xQueueReceive+0x94>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	61bb      	str	r3, [r7, #24]
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008adc:	f001 fefc 	bl	800a8d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01f      	beq.n	8008b2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008af0:	f000 f8f6 	bl	8008ce0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af6:	1e5a      	subs	r2, r3, #1
 8008af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00f      	beq.n	8008b24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b06:	3310      	adds	r3, #16
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 fe7f 	bl	800980c <xTaskRemoveFromEventList>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b14:	4b3c      	ldr	r3, [pc, #240]	@ (8008c08 <xQueueReceive+0x1c0>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b24:	f001 ff0a 	bl	800a93c <vPortExitCritical>
				return pdPASS;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e069      	b.n	8008c00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b32:	f001 ff03 	bl	800a93c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e062      	b.n	8008c00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d106      	bne.n	8008b4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b40:	f107 0310 	add.w	r3, r7, #16
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 fec5 	bl	80098d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b4e:	f001 fef5 	bl	800a93c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b52:	f000 fc2d 	bl	80093b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b56:	f001 febf 	bl	800a8d8 <vPortEnterCritical>
 8008b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b60:	b25b      	sxtb	r3, r3
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	d103      	bne.n	8008b70 <xQueueReceive+0x128>
 8008b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7c:	d103      	bne.n	8008b86 <xQueueReceive+0x13e>
 8008b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b86:	f001 fed9 	bl	800a93c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b8a:	1d3a      	adds	r2, r7, #4
 8008b8c:	f107 0310 	add.w	r3, r7, #16
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 feb4 	bl	8009900 <xTaskCheckForTimeOut>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d123      	bne.n	8008be6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba0:	f000 f916 	bl	8008dd0 <prvIsQueueEmpty>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d017      	beq.n	8008bda <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	3324      	adds	r3, #36	@ 0x24
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fdd8 	bl	8009768 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bba:	f000 f8b7 	bl	8008d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bbe:	f000 fc05 	bl	80093cc <xTaskResumeAll>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d189      	bne.n	8008adc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8008c08 <xQueueReceive+0x1c0>)
 8008bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	e780      	b.n	8008adc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bdc:	f000 f8a6 	bl	8008d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008be0:	f000 fbf4 	bl	80093cc <xTaskResumeAll>
 8008be4:	e77a      	b.n	8008adc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008be8:	f000 f8a0 	bl	8008d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bec:	f000 fbee 	bl	80093cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bf2:	f000 f8ed 	bl	8008dd0 <prvIsQueueEmpty>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f43f af6f 	beq.w	8008adc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bfe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3730      	adds	r7, #48	@ 0x30
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10d      	bne.n	8008c46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d14d      	bne.n	8008cce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 ffdc 	bl	8009bf4 <xTaskPriorityDisinherit>
 8008c3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	609a      	str	r2, [r3, #8]
 8008c44:	e043      	b.n	8008cce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d119      	bne.n	8008c80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6858      	ldr	r0, [r3, #4]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c54:	461a      	mov	r2, r3
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	f002 fece 	bl	800b9f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c64:	441a      	add	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d32b      	bcc.n	8008cce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	605a      	str	r2, [r3, #4]
 8008c7e:	e026      	b.n	8008cce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	68d8      	ldr	r0, [r3, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c88:	461a      	mov	r2, r3
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	f002 feb4 	bl	800b9f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	68da      	ldr	r2, [r3, #12]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c98:	425b      	negs	r3, r3
 8008c9a:	441a      	add	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d207      	bcs.n	8008cbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb4:	425b      	negs	r3, r3
 8008cb6:	441a      	add	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d105      	bne.n	8008cce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008cd6:	697b      	ldr	r3, [r7, #20]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d018      	beq.n	8008d24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfa:	441a      	add	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68da      	ldr	r2, [r3, #12]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d303      	bcc.n	8008d14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68d9      	ldr	r1, [r3, #12]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	6838      	ldr	r0, [r7, #0]
 8008d20:	f002 fe6a 	bl	800b9f8 <memcpy>
	}
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d34:	f001 fdd0 	bl	800a8d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d40:	e011      	b.n	8008d66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d012      	beq.n	8008d70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3324      	adds	r3, #36	@ 0x24
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fd5c 	bl	800980c <xTaskRemoveFromEventList>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d5a:	f000 fe35 	bl	80099c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	dce9      	bgt.n	8008d42 <prvUnlockQueue+0x16>
 8008d6e:	e000      	b.n	8008d72 <prvUnlockQueue+0x46>
					break;
 8008d70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	22ff      	movs	r2, #255	@ 0xff
 8008d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008d7a:	f001 fddf 	bl	800a93c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d7e:	f001 fdab 	bl	800a8d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d8a:	e011      	b.n	8008db0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d012      	beq.n	8008dba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3310      	adds	r3, #16
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fd37 	bl	800980c <xTaskRemoveFromEventList>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008da4:	f000 fe10 	bl	80099c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dce9      	bgt.n	8008d8c <prvUnlockQueue+0x60>
 8008db8:	e000      	b.n	8008dbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008dba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	22ff      	movs	r2, #255	@ 0xff
 8008dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008dc4:	f001 fdba 	bl	800a93c <vPortExitCritical>
}
 8008dc8:	bf00      	nop
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dd8:	f001 fd7e 	bl	800a8d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d102      	bne.n	8008dea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008de4:	2301      	movs	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	e001      	b.n	8008dee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008dea:	2300      	movs	r3, #0
 8008dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dee:	f001 fda5 	bl	800a93c <vPortExitCritical>

	return xReturn;
 8008df2:	68fb      	ldr	r3, [r7, #12]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e04:	f001 fd68 	bl	800a8d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d102      	bne.n	8008e1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e14:	2301      	movs	r3, #1
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	e001      	b.n	8008e1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e1e:	f001 fd8d 	bl	800a93c <vPortExitCritical>

	return xReturn;
 8008e22:	68fb      	ldr	r3, [r7, #12]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	e014      	b.n	8008e66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8008e7c <vQueueAddToRegistry+0x50>)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10b      	bne.n	8008e60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e48:	490c      	ldr	r1, [pc, #48]	@ (8008e7c <vQueueAddToRegistry+0x50>)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e52:	4a0a      	ldr	r2, [pc, #40]	@ (8008e7c <vQueueAddToRegistry+0x50>)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4413      	add	r3, r2
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e5e:	e006      	b.n	8008e6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3301      	adds	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b07      	cmp	r3, #7
 8008e6a:	d9e7      	bls.n	8008e3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	20000a70 	.word	0x20000a70

08008e80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e90:	f001 fd22 	bl	800a8d8 <vPortEnterCritical>
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e9a:	b25b      	sxtb	r3, r3
 8008e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea0:	d103      	bne.n	8008eaa <vQueueWaitForMessageRestricted+0x2a>
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008eb0:	b25b      	sxtb	r3, r3
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d103      	bne.n	8008ec0 <vQueueWaitForMessageRestricted+0x40>
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ec0:	f001 fd3c 	bl	800a93c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d106      	bne.n	8008eda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	3324      	adds	r3, #36	@ 0x24
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fc6d 	bl	80097b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008eda:	6978      	ldr	r0, [r7, #20]
 8008edc:	f7ff ff26 	bl	8008d2c <prvUnlockQueue>
	}
 8008ee0:	bf00      	nop
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08e      	sub	sp, #56	@ 0x38
 8008eec:	af04      	add	r7, sp, #16
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10b      	bne.n	8008f14 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	623b      	str	r3, [r7, #32]
}
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	e7fd      	b.n	8008f10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10b      	bne.n	8008f32 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	61fb      	str	r3, [r7, #28]
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	e7fd      	b.n	8008f2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f32:	23a8      	movs	r3, #168	@ 0xa8
 8008f34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2ba8      	cmp	r3, #168	@ 0xa8
 8008f3a:	d00b      	beq.n	8008f54 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	61bb      	str	r3, [r7, #24]
}
 8008f4e:	bf00      	nop
 8008f50:	bf00      	nop
 8008f52:	e7fd      	b.n	8008f50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d01e      	beq.n	8008f9a <xTaskCreateStatic+0xb2>
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d01b      	beq.n	8008f9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6e:	2202      	movs	r2, #2
 8008f70:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f74:	2300      	movs	r3, #0
 8008f76:	9303      	str	r3, [sp, #12]
 8008f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7a:	9302      	str	r3, [sp, #8]
 8008f7c:	f107 0314 	add.w	r3, r7, #20
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 f851 	bl	8009034 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f94:	f000 f8f6 	bl	8009184 <prvAddNewTaskToReadyList>
 8008f98:	e001      	b.n	8008f9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f9e:	697b      	ldr	r3, [r7, #20]
	}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3728      	adds	r7, #40	@ 0x28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08c      	sub	sp, #48	@ 0x30
 8008fac:	af04      	add	r7, sp, #16
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 fdad 	bl	800ab1c <pvPortMalloc>
 8008fc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00e      	beq.n	8008fe8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008fca:	20a8      	movs	r0, #168	@ 0xa8
 8008fcc:	f001 fda6 	bl	800ab1c <pvPortMalloc>
 8008fd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8008fde:	e005      	b.n	8008fec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008fe0:	6978      	ldr	r0, [r7, #20]
 8008fe2:	f001 fe69 	bl	800acb8 <vPortFree>
 8008fe6:	e001      	b.n	8008fec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d017      	beq.n	8009022 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ffa:	88fa      	ldrh	r2, [r7, #6]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9303      	str	r3, [sp, #12]
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	9302      	str	r3, [sp, #8]
 8009004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 f80f 	bl	8009034 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009016:	69f8      	ldr	r0, [r7, #28]
 8009018:	f000 f8b4 	bl	8009184 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800901c:	2301      	movs	r3, #1
 800901e:	61bb      	str	r3, [r7, #24]
 8009020:	e002      	b.n	8009028 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009022:	f04f 33ff 	mov.w	r3, #4294967295
 8009026:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009028:	69bb      	ldr	r3, [r7, #24]
	}
 800902a:	4618      	mov	r0, r3
 800902c:	3720      	adds	r7, #32
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	461a      	mov	r2, r3
 800904c:	21a5      	movs	r1, #165	@ 0xa5
 800904e:	f002 fc4f 	bl	800b8f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800905c:	3b01      	subs	r3, #1
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	f023 0307 	bic.w	r3, r3, #7
 800906a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00b      	beq.n	800908e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	617b      	str	r3, [r7, #20]
}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	e7fd      	b.n	800908a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01f      	beq.n	80090d4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009094:	2300      	movs	r3, #0
 8009096:	61fb      	str	r3, [r7, #28]
 8009098:	e012      	b.n	80090c0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	4413      	add	r3, r2
 80090a0:	7819      	ldrb	r1, [r3, #0]
 80090a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	4413      	add	r3, r2
 80090a8:	3334      	adds	r3, #52	@ 0x34
 80090aa:	460a      	mov	r2, r1
 80090ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	4413      	add	r3, r2
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d006      	beq.n	80090c8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	3301      	adds	r3, #1
 80090be:	61fb      	str	r3, [r7, #28]
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	2b0f      	cmp	r3, #15
 80090c4:	d9e9      	bls.n	800909a <prvInitialiseNewTask+0x66>
 80090c6:	e000      	b.n	80090ca <prvInitialiseNewTask+0x96>
			{
				break;
 80090c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80090d2:	e003      	b.n	80090dc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090de:	2b37      	cmp	r3, #55	@ 0x37
 80090e0:	d901      	bls.n	80090e6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090e2:	2337      	movs	r3, #55	@ 0x37
 80090e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f4:	2200      	movs	r2, #0
 80090f6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fa:	3304      	adds	r3, #4
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7ff f929 	bl	8008354 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	3318      	adds	r3, #24
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff f924 	bl	8008354 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009110:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009114:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800911c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009120:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	2200      	movs	r2, #0
 8009126:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	2200      	movs	r2, #0
 800912e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	3354      	adds	r3, #84	@ 0x54
 8009136:	224c      	movs	r2, #76	@ 0x4c
 8009138:	2100      	movs	r1, #0
 800913a:	4618      	mov	r0, r3
 800913c:	f002 fbd8 	bl	800b8f0 <memset>
 8009140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009142:	4a0d      	ldr	r2, [pc, #52]	@ (8009178 <prvInitialiseNewTask+0x144>)
 8009144:	659a      	str	r2, [r3, #88]	@ 0x58
 8009146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009148:	4a0c      	ldr	r2, [pc, #48]	@ (800917c <prvInitialiseNewTask+0x148>)
 800914a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800914c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914e:	4a0c      	ldr	r2, [pc, #48]	@ (8009180 <prvInitialiseNewTask+0x14c>)
 8009150:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	68f9      	ldr	r1, [r7, #12]
 8009156:	69b8      	ldr	r0, [r7, #24]
 8009158:	f001 fa8c 	bl	800a674 <pxPortInitialiseStack>
 800915c:	4602      	mov	r2, r0
 800915e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009160:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d002      	beq.n	800916e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800916c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800916e:	bf00      	nop
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	200068e4 	.word	0x200068e4
 800917c:	2000694c 	.word	0x2000694c
 8009180:	200069b4 	.word	0x200069b4

08009184 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800918c:	f001 fba4 	bl	800a8d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009190:	4b2d      	ldr	r3, [pc, #180]	@ (8009248 <prvAddNewTaskToReadyList+0xc4>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3301      	adds	r3, #1
 8009196:	4a2c      	ldr	r2, [pc, #176]	@ (8009248 <prvAddNewTaskToReadyList+0xc4>)
 8009198:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800919a:	4b2c      	ldr	r3, [pc, #176]	@ (800924c <prvAddNewTaskToReadyList+0xc8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091a2:	4a2a      	ldr	r2, [pc, #168]	@ (800924c <prvAddNewTaskToReadyList+0xc8>)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091a8:	4b27      	ldr	r3, [pc, #156]	@ (8009248 <prvAddNewTaskToReadyList+0xc4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d110      	bne.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091b0:	f000 fc2e 	bl	8009a10 <prvInitialiseTaskLists>
 80091b4:	e00d      	b.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091b6:	4b26      	ldr	r3, [pc, #152]	@ (8009250 <prvAddNewTaskToReadyList+0xcc>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d109      	bne.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091be:	4b23      	ldr	r3, [pc, #140]	@ (800924c <prvAddNewTaskToReadyList+0xc8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d802      	bhi.n	80091d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091cc:	4a1f      	ldr	r2, [pc, #124]	@ (800924c <prvAddNewTaskToReadyList+0xc8>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091d2:	4b20      	ldr	r3, [pc, #128]	@ (8009254 <prvAddNewTaskToReadyList+0xd0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3301      	adds	r3, #1
 80091d8:	4a1e      	ldr	r2, [pc, #120]	@ (8009254 <prvAddNewTaskToReadyList+0xd0>)
 80091da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80091dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009254 <prvAddNewTaskToReadyList+0xd0>)
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009258 <prvAddNewTaskToReadyList+0xd4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d903      	bls.n	80091f8 <prvAddNewTaskToReadyList+0x74>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f4:	4a18      	ldr	r2, [pc, #96]	@ (8009258 <prvAddNewTaskToReadyList+0xd4>)
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fc:	4613      	mov	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4a15      	ldr	r2, [pc, #84]	@ (800925c <prvAddNewTaskToReadyList+0xd8>)
 8009206:	441a      	add	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3304      	adds	r3, #4
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f7ff f8ad 	bl	800836e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009214:	f001 fb92 	bl	800a93c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009218:	4b0d      	ldr	r3, [pc, #52]	@ (8009250 <prvAddNewTaskToReadyList+0xcc>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00e      	beq.n	800923e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009220:	4b0a      	ldr	r3, [pc, #40]	@ (800924c <prvAddNewTaskToReadyList+0xc8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922a:	429a      	cmp	r2, r3
 800922c:	d207      	bcs.n	800923e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800922e:	4b0c      	ldr	r3, [pc, #48]	@ (8009260 <prvAddNewTaskToReadyList+0xdc>)
 8009230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000f84 	.word	0x20000f84
 800924c:	20000ab0 	.word	0x20000ab0
 8009250:	20000f90 	.word	0x20000f90
 8009254:	20000fa0 	.word	0x20000fa0
 8009258:	20000f8c 	.word	0x20000f8c
 800925c:	20000ab4 	.word	0x20000ab4
 8009260:	e000ed04 	.word	0xe000ed04

08009264 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800926c:	2300      	movs	r3, #0
 800926e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d018      	beq.n	80092a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009276:	4b14      	ldr	r3, [pc, #80]	@ (80092c8 <vTaskDelay+0x64>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <vTaskDelay+0x32>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	60bb      	str	r3, [r7, #8]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009296:	f000 f88b 	bl	80093b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800929a:	2100      	movs	r1, #0
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fe3b 	bl	8009f18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092a2:	f000 f893 	bl	80093cc <xTaskResumeAll>
 80092a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d107      	bne.n	80092be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80092ae:	4b07      	ldr	r3, [pc, #28]	@ (80092cc <vTaskDelay+0x68>)
 80092b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20000fac 	.word	0x20000fac
 80092cc:	e000ed04 	.word	0xe000ed04

080092d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08a      	sub	sp, #40	@ 0x28
 80092d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092de:	463a      	mov	r2, r7
 80092e0:	1d39      	adds	r1, r7, #4
 80092e2:	f107 0308 	add.w	r3, r7, #8
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe ffe0 	bl	80082ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	9202      	str	r2, [sp, #8]
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	2300      	movs	r3, #0
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	2300      	movs	r3, #0
 80092fc:	460a      	mov	r2, r1
 80092fe:	4924      	ldr	r1, [pc, #144]	@ (8009390 <vTaskStartScheduler+0xc0>)
 8009300:	4824      	ldr	r0, [pc, #144]	@ (8009394 <vTaskStartScheduler+0xc4>)
 8009302:	f7ff fdf1 	bl	8008ee8 <xTaskCreateStatic>
 8009306:	4603      	mov	r3, r0
 8009308:	4a23      	ldr	r2, [pc, #140]	@ (8009398 <vTaskStartScheduler+0xc8>)
 800930a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800930c:	4b22      	ldr	r3, [pc, #136]	@ (8009398 <vTaskStartScheduler+0xc8>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009314:	2301      	movs	r3, #1
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	e001      	b.n	800931e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800931a:	2300      	movs	r3, #0
 800931c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d102      	bne.n	800932a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009324:	f000 fe4c 	bl	8009fc0 <xTimerCreateTimerTask>
 8009328:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d11b      	bne.n	8009368 <vTaskStartScheduler+0x98>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	613b      	str	r3, [r7, #16]
}
 8009342:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009344:	4b15      	ldr	r3, [pc, #84]	@ (800939c <vTaskStartScheduler+0xcc>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3354      	adds	r3, #84	@ 0x54
 800934a:	4a15      	ldr	r2, [pc, #84]	@ (80093a0 <vTaskStartScheduler+0xd0>)
 800934c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800934e:	4b15      	ldr	r3, [pc, #84]	@ (80093a4 <vTaskStartScheduler+0xd4>)
 8009350:	f04f 32ff 	mov.w	r2, #4294967295
 8009354:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009356:	4b14      	ldr	r3, [pc, #80]	@ (80093a8 <vTaskStartScheduler+0xd8>)
 8009358:	2201      	movs	r2, #1
 800935a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800935c:	4b13      	ldr	r3, [pc, #76]	@ (80093ac <vTaskStartScheduler+0xdc>)
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009362:	f001 fa15 	bl	800a790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009366:	e00f      	b.n	8009388 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936e:	d10b      	bne.n	8009388 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	60fb      	str	r3, [r7, #12]
}
 8009382:	bf00      	nop
 8009384:	bf00      	nop
 8009386:	e7fd      	b.n	8009384 <vTaskStartScheduler+0xb4>
}
 8009388:	bf00      	nop
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	0800bb2c 	.word	0x0800bb2c
 8009394:	080099e1 	.word	0x080099e1
 8009398:	20000fa8 	.word	0x20000fa8
 800939c:	20000ab0 	.word	0x20000ab0
 80093a0:	20000104 	.word	0x20000104
 80093a4:	20000fa4 	.word	0x20000fa4
 80093a8:	20000f90 	.word	0x20000f90
 80093ac:	20000f88 	.word	0x20000f88

080093b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093b0:	b480      	push	{r7}
 80093b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093b4:	4b04      	ldr	r3, [pc, #16]	@ (80093c8 <vTaskSuspendAll+0x18>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3301      	adds	r3, #1
 80093ba:	4a03      	ldr	r2, [pc, #12]	@ (80093c8 <vTaskSuspendAll+0x18>)
 80093bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093be:	bf00      	nop
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	20000fac 	.word	0x20000fac

080093cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093d6:	2300      	movs	r3, #0
 80093d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093da:	4b42      	ldr	r3, [pc, #264]	@ (80094e4 <xTaskResumeAll+0x118>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10b      	bne.n	80093fa <xTaskResumeAll+0x2e>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	603b      	str	r3, [r7, #0]
}
 80093f4:	bf00      	nop
 80093f6:	bf00      	nop
 80093f8:	e7fd      	b.n	80093f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093fa:	f001 fa6d 	bl	800a8d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093fe:	4b39      	ldr	r3, [pc, #228]	@ (80094e4 <xTaskResumeAll+0x118>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3b01      	subs	r3, #1
 8009404:	4a37      	ldr	r2, [pc, #220]	@ (80094e4 <xTaskResumeAll+0x118>)
 8009406:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009408:	4b36      	ldr	r3, [pc, #216]	@ (80094e4 <xTaskResumeAll+0x118>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d162      	bne.n	80094d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009410:	4b35      	ldr	r3, [pc, #212]	@ (80094e8 <xTaskResumeAll+0x11c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d05e      	beq.n	80094d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009418:	e02f      	b.n	800947a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800941a:	4b34      	ldr	r3, [pc, #208]	@ (80094ec <xTaskResumeAll+0x120>)
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3318      	adds	r3, #24
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fffe 	bl	8008428 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3304      	adds	r3, #4
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe fff9 	bl	8008428 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800943a:	4b2d      	ldr	r3, [pc, #180]	@ (80094f0 <xTaskResumeAll+0x124>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	d903      	bls.n	800944a <xTaskResumeAll+0x7e>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009446:	4a2a      	ldr	r2, [pc, #168]	@ (80094f0 <xTaskResumeAll+0x124>)
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4a27      	ldr	r2, [pc, #156]	@ (80094f4 <xTaskResumeAll+0x128>)
 8009458:	441a      	add	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3304      	adds	r3, #4
 800945e:	4619      	mov	r1, r3
 8009460:	4610      	mov	r0, r2
 8009462:	f7fe ff84 	bl	800836e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946a:	4b23      	ldr	r3, [pc, #140]	@ (80094f8 <xTaskResumeAll+0x12c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009470:	429a      	cmp	r2, r3
 8009472:	d302      	bcc.n	800947a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009474:	4b21      	ldr	r3, [pc, #132]	@ (80094fc <xTaskResumeAll+0x130>)
 8009476:	2201      	movs	r2, #1
 8009478:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800947a:	4b1c      	ldr	r3, [pc, #112]	@ (80094ec <xTaskResumeAll+0x120>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1cb      	bne.n	800941a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009488:	f000 fb66 	bl	8009b58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800948c:	4b1c      	ldr	r3, [pc, #112]	@ (8009500 <xTaskResumeAll+0x134>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d010      	beq.n	80094ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009498:	f000 f846 	bl	8009528 <xTaskIncrementTick>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80094a2:	4b16      	ldr	r3, [pc, #88]	@ (80094fc <xTaskResumeAll+0x130>)
 80094a4:	2201      	movs	r2, #1
 80094a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1f1      	bne.n	8009498 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80094b4:	4b12      	ldr	r3, [pc, #72]	@ (8009500 <xTaskResumeAll+0x134>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094ba:	4b10      	ldr	r3, [pc, #64]	@ (80094fc <xTaskResumeAll+0x130>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094c2:	2301      	movs	r3, #1
 80094c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009504 <xTaskResumeAll+0x138>)
 80094c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094d6:	f001 fa31 	bl	800a93c <vPortExitCritical>

	return xAlreadyYielded;
 80094da:	68bb      	ldr	r3, [r7, #8]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	20000fac 	.word	0x20000fac
 80094e8:	20000f84 	.word	0x20000f84
 80094ec:	20000f44 	.word	0x20000f44
 80094f0:	20000f8c 	.word	0x20000f8c
 80094f4:	20000ab4 	.word	0x20000ab4
 80094f8:	20000ab0 	.word	0x20000ab0
 80094fc:	20000f98 	.word	0x20000f98
 8009500:	20000f94 	.word	0x20000f94
 8009504:	e000ed04 	.word	0xe000ed04

08009508 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800950e:	4b05      	ldr	r3, [pc, #20]	@ (8009524 <xTaskGetTickCount+0x1c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009514:	687b      	ldr	r3, [r7, #4]
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20000f88 	.word	0x20000f88

08009528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800952e:	2300      	movs	r3, #0
 8009530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009532:	4b4f      	ldr	r3, [pc, #316]	@ (8009670 <xTaskIncrementTick+0x148>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f040 8090 	bne.w	800965c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800953c:	4b4d      	ldr	r3, [pc, #308]	@ (8009674 <xTaskIncrementTick+0x14c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3301      	adds	r3, #1
 8009542:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009544:	4a4b      	ldr	r2, [pc, #300]	@ (8009674 <xTaskIncrementTick+0x14c>)
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d121      	bne.n	8009594 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009550:	4b49      	ldr	r3, [pc, #292]	@ (8009678 <xTaskIncrementTick+0x150>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00b      	beq.n	8009572 <xTaskIncrementTick+0x4a>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	603b      	str	r3, [r7, #0]
}
 800956c:	bf00      	nop
 800956e:	bf00      	nop
 8009570:	e7fd      	b.n	800956e <xTaskIncrementTick+0x46>
 8009572:	4b41      	ldr	r3, [pc, #260]	@ (8009678 <xTaskIncrementTick+0x150>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	4b40      	ldr	r3, [pc, #256]	@ (800967c <xTaskIncrementTick+0x154>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a3e      	ldr	r2, [pc, #248]	@ (8009678 <xTaskIncrementTick+0x150>)
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	4a3e      	ldr	r2, [pc, #248]	@ (800967c <xTaskIncrementTick+0x154>)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	4b3e      	ldr	r3, [pc, #248]	@ (8009680 <xTaskIncrementTick+0x158>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3301      	adds	r3, #1
 800958c:	4a3c      	ldr	r2, [pc, #240]	@ (8009680 <xTaskIncrementTick+0x158>)
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	f000 fae2 	bl	8009b58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009594:	4b3b      	ldr	r3, [pc, #236]	@ (8009684 <xTaskIncrementTick+0x15c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	429a      	cmp	r2, r3
 800959c:	d349      	bcc.n	8009632 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800959e:	4b36      	ldr	r3, [pc, #216]	@ (8009678 <xTaskIncrementTick+0x150>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d104      	bne.n	80095b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095a8:	4b36      	ldr	r3, [pc, #216]	@ (8009684 <xTaskIncrementTick+0x15c>)
 80095aa:	f04f 32ff 	mov.w	r2, #4294967295
 80095ae:	601a      	str	r2, [r3, #0]
					break;
 80095b0:	e03f      	b.n	8009632 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095b2:	4b31      	ldr	r3, [pc, #196]	@ (8009678 <xTaskIncrementTick+0x150>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d203      	bcs.n	80095d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009684 <xTaskIncrementTick+0x15c>)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095d0:	e02f      	b.n	8009632 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fe ff26 	bl	8008428 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d004      	beq.n	80095ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	3318      	adds	r3, #24
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe ff1d 	bl	8008428 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f2:	4b25      	ldr	r3, [pc, #148]	@ (8009688 <xTaskIncrementTick+0x160>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d903      	bls.n	8009602 <xTaskIncrementTick+0xda>
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fe:	4a22      	ldr	r2, [pc, #136]	@ (8009688 <xTaskIncrementTick+0x160>)
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4a1f      	ldr	r2, [pc, #124]	@ (800968c <xTaskIncrementTick+0x164>)
 8009610:	441a      	add	r2, r3
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	3304      	adds	r3, #4
 8009616:	4619      	mov	r1, r3
 8009618:	4610      	mov	r0, r2
 800961a:	f7fe fea8 	bl	800836e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009622:	4b1b      	ldr	r3, [pc, #108]	@ (8009690 <xTaskIncrementTick+0x168>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009628:	429a      	cmp	r2, r3
 800962a:	d3b8      	bcc.n	800959e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800962c:	2301      	movs	r3, #1
 800962e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009630:	e7b5      	b.n	800959e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009632:	4b17      	ldr	r3, [pc, #92]	@ (8009690 <xTaskIncrementTick+0x168>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009638:	4914      	ldr	r1, [pc, #80]	@ (800968c <xTaskIncrementTick+0x164>)
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d901      	bls.n	800964e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800964a:	2301      	movs	r3, #1
 800964c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800964e:	4b11      	ldr	r3, [pc, #68]	@ (8009694 <xTaskIncrementTick+0x16c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d007      	beq.n	8009666 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009656:	2301      	movs	r3, #1
 8009658:	617b      	str	r3, [r7, #20]
 800965a:	e004      	b.n	8009666 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800965c:	4b0e      	ldr	r3, [pc, #56]	@ (8009698 <xTaskIncrementTick+0x170>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3301      	adds	r3, #1
 8009662:	4a0d      	ldr	r2, [pc, #52]	@ (8009698 <xTaskIncrementTick+0x170>)
 8009664:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009666:	697b      	ldr	r3, [r7, #20]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3718      	adds	r7, #24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20000fac 	.word	0x20000fac
 8009674:	20000f88 	.word	0x20000f88
 8009678:	20000f3c 	.word	0x20000f3c
 800967c:	20000f40 	.word	0x20000f40
 8009680:	20000f9c 	.word	0x20000f9c
 8009684:	20000fa4 	.word	0x20000fa4
 8009688:	20000f8c 	.word	0x20000f8c
 800968c:	20000ab4 	.word	0x20000ab4
 8009690:	20000ab0 	.word	0x20000ab0
 8009694:	20000f98 	.word	0x20000f98
 8009698:	20000f94 	.word	0x20000f94

0800969c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096a2:	4b2b      	ldr	r3, [pc, #172]	@ (8009750 <vTaskSwitchContext+0xb4>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009754 <vTaskSwitchContext+0xb8>)
 80096ac:	2201      	movs	r2, #1
 80096ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096b0:	e047      	b.n	8009742 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80096b2:	4b28      	ldr	r3, [pc, #160]	@ (8009754 <vTaskSwitchContext+0xb8>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096b8:	4b27      	ldr	r3, [pc, #156]	@ (8009758 <vTaskSwitchContext+0xbc>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	e011      	b.n	80096e4 <vTaskSwitchContext+0x48>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10b      	bne.n	80096de <vTaskSwitchContext+0x42>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	607b      	str	r3, [r7, #4]
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	e7fd      	b.n	80096da <vTaskSwitchContext+0x3e>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	491d      	ldr	r1, [pc, #116]	@ (800975c <vTaskSwitchContext+0xc0>)
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	4613      	mov	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	440b      	add	r3, r1
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0e3      	beq.n	80096c0 <vTaskSwitchContext+0x24>
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4a16      	ldr	r2, [pc, #88]	@ (800975c <vTaskSwitchContext+0xc0>)
 8009704:	4413      	add	r3, r2
 8009706:	60bb      	str	r3, [r7, #8]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	605a      	str	r2, [r3, #4]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	3308      	adds	r3, #8
 800971a:	429a      	cmp	r2, r3
 800971c:	d104      	bne.n	8009728 <vTaskSwitchContext+0x8c>
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	605a      	str	r2, [r3, #4]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	4a0c      	ldr	r2, [pc, #48]	@ (8009760 <vTaskSwitchContext+0xc4>)
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	4a09      	ldr	r2, [pc, #36]	@ (8009758 <vTaskSwitchContext+0xbc>)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009738:	4b09      	ldr	r3, [pc, #36]	@ (8009760 <vTaskSwitchContext+0xc4>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	3354      	adds	r3, #84	@ 0x54
 800973e:	4a09      	ldr	r2, [pc, #36]	@ (8009764 <vTaskSwitchContext+0xc8>)
 8009740:	6013      	str	r3, [r2, #0]
}
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000fac 	.word	0x20000fac
 8009754:	20000f98 	.word	0x20000f98
 8009758:	20000f8c 	.word	0x20000f8c
 800975c:	20000ab4 	.word	0x20000ab4
 8009760:	20000ab0 	.word	0x20000ab0
 8009764:	20000104 	.word	0x20000104

08009768 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10b      	bne.n	8009790 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	60fb      	str	r3, [r7, #12]
}
 800978a:	bf00      	nop
 800978c:	bf00      	nop
 800978e:	e7fd      	b.n	800978c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009790:	4b07      	ldr	r3, [pc, #28]	@ (80097b0 <vTaskPlaceOnEventList+0x48>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3318      	adds	r3, #24
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7fe fe0c 	bl	80083b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800979e:	2101      	movs	r1, #1
 80097a0:	6838      	ldr	r0, [r7, #0]
 80097a2:	f000 fbb9 	bl	8009f18 <prvAddCurrentTaskToDelayedList>
}
 80097a6:	bf00      	nop
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20000ab0 	.word	0x20000ab0

080097b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10b      	bne.n	80097de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ca:	f383 8811 	msr	BASEPRI, r3
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	617b      	str	r3, [r7, #20]
}
 80097d8:	bf00      	nop
 80097da:	bf00      	nop
 80097dc:	e7fd      	b.n	80097da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097de:	4b0a      	ldr	r3, [pc, #40]	@ (8009808 <vTaskPlaceOnEventListRestricted+0x54>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3318      	adds	r3, #24
 80097e4:	4619      	mov	r1, r3
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f7fe fdc1 	bl	800836e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80097f2:	f04f 33ff 	mov.w	r3, #4294967295
 80097f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097f8:	6879      	ldr	r1, [r7, #4]
 80097fa:	68b8      	ldr	r0, [r7, #8]
 80097fc:	f000 fb8c 	bl	8009f18 <prvAddCurrentTaskToDelayedList>
	}
 8009800:	bf00      	nop
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000ab0 	.word	0x20000ab0

0800980c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10b      	bne.n	800983a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	60fb      	str	r3, [r7, #12]
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop
 8009838:	e7fd      	b.n	8009836 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	3318      	adds	r3, #24
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fdf2 	bl	8008428 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009844:	4b1d      	ldr	r3, [pc, #116]	@ (80098bc <xTaskRemoveFromEventList+0xb0>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d11d      	bne.n	8009888 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	3304      	adds	r3, #4
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe fde9 	bl	8008428 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800985a:	4b19      	ldr	r3, [pc, #100]	@ (80098c0 <xTaskRemoveFromEventList+0xb4>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d903      	bls.n	800986a <xTaskRemoveFromEventList+0x5e>
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009866:	4a16      	ldr	r2, [pc, #88]	@ (80098c0 <xTaskRemoveFromEventList+0xb4>)
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986e:	4613      	mov	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4a13      	ldr	r2, [pc, #76]	@ (80098c4 <xTaskRemoveFromEventList+0xb8>)
 8009878:	441a      	add	r2, r3
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	3304      	adds	r3, #4
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f7fe fd74 	bl	800836e <vListInsertEnd>
 8009886:	e005      	b.n	8009894 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	3318      	adds	r3, #24
 800988c:	4619      	mov	r1, r3
 800988e:	480e      	ldr	r0, [pc, #56]	@ (80098c8 <xTaskRemoveFromEventList+0xbc>)
 8009890:	f7fe fd6d 	bl	800836e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009898:	4b0c      	ldr	r3, [pc, #48]	@ (80098cc <xTaskRemoveFromEventList+0xc0>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989e:	429a      	cmp	r2, r3
 80098a0:	d905      	bls.n	80098ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098a2:	2301      	movs	r3, #1
 80098a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098a6:	4b0a      	ldr	r3, [pc, #40]	@ (80098d0 <xTaskRemoveFromEventList+0xc4>)
 80098a8:	2201      	movs	r2, #1
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	e001      	b.n	80098b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098b2:	697b      	ldr	r3, [r7, #20]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3718      	adds	r7, #24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20000fac 	.word	0x20000fac
 80098c0:	20000f8c 	.word	0x20000f8c
 80098c4:	20000ab4 	.word	0x20000ab4
 80098c8:	20000f44 	.word	0x20000f44
 80098cc:	20000ab0 	.word	0x20000ab0
 80098d0:	20000f98 	.word	0x20000f98

080098d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098dc:	4b06      	ldr	r3, [pc, #24]	@ (80098f8 <vTaskInternalSetTimeOutState+0x24>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098e4:	4b05      	ldr	r3, [pc, #20]	@ (80098fc <vTaskInternalSetTimeOutState+0x28>)
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	605a      	str	r2, [r3, #4]
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	20000f9c 	.word	0x20000f9c
 80098fc:	20000f88 	.word	0x20000f88

08009900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10b      	bne.n	8009928 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	613b      	str	r3, [r7, #16]
}
 8009922:	bf00      	nop
 8009924:	bf00      	nop
 8009926:	e7fd      	b.n	8009924 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10b      	bne.n	8009946 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	60fb      	str	r3, [r7, #12]
}
 8009940:	bf00      	nop
 8009942:	bf00      	nop
 8009944:	e7fd      	b.n	8009942 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009946:	f000 ffc7 	bl	800a8d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800994a:	4b1d      	ldr	r3, [pc, #116]	@ (80099c0 <xTaskCheckForTimeOut+0xc0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	69ba      	ldr	r2, [r7, #24]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009962:	d102      	bne.n	800996a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009964:	2300      	movs	r3, #0
 8009966:	61fb      	str	r3, [r7, #28]
 8009968:	e023      	b.n	80099b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4b15      	ldr	r3, [pc, #84]	@ (80099c4 <xTaskCheckForTimeOut+0xc4>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	429a      	cmp	r2, r3
 8009974:	d007      	beq.n	8009986 <xTaskCheckForTimeOut+0x86>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	429a      	cmp	r2, r3
 800997e:	d302      	bcc.n	8009986 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009980:	2301      	movs	r3, #1
 8009982:	61fb      	str	r3, [r7, #28]
 8009984:	e015      	b.n	80099b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	429a      	cmp	r2, r3
 800998e:	d20b      	bcs.n	80099a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	1ad2      	subs	r2, r2, r3
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7ff ff99 	bl	80098d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80099a2:	2300      	movs	r3, #0
 80099a4:	61fb      	str	r3, [r7, #28]
 80099a6:	e004      	b.n	80099b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2200      	movs	r2, #0
 80099ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099ae:	2301      	movs	r3, #1
 80099b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099b2:	f000 ffc3 	bl	800a93c <vPortExitCritical>

	return xReturn;
 80099b6:	69fb      	ldr	r3, [r7, #28]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3720      	adds	r7, #32
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	20000f88 	.word	0x20000f88
 80099c4:	20000f9c 	.word	0x20000f9c

080099c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099cc:	4b03      	ldr	r3, [pc, #12]	@ (80099dc <vTaskMissedYield+0x14>)
 80099ce:	2201      	movs	r2, #1
 80099d0:	601a      	str	r2, [r3, #0]
}
 80099d2:	bf00      	nop
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	20000f98 	.word	0x20000f98

080099e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099e8:	f000 f852 	bl	8009a90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099ec:	4b06      	ldr	r3, [pc, #24]	@ (8009a08 <prvIdleTask+0x28>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d9f9      	bls.n	80099e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099f4:	4b05      	ldr	r3, [pc, #20]	@ (8009a0c <prvIdleTask+0x2c>)
 80099f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a04:	e7f0      	b.n	80099e8 <prvIdleTask+0x8>
 8009a06:	bf00      	nop
 8009a08:	20000ab4 	.word	0x20000ab4
 8009a0c:	e000ed04 	.word	0xe000ed04

08009a10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a16:	2300      	movs	r3, #0
 8009a18:	607b      	str	r3, [r7, #4]
 8009a1a:	e00c      	b.n	8009a36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4a12      	ldr	r2, [pc, #72]	@ (8009a70 <prvInitialiseTaskLists+0x60>)
 8009a28:	4413      	add	r3, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fc72 	bl	8008314 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3301      	adds	r3, #1
 8009a34:	607b      	str	r3, [r7, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b37      	cmp	r3, #55	@ 0x37
 8009a3a:	d9ef      	bls.n	8009a1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a3c:	480d      	ldr	r0, [pc, #52]	@ (8009a74 <prvInitialiseTaskLists+0x64>)
 8009a3e:	f7fe fc69 	bl	8008314 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a42:	480d      	ldr	r0, [pc, #52]	@ (8009a78 <prvInitialiseTaskLists+0x68>)
 8009a44:	f7fe fc66 	bl	8008314 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a48:	480c      	ldr	r0, [pc, #48]	@ (8009a7c <prvInitialiseTaskLists+0x6c>)
 8009a4a:	f7fe fc63 	bl	8008314 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a4e:	480c      	ldr	r0, [pc, #48]	@ (8009a80 <prvInitialiseTaskLists+0x70>)
 8009a50:	f7fe fc60 	bl	8008314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a54:	480b      	ldr	r0, [pc, #44]	@ (8009a84 <prvInitialiseTaskLists+0x74>)
 8009a56:	f7fe fc5d 	bl	8008314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a88 <prvInitialiseTaskLists+0x78>)
 8009a5c:	4a05      	ldr	r2, [pc, #20]	@ (8009a74 <prvInitialiseTaskLists+0x64>)
 8009a5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a60:	4b0a      	ldr	r3, [pc, #40]	@ (8009a8c <prvInitialiseTaskLists+0x7c>)
 8009a62:	4a05      	ldr	r2, [pc, #20]	@ (8009a78 <prvInitialiseTaskLists+0x68>)
 8009a64:	601a      	str	r2, [r3, #0]
}
 8009a66:	bf00      	nop
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000ab4 	.word	0x20000ab4
 8009a74:	20000f14 	.word	0x20000f14
 8009a78:	20000f28 	.word	0x20000f28
 8009a7c:	20000f44 	.word	0x20000f44
 8009a80:	20000f58 	.word	0x20000f58
 8009a84:	20000f70 	.word	0x20000f70
 8009a88:	20000f3c 	.word	0x20000f3c
 8009a8c:	20000f40 	.word	0x20000f40

08009a90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a96:	e019      	b.n	8009acc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a98:	f000 ff1e 	bl	800a8d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a9c:	4b10      	ldr	r3, [pc, #64]	@ (8009ae0 <prvCheckTasksWaitingTermination+0x50>)
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fe fcbd 	bl	8008428 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009aae:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae4 <prvCheckTasksWaitingTermination+0x54>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8009ae4 <prvCheckTasksWaitingTermination+0x54>)
 8009ab6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ae8 <prvCheckTasksWaitingTermination+0x58>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	4a0a      	ldr	r2, [pc, #40]	@ (8009ae8 <prvCheckTasksWaitingTermination+0x58>)
 8009ac0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ac2:	f000 ff3b 	bl	800a93c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f810 	bl	8009aec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009acc:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <prvCheckTasksWaitingTermination+0x58>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1e1      	bne.n	8009a98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	20000f58 	.word	0x20000f58
 8009ae4:	20000f84 	.word	0x20000f84
 8009ae8:	20000f6c 	.word	0x20000f6c

08009aec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3354      	adds	r3, #84	@ 0x54
 8009af8:	4618      	mov	r0, r3
 8009afa:	f001 ff01 	bl	800b900 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d108      	bne.n	8009b1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f001 f8d3 	bl	800acb8 <vPortFree>
				vPortFree( pxTCB );
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 f8d0 	bl	800acb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b18:	e019      	b.n	8009b4e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d103      	bne.n	8009b2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 f8c7 	bl	800acb8 <vPortFree>
	}
 8009b2a:	e010      	b.n	8009b4e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d00b      	beq.n	8009b4e <prvDeleteTCB+0x62>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	60fb      	str	r3, [r7, #12]
}
 8009b48:	bf00      	nop
 8009b4a:	bf00      	nop
 8009b4c:	e7fd      	b.n	8009b4a <prvDeleteTCB+0x5e>
	}
 8009b4e:	bf00      	nop
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b90 <prvResetNextTaskUnblockTime+0x38>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d104      	bne.n	8009b72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b68:	4b0a      	ldr	r3, [pc, #40]	@ (8009b94 <prvResetNextTaskUnblockTime+0x3c>)
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b70:	e008      	b.n	8009b84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b72:	4b07      	ldr	r3, [pc, #28]	@ (8009b90 <prvResetNextTaskUnblockTime+0x38>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	4a04      	ldr	r2, [pc, #16]	@ (8009b94 <prvResetNextTaskUnblockTime+0x3c>)
 8009b82:	6013      	str	r3, [r2, #0]
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	20000f3c 	.word	0x20000f3c
 8009b94:	20000fa4 	.word	0x20000fa4

08009b98 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009b9e:	4b05      	ldr	r3, [pc, #20]	@ (8009bb4 <xTaskGetCurrentTaskHandle+0x1c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009ba4:	687b      	ldr	r3, [r7, #4]
	}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	20000ab0 	.word	0x20000ab0

08009bb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8009bec <xTaskGetSchedulerState+0x34>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d102      	bne.n	8009bcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	607b      	str	r3, [r7, #4]
 8009bca:	e008      	b.n	8009bde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bcc:	4b08      	ldr	r3, [pc, #32]	@ (8009bf0 <xTaskGetSchedulerState+0x38>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d102      	bne.n	8009bda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	607b      	str	r3, [r7, #4]
 8009bd8:	e001      	b.n	8009bde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009bde:	687b      	ldr	r3, [r7, #4]
	}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	20000f90 	.word	0x20000f90
 8009bf0:	20000fac 	.word	0x20000fac

08009bf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d058      	beq.n	8009cbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009cc8 <xTaskPriorityDisinherit+0xd4>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d00b      	beq.n	8009c2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	60fb      	str	r3, [r7, #12]
}
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
 8009c2a:	e7fd      	b.n	8009c28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10b      	bne.n	8009c4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	60bb      	str	r3, [r7, #8]
}
 8009c46:	bf00      	nop
 8009c48:	bf00      	nop
 8009c4a:	e7fd      	b.n	8009c48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c50:	1e5a      	subs	r2, r3, #1
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d02c      	beq.n	8009cbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d128      	bne.n	8009cbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe fbda 	bl	8008428 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009ccc <xTaskPriorityDisinherit+0xd8>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d903      	bls.n	8009c9c <xTaskPriorityDisinherit+0xa8>
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c98:	4a0c      	ldr	r2, [pc, #48]	@ (8009ccc <xTaskPriorityDisinherit+0xd8>)
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4a09      	ldr	r2, [pc, #36]	@ (8009cd0 <xTaskPriorityDisinherit+0xdc>)
 8009caa:	441a      	add	r2, r3
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f7fe fb5b 	bl	800836e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cbc:	697b      	ldr	r3, [r7, #20]
	}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000ab0 	.word	0x20000ab0
 8009ccc:	20000f8c 	.word	0x20000f8c
 8009cd0:	20000ab4 	.word	0x20000ab4

08009cd4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009ce2:	f000 fdf9 	bl	800a8d8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009ce6:	4b29      	ldr	r3, [pc, #164]	@ (8009d8c <xTaskNotifyWait+0xb8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d01c      	beq.n	8009d2e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009cf4:	4b25      	ldr	r3, [pc, #148]	@ (8009d8c <xTaskNotifyWait+0xb8>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	43d2      	mvns	r2, r2
 8009d00:	400a      	ands	r2, r1
 8009d02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009d06:	4b21      	ldr	r3, [pc, #132]	@ (8009d8c <xTaskNotifyWait+0xb8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00b      	beq.n	8009d2e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d16:	2101      	movs	r1, #1
 8009d18:	6838      	ldr	r0, [r7, #0]
 8009d1a:	f000 f8fd 	bl	8009f18 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8009d90 <xTaskNotifyWait+0xbc>)
 8009d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009d2e:	f000 fe05 	bl	800a93c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009d32:	f000 fdd1 	bl	800a8d8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d005      	beq.n	8009d48 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009d3c:	4b13      	ldr	r3, [pc, #76]	@ (8009d8c <xTaskNotifyWait+0xb8>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009d48:	4b10      	ldr	r3, [pc, #64]	@ (8009d8c <xTaskNotifyWait+0xb8>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d002      	beq.n	8009d5c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	617b      	str	r3, [r7, #20]
 8009d5a:	e00a      	b.n	8009d72 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d8c <xTaskNotifyWait+0xb8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	43d2      	mvns	r2, r2
 8009d68:	400a      	ands	r2, r1
 8009d6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d72:	4b06      	ldr	r3, [pc, #24]	@ (8009d8c <xTaskNotifyWait+0xb8>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8009d7c:	f000 fdde 	bl	800a93c <vPortExitCritical>

		return xReturn;
 8009d80:	697b      	ldr	r3, [r7, #20]
	}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20000ab0 	.word	0x20000ab0
 8009d90:	e000ed04 	.word	0xe000ed04

08009d94 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	@ 0x28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	4613      	mov	r3, r2
 8009da2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009da4:	2301      	movs	r3, #1
 8009da6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10b      	bne.n	8009dc6 <xTaskGenericNotify+0x32>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	61bb      	str	r3, [r7, #24]
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009dca:	f000 fd85 	bl	800a8d8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d004      	beq.n	8009dde <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009de4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	2202      	movs	r2, #2
 8009dea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8009dee:	79fb      	ldrb	r3, [r7, #7]
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d82e      	bhi.n	8009e52 <xTaskGenericNotify+0xbe>
 8009df4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dfc <xTaskGenericNotify+0x68>)
 8009df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfa:	bf00      	nop
 8009dfc:	08009e77 	.word	0x08009e77
 8009e00:	08009e11 	.word	0x08009e11
 8009e04:	08009e23 	.word	0x08009e23
 8009e08:	08009e33 	.word	0x08009e33
 8009e0c:	08009e3d 	.word	0x08009e3d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8009e20:	e02c      	b.n	8009e7c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8009e30:	e024      	b.n	8009e7c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8009e3a:	e01f      	b.n	8009e7c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009e3c:	7ffb      	ldrb	r3, [r7, #31]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d004      	beq.n	8009e4c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009e4a:	e017      	b.n	8009e7c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009e50:	e014      	b.n	8009e7c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5c:	d00d      	beq.n	8009e7a <xTaskGenericNotify+0xe6>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	617b      	str	r3, [r7, #20]
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	e7fd      	b.n	8009e72 <xTaskGenericNotify+0xde>
					break;
 8009e76:	bf00      	nop
 8009e78:	e000      	b.n	8009e7c <xTaskGenericNotify+0xe8>

					break;
 8009e7a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009e7c:	7ffb      	ldrb	r3, [r7, #31]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d13b      	bne.n	8009efa <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	3304      	adds	r3, #4
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe face 	bl	8008428 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e90:	4b1d      	ldr	r3, [pc, #116]	@ (8009f08 <xTaskGenericNotify+0x174>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d903      	bls.n	8009ea0 <xTaskGenericNotify+0x10c>
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8009f08 <xTaskGenericNotify+0x174>)
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4a17      	ldr	r2, [pc, #92]	@ (8009f0c <xTaskGenericNotify+0x178>)
 8009eae:	441a      	add	r2, r3
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	f7fe fa59 	bl	800836e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00b      	beq.n	8009edc <xTaskGenericNotify+0x148>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	613b      	str	r3, [r7, #16]
}
 8009ed6:	bf00      	nop
 8009ed8:	bf00      	nop
 8009eda:	e7fd      	b.n	8009ed8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8009f10 <xTaskGenericNotify+0x17c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d907      	bls.n	8009efa <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009eea:	4b0a      	ldr	r3, [pc, #40]	@ (8009f14 <xTaskGenericNotify+0x180>)
 8009eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009efa:	f000 fd1f 	bl	800a93c <vPortExitCritical>

		return xReturn;
 8009efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3728      	adds	r7, #40	@ 0x28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20000f8c 	.word	0x20000f8c
 8009f0c:	20000ab4 	.word	0x20000ab4
 8009f10:	20000ab0 	.word	0x20000ab0
 8009f14:	e000ed04 	.word	0xe000ed04

08009f18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f22:	4b21      	ldr	r3, [pc, #132]	@ (8009fa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f28:	4b20      	ldr	r3, [pc, #128]	@ (8009fac <prvAddCurrentTaskToDelayedList+0x94>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fa7a 	bl	8008428 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3a:	d10a      	bne.n	8009f52 <prvAddCurrentTaskToDelayedList+0x3a>
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d007      	beq.n	8009f52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f42:	4b1a      	ldr	r3, [pc, #104]	@ (8009fac <prvAddCurrentTaskToDelayedList+0x94>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3304      	adds	r3, #4
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4819      	ldr	r0, [pc, #100]	@ (8009fb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009f4c:	f7fe fa0f 	bl	800836e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f50:	e026      	b.n	8009fa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4413      	add	r3, r2
 8009f58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f5a:	4b14      	ldr	r3, [pc, #80]	@ (8009fac <prvAddCurrentTaskToDelayedList+0x94>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d209      	bcs.n	8009f7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f6a:	4b12      	ldr	r3, [pc, #72]	@ (8009fb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009fac <prvAddCurrentTaskToDelayedList+0x94>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3304      	adds	r3, #4
 8009f74:	4619      	mov	r1, r3
 8009f76:	4610      	mov	r0, r2
 8009f78:	f7fe fa1d 	bl	80083b6 <vListInsert>
}
 8009f7c:	e010      	b.n	8009fa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	4b0a      	ldr	r3, [pc, #40]	@ (8009fac <prvAddCurrentTaskToDelayedList+0x94>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3304      	adds	r3, #4
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	f7fe fa13 	bl	80083b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f90:	4b0a      	ldr	r3, [pc, #40]	@ (8009fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d202      	bcs.n	8009fa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f9a:	4a08      	ldr	r2, [pc, #32]	@ (8009fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	6013      	str	r3, [r2, #0]
}
 8009fa0:	bf00      	nop
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	20000f88 	.word	0x20000f88
 8009fac:	20000ab0 	.word	0x20000ab0
 8009fb0:	20000f70 	.word	0x20000f70
 8009fb4:	20000f40 	.word	0x20000f40
 8009fb8:	20000f3c 	.word	0x20000f3c
 8009fbc:	20000fa4 	.word	0x20000fa4

08009fc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08a      	sub	sp, #40	@ 0x28
 8009fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fca:	f000 fb13 	bl	800a5f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fce:	4b1d      	ldr	r3, [pc, #116]	@ (800a044 <xTimerCreateTimerTask+0x84>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d021      	beq.n	800a01a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fde:	1d3a      	adds	r2, r7, #4
 8009fe0:	f107 0108 	add.w	r1, r7, #8
 8009fe4:	f107 030c 	add.w	r3, r7, #12
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fe f979 	bl	80082e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	9202      	str	r2, [sp, #8]
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	460a      	mov	r2, r1
 800a000:	4911      	ldr	r1, [pc, #68]	@ (800a048 <xTimerCreateTimerTask+0x88>)
 800a002:	4812      	ldr	r0, [pc, #72]	@ (800a04c <xTimerCreateTimerTask+0x8c>)
 800a004:	f7fe ff70 	bl	8008ee8 <xTaskCreateStatic>
 800a008:	4603      	mov	r3, r0
 800a00a:	4a11      	ldr	r2, [pc, #68]	@ (800a050 <xTimerCreateTimerTask+0x90>)
 800a00c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a00e:	4b10      	ldr	r3, [pc, #64]	@ (800a050 <xTimerCreateTimerTask+0x90>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a016:	2301      	movs	r3, #1
 800a018:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	613b      	str	r3, [r7, #16]
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	e7fd      	b.n	800a034 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a038:	697b      	ldr	r3, [r7, #20]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	20000fe0 	.word	0x20000fe0
 800a048:	0800bb34 	.word	0x0800bb34
 800a04c:	0800a18d 	.word	0x0800a18d
 800a050:	20000fe4 	.word	0x20000fe4

0800a054 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	@ 0x28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a062:	2300      	movs	r3, #0
 800a064:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10b      	bne.n	800a084 <xTimerGenericCommand+0x30>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	623b      	str	r3, [r7, #32]
}
 800a07e:	bf00      	nop
 800a080:	bf00      	nop
 800a082:	e7fd      	b.n	800a080 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a084:	4b19      	ldr	r3, [pc, #100]	@ (800a0ec <xTimerGenericCommand+0x98>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d02a      	beq.n	800a0e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2b05      	cmp	r3, #5
 800a09c:	dc18      	bgt.n	800a0d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a09e:	f7ff fd8b 	bl	8009bb8 <xTaskGetSchedulerState>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d109      	bne.n	800a0bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0a8:	4b10      	ldr	r3, [pc, #64]	@ (800a0ec <xTimerGenericCommand+0x98>)
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	f107 0110 	add.w	r1, r7, #16
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b4:	f7fe fb28 	bl	8008708 <xQueueGenericSend>
 800a0b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a0ba:	e012      	b.n	800a0e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a0ec <xTimerGenericCommand+0x98>)
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	f107 0110 	add.w	r1, r7, #16
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f7fe fb1e 	bl	8008708 <xQueueGenericSend>
 800a0cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a0ce:	e008      	b.n	800a0e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0d0:	4b06      	ldr	r3, [pc, #24]	@ (800a0ec <xTimerGenericCommand+0x98>)
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	f107 0110 	add.w	r1, r7, #16
 800a0d8:	2300      	movs	r3, #0
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	f7fe fc16 	bl	800890c <xQueueGenericSendFromISR>
 800a0e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3728      	adds	r7, #40	@ 0x28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	20000fe0 	.word	0x20000fe0

0800a0f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0fa:	4b23      	ldr	r3, [pc, #140]	@ (800a188 <prvProcessExpiredTimer+0x98>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	3304      	adds	r3, #4
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe f98d 	bl	8008428 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d023      	beq.n	800a164 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	18d1      	adds	r1, r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	6978      	ldr	r0, [r7, #20]
 800a12a:	f000 f8d5 	bl	800a2d8 <prvInsertTimerInActiveList>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d020      	beq.n	800a176 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a134:	2300      	movs	r3, #0
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	2300      	movs	r3, #0
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	2100      	movs	r1, #0
 800a13e:	6978      	ldr	r0, [r7, #20]
 800a140:	f7ff ff88 	bl	800a054 <xTimerGenericCommand>
 800a144:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d114      	bne.n	800a176 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	60fb      	str	r3, [r7, #12]
}
 800a15e:	bf00      	nop
 800a160:	bf00      	nop
 800a162:	e7fd      	b.n	800a160 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a16a:	f023 0301 	bic.w	r3, r3, #1
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	6978      	ldr	r0, [r7, #20]
 800a17c:	4798      	blx	r3
}
 800a17e:	bf00      	nop
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	20000fd8 	.word	0x20000fd8

0800a18c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a194:	f107 0308 	add.w	r3, r7, #8
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 f859 	bl	800a250 <prvGetNextExpireTime>
 800a19e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f805 	bl	800a1b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1aa:	f000 f8d7 	bl	800a35c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1ae:	bf00      	nop
 800a1b0:	e7f0      	b.n	800a194 <prvTimerTask+0x8>
	...

0800a1b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1be:	f7ff f8f7 	bl	80093b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1c2:	f107 0308 	add.w	r3, r7, #8
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 f866 	bl	800a298 <prvSampleTimeNow>
 800a1cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d130      	bne.n	800a236 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10a      	bne.n	800a1f0 <prvProcessTimerOrBlockTask+0x3c>
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d806      	bhi.n	800a1f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1e2:	f7ff f8f3 	bl	80093cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1e6:	68f9      	ldr	r1, [r7, #12]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff ff81 	bl	800a0f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1ee:	e024      	b.n	800a23a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d008      	beq.n	800a208 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1f6:	4b13      	ldr	r3, [pc, #76]	@ (800a244 <prvProcessTimerOrBlockTask+0x90>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <prvProcessTimerOrBlockTask+0x50>
 800a200:	2301      	movs	r3, #1
 800a202:	e000      	b.n	800a206 <prvProcessTimerOrBlockTask+0x52>
 800a204:	2300      	movs	r3, #0
 800a206:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a208:	4b0f      	ldr	r3, [pc, #60]	@ (800a248 <prvProcessTimerOrBlockTask+0x94>)
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	4619      	mov	r1, r3
 800a216:	f7fe fe33 	bl	8008e80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a21a:	f7ff f8d7 	bl	80093cc <xTaskResumeAll>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a224:	4b09      	ldr	r3, [pc, #36]	@ (800a24c <prvProcessTimerOrBlockTask+0x98>)
 800a226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	f3bf 8f6f 	isb	sy
}
 800a234:	e001      	b.n	800a23a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a236:	f7ff f8c9 	bl	80093cc <xTaskResumeAll>
}
 800a23a:	bf00      	nop
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000fdc 	.word	0x20000fdc
 800a248:	20000fe0 	.word	0x20000fe0
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a258:	4b0e      	ldr	r3, [pc, #56]	@ (800a294 <prvGetNextExpireTime+0x44>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <prvGetNextExpireTime+0x16>
 800a262:	2201      	movs	r2, #1
 800a264:	e000      	b.n	800a268 <prvGetNextExpireTime+0x18>
 800a266:	2200      	movs	r2, #0
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d105      	bne.n	800a280 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a274:	4b07      	ldr	r3, [pc, #28]	@ (800a294 <prvGetNextExpireTime+0x44>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	60fb      	str	r3, [r7, #12]
 800a27e:	e001      	b.n	800a284 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a284:	68fb      	ldr	r3, [r7, #12]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20000fd8 	.word	0x20000fd8

0800a298 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a2a0:	f7ff f932 	bl	8009508 <xTaskGetTickCount>
 800a2a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d4 <prvSampleTimeNow+0x3c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d205      	bcs.n	800a2bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2b0:	f000 f93a 	bl	800a528 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	e002      	b.n	800a2c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2c2:	4a04      	ldr	r2, [pc, #16]	@ (800a2d4 <prvSampleTimeNow+0x3c>)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000fe8 	.word	0x20000fe8

0800a2d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d812      	bhi.n	800a324 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	1ad2      	subs	r2, r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d302      	bcc.n	800a312 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a30c:	2301      	movs	r3, #1
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	e01b      	b.n	800a34a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a312:	4b10      	ldr	r3, [pc, #64]	@ (800a354 <prvInsertTimerInActiveList+0x7c>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3304      	adds	r3, #4
 800a31a:	4619      	mov	r1, r3
 800a31c:	4610      	mov	r0, r2
 800a31e:	f7fe f84a 	bl	80083b6 <vListInsert>
 800a322:	e012      	b.n	800a34a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d206      	bcs.n	800a33a <prvInsertTimerInActiveList+0x62>
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	429a      	cmp	r2, r3
 800a332:	d302      	bcc.n	800a33a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a334:	2301      	movs	r3, #1
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	e007      	b.n	800a34a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a33a:	4b07      	ldr	r3, [pc, #28]	@ (800a358 <prvInsertTimerInActiveList+0x80>)
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3304      	adds	r3, #4
 800a342:	4619      	mov	r1, r3
 800a344:	4610      	mov	r0, r2
 800a346:	f7fe f836 	bl	80083b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a34a:	697b      	ldr	r3, [r7, #20]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20000fdc 	.word	0x20000fdc
 800a358:	20000fd8 	.word	0x20000fd8

0800a35c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08e      	sub	sp, #56	@ 0x38
 800a360:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a362:	e0ce      	b.n	800a502 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	da19      	bge.n	800a39e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a36a:	1d3b      	adds	r3, r7, #4
 800a36c:	3304      	adds	r3, #4
 800a36e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10b      	bne.n	800a38e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	61fb      	str	r3, [r7, #28]
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	e7fd      	b.n	800a38a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a394:	6850      	ldr	r0, [r2, #4]
 800a396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a398:	6892      	ldr	r2, [r2, #8]
 800a39a:	4611      	mov	r1, r2
 800a39c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f2c0 80ae 	blt.w	800a502 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d004      	beq.n	800a3bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe f836 	bl	8008428 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3bc:	463b      	mov	r3, r7
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff ff6a 	bl	800a298 <prvSampleTimeNow>
 800a3c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b09      	cmp	r3, #9
 800a3ca:	f200 8097 	bhi.w	800a4fc <prvProcessReceivedCommands+0x1a0>
 800a3ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d4 <prvProcessReceivedCommands+0x78>)
 800a3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d4:	0800a3fd 	.word	0x0800a3fd
 800a3d8:	0800a3fd 	.word	0x0800a3fd
 800a3dc:	0800a3fd 	.word	0x0800a3fd
 800a3e0:	0800a473 	.word	0x0800a473
 800a3e4:	0800a487 	.word	0x0800a487
 800a3e8:	0800a4d3 	.word	0x0800a4d3
 800a3ec:	0800a3fd 	.word	0x0800a3fd
 800a3f0:	0800a3fd 	.word	0x0800a3fd
 800a3f4:	0800a473 	.word	0x0800a473
 800a3f8:	0800a487 	.word	0x0800a487
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a402:	f043 0301 	orr.w	r3, r3, #1
 800a406:	b2da      	uxtb	r2, r3
 800a408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	18d1      	adds	r1, r2, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a41a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a41c:	f7ff ff5c 	bl	800a2d8 <prvInsertTimerInActiveList>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d06c      	beq.n	800a500 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a42c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a430:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d061      	beq.n	800a500 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	441a      	add	r2, r3
 800a444:	2300      	movs	r3, #0
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	2300      	movs	r3, #0
 800a44a:	2100      	movs	r1, #0
 800a44c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a44e:	f7ff fe01 	bl	800a054 <xTimerGenericCommand>
 800a452:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d152      	bne.n	800a500 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	61bb      	str	r3, [r7, #24]
}
 800a46c:	bf00      	nop
 800a46e:	bf00      	nop
 800a470:	e7fd      	b.n	800a46e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a478:	f023 0301 	bic.w	r3, r3, #1
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a480:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a484:	e03d      	b.n	800a502 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a48c:	f043 0301 	orr.w	r3, r3, #1
 800a490:	b2da      	uxtb	r2, r3
 800a492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a494:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10b      	bne.n	800a4be <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	617b      	str	r3, [r7, #20]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c0:	699a      	ldr	r2, [r3, #24]
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c4:	18d1      	adds	r1, r2, r3
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4cc:	f7ff ff04 	bl	800a2d8 <prvInsertTimerInActiveList>
					break;
 800a4d0:	e017      	b.n	800a502 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4d8:	f003 0302 	and.w	r3, r3, #2
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d103      	bne.n	800a4e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a4e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4e2:	f000 fbe9 	bl	800acb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4e6:	e00c      	b.n	800a502 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4ee:	f023 0301 	bic.w	r3, r3, #1
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a4fa:	e002      	b.n	800a502 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a4fc:	bf00      	nop
 800a4fe:	e000      	b.n	800a502 <prvProcessReceivedCommands+0x1a6>
					break;
 800a500:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a502:	4b08      	ldr	r3, [pc, #32]	@ (800a524 <prvProcessReceivedCommands+0x1c8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	1d39      	adds	r1, r7, #4
 800a508:	2200      	movs	r2, #0
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe fa9c 	bl	8008a48 <xQueueReceive>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	f47f af26 	bne.w	800a364 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	3730      	adds	r7, #48	@ 0x30
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000fe0 	.word	0x20000fe0

0800a528 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b088      	sub	sp, #32
 800a52c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a52e:	e049      	b.n	800a5c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a530:	4b2e      	ldr	r3, [pc, #184]	@ (800a5ec <prvSwitchTimerLists+0xc4>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a53a:	4b2c      	ldr	r3, [pc, #176]	@ (800a5ec <prvSwitchTimerLists+0xc4>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3304      	adds	r3, #4
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fd ff6d 	bl	8008428 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b00      	cmp	r3, #0
 800a562:	d02f      	beq.n	800a5c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	4413      	add	r3, r2
 800a56c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	429a      	cmp	r2, r3
 800a574:	d90e      	bls.n	800a594 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a582:	4b1a      	ldr	r3, [pc, #104]	@ (800a5ec <prvSwitchTimerLists+0xc4>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3304      	adds	r3, #4
 800a58a:	4619      	mov	r1, r3
 800a58c:	4610      	mov	r0, r2
 800a58e:	f7fd ff12 	bl	80083b6 <vListInsert>
 800a592:	e017      	b.n	800a5c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a594:	2300      	movs	r3, #0
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	2300      	movs	r3, #0
 800a59a:	693a      	ldr	r2, [r7, #16]
 800a59c:	2100      	movs	r1, #0
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f7ff fd58 	bl	800a054 <xTimerGenericCommand>
 800a5a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10b      	bne.n	800a5c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	603b      	str	r3, [r7, #0]
}
 800a5be:	bf00      	nop
 800a5c0:	bf00      	nop
 800a5c2:	e7fd      	b.n	800a5c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5c4:	4b09      	ldr	r3, [pc, #36]	@ (800a5ec <prvSwitchTimerLists+0xc4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1b0      	bne.n	800a530 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5ce:	4b07      	ldr	r3, [pc, #28]	@ (800a5ec <prvSwitchTimerLists+0xc4>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5d4:	4b06      	ldr	r3, [pc, #24]	@ (800a5f0 <prvSwitchTimerLists+0xc8>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a04      	ldr	r2, [pc, #16]	@ (800a5ec <prvSwitchTimerLists+0xc4>)
 800a5da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5dc:	4a04      	ldr	r2, [pc, #16]	@ (800a5f0 <prvSwitchTimerLists+0xc8>)
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	6013      	str	r3, [r2, #0]
}
 800a5e2:	bf00      	nop
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20000fd8 	.word	0x20000fd8
 800a5f0:	20000fdc 	.word	0x20000fdc

0800a5f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5fa:	f000 f96d 	bl	800a8d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5fe:	4b15      	ldr	r3, [pc, #84]	@ (800a654 <prvCheckForValidListAndQueue+0x60>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d120      	bne.n	800a648 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a606:	4814      	ldr	r0, [pc, #80]	@ (800a658 <prvCheckForValidListAndQueue+0x64>)
 800a608:	f7fd fe84 	bl	8008314 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a60c:	4813      	ldr	r0, [pc, #76]	@ (800a65c <prvCheckForValidListAndQueue+0x68>)
 800a60e:	f7fd fe81 	bl	8008314 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a612:	4b13      	ldr	r3, [pc, #76]	@ (800a660 <prvCheckForValidListAndQueue+0x6c>)
 800a614:	4a10      	ldr	r2, [pc, #64]	@ (800a658 <prvCheckForValidListAndQueue+0x64>)
 800a616:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a618:	4b12      	ldr	r3, [pc, #72]	@ (800a664 <prvCheckForValidListAndQueue+0x70>)
 800a61a:	4a10      	ldr	r2, [pc, #64]	@ (800a65c <prvCheckForValidListAndQueue+0x68>)
 800a61c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a61e:	2300      	movs	r3, #0
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	4b11      	ldr	r3, [pc, #68]	@ (800a668 <prvCheckForValidListAndQueue+0x74>)
 800a624:	4a11      	ldr	r2, [pc, #68]	@ (800a66c <prvCheckForValidListAndQueue+0x78>)
 800a626:	2110      	movs	r1, #16
 800a628:	200a      	movs	r0, #10
 800a62a:	f7fd ff91 	bl	8008550 <xQueueGenericCreateStatic>
 800a62e:	4603      	mov	r3, r0
 800a630:	4a08      	ldr	r2, [pc, #32]	@ (800a654 <prvCheckForValidListAndQueue+0x60>)
 800a632:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a634:	4b07      	ldr	r3, [pc, #28]	@ (800a654 <prvCheckForValidListAndQueue+0x60>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d005      	beq.n	800a648 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a63c:	4b05      	ldr	r3, [pc, #20]	@ (800a654 <prvCheckForValidListAndQueue+0x60>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	490b      	ldr	r1, [pc, #44]	@ (800a670 <prvCheckForValidListAndQueue+0x7c>)
 800a642:	4618      	mov	r0, r3
 800a644:	f7fe fbf2 	bl	8008e2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a648:	f000 f978 	bl	800a93c <vPortExitCritical>
}
 800a64c:	bf00      	nop
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20000fe0 	.word	0x20000fe0
 800a658:	20000fb0 	.word	0x20000fb0
 800a65c:	20000fc4 	.word	0x20000fc4
 800a660:	20000fd8 	.word	0x20000fd8
 800a664:	20000fdc 	.word	0x20000fdc
 800a668:	2000108c 	.word	0x2000108c
 800a66c:	20000fec 	.word	0x20000fec
 800a670:	0800bb3c 	.word	0x0800bb3c

0800a674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3b04      	subs	r3, #4
 800a684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a68c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3b04      	subs	r3, #4
 800a692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f023 0201 	bic.w	r2, r3, #1
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3b04      	subs	r3, #4
 800a6a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6a4:	4a0c      	ldr	r2, [pc, #48]	@ (800a6d8 <pxPortInitialiseStack+0x64>)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3b14      	subs	r3, #20
 800a6ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3b04      	subs	r3, #4
 800a6ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f06f 0202 	mvn.w	r2, #2
 800a6c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	3b20      	subs	r3, #32
 800a6c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	0800a6dd 	.word	0x0800a6dd

0800a6dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6e6:	4b13      	ldr	r3, [pc, #76]	@ (800a734 <prvTaskExitError+0x58>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ee:	d00b      	beq.n	800a708 <prvTaskExitError+0x2c>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	60fb      	str	r3, [r7, #12]
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	e7fd      	b.n	800a704 <prvTaskExitError+0x28>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	60bb      	str	r3, [r7, #8]
}
 800a71a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a71c:	bf00      	nop
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0fc      	beq.n	800a71e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a724:	bf00      	nop
 800a726:	bf00      	nop
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	2000009c 	.word	0x2000009c
	...

0800a740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a740:	4b07      	ldr	r3, [pc, #28]	@ (800a760 <pxCurrentTCBConst2>)
 800a742:	6819      	ldr	r1, [r3, #0]
 800a744:	6808      	ldr	r0, [r1, #0]
 800a746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74a:	f380 8809 	msr	PSP, r0
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f04f 0000 	mov.w	r0, #0
 800a756:	f380 8811 	msr	BASEPRI, r0
 800a75a:	4770      	bx	lr
 800a75c:	f3af 8000 	nop.w

0800a760 <pxCurrentTCBConst2>:
 800a760:	20000ab0 	.word	0x20000ab0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a764:	bf00      	nop
 800a766:	bf00      	nop

0800a768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a768:	4808      	ldr	r0, [pc, #32]	@ (800a78c <prvPortStartFirstTask+0x24>)
 800a76a:	6800      	ldr	r0, [r0, #0]
 800a76c:	6800      	ldr	r0, [r0, #0]
 800a76e:	f380 8808 	msr	MSP, r0
 800a772:	f04f 0000 	mov.w	r0, #0
 800a776:	f380 8814 	msr	CONTROL, r0
 800a77a:	b662      	cpsie	i
 800a77c:	b661      	cpsie	f
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	df00      	svc	0
 800a788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a78a:	bf00      	nop
 800a78c:	e000ed08 	.word	0xe000ed08

0800a790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a796:	4b47      	ldr	r3, [pc, #284]	@ (800a8b4 <xPortStartScheduler+0x124>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a47      	ldr	r2, [pc, #284]	@ (800a8b8 <xPortStartScheduler+0x128>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d10b      	bne.n	800a7b8 <xPortStartScheduler+0x28>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	613b      	str	r3, [r7, #16]
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7b8:	4b3e      	ldr	r3, [pc, #248]	@ (800a8b4 <xPortStartScheduler+0x124>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a3f      	ldr	r2, [pc, #252]	@ (800a8bc <xPortStartScheduler+0x12c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d10b      	bne.n	800a7da <xPortStartScheduler+0x4a>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	60fb      	str	r3, [r7, #12]
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop
 800a7d8:	e7fd      	b.n	800a7d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7da:	4b39      	ldr	r3, [pc, #228]	@ (800a8c0 <xPortStartScheduler+0x130>)
 800a7dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	22ff      	movs	r2, #255	@ 0xff
 800a7ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	4b31      	ldr	r3, [pc, #196]	@ (800a8c4 <xPortStartScheduler+0x134>)
 800a800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a802:	4b31      	ldr	r3, [pc, #196]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a804:	2207      	movs	r2, #7
 800a806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a808:	e009      	b.n	800a81e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a80a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3b01      	subs	r3, #1
 800a810:	4a2d      	ldr	r2, [pc, #180]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	005b      	lsls	r3, r3, #1
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a826:	2b80      	cmp	r3, #128	@ 0x80
 800a828:	d0ef      	beq.n	800a80a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a82a:	4b27      	ldr	r3, [pc, #156]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f1c3 0307 	rsb	r3, r3, #7
 800a832:	2b04      	cmp	r3, #4
 800a834:	d00b      	beq.n	800a84e <xPortStartScheduler+0xbe>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	60bb      	str	r3, [r7, #8]
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	e7fd      	b.n	800a84a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a84e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	4a1c      	ldr	r2, [pc, #112]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a858:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a860:	4a19      	ldr	r2, [pc, #100]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	b2da      	uxtb	r2, r3
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a86c:	4b17      	ldr	r3, [pc, #92]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a16      	ldr	r2, [pc, #88]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a878:	4b14      	ldr	r3, [pc, #80]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a13      	ldr	r2, [pc, #76]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a87e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a884:	f000 f8da 	bl	800aa3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a888:	4b11      	ldr	r3, [pc, #68]	@ (800a8d0 <xPortStartScheduler+0x140>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a88e:	f000 f8f9 	bl	800aa84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a892:	4b10      	ldr	r3, [pc, #64]	@ (800a8d4 <xPortStartScheduler+0x144>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a0f      	ldr	r2, [pc, #60]	@ (800a8d4 <xPortStartScheduler+0x144>)
 800a898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a89c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a89e:	f7ff ff63 	bl	800a768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8a2:	f7fe fefb 	bl	800969c <vTaskSwitchContext>
	prvTaskExitError();
 800a8a6:	f7ff ff19 	bl	800a6dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	e000ed00 	.word	0xe000ed00
 800a8b8:	410fc271 	.word	0x410fc271
 800a8bc:	410fc270 	.word	0x410fc270
 800a8c0:	e000e400 	.word	0xe000e400
 800a8c4:	200010dc 	.word	0x200010dc
 800a8c8:	200010e0 	.word	0x200010e0
 800a8cc:	e000ed20 	.word	0xe000ed20
 800a8d0:	2000009c 	.word	0x2000009c
 800a8d4:	e000ef34 	.word	0xe000ef34

0800a8d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	607b      	str	r3, [r7, #4]
}
 800a8f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8f2:	4b10      	ldr	r3, [pc, #64]	@ (800a934 <vPortEnterCritical+0x5c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	4a0e      	ldr	r2, [pc, #56]	@ (800a934 <vPortEnterCritical+0x5c>)
 800a8fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a934 <vPortEnterCritical+0x5c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d110      	bne.n	800a926 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a904:	4b0c      	ldr	r3, [pc, #48]	@ (800a938 <vPortEnterCritical+0x60>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00b      	beq.n	800a926 <vPortEnterCritical+0x4e>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	603b      	str	r3, [r7, #0]
}
 800a920:	bf00      	nop
 800a922:	bf00      	nop
 800a924:	e7fd      	b.n	800a922 <vPortEnterCritical+0x4a>
	}
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	2000009c 	.word	0x2000009c
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a942:	4b12      	ldr	r3, [pc, #72]	@ (800a98c <vPortExitCritical+0x50>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10b      	bne.n	800a962 <vPortExitCritical+0x26>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	607b      	str	r3, [r7, #4]
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	e7fd      	b.n	800a95e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a962:	4b0a      	ldr	r3, [pc, #40]	@ (800a98c <vPortExitCritical+0x50>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3b01      	subs	r3, #1
 800a968:	4a08      	ldr	r2, [pc, #32]	@ (800a98c <vPortExitCritical+0x50>)
 800a96a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a96c:	4b07      	ldr	r3, [pc, #28]	@ (800a98c <vPortExitCritical+0x50>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d105      	bne.n	800a980 <vPortExitCritical+0x44>
 800a974:	2300      	movs	r3, #0
 800a976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	f383 8811 	msr	BASEPRI, r3
}
 800a97e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	2000009c 	.word	0x2000009c

0800a990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a990:	f3ef 8009 	mrs	r0, PSP
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	4b15      	ldr	r3, [pc, #84]	@ (800a9f0 <pxCurrentTCBConst>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	f01e 0f10 	tst.w	lr, #16
 800a9a0:	bf08      	it	eq
 800a9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	6010      	str	r0, [r2, #0]
 800a9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a9b4:	f380 8811 	msr	BASEPRI, r0
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f7fe fe6c 	bl	800969c <vTaskSwitchContext>
 800a9c4:	f04f 0000 	mov.w	r0, #0
 800a9c8:	f380 8811 	msr	BASEPRI, r0
 800a9cc:	bc09      	pop	{r0, r3}
 800a9ce:	6819      	ldr	r1, [r3, #0]
 800a9d0:	6808      	ldr	r0, [r1, #0]
 800a9d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d6:	f01e 0f10 	tst.w	lr, #16
 800a9da:	bf08      	it	eq
 800a9dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9e0:	f380 8809 	msr	PSP, r0
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	f3af 8000 	nop.w

0800a9f0 <pxCurrentTCBConst>:
 800a9f0:	20000ab0 	.word	0x20000ab0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop

0800a9f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	607b      	str	r3, [r7, #4]
}
 800aa10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa12:	f7fe fd89 	bl	8009528 <xTaskIncrementTick>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa1c:	4b06      	ldr	r3, [pc, #24]	@ (800aa38 <xPortSysTickHandler+0x40>)
 800aa1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	2300      	movs	r3, #0
 800aa26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	f383 8811 	msr	BASEPRI, r3
}
 800aa2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa40:	4b0b      	ldr	r3, [pc, #44]	@ (800aa70 <vPortSetupTimerInterrupt+0x34>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa46:	4b0b      	ldr	r3, [pc, #44]	@ (800aa74 <vPortSetupTimerInterrupt+0x38>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa4c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <vPortSetupTimerInterrupt+0x3c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a0a      	ldr	r2, [pc, #40]	@ (800aa7c <vPortSetupTimerInterrupt+0x40>)
 800aa52:	fba2 2303 	umull	r2, r3, r2, r3
 800aa56:	099b      	lsrs	r3, r3, #6
 800aa58:	4a09      	ldr	r2, [pc, #36]	@ (800aa80 <vPortSetupTimerInterrupt+0x44>)
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa5e:	4b04      	ldr	r3, [pc, #16]	@ (800aa70 <vPortSetupTimerInterrupt+0x34>)
 800aa60:	2207      	movs	r2, #7
 800aa62:	601a      	str	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	e000e010 	.word	0xe000e010
 800aa74:	e000e018 	.word	0xe000e018
 800aa78:	20000004 	.word	0x20000004
 800aa7c:	10624dd3 	.word	0x10624dd3
 800aa80:	e000e014 	.word	0xe000e014

0800aa84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aa94 <vPortEnableVFP+0x10>
 800aa88:	6801      	ldr	r1, [r0, #0]
 800aa8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aa8e:	6001      	str	r1, [r0, #0]
 800aa90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa92:	bf00      	nop
 800aa94:	e000ed88 	.word	0xe000ed88

0800aa98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa9e:	f3ef 8305 	mrs	r3, IPSR
 800aaa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b0f      	cmp	r3, #15
 800aaa8:	d915      	bls.n	800aad6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aaaa:	4a18      	ldr	r2, [pc, #96]	@ (800ab0c <vPortValidateInterruptPriority+0x74>)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aab4:	4b16      	ldr	r3, [pc, #88]	@ (800ab10 <vPortValidateInterruptPriority+0x78>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	7afa      	ldrb	r2, [r7, #11]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d20b      	bcs.n	800aad6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	607b      	str	r3, [r7, #4]
}
 800aad0:	bf00      	nop
 800aad2:	bf00      	nop
 800aad4:	e7fd      	b.n	800aad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aad6:	4b0f      	ldr	r3, [pc, #60]	@ (800ab14 <vPortValidateInterruptPriority+0x7c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aade:	4b0e      	ldr	r3, [pc, #56]	@ (800ab18 <vPortValidateInterruptPriority+0x80>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d90b      	bls.n	800aafe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	603b      	str	r3, [r7, #0]
}
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	e7fd      	b.n	800aafa <vPortValidateInterruptPriority+0x62>
	}
 800aafe:	bf00      	nop
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	e000e3f0 	.word	0xe000e3f0
 800ab10:	200010dc 	.word	0x200010dc
 800ab14:	e000ed0c 	.word	0xe000ed0c
 800ab18:	200010e0 	.word	0x200010e0

0800ab1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08a      	sub	sp, #40	@ 0x28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab28:	f7fe fc42 	bl	80093b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab2c:	4b5c      	ldr	r3, [pc, #368]	@ (800aca0 <pvPortMalloc+0x184>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab34:	f000 f924 	bl	800ad80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab38:	4b5a      	ldr	r3, [pc, #360]	@ (800aca4 <pvPortMalloc+0x188>)
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4013      	ands	r3, r2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f040 8095 	bne.w	800ac70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01e      	beq.n	800ab8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ab4c:	2208      	movs	r2, #8
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4413      	add	r3, r2
 800ab52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d015      	beq.n	800ab8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f023 0307 	bic.w	r3, r3, #7
 800ab64:	3308      	adds	r3, #8
 800ab66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00b      	beq.n	800ab8a <pvPortMalloc+0x6e>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	617b      	str	r3, [r7, #20]
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop
 800ab88:	e7fd      	b.n	800ab86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d06f      	beq.n	800ac70 <pvPortMalloc+0x154>
 800ab90:	4b45      	ldr	r3, [pc, #276]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d86a      	bhi.n	800ac70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab9a:	4b44      	ldr	r3, [pc, #272]	@ (800acac <pvPortMalloc+0x190>)
 800ab9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab9e:	4b43      	ldr	r3, [pc, #268]	@ (800acac <pvPortMalloc+0x190>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aba4:	e004      	b.n	800abb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d903      	bls.n	800abc2 <pvPortMalloc+0xa6>
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1f1      	bne.n	800aba6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abc2:	4b37      	ldr	r3, [pc, #220]	@ (800aca0 <pvPortMalloc+0x184>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abc8:	429a      	cmp	r2, r3
 800abca:	d051      	beq.n	800ac70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2208      	movs	r2, #8
 800abd2:	4413      	add	r3, r2
 800abd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	1ad2      	subs	r2, r2, r3
 800abe6:	2308      	movs	r3, #8
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	429a      	cmp	r2, r3
 800abec:	d920      	bls.n	800ac30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4413      	add	r3, r2
 800abf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <pvPortMalloc+0xfc>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	613b      	str	r3, [r7, #16]
}
 800ac12:	bf00      	nop
 800ac14:	bf00      	nop
 800ac16:	e7fd      	b.n	800ac14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	1ad2      	subs	r2, r2, r3
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac2a:	69b8      	ldr	r0, [r7, #24]
 800ac2c:	f000 f90a 	bl	800ae44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac30:	4b1d      	ldr	r3, [pc, #116]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	4a1b      	ldr	r2, [pc, #108]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac3e:	4b1a      	ldr	r3, [pc, #104]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	4b1b      	ldr	r3, [pc, #108]	@ (800acb0 <pvPortMalloc+0x194>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d203      	bcs.n	800ac52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac4a:	4b17      	ldr	r3, [pc, #92]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a18      	ldr	r2, [pc, #96]	@ (800acb0 <pvPortMalloc+0x194>)
 800ac50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	4b13      	ldr	r3, [pc, #76]	@ (800aca4 <pvPortMalloc+0x188>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac66:	4b13      	ldr	r3, [pc, #76]	@ (800acb4 <pvPortMalloc+0x198>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	4a11      	ldr	r2, [pc, #68]	@ (800acb4 <pvPortMalloc+0x198>)
 800ac6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac70:	f7fe fbac 	bl	80093cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	f003 0307 	and.w	r3, r3, #7
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00b      	beq.n	800ac96 <pvPortMalloc+0x17a>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	60fb      	str	r3, [r7, #12]
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	e7fd      	b.n	800ac92 <pvPortMalloc+0x176>
	return pvReturn;
 800ac96:	69fb      	ldr	r3, [r7, #28]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3728      	adds	r7, #40	@ 0x28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	20004cec 	.word	0x20004cec
 800aca4:	20004d00 	.word	0x20004d00
 800aca8:	20004cf0 	.word	0x20004cf0
 800acac:	20004ce4 	.word	0x20004ce4
 800acb0:	20004cf4 	.word	0x20004cf4
 800acb4:	20004cf8 	.word	0x20004cf8

0800acb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d04f      	beq.n	800ad6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acca:	2308      	movs	r3, #8
 800accc:	425b      	negs	r3, r3
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	4413      	add	r3, r2
 800acd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	4b25      	ldr	r3, [pc, #148]	@ (800ad74 <vPortFree+0xbc>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4013      	ands	r3, r2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d10b      	bne.n	800acfe <vPortFree+0x46>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	60fb      	str	r3, [r7, #12]
}
 800acf8:	bf00      	nop
 800acfa:	bf00      	nop
 800acfc:	e7fd      	b.n	800acfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00b      	beq.n	800ad1e <vPortFree+0x66>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60bb      	str	r3, [r7, #8]
}
 800ad18:	bf00      	nop
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	4b14      	ldr	r3, [pc, #80]	@ (800ad74 <vPortFree+0xbc>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4013      	ands	r3, r2
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01e      	beq.n	800ad6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d11a      	bne.n	800ad6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	4b0e      	ldr	r3, [pc, #56]	@ (800ad74 <vPortFree+0xbc>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	43db      	mvns	r3, r3
 800ad3e:	401a      	ands	r2, r3
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad44:	f7fe fb34 	bl	80093b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad78 <vPortFree+0xc0>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4413      	add	r3, r2
 800ad52:	4a09      	ldr	r2, [pc, #36]	@ (800ad78 <vPortFree+0xc0>)
 800ad54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad56:	6938      	ldr	r0, [r7, #16]
 800ad58:	f000 f874 	bl	800ae44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad5c:	4b07      	ldr	r3, [pc, #28]	@ (800ad7c <vPortFree+0xc4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3301      	adds	r3, #1
 800ad62:	4a06      	ldr	r2, [pc, #24]	@ (800ad7c <vPortFree+0xc4>)
 800ad64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad66:	f7fe fb31 	bl	80093cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad6a:	bf00      	nop
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20004d00 	.word	0x20004d00
 800ad78:	20004cf0 	.word	0x20004cf0
 800ad7c:	20004cfc 	.word	0x20004cfc

0800ad80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ad8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad8c:	4b27      	ldr	r3, [pc, #156]	@ (800ae2c <prvHeapInit+0xac>)
 800ad8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00c      	beq.n	800adb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3307      	adds	r3, #7
 800ad9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 0307 	bic.w	r3, r3, #7
 800ada6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	4a1f      	ldr	r2, [pc, #124]	@ (800ae2c <prvHeapInit+0xac>)
 800adb0:	4413      	add	r3, r2
 800adb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae30 <prvHeapInit+0xb0>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800adbe:	4b1c      	ldr	r3, [pc, #112]	@ (800ae30 <prvHeapInit+0xb0>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	4413      	add	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adcc:	2208      	movs	r2, #8
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f023 0307 	bic.w	r3, r3, #7
 800adda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4a15      	ldr	r2, [pc, #84]	@ (800ae34 <prvHeapInit+0xb4>)
 800ade0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ade2:	4b14      	ldr	r3, [pc, #80]	@ (800ae34 <prvHeapInit+0xb4>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2200      	movs	r2, #0
 800ade8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adea:	4b12      	ldr	r3, [pc, #72]	@ (800ae34 <prvHeapInit+0xb4>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2200      	movs	r2, #0
 800adf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	1ad2      	subs	r2, r2, r3
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae00:	4b0c      	ldr	r3, [pc, #48]	@ (800ae34 <prvHeapInit+0xb4>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4a0a      	ldr	r2, [pc, #40]	@ (800ae38 <prvHeapInit+0xb8>)
 800ae0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	4a09      	ldr	r2, [pc, #36]	@ (800ae3c <prvHeapInit+0xbc>)
 800ae16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae18:	4b09      	ldr	r3, [pc, #36]	@ (800ae40 <prvHeapInit+0xc0>)
 800ae1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae1e:	601a      	str	r2, [r3, #0]
}
 800ae20:	bf00      	nop
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	200010e4 	.word	0x200010e4
 800ae30:	20004ce4 	.word	0x20004ce4
 800ae34:	20004cec 	.word	0x20004cec
 800ae38:	20004cf4 	.word	0x20004cf4
 800ae3c:	20004cf0 	.word	0x20004cf0
 800ae40:	20004d00 	.word	0x20004d00

0800ae44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae4c:	4b28      	ldr	r3, [pc, #160]	@ (800aef0 <prvInsertBlockIntoFreeList+0xac>)
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	e002      	b.n	800ae58 <prvInsertBlockIntoFreeList+0x14>
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d8f7      	bhi.n	800ae52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d108      	bne.n	800ae86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	441a      	add	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	441a      	add	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d118      	bne.n	800aecc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	4b15      	ldr	r3, [pc, #84]	@ (800aef4 <prvInsertBlockIntoFreeList+0xb0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d00d      	beq.n	800aec2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	441a      	add	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	601a      	str	r2, [r3, #0]
 800aec0:	e008      	b.n	800aed4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aec2:	4b0c      	ldr	r3, [pc, #48]	@ (800aef4 <prvInsertBlockIntoFreeList+0xb0>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	e003      	b.n	800aed4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d002      	beq.n	800aee2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aee2:	bf00      	nop
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	20004ce4 	.word	0x20004ce4
 800aef4:	20004cec 	.word	0x20004cec

0800aef8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aefc:	2200      	movs	r2, #0
 800aefe:	4912      	ldr	r1, [pc, #72]	@ (800af48 <MX_USB_DEVICE_Init+0x50>)
 800af00:	4812      	ldr	r0, [pc, #72]	@ (800af4c <MX_USB_DEVICE_Init+0x54>)
 800af02:	f7fb fd95 	bl	8006a30 <USBD_Init>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af0c:	f7f5 ff20 	bl	8000d50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af10:	490f      	ldr	r1, [pc, #60]	@ (800af50 <MX_USB_DEVICE_Init+0x58>)
 800af12:	480e      	ldr	r0, [pc, #56]	@ (800af4c <MX_USB_DEVICE_Init+0x54>)
 800af14:	f7fb fdbc 	bl	8006a90 <USBD_RegisterClass>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800af1e:	f7f5 ff17 	bl	8000d50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af22:	490c      	ldr	r1, [pc, #48]	@ (800af54 <MX_USB_DEVICE_Init+0x5c>)
 800af24:	4809      	ldr	r0, [pc, #36]	@ (800af4c <MX_USB_DEVICE_Init+0x54>)
 800af26:	f7fb fcf3 	bl	8006910 <USBD_CDC_RegisterInterface>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800af30:	f7f5 ff0e 	bl	8000d50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800af34:	4805      	ldr	r0, [pc, #20]	@ (800af4c <MX_USB_DEVICE_Init+0x54>)
 800af36:	f7fb fde1 	bl	8006afc <USBD_Start>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800af40:	f7f5 ff06 	bl	8000d50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af44:	bf00      	nop
 800af46:	bd80      	pop	{r7, pc}
 800af48:	200000b4 	.word	0x200000b4
 800af4c:	20004d04 	.word	0x20004d04
 800af50:	2000001c 	.word	0x2000001c
 800af54:	200000a0 	.word	0x200000a0

0800af58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af5c:	2200      	movs	r2, #0
 800af5e:	4905      	ldr	r1, [pc, #20]	@ (800af74 <CDC_Init_FS+0x1c>)
 800af60:	4805      	ldr	r0, [pc, #20]	@ (800af78 <CDC_Init_FS+0x20>)
 800af62:	f7fb fcef 	bl	8006944 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af66:	4905      	ldr	r1, [pc, #20]	@ (800af7c <CDC_Init_FS+0x24>)
 800af68:	4803      	ldr	r0, [pc, #12]	@ (800af78 <CDC_Init_FS+0x20>)
 800af6a:	f7fb fd0d 	bl	8006988 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af70:	4618      	mov	r0, r3
 800af72:	bd80      	pop	{r7, pc}
 800af74:	200057e0 	.word	0x200057e0
 800af78:	20004d04 	.word	0x20004d04
 800af7c:	20004fe0 	.word	0x20004fe0

0800af80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af80:	b480      	push	{r7}
 800af82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af86:	4618      	mov	r0, r3
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	4603      	mov	r3, r0
 800af98:	6039      	str	r1, [r7, #0]
 800af9a:	71fb      	strb	r3, [r7, #7]
 800af9c:	4613      	mov	r3, r2
 800af9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800afa0:	79fb      	ldrb	r3, [r7, #7]
 800afa2:	2b23      	cmp	r3, #35	@ 0x23
 800afa4:	d84a      	bhi.n	800b03c <CDC_Control_FS+0xac>
 800afa6:	a201      	add	r2, pc, #4	@ (adr r2, 800afac <CDC_Control_FS+0x1c>)
 800afa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afac:	0800b03d 	.word	0x0800b03d
 800afb0:	0800b03d 	.word	0x0800b03d
 800afb4:	0800b03d 	.word	0x0800b03d
 800afb8:	0800b03d 	.word	0x0800b03d
 800afbc:	0800b03d 	.word	0x0800b03d
 800afc0:	0800b03d 	.word	0x0800b03d
 800afc4:	0800b03d 	.word	0x0800b03d
 800afc8:	0800b03d 	.word	0x0800b03d
 800afcc:	0800b03d 	.word	0x0800b03d
 800afd0:	0800b03d 	.word	0x0800b03d
 800afd4:	0800b03d 	.word	0x0800b03d
 800afd8:	0800b03d 	.word	0x0800b03d
 800afdc:	0800b03d 	.word	0x0800b03d
 800afe0:	0800b03d 	.word	0x0800b03d
 800afe4:	0800b03d 	.word	0x0800b03d
 800afe8:	0800b03d 	.word	0x0800b03d
 800afec:	0800b03d 	.word	0x0800b03d
 800aff0:	0800b03d 	.word	0x0800b03d
 800aff4:	0800b03d 	.word	0x0800b03d
 800aff8:	0800b03d 	.word	0x0800b03d
 800affc:	0800b03d 	.word	0x0800b03d
 800b000:	0800b03d 	.word	0x0800b03d
 800b004:	0800b03d 	.word	0x0800b03d
 800b008:	0800b03d 	.word	0x0800b03d
 800b00c:	0800b03d 	.word	0x0800b03d
 800b010:	0800b03d 	.word	0x0800b03d
 800b014:	0800b03d 	.word	0x0800b03d
 800b018:	0800b03d 	.word	0x0800b03d
 800b01c:	0800b03d 	.word	0x0800b03d
 800b020:	0800b03d 	.word	0x0800b03d
 800b024:	0800b03d 	.word	0x0800b03d
 800b028:	0800b03d 	.word	0x0800b03d
 800b02c:	0800b03d 	.word	0x0800b03d
 800b030:	0800b03d 	.word	0x0800b03d
 800b034:	0800b03d 	.word	0x0800b03d
 800b038:	0800b03d 	.word	0x0800b03d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b03c:	bf00      	nop
  }

  return (USBD_OK);
 800b03e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b040:	4618      	mov	r0, r3
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	usbRecieveData(Buf[0]);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7f5 fa90 	bl	8000580 <usbRecieveData>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	4805      	ldr	r0, [pc, #20]	@ (800b078 <CDC_Receive_FS+0x2c>)
 800b064:	f7fb fc90 	bl	8006988 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b068:	4803      	ldr	r0, [pc, #12]	@ (800b078 <CDC_Receive_FS+0x2c>)
 800b06a:	f7fb fcab 	bl	80069c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b06e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	20004d04 	.word	0x20004d04

0800b07c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b087      	sub	sp, #28
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	4613      	mov	r3, r2
 800b088:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b08e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b092:	4618      	mov	r0, r3
 800b094:	371c      	adds	r7, #28
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
	...

0800b0a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	6039      	str	r1, [r7, #0]
 800b0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	2212      	movs	r2, #18
 800b0b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b0b2:	4b03      	ldr	r3, [pc, #12]	@ (800b0c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	200000d0 	.word	0x200000d0

0800b0c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	6039      	str	r1, [r7, #0]
 800b0ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	2204      	movs	r2, #4
 800b0d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b0d6:	4b03      	ldr	r3, [pc, #12]	@ (800b0e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	200000e4 	.word	0x200000e4

0800b0e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	6039      	str	r1, [r7, #0]
 800b0f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0f4:	79fb      	ldrb	r3, [r7, #7]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d105      	bne.n	800b106 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	4907      	ldr	r1, [pc, #28]	@ (800b11c <USBD_FS_ProductStrDescriptor+0x34>)
 800b0fe:	4808      	ldr	r0, [pc, #32]	@ (800b120 <USBD_FS_ProductStrDescriptor+0x38>)
 800b100:	f7fc feac 	bl	8007e5c <USBD_GetString>
 800b104:	e004      	b.n	800b110 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	4904      	ldr	r1, [pc, #16]	@ (800b11c <USBD_FS_ProductStrDescriptor+0x34>)
 800b10a:	4805      	ldr	r0, [pc, #20]	@ (800b120 <USBD_FS_ProductStrDescriptor+0x38>)
 800b10c:	f7fc fea6 	bl	8007e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b110:	4b02      	ldr	r3, [pc, #8]	@ (800b11c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b112:	4618      	mov	r0, r3
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20005fe0 	.word	0x20005fe0
 800b120:	0800bb44 	.word	0x0800bb44

0800b124 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	4904      	ldr	r1, [pc, #16]	@ (800b144 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b134:	4804      	ldr	r0, [pc, #16]	@ (800b148 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b136:	f7fc fe91 	bl	8007e5c <USBD_GetString>
  return USBD_StrDesc;
 800b13a:	4b02      	ldr	r3, [pc, #8]	@ (800b144 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	20005fe0 	.word	0x20005fe0
 800b148:	0800bb50 	.word	0x0800bb50

0800b14c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	6039      	str	r1, [r7, #0]
 800b156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	221a      	movs	r2, #26
 800b15c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b15e:	f000 f843 	bl	800b1e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b162:	4b02      	ldr	r3, [pc, #8]	@ (800b16c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	200000e8 	.word	0x200000e8

0800b170 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	6039      	str	r1, [r7, #0]
 800b17a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b17c:	79fb      	ldrb	r3, [r7, #7]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d105      	bne.n	800b18e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	4907      	ldr	r1, [pc, #28]	@ (800b1a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b186:	4808      	ldr	r0, [pc, #32]	@ (800b1a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b188:	f7fc fe68 	bl	8007e5c <USBD_GetString>
 800b18c:	e004      	b.n	800b198 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	4904      	ldr	r1, [pc, #16]	@ (800b1a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b192:	4805      	ldr	r0, [pc, #20]	@ (800b1a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b194:	f7fc fe62 	bl	8007e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b198:	4b02      	ldr	r3, [pc, #8]	@ (800b1a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20005fe0 	.word	0x20005fe0
 800b1a8:	0800bb64 	.word	0x0800bb64

0800b1ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1b8:	79fb      	ldrb	r3, [r7, #7]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d105      	bne.n	800b1ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1be:	683a      	ldr	r2, [r7, #0]
 800b1c0:	4907      	ldr	r1, [pc, #28]	@ (800b1e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b1c2:	4808      	ldr	r0, [pc, #32]	@ (800b1e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b1c4:	f7fc fe4a 	bl	8007e5c <USBD_GetString>
 800b1c8:	e004      	b.n	800b1d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	4904      	ldr	r1, [pc, #16]	@ (800b1e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b1ce:	4805      	ldr	r0, [pc, #20]	@ (800b1e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b1d0:	f7fc fe44 	bl	8007e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1d4:	4b02      	ldr	r3, [pc, #8]	@ (800b1e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	20005fe0 	.word	0x20005fe0
 800b1e4:	0800bb70 	.word	0x0800bb70

0800b1e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b22c <Get_SerialNum+0x44>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b230 <Get_SerialNum+0x48>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b234 <Get_SerialNum+0x4c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4413      	add	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d009      	beq.n	800b222 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b20e:	2208      	movs	r2, #8
 800b210:	4909      	ldr	r1, [pc, #36]	@ (800b238 <Get_SerialNum+0x50>)
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f000 f814 	bl	800b240 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b218:	2204      	movs	r2, #4
 800b21a:	4908      	ldr	r1, [pc, #32]	@ (800b23c <Get_SerialNum+0x54>)
 800b21c:	68b8      	ldr	r0, [r7, #8]
 800b21e:	f000 f80f 	bl	800b240 <IntToUnicode>
  }
}
 800b222:	bf00      	nop
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	1fff7a10 	.word	0x1fff7a10
 800b230:	1fff7a14 	.word	0x1fff7a14
 800b234:	1fff7a18 	.word	0x1fff7a18
 800b238:	200000ea 	.word	0x200000ea
 800b23c:	200000fa 	.word	0x200000fa

0800b240 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b240:	b480      	push	{r7}
 800b242:	b087      	sub	sp, #28
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	4613      	mov	r3, r2
 800b24c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b252:	2300      	movs	r3, #0
 800b254:	75fb      	strb	r3, [r7, #23]
 800b256:	e027      	b.n	800b2a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	0f1b      	lsrs	r3, r3, #28
 800b25c:	2b09      	cmp	r3, #9
 800b25e:	d80b      	bhi.n	800b278 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	0f1b      	lsrs	r3, r3, #28
 800b264:	b2da      	uxtb	r2, r3
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	4619      	mov	r1, r3
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	440b      	add	r3, r1
 800b270:	3230      	adds	r2, #48	@ 0x30
 800b272:	b2d2      	uxtb	r2, r2
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	e00a      	b.n	800b28e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	0f1b      	lsrs	r3, r3, #28
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	4619      	mov	r1, r3
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	440b      	add	r3, r1
 800b288:	3237      	adds	r2, #55	@ 0x37
 800b28a:	b2d2      	uxtb	r2, r2
 800b28c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	011b      	lsls	r3, r3, #4
 800b292:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	3301      	adds	r3, #1
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	4413      	add	r3, r2
 800b29e:	2200      	movs	r2, #0
 800b2a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	75fb      	strb	r3, [r7, #23]
 800b2a8:	7dfa      	ldrb	r2, [r7, #23]
 800b2aa:	79fb      	ldrb	r3, [r7, #7]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d3d3      	bcc.n	800b258 <IntToUnicode+0x18>
  }
}
 800b2b0:	bf00      	nop
 800b2b2:	bf00      	nop
 800b2b4:	371c      	adds	r7, #28
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
	...

0800b2c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08a      	sub	sp, #40	@ 0x28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2c8:	f107 0314 	add.w	r3, r7, #20
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	601a      	str	r2, [r3, #0]
 800b2d0:	605a      	str	r2, [r3, #4]
 800b2d2:	609a      	str	r2, [r3, #8]
 800b2d4:	60da      	str	r2, [r3, #12]
 800b2d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2e0:	d147      	bne.n	800b372 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	613b      	str	r3, [r7, #16]
 800b2e6:	4b25      	ldr	r3, [pc, #148]	@ (800b37c <HAL_PCD_MspInit+0xbc>)
 800b2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ea:	4a24      	ldr	r2, [pc, #144]	@ (800b37c <HAL_PCD_MspInit+0xbc>)
 800b2ec:	f043 0301 	orr.w	r3, r3, #1
 800b2f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b2f2:	4b22      	ldr	r3, [pc, #136]	@ (800b37c <HAL_PCD_MspInit+0xbc>)
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	613b      	str	r3, [r7, #16]
 800b2fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b2fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b304:	2300      	movs	r3, #0
 800b306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b308:	2300      	movs	r3, #0
 800b30a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b30c:	f107 0314 	add.w	r3, r7, #20
 800b310:	4619      	mov	r1, r3
 800b312:	481b      	ldr	r0, [pc, #108]	@ (800b380 <HAL_PCD_MspInit+0xc0>)
 800b314:	f7f6 f8dc 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b318:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b31c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b31e:	2302      	movs	r3, #2
 800b320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b322:	2300      	movs	r3, #0
 800b324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b326:	2303      	movs	r3, #3
 800b328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b32a:	230a      	movs	r3, #10
 800b32c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b32e:	f107 0314 	add.w	r3, r7, #20
 800b332:	4619      	mov	r1, r3
 800b334:	4812      	ldr	r0, [pc, #72]	@ (800b380 <HAL_PCD_MspInit+0xc0>)
 800b336:	f7f6 f8cb 	bl	80014d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b33a:	4b10      	ldr	r3, [pc, #64]	@ (800b37c <HAL_PCD_MspInit+0xbc>)
 800b33c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b33e:	4a0f      	ldr	r2, [pc, #60]	@ (800b37c <HAL_PCD_MspInit+0xbc>)
 800b340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b344:	6353      	str	r3, [r2, #52]	@ 0x34
 800b346:	2300      	movs	r3, #0
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	4b0c      	ldr	r3, [pc, #48]	@ (800b37c <HAL_PCD_MspInit+0xbc>)
 800b34c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b34e:	4a0b      	ldr	r2, [pc, #44]	@ (800b37c <HAL_PCD_MspInit+0xbc>)
 800b350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b354:	6453      	str	r3, [r2, #68]	@ 0x44
 800b356:	4b09      	ldr	r3, [pc, #36]	@ (800b37c <HAL_PCD_MspInit+0xbc>)
 800b358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b35a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b35e:	60fb      	str	r3, [r7, #12]
 800b360:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b362:	2200      	movs	r2, #0
 800b364:	2105      	movs	r1, #5
 800b366:	2043      	movs	r0, #67	@ 0x43
 800b368:	f7f6 f888 	bl	800147c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b36c:	2043      	movs	r0, #67	@ 0x43
 800b36e:	f7f6 f8a1 	bl	80014b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b372:	bf00      	nop
 800b374:	3728      	adds	r7, #40	@ 0x28
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	40023800 	.word	0x40023800
 800b380:	40020000 	.word	0x40020000

0800b384 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b398:	4619      	mov	r1, r3
 800b39a:	4610      	mov	r0, r2
 800b39c:	f7fb fbfb 	bl	8006b96 <USBD_LL_SetupStage>
}
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b3ba:	78fa      	ldrb	r2, [r7, #3]
 800b3bc:	6879      	ldr	r1, [r7, #4]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	00db      	lsls	r3, r3, #3
 800b3c2:	4413      	add	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	440b      	add	r3, r1
 800b3c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	78fb      	ldrb	r3, [r7, #3]
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	f7fb fc35 	bl	8006c40 <USBD_LL_DataOutStage>
}
 800b3d6:	bf00      	nop
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b082      	sub	sp, #8
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b3f0:	78fa      	ldrb	r2, [r7, #3]
 800b3f2:	6879      	ldr	r1, [r7, #4]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	00db      	lsls	r3, r3, #3
 800b3f8:	4413      	add	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	440b      	add	r3, r1
 800b3fe:	3320      	adds	r3, #32
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	78fb      	ldrb	r3, [r7, #3]
 800b404:	4619      	mov	r1, r3
 800b406:	f7fb fcce 	bl	8006da6 <USBD_LL_DataInStage>
}
 800b40a:	bf00      	nop
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b082      	sub	sp, #8
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b420:	4618      	mov	r0, r3
 800b422:	f7fb fe08 	bl	8007036 <USBD_LL_SOF>
}
 800b426:	bf00      	nop
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b084      	sub	sp, #16
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b436:	2301      	movs	r3, #1
 800b438:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	79db      	ldrb	r3, [r3, #7]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d001      	beq.n	800b446 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b442:	f7f5 fc85 	bl	8000d50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b44c:	7bfa      	ldrb	r2, [r7, #15]
 800b44e:	4611      	mov	r1, r2
 800b450:	4618      	mov	r0, r3
 800b452:	f7fb fdac 	bl	8006fae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fb fd54 	bl	8006f0a <USBD_LL_Reset>
}
 800b462:	bf00      	nop
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fb fda7 	bl	8006fce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6812      	ldr	r2, [r2, #0]
 800b48e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b492:	f043 0301 	orr.w	r3, r3, #1
 800b496:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	7adb      	ldrb	r3, [r3, #11]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d005      	beq.n	800b4ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4a0:	4b04      	ldr	r3, [pc, #16]	@ (800b4b4 <HAL_PCD_SuspendCallback+0x48>)
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	4a03      	ldr	r2, [pc, #12]	@ (800b4b4 <HAL_PCD_SuspendCallback+0x48>)
 800b4a6:	f043 0306 	orr.w	r3, r3, #6
 800b4aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b4ac:	bf00      	nop
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	e000ed00 	.word	0xe000ed00

0800b4b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fb fd9d 	bl	8007006 <USBD_LL_Resume>
}
 800b4cc:	bf00      	nop
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4e6:	78fa      	ldrb	r2, [r7, #3]
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fb fdf5 	bl	80070da <USBD_LL_IsoOUTIncomplete>
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b50a:	78fa      	ldrb	r2, [r7, #3]
 800b50c:	4611      	mov	r1, r2
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fb fdb1 	bl	8007076 <USBD_LL_IsoINIncomplete>
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fb fe07 	bl	800713e <USBD_LL_DevConnected>
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b546:	4618      	mov	r0, r3
 800b548:	f7fb fe04 	bl	8007154 <USBD_LL_DevDisconnected>
}
 800b54c:	bf00      	nop
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d13c      	bne.n	800b5de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b564:	4a20      	ldr	r2, [pc, #128]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a1e      	ldr	r2, [pc, #120]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b570:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b574:	4b1c      	ldr	r3, [pc, #112]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b576:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b57a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b57c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b57e:	2204      	movs	r2, #4
 800b580:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b582:	4b19      	ldr	r3, [pc, #100]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b584:	2202      	movs	r2, #2
 800b586:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b588:	4b17      	ldr	r3, [pc, #92]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b58e:	4b16      	ldr	r3, [pc, #88]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b590:	2202      	movs	r2, #2
 800b592:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b594:	4b14      	ldr	r3, [pc, #80]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b596:	2200      	movs	r2, #0
 800b598:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b59a:	4b13      	ldr	r3, [pc, #76]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b5a0:	4b11      	ldr	r3, [pc, #68]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b5a6:	4b10      	ldr	r3, [pc, #64]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b5ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b5b2:	480d      	ldr	r0, [pc, #52]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b5b4:	f7f6 ff0e 	bl	80023d4 <HAL_PCD_Init>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b5be:	f7f5 fbc7 	bl	8000d50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b5c2:	2180      	movs	r1, #128	@ 0x80
 800b5c4:	4808      	ldr	r0, [pc, #32]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b5c6:	f7f8 f93a 	bl	800383e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b5ca:	2240      	movs	r2, #64	@ 0x40
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	4806      	ldr	r0, [pc, #24]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b5d0:	f7f8 f8ee 	bl	80037b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b5d4:	2280      	movs	r2, #128	@ 0x80
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	4803      	ldr	r0, [pc, #12]	@ (800b5e8 <USBD_LL_Init+0x94>)
 800b5da:	f7f8 f8e9 	bl	80037b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	200061e0 	.word	0x200061e0

0800b5ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b602:	4618      	mov	r0, r3
 800b604:	f7f6 fff5 	bl	80025f2 <HAL_PCD_Start>
 800b608:	4603      	mov	r3, r0
 800b60a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 f942 	bl	800b898 <USBD_Get_USB_Status>
 800b614:	4603      	mov	r3, r0
 800b616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b618:	7bbb      	ldrb	r3, [r7, #14]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	4608      	mov	r0, r1
 800b62c:	4611      	mov	r1, r2
 800b62e:	461a      	mov	r2, r3
 800b630:	4603      	mov	r3, r0
 800b632:	70fb      	strb	r3, [r7, #3]
 800b634:	460b      	mov	r3, r1
 800b636:	70bb      	strb	r3, [r7, #2]
 800b638:	4613      	mov	r3, r2
 800b63a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b64a:	78bb      	ldrb	r3, [r7, #2]
 800b64c:	883a      	ldrh	r2, [r7, #0]
 800b64e:	78f9      	ldrb	r1, [r7, #3]
 800b650:	f7f7 fcc9 	bl	8002fe6 <HAL_PCD_EP_Open>
 800b654:	4603      	mov	r3, r0
 800b656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 f91c 	bl	800b898 <USBD_Get_USB_Status>
 800b660:	4603      	mov	r3, r0
 800b662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b664:	7bbb      	ldrb	r3, [r7, #14]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b688:	78fa      	ldrb	r2, [r7, #3]
 800b68a:	4611      	mov	r1, r2
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7f7 fd14 	bl	80030ba <HAL_PCD_EP_Close>
 800b692:	4603      	mov	r3, r0
 800b694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b696:	7bfb      	ldrb	r3, [r7, #15]
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 f8fd 	bl	800b898 <USBD_Get_USB_Status>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6c6:	78fa      	ldrb	r2, [r7, #3]
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7f7 fdcc 	bl	8003268 <HAL_PCD_EP_SetStall>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6d4:	7bfb      	ldrb	r3, [r7, #15]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 f8de 	bl	800b898 <USBD_Get_USB_Status>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b084      	sub	sp, #16
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b704:	78fa      	ldrb	r2, [r7, #3]
 800b706:	4611      	mov	r1, r2
 800b708:	4618      	mov	r0, r3
 800b70a:	f7f7 fe10 	bl	800332e <HAL_PCD_EP_ClrStall>
 800b70e:	4603      	mov	r3, r0
 800b710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	4618      	mov	r0, r3
 800b716:	f000 f8bf 	bl	800b898 <USBD_Get_USB_Status>
 800b71a:	4603      	mov	r3, r0
 800b71c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b71e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	460b      	mov	r3, r1
 800b732:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b73a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b73c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b740:	2b00      	cmp	r3, #0
 800b742:	da0b      	bge.n	800b75c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b744:	78fb      	ldrb	r3, [r7, #3]
 800b746:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b74a:	68f9      	ldr	r1, [r7, #12]
 800b74c:	4613      	mov	r3, r2
 800b74e:	00db      	lsls	r3, r3, #3
 800b750:	4413      	add	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	440b      	add	r3, r1
 800b756:	3316      	adds	r3, #22
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	e00b      	b.n	800b774 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b75c:	78fb      	ldrb	r3, [r7, #3]
 800b75e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b762:	68f9      	ldr	r1, [r7, #12]
 800b764:	4613      	mov	r3, r2
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	440b      	add	r3, r1
 800b76e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b772:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b774:	4618      	mov	r0, r3
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b78c:	2300      	movs	r3, #0
 800b78e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b790:	2300      	movs	r3, #0
 800b792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b79a:	78fa      	ldrb	r2, [r7, #3]
 800b79c:	4611      	mov	r1, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7f7 fbfd 	bl	8002f9e <HAL_PCD_SetAddress>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 f874 	bl	800b898 <USBD_Get_USB_Status>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b086      	sub	sp, #24
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	60f8      	str	r0, [r7, #12]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	603b      	str	r3, [r7, #0]
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b7dc:	7af9      	ldrb	r1, [r7, #11]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	f7f7 fd07 	bl	80031f4 <HAL_PCD_EP_Transmit>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f000 f853 	bl	800b898 <USBD_Get_USB_Status>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	607a      	str	r2, [r7, #4]
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	460b      	mov	r3, r1
 800b80e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b810:	2300      	movs	r3, #0
 800b812:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b81e:	7af9      	ldrb	r1, [r7, #11]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	f7f7 fc93 	bl	800314e <HAL_PCD_EP_Receive>
 800b828:	4603      	mov	r3, r0
 800b82a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
 800b82e:	4618      	mov	r0, r3
 800b830:	f000 f832 	bl	800b898 <USBD_Get_USB_Status>
 800b834:	4603      	mov	r3, r0
 800b836:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b838:	7dbb      	ldrb	r3, [r7, #22]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	460b      	mov	r3, r1
 800b84c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b854:	78fa      	ldrb	r2, [r7, #3]
 800b856:	4611      	mov	r1, r2
 800b858:	4618      	mov	r0, r3
 800b85a:	f7f7 fcb3 	bl	80031c4 <HAL_PCD_EP_GetRxCount>
 800b85e:	4603      	mov	r3, r0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b870:	4b03      	ldr	r3, [pc, #12]	@ (800b880 <USBD_static_malloc+0x18>)
}
 800b872:	4618      	mov	r0, r3
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	200066c4 	.word	0x200066c4

0800b884 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]

}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	4603      	mov	r3, r0
 800b8a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	2b03      	cmp	r3, #3
 800b8aa:	d817      	bhi.n	800b8dc <USBD_Get_USB_Status+0x44>
 800b8ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b4 <USBD_Get_USB_Status+0x1c>)
 800b8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b2:	bf00      	nop
 800b8b4:	0800b8c5 	.word	0x0800b8c5
 800b8b8:	0800b8cb 	.word	0x0800b8cb
 800b8bc:	0800b8d1 	.word	0x0800b8d1
 800b8c0:	0800b8d7 	.word	0x0800b8d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8c8:	e00b      	b.n	800b8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ce:	e008      	b.n	800b8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8d4:	e005      	b.n	800b8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b8da:	e002      	b.n	800b8e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e0:	bf00      	nop
  }
  return usb_status;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <memset>:
 800b8f0:	4402      	add	r2, r0
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d100      	bne.n	800b8fa <memset+0xa>
 800b8f8:	4770      	bx	lr
 800b8fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b8fe:	e7f9      	b.n	800b8f4 <memset+0x4>

0800b900 <_reclaim_reent>:
 800b900:	4b29      	ldr	r3, [pc, #164]	@ (800b9a8 <_reclaim_reent+0xa8>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4283      	cmp	r3, r0
 800b906:	b570      	push	{r4, r5, r6, lr}
 800b908:	4604      	mov	r4, r0
 800b90a:	d04b      	beq.n	800b9a4 <_reclaim_reent+0xa4>
 800b90c:	69c3      	ldr	r3, [r0, #28]
 800b90e:	b1ab      	cbz	r3, 800b93c <_reclaim_reent+0x3c>
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	b16b      	cbz	r3, 800b930 <_reclaim_reent+0x30>
 800b914:	2500      	movs	r5, #0
 800b916:	69e3      	ldr	r3, [r4, #28]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	5959      	ldr	r1, [r3, r5]
 800b91c:	2900      	cmp	r1, #0
 800b91e:	d13b      	bne.n	800b998 <_reclaim_reent+0x98>
 800b920:	3504      	adds	r5, #4
 800b922:	2d80      	cmp	r5, #128	@ 0x80
 800b924:	d1f7      	bne.n	800b916 <_reclaim_reent+0x16>
 800b926:	69e3      	ldr	r3, [r4, #28]
 800b928:	4620      	mov	r0, r4
 800b92a:	68d9      	ldr	r1, [r3, #12]
 800b92c:	f000 f872 	bl	800ba14 <_free_r>
 800b930:	69e3      	ldr	r3, [r4, #28]
 800b932:	6819      	ldr	r1, [r3, #0]
 800b934:	b111      	cbz	r1, 800b93c <_reclaim_reent+0x3c>
 800b936:	4620      	mov	r0, r4
 800b938:	f000 f86c 	bl	800ba14 <_free_r>
 800b93c:	6961      	ldr	r1, [r4, #20]
 800b93e:	b111      	cbz	r1, 800b946 <_reclaim_reent+0x46>
 800b940:	4620      	mov	r0, r4
 800b942:	f000 f867 	bl	800ba14 <_free_r>
 800b946:	69e1      	ldr	r1, [r4, #28]
 800b948:	b111      	cbz	r1, 800b950 <_reclaim_reent+0x50>
 800b94a:	4620      	mov	r0, r4
 800b94c:	f000 f862 	bl	800ba14 <_free_r>
 800b950:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b952:	b111      	cbz	r1, 800b95a <_reclaim_reent+0x5a>
 800b954:	4620      	mov	r0, r4
 800b956:	f000 f85d 	bl	800ba14 <_free_r>
 800b95a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b95c:	b111      	cbz	r1, 800b964 <_reclaim_reent+0x64>
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 f858 	bl	800ba14 <_free_r>
 800b964:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b966:	b111      	cbz	r1, 800b96e <_reclaim_reent+0x6e>
 800b968:	4620      	mov	r0, r4
 800b96a:	f000 f853 	bl	800ba14 <_free_r>
 800b96e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b970:	b111      	cbz	r1, 800b978 <_reclaim_reent+0x78>
 800b972:	4620      	mov	r0, r4
 800b974:	f000 f84e 	bl	800ba14 <_free_r>
 800b978:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b97a:	b111      	cbz	r1, 800b982 <_reclaim_reent+0x82>
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 f849 	bl	800ba14 <_free_r>
 800b982:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b984:	b111      	cbz	r1, 800b98c <_reclaim_reent+0x8c>
 800b986:	4620      	mov	r0, r4
 800b988:	f000 f844 	bl	800ba14 <_free_r>
 800b98c:	6a23      	ldr	r3, [r4, #32]
 800b98e:	b14b      	cbz	r3, 800b9a4 <_reclaim_reent+0xa4>
 800b990:	4620      	mov	r0, r4
 800b992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b996:	4718      	bx	r3
 800b998:	680e      	ldr	r6, [r1, #0]
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 f83a 	bl	800ba14 <_free_r>
 800b9a0:	4631      	mov	r1, r6
 800b9a2:	e7bb      	b.n	800b91c <_reclaim_reent+0x1c>
 800b9a4:	bd70      	pop	{r4, r5, r6, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20000104 	.word	0x20000104

0800b9ac <__libc_init_array>:
 800b9ac:	b570      	push	{r4, r5, r6, lr}
 800b9ae:	4d0d      	ldr	r5, [pc, #52]	@ (800b9e4 <__libc_init_array+0x38>)
 800b9b0:	4c0d      	ldr	r4, [pc, #52]	@ (800b9e8 <__libc_init_array+0x3c>)
 800b9b2:	1b64      	subs	r4, r4, r5
 800b9b4:	10a4      	asrs	r4, r4, #2
 800b9b6:	2600      	movs	r6, #0
 800b9b8:	42a6      	cmp	r6, r4
 800b9ba:	d109      	bne.n	800b9d0 <__libc_init_array+0x24>
 800b9bc:	4d0b      	ldr	r5, [pc, #44]	@ (800b9ec <__libc_init_array+0x40>)
 800b9be:	4c0c      	ldr	r4, [pc, #48]	@ (800b9f0 <__libc_init_array+0x44>)
 800b9c0:	f000 f87e 	bl	800bac0 <_init>
 800b9c4:	1b64      	subs	r4, r4, r5
 800b9c6:	10a4      	asrs	r4, r4, #2
 800b9c8:	2600      	movs	r6, #0
 800b9ca:	42a6      	cmp	r6, r4
 800b9cc:	d105      	bne.n	800b9da <__libc_init_array+0x2e>
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9d4:	4798      	blx	r3
 800b9d6:	3601      	adds	r6, #1
 800b9d8:	e7ee      	b.n	800b9b8 <__libc_init_array+0xc>
 800b9da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9de:	4798      	blx	r3
 800b9e0:	3601      	adds	r6, #1
 800b9e2:	e7f2      	b.n	800b9ca <__libc_init_array+0x1e>
 800b9e4:	0800bbc4 	.word	0x0800bbc4
 800b9e8:	0800bbc4 	.word	0x0800bbc4
 800b9ec:	0800bbc4 	.word	0x0800bbc4
 800b9f0:	0800bbc8 	.word	0x0800bbc8

0800b9f4 <__retarget_lock_acquire_recursive>:
 800b9f4:	4770      	bx	lr

0800b9f6 <__retarget_lock_release_recursive>:
 800b9f6:	4770      	bx	lr

0800b9f8 <memcpy>:
 800b9f8:	440a      	add	r2, r1
 800b9fa:	4291      	cmp	r1, r2
 800b9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba00:	d100      	bne.n	800ba04 <memcpy+0xc>
 800ba02:	4770      	bx	lr
 800ba04:	b510      	push	{r4, lr}
 800ba06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba0e:	4291      	cmp	r1, r2
 800ba10:	d1f9      	bne.n	800ba06 <memcpy+0xe>
 800ba12:	bd10      	pop	{r4, pc}

0800ba14 <_free_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4605      	mov	r5, r0
 800ba18:	2900      	cmp	r1, #0
 800ba1a:	d041      	beq.n	800baa0 <_free_r+0x8c>
 800ba1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba20:	1f0c      	subs	r4, r1, #4
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	bfb8      	it	lt
 800ba26:	18e4      	addlt	r4, r4, r3
 800ba28:	f000 f83e 	bl	800baa8 <__malloc_lock>
 800ba2c:	4a1d      	ldr	r2, [pc, #116]	@ (800baa4 <_free_r+0x90>)
 800ba2e:	6813      	ldr	r3, [r2, #0]
 800ba30:	b933      	cbnz	r3, 800ba40 <_free_r+0x2c>
 800ba32:	6063      	str	r3, [r4, #4]
 800ba34:	6014      	str	r4, [r2, #0]
 800ba36:	4628      	mov	r0, r5
 800ba38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba3c:	f000 b83a 	b.w	800bab4 <__malloc_unlock>
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	d908      	bls.n	800ba56 <_free_r+0x42>
 800ba44:	6820      	ldr	r0, [r4, #0]
 800ba46:	1821      	adds	r1, r4, r0
 800ba48:	428b      	cmp	r3, r1
 800ba4a:	bf01      	itttt	eq
 800ba4c:	6819      	ldreq	r1, [r3, #0]
 800ba4e:	685b      	ldreq	r3, [r3, #4]
 800ba50:	1809      	addeq	r1, r1, r0
 800ba52:	6021      	streq	r1, [r4, #0]
 800ba54:	e7ed      	b.n	800ba32 <_free_r+0x1e>
 800ba56:	461a      	mov	r2, r3
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	b10b      	cbz	r3, 800ba60 <_free_r+0x4c>
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	d9fa      	bls.n	800ba56 <_free_r+0x42>
 800ba60:	6811      	ldr	r1, [r2, #0]
 800ba62:	1850      	adds	r0, r2, r1
 800ba64:	42a0      	cmp	r0, r4
 800ba66:	d10b      	bne.n	800ba80 <_free_r+0x6c>
 800ba68:	6820      	ldr	r0, [r4, #0]
 800ba6a:	4401      	add	r1, r0
 800ba6c:	1850      	adds	r0, r2, r1
 800ba6e:	4283      	cmp	r3, r0
 800ba70:	6011      	str	r1, [r2, #0]
 800ba72:	d1e0      	bne.n	800ba36 <_free_r+0x22>
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	6053      	str	r3, [r2, #4]
 800ba7a:	4408      	add	r0, r1
 800ba7c:	6010      	str	r0, [r2, #0]
 800ba7e:	e7da      	b.n	800ba36 <_free_r+0x22>
 800ba80:	d902      	bls.n	800ba88 <_free_r+0x74>
 800ba82:	230c      	movs	r3, #12
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	e7d6      	b.n	800ba36 <_free_r+0x22>
 800ba88:	6820      	ldr	r0, [r4, #0]
 800ba8a:	1821      	adds	r1, r4, r0
 800ba8c:	428b      	cmp	r3, r1
 800ba8e:	bf04      	itt	eq
 800ba90:	6819      	ldreq	r1, [r3, #0]
 800ba92:	685b      	ldreq	r3, [r3, #4]
 800ba94:	6063      	str	r3, [r4, #4]
 800ba96:	bf04      	itt	eq
 800ba98:	1809      	addeq	r1, r1, r0
 800ba9a:	6021      	streq	r1, [r4, #0]
 800ba9c:	6054      	str	r4, [r2, #4]
 800ba9e:	e7ca      	b.n	800ba36 <_free_r+0x22>
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	bf00      	nop
 800baa4:	20006a20 	.word	0x20006a20

0800baa8 <__malloc_lock>:
 800baa8:	4801      	ldr	r0, [pc, #4]	@ (800bab0 <__malloc_lock+0x8>)
 800baaa:	f7ff bfa3 	b.w	800b9f4 <__retarget_lock_acquire_recursive>
 800baae:	bf00      	nop
 800bab0:	20006a1c 	.word	0x20006a1c

0800bab4 <__malloc_unlock>:
 800bab4:	4801      	ldr	r0, [pc, #4]	@ (800babc <__malloc_unlock+0x8>)
 800bab6:	f7ff bf9e 	b.w	800b9f6 <__retarget_lock_release_recursive>
 800baba:	bf00      	nop
 800babc:	20006a1c 	.word	0x20006a1c

0800bac0 <_init>:
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	bf00      	nop
 800bac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac6:	bc08      	pop	{r3}
 800bac8:	469e      	mov	lr, r3
 800baca:	4770      	bx	lr

0800bacc <_fini>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	bf00      	nop
 800bad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad2:	bc08      	pop	{r3}
 800bad4:	469e      	mov	lr, r3
 800bad6:	4770      	bx	lr
